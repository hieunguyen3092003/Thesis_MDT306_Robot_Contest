
BKIT_robotics_v2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005d10  080001e4  080001e4  000011e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08005ef4  08005ef4  00006ef4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005f3c  08005f3c  00007038  2**0
                  CONTENTS
  4 .ARM          00000000  08005f3c  08005f3c  00007038  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005f3c  08005f3c  00007038  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005f3c  08005f3c  00006f3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005f40  08005f40  00006f40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000038  20000000  08005f44  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000318  20000038  08005f7c  00007038  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000350  08005f7c  00007350  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00007038  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012a35  00000000  00000000  00007061  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000035be  00000000  00000000  00019a96  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001198  00000000  00000000  0001d058  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000d89  00000000  00000000  0001e1f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001bd62  00000000  00000000  0001ef79  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016c20  00000000  00000000  0003acdb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009fc08  00000000  00000000  000518fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000f1503  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004648  00000000  00000000  000f1548  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000081  00000000  00000000  000f5b90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	@ (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	@ (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	20000038 	.word	0x20000038
 8000200:	00000000 	.word	0x00000000
 8000204:	08005edc 	.word	0x08005edc

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	@ (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	@ (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	@ (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	2000003c 	.word	0x2000003c
 8000220:	08005edc 	.word	0x08005edc

08000224 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000224:	b580      	push	{r7, lr}
 8000226:	b084      	sub	sp, #16
 8000228:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800022a:	1d3b      	adds	r3, r7, #4
 800022c:	2200      	movs	r2, #0
 800022e:	601a      	str	r2, [r3, #0]
 8000230:	605a      	str	r2, [r3, #4]
 8000232:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000234:	4b18      	ldr	r3, [pc, #96]	@ (8000298 <MX_ADC1_Init+0x74>)
 8000236:	4a19      	ldr	r2, [pc, #100]	@ (800029c <MX_ADC1_Init+0x78>)
 8000238:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800023a:	4b17      	ldr	r3, [pc, #92]	@ (8000298 <MX_ADC1_Init+0x74>)
 800023c:	2200      	movs	r2, #0
 800023e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000240:	4b15      	ldr	r3, [pc, #84]	@ (8000298 <MX_ADC1_Init+0x74>)
 8000242:	2200      	movs	r2, #0
 8000244:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000246:	4b14      	ldr	r3, [pc, #80]	@ (8000298 <MX_ADC1_Init+0x74>)
 8000248:	2200      	movs	r2, #0
 800024a:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800024c:	4b12      	ldr	r3, [pc, #72]	@ (8000298 <MX_ADC1_Init+0x74>)
 800024e:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 8000252:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000254:	4b10      	ldr	r3, [pc, #64]	@ (8000298 <MX_ADC1_Init+0x74>)
 8000256:	2200      	movs	r2, #0
 8000258:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 800025a:	4b0f      	ldr	r3, [pc, #60]	@ (8000298 <MX_ADC1_Init+0x74>)
 800025c:	2201      	movs	r2, #1
 800025e:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000260:	480d      	ldr	r0, [pc, #52]	@ (8000298 <MX_ADC1_Init+0x74>)
 8000262:	f001 fd9f 	bl	8001da4 <HAL_ADC_Init>
 8000266:	4603      	mov	r3, r0
 8000268:	2b00      	cmp	r3, #0
 800026a:	d001      	beq.n	8000270 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 800026c:	f000 fc40 	bl	8000af0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000270:	2308      	movs	r3, #8
 8000272:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000274:	2301      	movs	r3, #1
 8000276:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000278:	2300      	movs	r3, #0
 800027a:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800027c:	1d3b      	adds	r3, r7, #4
 800027e:	4619      	mov	r1, r3
 8000280:	4805      	ldr	r0, [pc, #20]	@ (8000298 <MX_ADC1_Init+0x74>)
 8000282:	f001 ff73 	bl	800216c <HAL_ADC_ConfigChannel>
 8000286:	4603      	mov	r3, r0
 8000288:	2b00      	cmp	r3, #0
 800028a:	d001      	beq.n	8000290 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 800028c:	f000 fc30 	bl	8000af0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000290:	bf00      	nop
 8000292:	3710      	adds	r7, #16
 8000294:	46bd      	mov	sp, r7
 8000296:	bd80      	pop	{r7, pc}
 8000298:	20000054 	.word	0x20000054
 800029c:	40012400 	.word	0x40012400

080002a0 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80002a0:	b580      	push	{r7, lr}
 80002a2:	b08a      	sub	sp, #40	@ 0x28
 80002a4:	af00      	add	r7, sp, #0
 80002a6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002a8:	f107 0318 	add.w	r3, r7, #24
 80002ac:	2200      	movs	r2, #0
 80002ae:	601a      	str	r2, [r3, #0]
 80002b0:	605a      	str	r2, [r3, #4]
 80002b2:	609a      	str	r2, [r3, #8]
 80002b4:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC1)
 80002b6:	687b      	ldr	r3, [r7, #4]
 80002b8:	681b      	ldr	r3, [r3, #0]
 80002ba:	4a33      	ldr	r2, [pc, #204]	@ (8000388 <HAL_ADC_MspInit+0xe8>)
 80002bc:	4293      	cmp	r3, r2
 80002be:	d15f      	bne.n	8000380 <HAL_ADC_MspInit+0xe0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80002c0:	4b32      	ldr	r3, [pc, #200]	@ (800038c <HAL_ADC_MspInit+0xec>)
 80002c2:	699b      	ldr	r3, [r3, #24]
 80002c4:	4a31      	ldr	r2, [pc, #196]	@ (800038c <HAL_ADC_MspInit+0xec>)
 80002c6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80002ca:	6193      	str	r3, [r2, #24]
 80002cc:	4b2f      	ldr	r3, [pc, #188]	@ (800038c <HAL_ADC_MspInit+0xec>)
 80002ce:	699b      	ldr	r3, [r3, #24]
 80002d0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80002d4:	617b      	str	r3, [r7, #20]
 80002d6:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80002d8:	4b2c      	ldr	r3, [pc, #176]	@ (800038c <HAL_ADC_MspInit+0xec>)
 80002da:	699b      	ldr	r3, [r3, #24]
 80002dc:	4a2b      	ldr	r2, [pc, #172]	@ (800038c <HAL_ADC_MspInit+0xec>)
 80002de:	f043 0310 	orr.w	r3, r3, #16
 80002e2:	6193      	str	r3, [r2, #24]
 80002e4:	4b29      	ldr	r3, [pc, #164]	@ (800038c <HAL_ADC_MspInit+0xec>)
 80002e6:	699b      	ldr	r3, [r3, #24]
 80002e8:	f003 0310 	and.w	r3, r3, #16
 80002ec:	613b      	str	r3, [r7, #16]
 80002ee:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80002f0:	4b26      	ldr	r3, [pc, #152]	@ (800038c <HAL_ADC_MspInit+0xec>)
 80002f2:	699b      	ldr	r3, [r3, #24]
 80002f4:	4a25      	ldr	r2, [pc, #148]	@ (800038c <HAL_ADC_MspInit+0xec>)
 80002f6:	f043 0308 	orr.w	r3, r3, #8
 80002fa:	6193      	str	r3, [r2, #24]
 80002fc:	4b23      	ldr	r3, [pc, #140]	@ (800038c <HAL_ADC_MspInit+0xec>)
 80002fe:	699b      	ldr	r3, [r3, #24]
 8000300:	f003 0308 	and.w	r3, r3, #8
 8000304:	60fb      	str	r3, [r7, #12]
 8000306:	68fb      	ldr	r3, [r7, #12]
    PC4     ------> ADC1_IN14
    PC5     ------> ADC1_IN15
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000308:	233f      	movs	r3, #63	@ 0x3f
 800030a:	61bb      	str	r3, [r7, #24]
                          |GPIO_PIN_4|GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800030c:	2303      	movs	r3, #3
 800030e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000310:	f107 0318 	add.w	r3, r7, #24
 8000314:	4619      	mov	r1, r3
 8000316:	481e      	ldr	r0, [pc, #120]	@ (8000390 <HAL_ADC_MspInit+0xf0>)
 8000318:	f002 feb4 	bl	8003084 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800031c:	2303      	movs	r3, #3
 800031e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000320:	2303      	movs	r3, #3
 8000322:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000324:	f107 0318 	add.w	r3, r7, #24
 8000328:	4619      	mov	r1, r3
 800032a:	481a      	ldr	r0, [pc, #104]	@ (8000394 <HAL_ADC_MspInit+0xf4>)
 800032c:	f002 feaa 	bl	8003084 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000330:	4b19      	ldr	r3, [pc, #100]	@ (8000398 <HAL_ADC_MspInit+0xf8>)
 8000332:	4a1a      	ldr	r2, [pc, #104]	@ (800039c <HAL_ADC_MspInit+0xfc>)
 8000334:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000336:	4b18      	ldr	r3, [pc, #96]	@ (8000398 <HAL_ADC_MspInit+0xf8>)
 8000338:	2200      	movs	r2, #0
 800033a:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800033c:	4b16      	ldr	r3, [pc, #88]	@ (8000398 <HAL_ADC_MspInit+0xf8>)
 800033e:	2200      	movs	r2, #0
 8000340:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000342:	4b15      	ldr	r3, [pc, #84]	@ (8000398 <HAL_ADC_MspInit+0xf8>)
 8000344:	2280      	movs	r2, #128	@ 0x80
 8000346:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000348:	4b13      	ldr	r3, [pc, #76]	@ (8000398 <HAL_ADC_MspInit+0xf8>)
 800034a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800034e:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000350:	4b11      	ldr	r3, [pc, #68]	@ (8000398 <HAL_ADC_MspInit+0xf8>)
 8000352:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000356:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8000358:	4b0f      	ldr	r3, [pc, #60]	@ (8000398 <HAL_ADC_MspInit+0xf8>)
 800035a:	2200      	movs	r2, #0
 800035c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800035e:	4b0e      	ldr	r3, [pc, #56]	@ (8000398 <HAL_ADC_MspInit+0xf8>)
 8000360:	2200      	movs	r2, #0
 8000362:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000364:	480c      	ldr	r0, [pc, #48]	@ (8000398 <HAL_ADC_MspInit+0xf8>)
 8000366:	f002 fa09 	bl	800277c <HAL_DMA_Init>
 800036a:	4603      	mov	r3, r0
 800036c:	2b00      	cmp	r3, #0
 800036e:	d001      	beq.n	8000374 <HAL_ADC_MspInit+0xd4>
    {
      Error_Handler();
 8000370:	f000 fbbe 	bl	8000af0 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000374:	687b      	ldr	r3, [r7, #4]
 8000376:	4a08      	ldr	r2, [pc, #32]	@ (8000398 <HAL_ADC_MspInit+0xf8>)
 8000378:	621a      	str	r2, [r3, #32]
 800037a:	4a07      	ldr	r2, [pc, #28]	@ (8000398 <HAL_ADC_MspInit+0xf8>)
 800037c:	687b      	ldr	r3, [r7, #4]
 800037e:	6253      	str	r3, [r2, #36]	@ 0x24

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000380:	bf00      	nop
 8000382:	3728      	adds	r7, #40	@ 0x28
 8000384:	46bd      	mov	sp, r7
 8000386:	bd80      	pop	{r7, pc}
 8000388:	40012400 	.word	0x40012400
 800038c:	40021000 	.word	0x40021000
 8000390:	40011000 	.word	0x40011000
 8000394:	40010c00 	.word	0x40010c00
 8000398:	20000084 	.word	0x20000084
 800039c:	40020008 	.word	0x40020008

080003a0 <initDisplay>:
                                    0x1f, 0x01, 0x09}; // 0->9
    uint16_t display_index = 0;
    uint8_t spi_buffer = 0xff;

    void initDisplay()
    {
 80003a0:	b580      	push	{r7, lr}
 80003a2:	af00      	add	r7, sp, #0
        HAL_GPIO_WritePin(LED_LATCH_GPIO_Port, LED_LATCH_Pin, 1);
 80003a4:	2201      	movs	r2, #1
 80003a6:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80003aa:	4802      	ldr	r0, [pc, #8]	@ (80003b4 <initDisplay+0x14>)
 80003ac:	f002 fffe 	bl	80033ac <HAL_GPIO_WritePin>
    }
 80003b0:	bf00      	nop
 80003b2:	bd80      	pop	{r7, pc}
 80003b4:	40011000 	.word	0x40011000

080003b8 <displayScan>:
    /**
     * @brief Display scan function
     * @note This function should be called in a timer interrupt
     */
    void displayScan()
    {
 80003b8:	b580      	push	{r7, lr}
 80003ba:	af00      	add	r7, sp, #0
        spi_buffer = display_buffer[display_index];
 80003bc:	4b37      	ldr	r3, [pc, #220]	@ (800049c <displayScan+0xe4>)
 80003be:	881b      	ldrh	r3, [r3, #0]
 80003c0:	461a      	mov	r2, r3
 80003c2:	4b37      	ldr	r3, [pc, #220]	@ (80004a0 <displayScan+0xe8>)
 80003c4:	5c9a      	ldrb	r2, [r3, r2]
 80003c6:	4b37      	ldr	r3, [pc, #220]	@ (80004a4 <displayScan+0xec>)
 80003c8:	701a      	strb	r2, [r3, #0]
        switch (display_index)
 80003ca:	4b34      	ldr	r3, [pc, #208]	@ (800049c <displayScan+0xe4>)
 80003cc:	881b      	ldrh	r3, [r3, #0]
 80003ce:	2b02      	cmp	r3, #2
 80003d0:	d02c      	beq.n	800042c <displayScan+0x74>
 80003d2:	2b02      	cmp	r3, #2
 80003d4:	dc3d      	bgt.n	8000452 <displayScan+0x9a>
 80003d6:	2b00      	cmp	r3, #0
 80003d8:	d002      	beq.n	80003e0 <displayScan+0x28>
 80003da:	2b01      	cmp	r3, #1
 80003dc:	d013      	beq.n	8000406 <displayScan+0x4e>
            HAL_GPIO_WritePin(LED7_EN1_GPIO_Port, LED7_EN1_Pin, 1);
            HAL_GPIO_WritePin(LED7_EN2_GPIO_Port, LED7_EN2_Pin, 1);
            HAL_GPIO_WritePin(LED_EN_GPIO_Port, LED_EN_Pin, 0);
            break;
        default:
            break;
 80003de:	e038      	b.n	8000452 <displayScan+0x9a>
            HAL_GPIO_WritePin(LED7_EN1_GPIO_Port, LED7_EN1_Pin, 1);
 80003e0:	2201      	movs	r2, #1
 80003e2:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80003e6:	4830      	ldr	r0, [pc, #192]	@ (80004a8 <displayScan+0xf0>)
 80003e8:	f002 ffe0 	bl	80033ac <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(LED7_EN2_GPIO_Port, LED7_EN2_Pin, 0);
 80003ec:	2200      	movs	r2, #0
 80003ee:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80003f2:	482d      	ldr	r0, [pc, #180]	@ (80004a8 <displayScan+0xf0>)
 80003f4:	f002 ffda 	bl	80033ac <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(LED_EN_GPIO_Port, LED_EN_Pin, 1);
 80003f8:	2201      	movs	r2, #1
 80003fa:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80003fe:	482a      	ldr	r0, [pc, #168]	@ (80004a8 <displayScan+0xf0>)
 8000400:	f002 ffd4 	bl	80033ac <HAL_GPIO_WritePin>
            break;
 8000404:	e026      	b.n	8000454 <displayScan+0x9c>
            HAL_GPIO_WritePin(LED7_EN1_GPIO_Port, LED7_EN1_Pin, 0);
 8000406:	2200      	movs	r2, #0
 8000408:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800040c:	4826      	ldr	r0, [pc, #152]	@ (80004a8 <displayScan+0xf0>)
 800040e:	f002 ffcd 	bl	80033ac <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(LED7_EN2_GPIO_Port, LED7_EN2_Pin, 1);
 8000412:	2201      	movs	r2, #1
 8000414:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000418:	4823      	ldr	r0, [pc, #140]	@ (80004a8 <displayScan+0xf0>)
 800041a:	f002 ffc7 	bl	80033ac <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(LED_EN_GPIO_Port, LED_EN_Pin, 1);
 800041e:	2201      	movs	r2, #1
 8000420:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000424:	4820      	ldr	r0, [pc, #128]	@ (80004a8 <displayScan+0xf0>)
 8000426:	f002 ffc1 	bl	80033ac <HAL_GPIO_WritePin>
            break;
 800042a:	e013      	b.n	8000454 <displayScan+0x9c>
            HAL_GPIO_WritePin(LED7_EN1_GPIO_Port, LED7_EN1_Pin, 1);
 800042c:	2201      	movs	r2, #1
 800042e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000432:	481d      	ldr	r0, [pc, #116]	@ (80004a8 <displayScan+0xf0>)
 8000434:	f002 ffba 	bl	80033ac <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(LED7_EN2_GPIO_Port, LED7_EN2_Pin, 1);
 8000438:	2201      	movs	r2, #1
 800043a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800043e:	481a      	ldr	r0, [pc, #104]	@ (80004a8 <displayScan+0xf0>)
 8000440:	f002 ffb4 	bl	80033ac <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(LED_EN_GPIO_Port, LED_EN_Pin, 0);
 8000444:	2200      	movs	r2, #0
 8000446:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800044a:	4817      	ldr	r0, [pc, #92]	@ (80004a8 <displayScan+0xf0>)
 800044c:	f002 ffae 	bl	80033ac <HAL_GPIO_WritePin>
            break;
 8000450:	e000      	b.n	8000454 <displayScan+0x9c>
            break;
 8000452:	bf00      	nop
        }

        display_index = (display_index + 1) % 3;
 8000454:	4b11      	ldr	r3, [pc, #68]	@ (800049c <displayScan+0xe4>)
 8000456:	881b      	ldrh	r3, [r3, #0]
 8000458:	1c5a      	adds	r2, r3, #1
 800045a:	4b14      	ldr	r3, [pc, #80]	@ (80004ac <displayScan+0xf4>)
 800045c:	fb83 3102 	smull	r3, r1, r3, r2
 8000460:	17d3      	asrs	r3, r2, #31
 8000462:	1ac9      	subs	r1, r1, r3
 8000464:	460b      	mov	r3, r1
 8000466:	005b      	lsls	r3, r3, #1
 8000468:	440b      	add	r3, r1
 800046a:	1ad1      	subs	r1, r2, r3
 800046c:	b28a      	uxth	r2, r1
 800046e:	4b0b      	ldr	r3, [pc, #44]	@ (800049c <displayScan+0xe4>)
 8000470:	801a      	strh	r2, [r3, #0]

        HAL_GPIO_WritePin(LED_LATCH_GPIO_Port, LED_LATCH_Pin, 0);
 8000472:	2200      	movs	r2, #0
 8000474:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000478:	480d      	ldr	r0, [pc, #52]	@ (80004b0 <displayScan+0xf8>)
 800047a:	f002 ff97 	bl	80033ac <HAL_GPIO_WritePin>
        HAL_SPI_Transmit(&hspi1, (void *)&spi_buffer, 1, 1);
 800047e:	2301      	movs	r3, #1
 8000480:	2201      	movs	r2, #1
 8000482:	4908      	ldr	r1, [pc, #32]	@ (80004a4 <displayScan+0xec>)
 8000484:	480b      	ldr	r0, [pc, #44]	@ (80004b4 <displayScan+0xfc>)
 8000486:	f003 fd0d 	bl	8003ea4 <HAL_SPI_Transmit>
        HAL_GPIO_WritePin(LED_LATCH_GPIO_Port, LED_LATCH_Pin, 1);
 800048a:	2201      	movs	r2, #1
 800048c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000490:	4807      	ldr	r0, [pc, #28]	@ (80004b0 <displayScan+0xf8>)
 8000492:	f002 ff8b 	bl	80033ac <HAL_GPIO_WritePin>
    }
 8000496:	bf00      	nop
 8000498:	bd80      	pop	{r7, pc}
 800049a:	bf00      	nop
 800049c:	200000cc 	.word	0x200000cc
 80004a0:	200000c8 	.word	0x200000c8
 80004a4:	2000000a 	.word	0x2000000a
 80004a8:	40010800 	.word	0x40010800
 80004ac:	55555556 	.word	0x55555556
 80004b0:	40011000 	.word	0x40011000
 80004b4:	200000f8 	.word	0x200000f8

080004b8 <displayLed7Seg>:
     * @param number Number to display
     * @return None
     * @note display_buffer[1] is the left digit, display_buffer[0] is the right digit
     */
    void displayLed7Seg(const uint16_t number)
    {
 80004b8:	b480      	push	{r7}
 80004ba:	b083      	sub	sp, #12
 80004bc:	af00      	add	r7, sp, #0
 80004be:	4603      	mov	r3, r0
 80004c0:	80fb      	strh	r3, [r7, #6]
        display_buffer[1] = display_7seg_map[number / 10];
 80004c2:	88fb      	ldrh	r3, [r7, #6]
 80004c4:	4a0f      	ldr	r2, [pc, #60]	@ (8000504 <displayLed7Seg+0x4c>)
 80004c6:	fba2 2303 	umull	r2, r3, r2, r3
 80004ca:	08db      	lsrs	r3, r3, #3
 80004cc:	b29b      	uxth	r3, r3
 80004ce:	461a      	mov	r2, r3
 80004d0:	4b0d      	ldr	r3, [pc, #52]	@ (8000508 <displayLed7Seg+0x50>)
 80004d2:	5c9a      	ldrb	r2, [r3, r2]
 80004d4:	4b0d      	ldr	r3, [pc, #52]	@ (800050c <displayLed7Seg+0x54>)
 80004d6:	705a      	strb	r2, [r3, #1]
        display_buffer[0] = display_7seg_map[number % 10];
 80004d8:	88fa      	ldrh	r2, [r7, #6]
 80004da:	4b0a      	ldr	r3, [pc, #40]	@ (8000504 <displayLed7Seg+0x4c>)
 80004dc:	fba3 1302 	umull	r1, r3, r3, r2
 80004e0:	08d9      	lsrs	r1, r3, #3
 80004e2:	460b      	mov	r3, r1
 80004e4:	009b      	lsls	r3, r3, #2
 80004e6:	440b      	add	r3, r1
 80004e8:	005b      	lsls	r3, r3, #1
 80004ea:	1ad3      	subs	r3, r2, r3
 80004ec:	b29b      	uxth	r3, r3
 80004ee:	461a      	mov	r2, r3
 80004f0:	4b05      	ldr	r3, [pc, #20]	@ (8000508 <displayLed7Seg+0x50>)
 80004f2:	5c9a      	ldrb	r2, [r3, r2]
 80004f4:	4b05      	ldr	r3, [pc, #20]	@ (800050c <displayLed7Seg+0x54>)
 80004f6:	701a      	strb	r2, [r3, #0]
    }
 80004f8:	bf00      	nop
 80004fa:	370c      	adds	r7, #12
 80004fc:	46bd      	mov	sp, r7
 80004fe:	bc80      	pop	{r7}
 8000500:	4770      	bx	lr
 8000502:	bf00      	nop
 8000504:	cccccccd 	.word	0xcccccccd
 8000508:	20000000 	.word	0x20000000
 800050c:	200000c8 	.word	0x200000c8

08000510 <mirrorByte>:

    uint8_t mirrorByte(uint8_t data_byte)
    {
 8000510:	b480      	push	{r7}
 8000512:	b083      	sub	sp, #12
 8000514:	af00      	add	r7, sp, #0
 8000516:	4603      	mov	r3, r0
 8000518:	71fb      	strb	r3, [r7, #7]
        data_byte = (data_byte & 0xF0) >> 4 | (data_byte & 0x0F) << 4;
 800051a:	79fb      	ldrb	r3, [r7, #7]
 800051c:	091b      	lsrs	r3, r3, #4
 800051e:	b2db      	uxtb	r3, r3
 8000520:	b25a      	sxtb	r2, r3
 8000522:	79fb      	ldrb	r3, [r7, #7]
 8000524:	011b      	lsls	r3, r3, #4
 8000526:	b25b      	sxtb	r3, r3
 8000528:	4313      	orrs	r3, r2
 800052a:	b25b      	sxtb	r3, r3
 800052c:	71fb      	strb	r3, [r7, #7]
        data_byte = (data_byte & 0xCC) >> 2 | (data_byte & 0x33) << 2;
 800052e:	79fb      	ldrb	r3, [r7, #7]
 8000530:	109b      	asrs	r3, r3, #2
 8000532:	b25b      	sxtb	r3, r3
 8000534:	f003 0333 	and.w	r3, r3, #51	@ 0x33
 8000538:	b25a      	sxtb	r2, r3
 800053a:	79fb      	ldrb	r3, [r7, #7]
 800053c:	009b      	lsls	r3, r3, #2
 800053e:	b25b      	sxtb	r3, r3
 8000540:	f023 0333 	bic.w	r3, r3, #51	@ 0x33
 8000544:	b25b      	sxtb	r3, r3
 8000546:	4313      	orrs	r3, r2
 8000548:	b25b      	sxtb	r3, r3
 800054a:	71fb      	strb	r3, [r7, #7]
        data_byte = (data_byte & 0xAA) >> 1 | (data_byte & 0x55) << 1;
 800054c:	79fb      	ldrb	r3, [r7, #7]
 800054e:	105b      	asrs	r3, r3, #1
 8000550:	b25b      	sxtb	r3, r3
 8000552:	f003 0355 	and.w	r3, r3, #85	@ 0x55
 8000556:	b25a      	sxtb	r2, r3
 8000558:	79fb      	ldrb	r3, [r7, #7]
 800055a:	005b      	lsls	r3, r3, #1
 800055c:	b25b      	sxtb	r3, r3
 800055e:	f023 0355 	bic.w	r3, r3, #85	@ 0x55
 8000562:	b25b      	sxtb	r3, r3
 8000564:	4313      	orrs	r3, r2
 8000566:	b25b      	sxtb	r3, r3
 8000568:	71fb      	strb	r3, [r7, #7]
        return data_byte;
 800056a:	79fb      	ldrb	r3, [r7, #7]
    }
 800056c:	4618      	mov	r0, r3
 800056e:	370c      	adds	r7, #12
 8000570:	46bd      	mov	sp, r7
 8000572:	bc80      	pop	{r7}
 8000574:	4770      	bx	lr
	...

08000578 <displayLeds>:
     * @param data_byte Data byte to display
     * @note because the LEDs are connected in reverse order,
     * we need to mirror the byte and then reverse the bits of the byte
     */
    void displayLeds(const uint8_t data_byte)
    {
 8000578:	b580      	push	{r7, lr}
 800057a:	b082      	sub	sp, #8
 800057c:	af00      	add	r7, sp, #0
 800057e:	4603      	mov	r3, r0
 8000580:	71fb      	strb	r3, [r7, #7]
        display_buffer[2] = ~mirrorByte(data_byte);
 8000582:	79fb      	ldrb	r3, [r7, #7]
 8000584:	4618      	mov	r0, r3
 8000586:	f7ff ffc3 	bl	8000510 <mirrorByte>
 800058a:	4603      	mov	r3, r0
 800058c:	43db      	mvns	r3, r3
 800058e:	b2da      	uxtb	r2, r3
 8000590:	4b02      	ldr	r3, [pc, #8]	@ (800059c <displayLeds+0x24>)
 8000592:	709a      	strb	r2, [r3, #2]
    }
 8000594:	bf00      	nop
 8000596:	3708      	adds	r7, #8
 8000598:	46bd      	mov	sp, r7
 800059a:	bd80      	pop	{r7, pc}
 800059c:	200000c8 	.word	0x200000c8

080005a0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b082      	sub	sp, #8
 80005a4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80005a6:	4b0c      	ldr	r3, [pc, #48]	@ (80005d8 <MX_DMA_Init+0x38>)
 80005a8:	695b      	ldr	r3, [r3, #20]
 80005aa:	4a0b      	ldr	r2, [pc, #44]	@ (80005d8 <MX_DMA_Init+0x38>)
 80005ac:	f043 0301 	orr.w	r3, r3, #1
 80005b0:	6153      	str	r3, [r2, #20]
 80005b2:	4b09      	ldr	r3, [pc, #36]	@ (80005d8 <MX_DMA_Init+0x38>)
 80005b4:	695b      	ldr	r3, [r3, #20]
 80005b6:	f003 0301 	and.w	r3, r3, #1
 80005ba:	607b      	str	r3, [r7, #4]
 80005bc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80005be:	2200      	movs	r2, #0
 80005c0:	2100      	movs	r1, #0
 80005c2:	200b      	movs	r0, #11
 80005c4:	f002 f8a3 	bl	800270e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80005c8:	200b      	movs	r0, #11
 80005ca:	f002 f8bc 	bl	8002746 <HAL_NVIC_EnableIRQ>

}
 80005ce:	bf00      	nop
 80005d0:	3708      	adds	r7, #8
 80005d2:	46bd      	mov	sp, r7
 80005d4:	bd80      	pop	{r7, pc}
 80005d6:	bf00      	nop
 80005d8:	40021000 	.word	0x40021000

080005dc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	b088      	sub	sp, #32
 80005e0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005e2:	f107 0310 	add.w	r3, r7, #16
 80005e6:	2200      	movs	r2, #0
 80005e8:	601a      	str	r2, [r3, #0]
 80005ea:	605a      	str	r2, [r3, #4]
 80005ec:	609a      	str	r2, [r3, #8]
 80005ee:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005f0:	4b4b      	ldr	r3, [pc, #300]	@ (8000720 <MX_GPIO_Init+0x144>)
 80005f2:	699b      	ldr	r3, [r3, #24]
 80005f4:	4a4a      	ldr	r2, [pc, #296]	@ (8000720 <MX_GPIO_Init+0x144>)
 80005f6:	f043 0310 	orr.w	r3, r3, #16
 80005fa:	6193      	str	r3, [r2, #24]
 80005fc:	4b48      	ldr	r3, [pc, #288]	@ (8000720 <MX_GPIO_Init+0x144>)
 80005fe:	699b      	ldr	r3, [r3, #24]
 8000600:	f003 0310 	and.w	r3, r3, #16
 8000604:	60fb      	str	r3, [r7, #12]
 8000606:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000608:	4b45      	ldr	r3, [pc, #276]	@ (8000720 <MX_GPIO_Init+0x144>)
 800060a:	699b      	ldr	r3, [r3, #24]
 800060c:	4a44      	ldr	r2, [pc, #272]	@ (8000720 <MX_GPIO_Init+0x144>)
 800060e:	f043 0320 	orr.w	r3, r3, #32
 8000612:	6193      	str	r3, [r2, #24]
 8000614:	4b42      	ldr	r3, [pc, #264]	@ (8000720 <MX_GPIO_Init+0x144>)
 8000616:	699b      	ldr	r3, [r3, #24]
 8000618:	f003 0320 	and.w	r3, r3, #32
 800061c:	60bb      	str	r3, [r7, #8]
 800061e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000620:	4b3f      	ldr	r3, [pc, #252]	@ (8000720 <MX_GPIO_Init+0x144>)
 8000622:	699b      	ldr	r3, [r3, #24]
 8000624:	4a3e      	ldr	r2, [pc, #248]	@ (8000720 <MX_GPIO_Init+0x144>)
 8000626:	f043 0304 	orr.w	r3, r3, #4
 800062a:	6193      	str	r3, [r2, #24]
 800062c:	4b3c      	ldr	r3, [pc, #240]	@ (8000720 <MX_GPIO_Init+0x144>)
 800062e:	699b      	ldr	r3, [r3, #24]
 8000630:	f003 0304 	and.w	r3, r3, #4
 8000634:	607b      	str	r3, [r7, #4]
 8000636:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000638:	4b39      	ldr	r3, [pc, #228]	@ (8000720 <MX_GPIO_Init+0x144>)
 800063a:	699b      	ldr	r3, [r3, #24]
 800063c:	4a38      	ldr	r2, [pc, #224]	@ (8000720 <MX_GPIO_Init+0x144>)
 800063e:	f043 0308 	orr.w	r3, r3, #8
 8000642:	6193      	str	r3, [r2, #24]
 8000644:	4b36      	ldr	r3, [pc, #216]	@ (8000720 <MX_GPIO_Init+0x144>)
 8000646:	699b      	ldr	r3, [r3, #24]
 8000648:	f003 0308 	and.w	r3, r3, #8
 800064c:	603b      	str	r3, [r7, #0]
 800064e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, M1_DIR_Pin|M2_DIR_Pin|LED_DEBUG_Pin|LED_LATCH_Pin, GPIO_PIN_RESET);
 8000650:	2200      	movs	r2, #0
 8000652:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 8000656:	4833      	ldr	r0, [pc, #204]	@ (8000724 <MX_GPIO_Init+0x148>)
 8000658:	f002 fea8 	bl	80033ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, M4_DIR_Pin|LED_EN_Pin|LED7_EN2_Pin|LED7_EN1_Pin
 800065c:	2200      	movs	r2, #0
 800065e:	f649 1102 	movw	r1, #39170	@ 0x9902
 8000662:	4831      	ldr	r0, [pc, #196]	@ (8000728 <MX_GPIO_Init+0x14c>)
 8000664:	f002 fea2 	bl	80033ac <HAL_GPIO_WritePin>
                          |INPUT_LOAD_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, M3_DIR_Pin|SM_DIR_Pin, GPIO_PIN_RESET);
 8000668:	2200      	movs	r2, #0
 800066a:	2124      	movs	r1, #36	@ 0x24
 800066c:	482f      	ldr	r0, [pc, #188]	@ (800072c <MX_GPIO_Init+0x150>)
 800066e:	f002 fe9d 	bl	80033ac <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = M1_DIR_Pin|M2_DIR_Pin|LED_DEBUG_Pin|LED_LATCH_Pin;
 8000672:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 8000676:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000678:	2301      	movs	r3, #1
 800067a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800067c:	2300      	movs	r3, #0
 800067e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000680:	2302      	movs	r3, #2
 8000682:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000684:	f107 0310 	add.w	r3, r7, #16
 8000688:	4619      	mov	r1, r3
 800068a:	4826      	ldr	r0, [pc, #152]	@ (8000724 <MX_GPIO_Init+0x148>)
 800068c:	f002 fcfa 	bl	8003084 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin
                           PAPin */
  GPIO_InitStruct.Pin = M4_DIR_Pin|LED_EN_Pin|LED7_EN2_Pin|LED7_EN1_Pin
 8000690:	f649 1302 	movw	r3, #39170	@ 0x9902
 8000694:	613b      	str	r3, [r7, #16]
                          |INPUT_LOAD_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000696:	2301      	movs	r3, #1
 8000698:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800069a:	2300      	movs	r3, #0
 800069c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800069e:	2302      	movs	r3, #2
 80006a0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006a2:	f107 0310 	add.w	r3, r7, #16
 80006a6:	4619      	mov	r1, r3
 80006a8:	481f      	ldr	r0, [pc, #124]	@ (8000728 <MX_GPIO_Init+0x14c>)
 80006aa:	f002 fceb 	bl	8003084 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = M3_DIR_Pin|SM_DIR_Pin;
 80006ae:	2324      	movs	r3, #36	@ 0x24
 80006b0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006b2:	2301      	movs	r3, #1
 80006b4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006b6:	2300      	movs	r3, #0
 80006b8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006ba:	2302      	movs	r3, #2
 80006bc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006be:	f107 0310 	add.w	r3, r7, #16
 80006c2:	4619      	mov	r1, r3
 80006c4:	4819      	ldr	r0, [pc, #100]	@ (800072c <MX_GPIO_Init+0x150>)
 80006c6:	f002 fcdd 	bl	8003084 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin */
  GPIO_InitStruct.Pin = ENCODER3_B_Pin|ENCODER3_A_Pin|ENCODER4_B_Pin|ENCODER4_A_Pin
 80006ca:	f24f 2308 	movw	r3, #61960	@ 0xf208
 80006ce:	613b      	str	r3, [r7, #16]
                          |SM_FAULT_Pin|ENCODER1_A_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006d0:	2300      	movs	r3, #0
 80006d2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006d4:	2300      	movs	r3, #0
 80006d6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006d8:	f107 0310 	add.w	r3, r7, #16
 80006dc:	4619      	mov	r1, r3
 80006de:	4813      	ldr	r0, [pc, #76]	@ (800072c <MX_GPIO_Init+0x150>)
 80006e0:	f002 fcd0 	bl	8003084 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = ENCODER2_A_Pin|ENCODER2_B_Pin;
 80006e4:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80006e8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006ea:	2300      	movs	r3, #0
 80006ec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ee:	2300      	movs	r3, #0
 80006f0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80006f2:	f107 0310 	add.w	r3, r7, #16
 80006f6:	4619      	mov	r1, r3
 80006f8:	480a      	ldr	r0, [pc, #40]	@ (8000724 <MX_GPIO_Init+0x148>)
 80006fa:	f002 fcc3 	bl	8003084 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ENCODER1_B_Pin;
 80006fe:	2304      	movs	r3, #4
 8000700:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000702:	2300      	movs	r3, #0
 8000704:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000706:	2300      	movs	r3, #0
 8000708:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(ENCODER1_B_GPIO_Port, &GPIO_InitStruct);
 800070a:	f107 0310 	add.w	r3, r7, #16
 800070e:	4619      	mov	r1, r3
 8000710:	4807      	ldr	r0, [pc, #28]	@ (8000730 <MX_GPIO_Init+0x154>)
 8000712:	f002 fcb7 	bl	8003084 <HAL_GPIO_Init>

}
 8000716:	bf00      	nop
 8000718:	3720      	adds	r7, #32
 800071a:	46bd      	mov	sp, r7
 800071c:	bd80      	pop	{r7, pc}
 800071e:	bf00      	nop
 8000720:	40021000 	.word	0x40021000
 8000724:	40011000 	.word	0x40011000
 8000728:	40010800 	.word	0x40010800
 800072c:	40010c00 	.word	0x40010c00
 8000730:	40011400 	.word	0x40011400

08000734 <SensorCalib>:
    int sensor_map[8] = {0, 3, 5, 6, 1, 2, 4, 7};
    uint8_t line_status = 0;
    uint8_t front_status = 0;

    void SensorCalib()
    {
 8000734:	b580      	push	{r7, lr}
 8000736:	af00      	add	r7, sp, #0
        HAL_ADC_Start_DMA(&hadc1, (void *)sensor_calib, 8);
 8000738:	2208      	movs	r2, #8
 800073a:	4903      	ldr	r1, [pc, #12]	@ (8000748 <SensorCalib+0x14>)
 800073c:	4803      	ldr	r0, [pc, #12]	@ (800074c <SensorCalib+0x18>)
 800073e:	f001 fc1b 	bl	8001f78 <HAL_ADC_Start_DMA>
    }
 8000742:	bf00      	nop
 8000744:	bd80      	pop	{r7, pc}
 8000746:	bf00      	nop
 8000748:	200000e0 	.word	0x200000e0
 800074c:	20000054 	.word	0x20000054

08000750 <SensorScan>:

    void SensorScan()
    {
 8000750:	b580      	push	{r7, lr}
 8000752:	b082      	sub	sp, #8
 8000754:	af00      	add	r7, sp, #0
        HAL_ADC_Start_DMA(&hadc1, (void *)sensor_buffer, 8);
 8000756:	2208      	movs	r2, #8
 8000758:	497d      	ldr	r1, [pc, #500]	@ (8000950 <SensorScan+0x200>)
 800075a:	487e      	ldr	r0, [pc, #504]	@ (8000954 <SensorScan+0x204>)
 800075c:	f001 fc0c 	bl	8001f78 <HAL_ADC_Start_DMA>

        uint8_t temp = 0;
 8000760:	2300      	movs	r3, #0
 8000762:	71fb      	strb	r3, [r7, #7]
        for (int i = 0; i < 8; i++)
 8000764:	2300      	movs	r3, #0
 8000766:	603b      	str	r3, [r7, #0]
 8000768:	e023      	b.n	80007b2 <SensorScan+0x62>
        {
            if ((sensor_buffer[i] > (sensor_calib[i] - SENSOR_ERROR_RANGE)) && (sensor_buffer[i] < (sensor_calib[i] + SENSOR_ERROR_RANGE)))
 800076a:	4a7b      	ldr	r2, [pc, #492]	@ (8000958 <SensorScan+0x208>)
 800076c:	683b      	ldr	r3, [r7, #0]
 800076e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000772:	3bc7      	subs	r3, #199	@ 0xc7
 8000774:	4976      	ldr	r1, [pc, #472]	@ (8000950 <SensorScan+0x200>)
 8000776:	683a      	ldr	r2, [r7, #0]
 8000778:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 800077c:	4293      	cmp	r3, r2
 800077e:	dc15      	bgt.n	80007ac <SensorScan+0x5c>
 8000780:	4a75      	ldr	r2, [pc, #468]	@ (8000958 <SensorScan+0x208>)
 8000782:	683b      	ldr	r3, [r7, #0]
 8000784:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000788:	33c7      	adds	r3, #199	@ 0xc7
 800078a:	4971      	ldr	r1, [pc, #452]	@ (8000950 <SensorScan+0x200>)
 800078c:	683a      	ldr	r2, [r7, #0]
 800078e:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8000792:	4293      	cmp	r3, r2
 8000794:	db0a      	blt.n	80007ac <SensorScan+0x5c>
            {
                temp = temp + (0x80 >> sensor_map[i]);
 8000796:	4a71      	ldr	r2, [pc, #452]	@ (800095c <SensorScan+0x20c>)
 8000798:	683b      	ldr	r3, [r7, #0]
 800079a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800079e:	2280      	movs	r2, #128	@ 0x80
 80007a0:	fa42 f303 	asr.w	r3, r2, r3
 80007a4:	b2da      	uxtb	r2, r3
 80007a6:	79fb      	ldrb	r3, [r7, #7]
 80007a8:	4413      	add	r3, r2
 80007aa:	71fb      	strb	r3, [r7, #7]
        for (int i = 0; i < 8; i++)
 80007ac:	683b      	ldr	r3, [r7, #0]
 80007ae:	3301      	adds	r3, #1
 80007b0:	603b      	str	r3, [r7, #0]
 80007b2:	683b      	ldr	r3, [r7, #0]
 80007b4:	2b07      	cmp	r3, #7
 80007b6:	ddd8      	ble.n	800076a <SensorScan+0x1a>
            }
        }
        displayLeds(temp);
 80007b8:	79fb      	ldrb	r3, [r7, #7]
 80007ba:	4618      	mov	r0, r3
 80007bc:	f7ff fedc 	bl	8000578 <displayLeds>
        switch (temp & 0b01111110)
 80007c0:	79fb      	ldrb	r3, [r7, #7]
 80007c2:	f003 037e 	and.w	r3, r3, #126	@ 0x7e
 80007c6:	2b7e      	cmp	r3, #126	@ 0x7e
 80007c8:	f000 8099 	beq.w	80008fe <SensorScan+0x1ae>
 80007cc:	2b7e      	cmp	r3, #126	@ 0x7e
 80007ce:	f300 80b6 	bgt.w	800093e <SensorScan+0x1ee>
 80007d2:	2b40      	cmp	r3, #64	@ 0x40
 80007d4:	f300 808c 	bgt.w	80008f0 <SensorScan+0x1a0>
 80007d8:	2b00      	cmp	r3, #0
 80007da:	f2c0 80b0 	blt.w	800093e <SensorScan+0x1ee>
 80007de:	2b40      	cmp	r3, #64	@ 0x40
 80007e0:	f200 80ad 	bhi.w	800093e <SensorScan+0x1ee>
 80007e4:	a201      	add	r2, pc, #4	@ (adr r2, 80007ec <SensorScan+0x9c>)
 80007e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80007ea:	bf00      	nop
 80007ec:	080008f7 	.word	0x080008f7
 80007f0:	0800093f 	.word	0x0800093f
 80007f4:	0800091f 	.word	0x0800091f
 80007f8:	0800093f 	.word	0x0800093f
 80007fc:	08000917 	.word	0x08000917
 8000800:	0800093f 	.word	0x0800093f
 8000804:	08000917 	.word	0x08000917
 8000808:	0800093f 	.word	0x0800093f
 800080c:	0800090f 	.word	0x0800090f
 8000810:	0800093f 	.word	0x0800093f
 8000814:	0800093f 	.word	0x0800093f
 8000818:	0800093f 	.word	0x0800093f
 800081c:	0800090f 	.word	0x0800090f
 8000820:	0800093f 	.word	0x0800093f
 8000824:	0800093f 	.word	0x0800093f
 8000828:	0800093f 	.word	0x0800093f
 800082c:	08000927 	.word	0x08000927
 8000830:	0800093f 	.word	0x0800093f
 8000834:	0800093f 	.word	0x0800093f
 8000838:	0800093f 	.word	0x0800093f
 800083c:	0800093f 	.word	0x0800093f
 8000840:	0800093f 	.word	0x0800093f
 8000844:	0800093f 	.word	0x0800093f
 8000848:	0800093f 	.word	0x0800093f
 800084c:	08000907 	.word	0x08000907
 8000850:	0800093f 	.word	0x0800093f
 8000854:	0800093f 	.word	0x0800093f
 8000858:	0800093f 	.word	0x0800093f
 800085c:	0800093f 	.word	0x0800093f
 8000860:	0800093f 	.word	0x0800093f
 8000864:	0800093f 	.word	0x0800093f
 8000868:	0800093f 	.word	0x0800093f
 800086c:	0800092f 	.word	0x0800092f
 8000870:	0800093f 	.word	0x0800093f
 8000874:	0800093f 	.word	0x0800093f
 8000878:	0800093f 	.word	0x0800093f
 800087c:	0800093f 	.word	0x0800093f
 8000880:	0800093f 	.word	0x0800093f
 8000884:	0800093f 	.word	0x0800093f
 8000888:	0800093f 	.word	0x0800093f
 800088c:	0800093f 	.word	0x0800093f
 8000890:	0800093f 	.word	0x0800093f
 8000894:	0800093f 	.word	0x0800093f
 8000898:	0800093f 	.word	0x0800093f
 800089c:	0800093f 	.word	0x0800093f
 80008a0:	0800093f 	.word	0x0800093f
 80008a4:	0800093f 	.word	0x0800093f
 80008a8:	0800093f 	.word	0x0800093f
 80008ac:	08000927 	.word	0x08000927
 80008b0:	0800093f 	.word	0x0800093f
 80008b4:	0800093f 	.word	0x0800093f
 80008b8:	0800093f 	.word	0x0800093f
 80008bc:	0800093f 	.word	0x0800093f
 80008c0:	0800093f 	.word	0x0800093f
 80008c4:	0800093f 	.word	0x0800093f
 80008c8:	0800093f 	.word	0x0800093f
 80008cc:	0800093f 	.word	0x0800093f
 80008d0:	0800093f 	.word	0x0800093f
 80008d4:	0800093f 	.word	0x0800093f
 80008d8:	0800093f 	.word	0x0800093f
 80008dc:	0800093f 	.word	0x0800093f
 80008e0:	0800093f 	.word	0x0800093f
 80008e4:	0800093f 	.word	0x0800093f
 80008e8:	0800093f 	.word	0x0800093f
 80008ec:	08000937 	.word	0x08000937
 80008f0:	2b60      	cmp	r3, #96	@ 0x60
 80008f2:	d01c      	beq.n	800092e <SensorScan+0x1de>
 80008f4:	e023      	b.n	800093e <SensorScan+0x1ee>
        {
        case 0b00000000:
            line_status = LINE_END;
 80008f6:	4b1a      	ldr	r3, [pc, #104]	@ (8000960 <SensorScan+0x210>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	701a      	strb	r2, [r3, #0]
            break;
 80008fc:	e023      	b.n	8000946 <SensorScan+0x1f6>
        case 0b01111110:
            line_status = LINE_CROSS;
 80008fe:	4b18      	ldr	r3, [pc, #96]	@ (8000960 <SensorScan+0x210>)
 8000900:	2201      	movs	r2, #1
 8000902:	701a      	strb	r2, [r3, #0]
            break;
 8000904:	e01f      	b.n	8000946 <SensorScan+0x1f6>
        case 0b00011000:
            line_status = LINE_CENTER;
 8000906:	4b16      	ldr	r3, [pc, #88]	@ (8000960 <SensorScan+0x210>)
 8000908:	2204      	movs	r2, #4
 800090a:	701a      	strb	r2, [r3, #0]
            break;
 800090c:	e01b      	b.n	8000946 <SensorScan+0x1f6>
        case 0b00001100:
        case 0b00001000:
            line_status = LINE_RIGHT1;
 800090e:	4b14      	ldr	r3, [pc, #80]	@ (8000960 <SensorScan+0x210>)
 8000910:	2203      	movs	r2, #3
 8000912:	701a      	strb	r2, [r3, #0]
            break;
 8000914:	e017      	b.n	8000946 <SensorScan+0x1f6>
        case 0b00000110:
        case 0b00000100:
            line_status = LINE_RIGHT2;
 8000916:	4b12      	ldr	r3, [pc, #72]	@ (8000960 <SensorScan+0x210>)
 8000918:	2206      	movs	r2, #6
 800091a:	701a      	strb	r2, [r3, #0]
            break;
 800091c:	e013      	b.n	8000946 <SensorScan+0x1f6>
        case 0b00000010:
            line_status = LINE_RIGHT3;
 800091e:	4b10      	ldr	r3, [pc, #64]	@ (8000960 <SensorScan+0x210>)
 8000920:	2208      	movs	r2, #8
 8000922:	701a      	strb	r2, [r3, #0]
            break;
 8000924:	e00f      	b.n	8000946 <SensorScan+0x1f6>
        case 0b00110000:
        case 0b00010000:
            line_status = LINE_LEFT1;
 8000926:	4b0e      	ldr	r3, [pc, #56]	@ (8000960 <SensorScan+0x210>)
 8000928:	2202      	movs	r2, #2
 800092a:	701a      	strb	r2, [r3, #0]
            break;
 800092c:	e00b      	b.n	8000946 <SensorScan+0x1f6>
        case 0b01100000:
        case 0b00100000:
            line_status = LINE_LEFT2;
 800092e:	4b0c      	ldr	r3, [pc, #48]	@ (8000960 <SensorScan+0x210>)
 8000930:	2205      	movs	r2, #5
 8000932:	701a      	strb	r2, [r3, #0]
            break;
 8000934:	e007      	b.n	8000946 <SensorScan+0x1f6>
        case 0b01000000:
            line_status = LINE_LEFT3;
 8000936:	4b0a      	ldr	r3, [pc, #40]	@ (8000960 <SensorScan+0x210>)
 8000938:	2207      	movs	r2, #7
 800093a:	701a      	strb	r2, [r3, #0]
            break;
 800093c:	e003      	b.n	8000946 <SensorScan+0x1f6>
        default:
            line_status = LINE_ERROR;
 800093e:	4b08      	ldr	r3, [pc, #32]	@ (8000960 <SensorScan+0x210>)
 8000940:	2209      	movs	r2, #9
 8000942:	701a      	strb	r2, [r3, #0]
            break;
 8000944:	bf00      	nop
        }
    }
 8000946:	bf00      	nop
 8000948:	3708      	adds	r7, #8
 800094a:	46bd      	mov	sp, r7
 800094c:	bd80      	pop	{r7, pc}
 800094e:	bf00      	nop
 8000950:	200000d0 	.word	0x200000d0
 8000954:	20000054 	.word	0x20000054
 8000958:	200000e0 	.word	0x200000e0
 800095c:	2000000c 	.word	0x2000000c
 8000960:	200000f0 	.word	0x200000f0

08000964 <SensorGetLine>:

    uint8_t SensorGetLine()
    {
 8000964:	b480      	push	{r7}
 8000966:	af00      	add	r7, sp, #0
        return line_status;
 8000968:	4b02      	ldr	r3, [pc, #8]	@ (8000974 <SensorGetLine+0x10>)
 800096a:	781b      	ldrb	r3, [r3, #0]
    }
 800096c:	4618      	mov	r0, r3
 800096e:	46bd      	mov	sp, r7
 8000970:	bc80      	pop	{r7}
 8000972:	4770      	bx	lr
 8000974:	200000f0 	.word	0x200000f0

08000978 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800097c:	f001 f9b0 	bl	8001ce0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000980:	f000 f840 	bl	8000a04 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000984:	f7ff fe2a 	bl	80005dc <MX_GPIO_Init>
  MX_DMA_Init();
 8000988:	f7ff fe0a 	bl	80005a0 <MX_DMA_Init>
  MX_TIM4_Init();
 800098c:	f000 fdac 	bl	80014e8 <MX_TIM4_Init>
  MX_TIM2_Init();
 8000990:	f000 fd04 	bl	800139c <MX_TIM2_Init>
  MX_TIM3_Init();
 8000994:	f000 fd4e 	bl	8001434 <MX_TIM3_Init>
  MX_TIM8_Init();
 8000998:	f000 feaa 	bl	80016f0 <MX_TIM8_Init>
  MX_USART1_UART_Init();
 800099c:	f001 f892 	bl	8001ac4 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80009a0:	f001 f8ba 	bl	8001b18 <MX_USART2_UART_Init>
  MX_TIM5_Init();
 80009a4:	f000 fe2e 	bl	8001604 <MX_TIM5_Init>
  MX_SPI1_Init();
 80009a8:	f000 fbae 	bl	8001108 <MX_SPI1_Init>
  MX_ADC1_Init();
 80009ac:	f7ff fc3a 	bl	8000224 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  initSystem();
 80009b0:	f000 f885 	bl	8000abe <initSystem>
  sTimer2Set(0, 1000);
 80009b4:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80009b8:	2000      	movs	r0, #0
 80009ba:	f000 fb4b 	bl	8001054 <sTimer2Set>

  servoSetAngle(SERVO_3, 0);
 80009be:	2100      	movs	r1, #0
 80009c0:	2002      	movs	r0, #2
 80009c2:	f000 faf1 	bl	8000fa8 <servoSetAngle>

  moveDirection(LEFT, 10);
 80009c6:	210a      	movs	r1, #10
 80009c8:	2003      	movs	r0, #3
 80009ca:	f000 fa85 	bl	8000ed8 <moveDirection>

  displayLed7Seg(1);
 80009ce:	2001      	movs	r0, #1
 80009d0:	f7ff fd72 	bl	80004b8 <displayLed7Seg>
  displayLeds(0b00000001);
 80009d4:	2001      	movs	r0, #1
 80009d6:	f7ff fdcf 	bl	8000578 <displayLeds>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    if (sTimer2GetFlag())
 80009da:	f000 fb57 	bl	800108c <sTimer2GetFlag>
 80009de:	4603      	mov	r3, r0
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	d0fa      	beq.n	80009da <main+0x62>
    {
      HAL_GPIO_TogglePin(LED_DEBUG_GPIO_Port, LED_DEBUG_Pin);
 80009e4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80009e8:	4805      	ldr	r0, [pc, #20]	@ (8000a00 <main+0x88>)
 80009ea:	f002 fcf7 	bl	80033dc <HAL_GPIO_TogglePin>

      SensorScan();
 80009ee:	f7ff feaf 	bl	8000750 <SensorScan>
      displayLed7Seg(SensorGetLine());
 80009f2:	f7ff ffb7 	bl	8000964 <SensorGetLine>
 80009f6:	4603      	mov	r3, r0
 80009f8:	4618      	mov	r0, r3
 80009fa:	f7ff fd5d 	bl	80004b8 <displayLed7Seg>
    if (sTimer2GetFlag())
 80009fe:	e7ec      	b.n	80009da <main+0x62>
 8000a00:	40011000 	.word	0x40011000

08000a04 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b096      	sub	sp, #88	@ 0x58
 8000a08:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a0a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000a0e:	2228      	movs	r2, #40	@ 0x28
 8000a10:	2100      	movs	r1, #0
 8000a12:	4618      	mov	r0, r3
 8000a14:	f005 fa36 	bl	8005e84 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a18:	f107 031c 	add.w	r3, r7, #28
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	601a      	str	r2, [r3, #0]
 8000a20:	605a      	str	r2, [r3, #4]
 8000a22:	609a      	str	r2, [r3, #8]
 8000a24:	60da      	str	r2, [r3, #12]
 8000a26:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a28:	1d3b      	adds	r3, r7, #4
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	601a      	str	r2, [r3, #0]
 8000a2e:	605a      	str	r2, [r3, #4]
 8000a30:	609a      	str	r2, [r3, #8]
 8000a32:	60da      	str	r2, [r3, #12]
 8000a34:	611a      	str	r2, [r3, #16]
 8000a36:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
   * in the RCC_OscInitTypeDef structure.
   */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000a38:	2301      	movs	r3, #1
 8000a3a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000a3c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000a40:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000a42:	2300      	movs	r3, #0
 8000a44:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a46:	2301      	movs	r3, #1
 8000a48:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a4a:	2302      	movs	r3, #2
 8000a4c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000a4e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000a52:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000a54:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000a58:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a5a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000a5e:	4618      	mov	r0, r3
 8000a60:	f002 fcd6 	bl	8003410 <HAL_RCC_OscConfig>
 8000a64:	4603      	mov	r3, r0
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	d001      	beq.n	8000a6e <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8000a6a:	f000 f841 	bl	8000af0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
   */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8000a6e:	230f      	movs	r3, #15
 8000a70:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a72:	2302      	movs	r3, #2
 8000a74:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a76:	2300      	movs	r3, #0
 8000a78:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000a7a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000a7e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a80:	2300      	movs	r3, #0
 8000a82:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000a84:	f107 031c 	add.w	r3, r7, #28
 8000a88:	2102      	movs	r1, #2
 8000a8a:	4618      	mov	r0, r3
 8000a8c:	f002 ff42 	bl	8003914 <HAL_RCC_ClockConfig>
 8000a90:	4603      	mov	r3, r0
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	d001      	beq.n	8000a9a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000a96:	f000 f82b 	bl	8000af0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000a9a:	2302      	movs	r3, #2
 8000a9c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8000a9e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000aa2:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000aa4:	1d3b      	adds	r3, r7, #4
 8000aa6:	4618      	mov	r0, r3
 8000aa8:	f003 f8c2 	bl	8003c30 <HAL_RCCEx_PeriphCLKConfig>
 8000aac:	4603      	mov	r3, r0
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	d001      	beq.n	8000ab6 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8000ab2:	f000 f81d 	bl	8000af0 <Error_Handler>
  }
}
 8000ab6:	bf00      	nop
 8000ab8:	3758      	adds	r7, #88	@ 0x58
 8000aba:	46bd      	mov	sp, r7
 8000abc:	bd80      	pop	{r7, pc}

08000abe <initSystem>:

/* USER CODE BEGIN 4 */
void initSystem()
{
 8000abe:	b580      	push	{r7, lr}
 8000ac0:	af00      	add	r7, sp, #0
  initTimer2();
 8000ac2:	f000 fabd 	bl	8001040 <initTimer2>

  initServo(SERVO_3);
 8000ac6:	2002      	movs	r0, #2
 8000ac8:	f000 fa58 	bl	8000f7c <initServo>

  initMotor(MOTOR_1);
 8000acc:	2000      	movs	r0, #0
 8000ace:	f000 f815 	bl	8000afc <initMotor>
  initMotor(MOTOR_2);
 8000ad2:	2001      	movs	r0, #1
 8000ad4:	f000 f812 	bl	8000afc <initMotor>
  initMotor(MOTOR_3);
 8000ad8:	2002      	movs	r0, #2
 8000ada:	f000 f80f 	bl	8000afc <initMotor>
  initMotor(MOTOR_4);
 8000ade:	2003      	movs	r0, #3
 8000ae0:	f000 f80c 	bl	8000afc <initMotor>

  initDisplay();
 8000ae4:	f7ff fc5c 	bl	80003a0 <initDisplay>

  SensorCalib();
 8000ae8:	f7ff fe24 	bl	8000734 <SensorCalib>
  //  buzzer_init();
  //  dc_init();
  //  uart_init();
}
 8000aec:	bf00      	nop
 8000aee:	bd80      	pop	{r7, pc}

08000af0 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8000af0:	b480      	push	{r7}
 8000af2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000af4:	b672      	cpsid	i
}
 8000af6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000af8:	bf00      	nop
 8000afa:	e7fd      	b.n	8000af8 <Error_Handler+0x8>

08000afc <initMotor>:
#endif /* __cplusplus */

	const uint32_t motor_channel[] = {TIM_CHANNEL_4, TIM_CHANNEL_3, TIM_CHANNEL_1, TIM_CHANNEL_2};

	void initMotor(const enum Motor motor_id)
	{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b082      	sub	sp, #8
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	4603      	mov	r3, r0
 8000b04:	71fb      	strb	r3, [r7, #7]
		HAL_TIM_PWM_Start(&htim8, motor_channel[motor_id]);
 8000b06:	79fb      	ldrb	r3, [r7, #7]
 8000b08:	4a05      	ldr	r2, [pc, #20]	@ (8000b20 <initMotor+0x24>)
 8000b0a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b0e:	4619      	mov	r1, r3
 8000b10:	4804      	ldr	r0, [pc, #16]	@ (8000b24 <initMotor+0x28>)
 8000b12:	f003 fcb1 	bl	8004478 <HAL_TIM_PWM_Start>
	}
 8000b16:	bf00      	nop
 8000b18:	3708      	adds	r7, #8
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	bd80      	pop	{r7, pc}
 8000b1e:	bf00      	nop
 8000b20:	08005ef4 	.word	0x08005ef4
 8000b24:	20000274 	.word	0x20000274

08000b28 <setSpeed>:

	void setSpeed(const enum Motor motor_id, uint8_t duty_cycle)
	{
 8000b28:	b480      	push	{r7}
 8000b2a:	b083      	sub	sp, #12
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	4603      	mov	r3, r0
 8000b30:	460a      	mov	r2, r1
 8000b32:	71fb      	strb	r3, [r7, #7]
 8000b34:	4613      	mov	r3, r2
 8000b36:	71bb      	strb	r3, [r7, #6]
		if (duty_cycle > 100)
 8000b38:	79bb      	ldrb	r3, [r7, #6]
 8000b3a:	2b64      	cmp	r3, #100	@ 0x64
 8000b3c:	d901      	bls.n	8000b42 <setSpeed+0x1a>
		{
			duty_cycle = 100;
 8000b3e:	2364      	movs	r3, #100	@ 0x64
 8000b40:	71bb      	strb	r3, [r7, #6]
		else if (duty_cycle < 0)
		{
			duty_cycle = 0;
		}

		__HAL_TIM_SET_COMPARE(&htim8, motor_channel[motor_id], duty_cycle);
 8000b42:	79fb      	ldrb	r3, [r7, #7]
 8000b44:	4a14      	ldr	r2, [pc, #80]	@ (8000b98 <setSpeed+0x70>)
 8000b46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d104      	bne.n	8000b58 <setSpeed+0x30>
 8000b4e:	4b13      	ldr	r3, [pc, #76]	@ (8000b9c <setSpeed+0x74>)
 8000b50:	681b      	ldr	r3, [r3, #0]
 8000b52:	79ba      	ldrb	r2, [r7, #6]
 8000b54:	635a      	str	r2, [r3, #52]	@ 0x34
	}
 8000b56:	e019      	b.n	8000b8c <setSpeed+0x64>
		__HAL_TIM_SET_COMPARE(&htim8, motor_channel[motor_id], duty_cycle);
 8000b58:	79fb      	ldrb	r3, [r7, #7]
 8000b5a:	4a0f      	ldr	r2, [pc, #60]	@ (8000b98 <setSpeed+0x70>)
 8000b5c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b60:	2b04      	cmp	r3, #4
 8000b62:	d104      	bne.n	8000b6e <setSpeed+0x46>
 8000b64:	4b0d      	ldr	r3, [pc, #52]	@ (8000b9c <setSpeed+0x74>)
 8000b66:	681a      	ldr	r2, [r3, #0]
 8000b68:	79bb      	ldrb	r3, [r7, #6]
 8000b6a:	6393      	str	r3, [r2, #56]	@ 0x38
	}
 8000b6c:	e00e      	b.n	8000b8c <setSpeed+0x64>
		__HAL_TIM_SET_COMPARE(&htim8, motor_channel[motor_id], duty_cycle);
 8000b6e:	79fb      	ldrb	r3, [r7, #7]
 8000b70:	4a09      	ldr	r2, [pc, #36]	@ (8000b98 <setSpeed+0x70>)
 8000b72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b76:	2b08      	cmp	r3, #8
 8000b78:	d104      	bne.n	8000b84 <setSpeed+0x5c>
 8000b7a:	4b08      	ldr	r3, [pc, #32]	@ (8000b9c <setSpeed+0x74>)
 8000b7c:	681a      	ldr	r2, [r3, #0]
 8000b7e:	79bb      	ldrb	r3, [r7, #6]
 8000b80:	63d3      	str	r3, [r2, #60]	@ 0x3c
	}
 8000b82:	e003      	b.n	8000b8c <setSpeed+0x64>
		__HAL_TIM_SET_COMPARE(&htim8, motor_channel[motor_id], duty_cycle);
 8000b84:	4b05      	ldr	r3, [pc, #20]	@ (8000b9c <setSpeed+0x74>)
 8000b86:	681a      	ldr	r2, [r3, #0]
 8000b88:	79bb      	ldrb	r3, [r7, #6]
 8000b8a:	6413      	str	r3, [r2, #64]	@ 0x40
	}
 8000b8c:	bf00      	nop
 8000b8e:	370c      	adds	r7, #12
 8000b90:	46bd      	mov	sp, r7
 8000b92:	bc80      	pop	{r7}
 8000b94:	4770      	bx	lr
 8000b96:	bf00      	nop
 8000b98:	08005ef4 	.word	0x08005ef4
 8000b9c:	20000274 	.word	0x20000274

08000ba0 <motor1Rotates>:
	 * @param	speed: -100 to 100
	 * @note	positive duty_cycle: move forward
	 * 			negative duty_cycle: move backward
	 */
	void motor1Rotates(const int speed)
	{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b082      	sub	sp, #8
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	6078      	str	r0, [r7, #4]
		if (speed >= 0)
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	db0b      	blt.n	8000bc6 <motor1Rotates+0x26>
		{
			HAL_GPIO_WritePin(M1_DIR_GPIO_Port, M1_DIR_Pin, UP);
 8000bae:	2201      	movs	r2, #1
 8000bb0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000bb4:	480e      	ldr	r0, [pc, #56]	@ (8000bf0 <motor1Rotates+0x50>)
 8000bb6:	f002 fbf9 	bl	80033ac <HAL_GPIO_WritePin>
			setSpeed(MOTOR_1, speed);
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	b2db      	uxtb	r3, r3
 8000bbe:	4619      	mov	r1, r3
 8000bc0:	2000      	movs	r0, #0
 8000bc2:	f7ff ffb1 	bl	8000b28 <setSpeed>
		}
		if (speed < 0)
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	da0d      	bge.n	8000be8 <motor1Rotates+0x48>
		{
			HAL_GPIO_WritePin(M1_DIR_GPIO_Port, M1_DIR_Pin, DOWN);
 8000bcc:	2200      	movs	r2, #0
 8000bce:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000bd2:	4807      	ldr	r0, [pc, #28]	@ (8000bf0 <motor1Rotates+0x50>)
 8000bd4:	f002 fbea 	bl	80033ac <HAL_GPIO_WritePin>
			setSpeed(MOTOR_1, -speed);
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	b2db      	uxtb	r3, r3
 8000bdc:	425b      	negs	r3, r3
 8000bde:	b2db      	uxtb	r3, r3
 8000be0:	4619      	mov	r1, r3
 8000be2:	2000      	movs	r0, #0
 8000be4:	f7ff ffa0 	bl	8000b28 <setSpeed>
		}
	}
 8000be8:	bf00      	nop
 8000bea:	3708      	adds	r7, #8
 8000bec:	46bd      	mov	sp, r7
 8000bee:	bd80      	pop	{r7, pc}
 8000bf0:	40011000 	.word	0x40011000

08000bf4 <motor2Rotates>:

	void motor2Rotates(const int speed)
	{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b082      	sub	sp, #8
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	6078      	str	r0, [r7, #4]
		if (speed >= 0)
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	db0b      	blt.n	8000c1a <motor2Rotates+0x26>
		{
			HAL_GPIO_WritePin(M2_DIR_GPIO_Port, M2_DIR_Pin, UP);
 8000c02:	2201      	movs	r2, #1
 8000c04:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000c08:	480e      	ldr	r0, [pc, #56]	@ (8000c44 <motor2Rotates+0x50>)
 8000c0a:	f002 fbcf 	bl	80033ac <HAL_GPIO_WritePin>
			setSpeed(MOTOR_2, speed);
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	b2db      	uxtb	r3, r3
 8000c12:	4619      	mov	r1, r3
 8000c14:	2001      	movs	r0, #1
 8000c16:	f7ff ff87 	bl	8000b28 <setSpeed>
		}
		if (speed < 0)
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	da0d      	bge.n	8000c3c <motor2Rotates+0x48>
		{
			HAL_GPIO_WritePin(M2_DIR_GPIO_Port, M2_DIR_Pin, DOWN);
 8000c20:	2200      	movs	r2, #0
 8000c22:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000c26:	4807      	ldr	r0, [pc, #28]	@ (8000c44 <motor2Rotates+0x50>)
 8000c28:	f002 fbc0 	bl	80033ac <HAL_GPIO_WritePin>
			setSpeed(MOTOR_2, -speed);
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	b2db      	uxtb	r3, r3
 8000c30:	425b      	negs	r3, r3
 8000c32:	b2db      	uxtb	r3, r3
 8000c34:	4619      	mov	r1, r3
 8000c36:	2001      	movs	r0, #1
 8000c38:	f7ff ff76 	bl	8000b28 <setSpeed>
		}
	}
 8000c3c:	bf00      	nop
 8000c3e:	3708      	adds	r7, #8
 8000c40:	46bd      	mov	sp, r7
 8000c42:	bd80      	pop	{r7, pc}
 8000c44:	40011000 	.word	0x40011000

08000c48 <motor3Rotates>:

	void motor3Rotates(const int speed)
	{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b082      	sub	sp, #8
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	6078      	str	r0, [r7, #4]
		if (speed >= 0)
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	db0a      	blt.n	8000c6c <motor3Rotates+0x24>
		{
			HAL_GPIO_WritePin(M3_DIR_GPIO_Port, M3_DIR_Pin, UP);
 8000c56:	2201      	movs	r2, #1
 8000c58:	2104      	movs	r1, #4
 8000c5a:	480e      	ldr	r0, [pc, #56]	@ (8000c94 <motor3Rotates+0x4c>)
 8000c5c:	f002 fba6 	bl	80033ac <HAL_GPIO_WritePin>
			setSpeed(MOTOR_3, speed);
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	b2db      	uxtb	r3, r3
 8000c64:	4619      	mov	r1, r3
 8000c66:	2002      	movs	r0, #2
 8000c68:	f7ff ff5e 	bl	8000b28 <setSpeed>
		}
		if (speed < 0)
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	da0c      	bge.n	8000c8c <motor3Rotates+0x44>
		{
			HAL_GPIO_WritePin(M3_DIR_GPIO_Port, M3_DIR_Pin, DOWN);
 8000c72:	2200      	movs	r2, #0
 8000c74:	2104      	movs	r1, #4
 8000c76:	4807      	ldr	r0, [pc, #28]	@ (8000c94 <motor3Rotates+0x4c>)
 8000c78:	f002 fb98 	bl	80033ac <HAL_GPIO_WritePin>
			setSpeed(MOTOR_3, -speed);
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	b2db      	uxtb	r3, r3
 8000c80:	425b      	negs	r3, r3
 8000c82:	b2db      	uxtb	r3, r3
 8000c84:	4619      	mov	r1, r3
 8000c86:	2002      	movs	r0, #2
 8000c88:	f7ff ff4e 	bl	8000b28 <setSpeed>
		}
	}
 8000c8c:	bf00      	nop
 8000c8e:	3708      	adds	r7, #8
 8000c90:	46bd      	mov	sp, r7
 8000c92:	bd80      	pop	{r7, pc}
 8000c94:	40010c00 	.word	0x40010c00

08000c98 <motor4Rotates>:

	void motor4Rotates(const int speed)
	{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b082      	sub	sp, #8
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	6078      	str	r0, [r7, #4]
		if (speed >= 0)
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	db0a      	blt.n	8000cbc <motor4Rotates+0x24>
		{
			HAL_GPIO_WritePin(M4_DIR_GPIO_Port, M4_DIR_Pin, UP);
 8000ca6:	2201      	movs	r2, #1
 8000ca8:	2102      	movs	r1, #2
 8000caa:	480e      	ldr	r0, [pc, #56]	@ (8000ce4 <motor4Rotates+0x4c>)
 8000cac:	f002 fb7e 	bl	80033ac <HAL_GPIO_WritePin>
			setSpeed(MOTOR_4, speed);
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	b2db      	uxtb	r3, r3
 8000cb4:	4619      	mov	r1, r3
 8000cb6:	2003      	movs	r0, #3
 8000cb8:	f7ff ff36 	bl	8000b28 <setSpeed>
		}
		if (speed < 0)
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	da0c      	bge.n	8000cdc <motor4Rotates+0x44>
		{
			HAL_GPIO_WritePin(M4_DIR_GPIO_Port, M4_DIR_Pin, DOWN);
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	2102      	movs	r1, #2
 8000cc6:	4807      	ldr	r0, [pc, #28]	@ (8000ce4 <motor4Rotates+0x4c>)
 8000cc8:	f002 fb70 	bl	80033ac <HAL_GPIO_WritePin>
			setSpeed(MOTOR_4, -speed);
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	b2db      	uxtb	r3, r3
 8000cd0:	425b      	negs	r3, r3
 8000cd2:	b2db      	uxtb	r3, r3
 8000cd4:	4619      	mov	r1, r3
 8000cd6:	2003      	movs	r0, #3
 8000cd8:	f7ff ff26 	bl	8000b28 <setSpeed>
		}
	}
 8000cdc:	bf00      	nop
 8000cde:	3708      	adds	r7, #8
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	bd80      	pop	{r7, pc}
 8000ce4:	40010800 	.word	0x40010800

08000ce8 <motorStop>:

	void motorStop()
	{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	af00      	add	r7, sp, #0
		motor1Rotates(0);
 8000cec:	2000      	movs	r0, #0
 8000cee:	f7ff ff57 	bl	8000ba0 <motor1Rotates>
		motor2Rotates(0);
 8000cf2:	2000      	movs	r0, #0
 8000cf4:	f7ff ff7e 	bl	8000bf4 <motor2Rotates>
		motor3Rotates(0);
 8000cf8:	2000      	movs	r0, #0
 8000cfa:	f7ff ffa5 	bl	8000c48 <motor3Rotates>
		motor4Rotates(0);
 8000cfe:	2000      	movs	r0, #0
 8000d00:	f7ff ffca 	bl	8000c98 <motor4Rotates>
	}
 8000d04:	bf00      	nop
 8000d06:	bd80      	pop	{r7, pc}

08000d08 <moveForward>:
	//           backLeft    |  backRight
	//                  backwards
	//

	void moveForward(const int speed)
	{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b082      	sub	sp, #8
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	6078      	str	r0, [r7, #4]
		motor1Rotates(speed);
 8000d10:	6878      	ldr	r0, [r7, #4]
 8000d12:	f7ff ff45 	bl	8000ba0 <motor1Rotates>
		motor2Rotates(speed);
 8000d16:	6878      	ldr	r0, [r7, #4]
 8000d18:	f7ff ff6c 	bl	8000bf4 <motor2Rotates>
		motor3Rotates(speed);
 8000d1c:	6878      	ldr	r0, [r7, #4]
 8000d1e:	f7ff ff93 	bl	8000c48 <motor3Rotates>
		motor4Rotates(speed);
 8000d22:	6878      	ldr	r0, [r7, #4]
 8000d24:	f7ff ffb8 	bl	8000c98 <motor4Rotates>
	}
 8000d28:	bf00      	nop
 8000d2a:	3708      	adds	r7, #8
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	bd80      	pop	{r7, pc}

08000d30 <moveBackward>:
	void moveBackward(const int speed)
	{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b082      	sub	sp, #8
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	6078      	str	r0, [r7, #4]
		motor1Rotates(-speed);
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	425b      	negs	r3, r3
 8000d3c:	4618      	mov	r0, r3
 8000d3e:	f7ff ff2f 	bl	8000ba0 <motor1Rotates>
		motor2Rotates(-speed);
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	425b      	negs	r3, r3
 8000d46:	4618      	mov	r0, r3
 8000d48:	f7ff ff54 	bl	8000bf4 <motor2Rotates>
		motor3Rotates(-speed);
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	425b      	negs	r3, r3
 8000d50:	4618      	mov	r0, r3
 8000d52:	f7ff ff79 	bl	8000c48 <motor3Rotates>
		motor4Rotates(-speed);
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	425b      	negs	r3, r3
 8000d5a:	4618      	mov	r0, r3
 8000d5c:	f7ff ff9c 	bl	8000c98 <motor4Rotates>
	}
 8000d60:	bf00      	nop
 8000d62:	3708      	adds	r7, #8
 8000d64:	46bd      	mov	sp, r7
 8000d66:	bd80      	pop	{r7, pc}

08000d68 <moveLeft>:
	void moveLeft(const int speed)
	{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b082      	sub	sp, #8
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	6078      	str	r0, [r7, #4]
		motor1Rotates(-speed);
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	425b      	negs	r3, r3
 8000d74:	4618      	mov	r0, r3
 8000d76:	f7ff ff13 	bl	8000ba0 <motor1Rotates>
		motor2Rotates(speed);
 8000d7a:	6878      	ldr	r0, [r7, #4]
 8000d7c:	f7ff ff3a 	bl	8000bf4 <motor2Rotates>
		motor3Rotates(speed);
 8000d80:	6878      	ldr	r0, [r7, #4]
 8000d82:	f7ff ff61 	bl	8000c48 <motor3Rotates>
		motor4Rotates(-speed);
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	425b      	negs	r3, r3
 8000d8a:	4618      	mov	r0, r3
 8000d8c:	f7ff ff84 	bl	8000c98 <motor4Rotates>
	}
 8000d90:	bf00      	nop
 8000d92:	3708      	adds	r7, #8
 8000d94:	46bd      	mov	sp, r7
 8000d96:	bd80      	pop	{r7, pc}

08000d98 <moveRight>:
	void moveRight(const int speed)
	{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b082      	sub	sp, #8
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	6078      	str	r0, [r7, #4]
		motor1Rotates(speed);
 8000da0:	6878      	ldr	r0, [r7, #4]
 8000da2:	f7ff fefd 	bl	8000ba0 <motor1Rotates>
		motor2Rotates(-speed);
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	425b      	negs	r3, r3
 8000daa:	4618      	mov	r0, r3
 8000dac:	f7ff ff22 	bl	8000bf4 <motor2Rotates>
		motor3Rotates(-speed);
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	425b      	negs	r3, r3
 8000db4:	4618      	mov	r0, r3
 8000db6:	f7ff ff47 	bl	8000c48 <motor3Rotates>
		motor4Rotates(speed);
 8000dba:	6878      	ldr	r0, [r7, #4]
 8000dbc:	f7ff ff6c 	bl	8000c98 <motor4Rotates>
	}
 8000dc0:	bf00      	nop
 8000dc2:	3708      	adds	r7, #8
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	bd80      	pop	{r7, pc}

08000dc8 <moveFrontLeft>:

	void moveFrontLeft(const int speed)
	{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b082      	sub	sp, #8
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	6078      	str	r0, [r7, #4]
		motor1Rotates(0);
 8000dd0:	2000      	movs	r0, #0
 8000dd2:	f7ff fee5 	bl	8000ba0 <motor1Rotates>
		motor2Rotates(speed);
 8000dd6:	6878      	ldr	r0, [r7, #4]
 8000dd8:	f7ff ff0c 	bl	8000bf4 <motor2Rotates>
		motor3Rotates(speed);
 8000ddc:	6878      	ldr	r0, [r7, #4]
 8000dde:	f7ff ff33 	bl	8000c48 <motor3Rotates>
		motor4Rotates(0);
 8000de2:	2000      	movs	r0, #0
 8000de4:	f7ff ff58 	bl	8000c98 <motor4Rotates>
	}
 8000de8:	bf00      	nop
 8000dea:	3708      	adds	r7, #8
 8000dec:	46bd      	mov	sp, r7
 8000dee:	bd80      	pop	{r7, pc}

08000df0 <moveFrontRight>:

	void moveFrontRight(const int speed)
	{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b082      	sub	sp, #8
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	6078      	str	r0, [r7, #4]
		motor1Rotates(speed);
 8000df8:	6878      	ldr	r0, [r7, #4]
 8000dfa:	f7ff fed1 	bl	8000ba0 <motor1Rotates>
		motor2Rotates(0);
 8000dfe:	2000      	movs	r0, #0
 8000e00:	f7ff fef8 	bl	8000bf4 <motor2Rotates>
		motor3Rotates(0);
 8000e04:	2000      	movs	r0, #0
 8000e06:	f7ff ff1f 	bl	8000c48 <motor3Rotates>
		motor4Rotates(speed);
 8000e0a:	6878      	ldr	r0, [r7, #4]
 8000e0c:	f7ff ff44 	bl	8000c98 <motor4Rotates>
	}
 8000e10:	bf00      	nop
 8000e12:	3708      	adds	r7, #8
 8000e14:	46bd      	mov	sp, r7
 8000e16:	bd80      	pop	{r7, pc}

08000e18 <moveBackLeft>:

	void moveBackLeft(const int speed)
	{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b082      	sub	sp, #8
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	6078      	str	r0, [r7, #4]
		motor1Rotates(-speed);
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	425b      	negs	r3, r3
 8000e24:	4618      	mov	r0, r3
 8000e26:	f7ff febb 	bl	8000ba0 <motor1Rotates>
		motor2Rotates(0);
 8000e2a:	2000      	movs	r0, #0
 8000e2c:	f7ff fee2 	bl	8000bf4 <motor2Rotates>
		motor3Rotates(0);
 8000e30:	2000      	movs	r0, #0
 8000e32:	f7ff ff09 	bl	8000c48 <motor3Rotates>
		motor4Rotates(-speed);
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	425b      	negs	r3, r3
 8000e3a:	4618      	mov	r0, r3
 8000e3c:	f7ff ff2c 	bl	8000c98 <motor4Rotates>
	}
 8000e40:	bf00      	nop
 8000e42:	3708      	adds	r7, #8
 8000e44:	46bd      	mov	sp, r7
 8000e46:	bd80      	pop	{r7, pc}

08000e48 <moveBackRight>:

	void moveBackRight(const int speed)
	{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b082      	sub	sp, #8
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	6078      	str	r0, [r7, #4]
		motor1Rotates(0);
 8000e50:	2000      	movs	r0, #0
 8000e52:	f7ff fea5 	bl	8000ba0 <motor1Rotates>
		motor2Rotates(-speed);
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	425b      	negs	r3, r3
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	f7ff feca 	bl	8000bf4 <motor2Rotates>
		motor3Rotates(-speed);
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	425b      	negs	r3, r3
 8000e64:	4618      	mov	r0, r3
 8000e66:	f7ff feef 	bl	8000c48 <motor3Rotates>
		motor4Rotates(0);
 8000e6a:	2000      	movs	r0, #0
 8000e6c:	f7ff ff14 	bl	8000c98 <motor4Rotates>
	}
 8000e70:	bf00      	nop
 8000e72:	3708      	adds	r7, #8
 8000e74:	46bd      	mov	sp, r7
 8000e76:	bd80      	pop	{r7, pc}

08000e78 <rotateLeft>:

	void rotateLeft(const int speed)
	{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b082      	sub	sp, #8
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	6078      	str	r0, [r7, #4]
		motor1Rotates(-speed);
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	425b      	negs	r3, r3
 8000e84:	4618      	mov	r0, r3
 8000e86:	f7ff fe8b 	bl	8000ba0 <motor1Rotates>
		motor2Rotates(-speed);
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	425b      	negs	r3, r3
 8000e8e:	4618      	mov	r0, r3
 8000e90:	f7ff feb0 	bl	8000bf4 <motor2Rotates>
		motor3Rotates(speed);
 8000e94:	6878      	ldr	r0, [r7, #4]
 8000e96:	f7ff fed7 	bl	8000c48 <motor3Rotates>
		motor4Rotates(speed);
 8000e9a:	6878      	ldr	r0, [r7, #4]
 8000e9c:	f7ff fefc 	bl	8000c98 <motor4Rotates>
	}
 8000ea0:	bf00      	nop
 8000ea2:	3708      	adds	r7, #8
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	bd80      	pop	{r7, pc}

08000ea8 <rotateRight>:

	void rotateRight(const int speed)
	{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b082      	sub	sp, #8
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]
		motor1Rotates(speed);
 8000eb0:	6878      	ldr	r0, [r7, #4]
 8000eb2:	f7ff fe75 	bl	8000ba0 <motor1Rotates>
		motor2Rotates(speed);
 8000eb6:	6878      	ldr	r0, [r7, #4]
 8000eb8:	f7ff fe9c 	bl	8000bf4 <motor2Rotates>
		motor3Rotates(-speed);
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	425b      	negs	r3, r3
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	f7ff fec1 	bl	8000c48 <motor3Rotates>
		motor4Rotates(-speed);
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	425b      	negs	r3, r3
 8000eca:	4618      	mov	r0, r3
 8000ecc:	f7ff fee4 	bl	8000c98 <motor4Rotates>
	}
 8000ed0:	bf00      	nop
 8000ed2:	3708      	adds	r7, #8
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	bd80      	pop	{r7, pc}

08000ed8 <moveDirection>:

	void moveDirection(const enum Direction direction, const int speed)
	{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b082      	sub	sp, #8
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	4603      	mov	r3, r0
 8000ee0:	6039      	str	r1, [r7, #0]
 8000ee2:	71fb      	strb	r3, [r7, #7]
		switch (direction)
 8000ee4:	79fb      	ldrb	r3, [r7, #7]
 8000ee6:	2b0a      	cmp	r3, #10
 8000ee8:	d843      	bhi.n	8000f72 <moveDirection+0x9a>
 8000eea:	a201      	add	r2, pc, #4	@ (adr r2, 8000ef0 <moveDirection+0x18>)
 8000eec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ef0:	08000f1d 	.word	0x08000f1d
 8000ef4:	08000f23 	.word	0x08000f23
 8000ef8:	08000f2b 	.word	0x08000f2b
 8000efc:	08000f33 	.word	0x08000f33
 8000f00:	08000f3b 	.word	0x08000f3b
 8000f04:	08000f43 	.word	0x08000f43
 8000f08:	08000f4b 	.word	0x08000f4b
 8000f0c:	08000f53 	.word	0x08000f53
 8000f10:	08000f5b 	.word	0x08000f5b
 8000f14:	08000f63 	.word	0x08000f63
 8000f18:	08000f6b 	.word	0x08000f6b
		{
		case STOP:
		{
			motorStop();
 8000f1c:	f7ff fee4 	bl	8000ce8 <motorStop>
			break;
 8000f20:	e027      	b.n	8000f72 <moveDirection+0x9a>
		}
		case FORWARD:
		{
			moveForward(speed);
 8000f22:	6838      	ldr	r0, [r7, #0]
 8000f24:	f7ff fef0 	bl	8000d08 <moveForward>
			break;
 8000f28:	e023      	b.n	8000f72 <moveDirection+0x9a>
		}
		case BACKWARD:
		{
			moveBackward(speed);
 8000f2a:	6838      	ldr	r0, [r7, #0]
 8000f2c:	f7ff ff00 	bl	8000d30 <moveBackward>
			break;
 8000f30:	e01f      	b.n	8000f72 <moveDirection+0x9a>
		}
		case LEFT:
		{
			moveLeft(speed);
 8000f32:	6838      	ldr	r0, [r7, #0]
 8000f34:	f7ff ff18 	bl	8000d68 <moveLeft>
			break;
 8000f38:	e01b      	b.n	8000f72 <moveDirection+0x9a>
		}
		case RIGHT:
		{
			moveRight(speed);
 8000f3a:	6838      	ldr	r0, [r7, #0]
 8000f3c:	f7ff ff2c 	bl	8000d98 <moveRight>
			break;
 8000f40:	e017      	b.n	8000f72 <moveDirection+0x9a>
		}
		case FRONT_LEFT:
		{
			moveFrontLeft(speed);
 8000f42:	6838      	ldr	r0, [r7, #0]
 8000f44:	f7ff ff40 	bl	8000dc8 <moveFrontLeft>
			break;
 8000f48:	e013      	b.n	8000f72 <moveDirection+0x9a>
		}
		case FRONT_RIGHT:
		{
			moveFrontRight(speed);
 8000f4a:	6838      	ldr	r0, [r7, #0]
 8000f4c:	f7ff ff50 	bl	8000df0 <moveFrontRight>
			break;
 8000f50:	e00f      	b.n	8000f72 <moveDirection+0x9a>
		}
		case BACK_LEFT:
		{
			moveBackLeft(speed);
 8000f52:	6838      	ldr	r0, [r7, #0]
 8000f54:	f7ff ff60 	bl	8000e18 <moveBackLeft>
			break;
 8000f58:	e00b      	b.n	8000f72 <moveDirection+0x9a>
		}
		case BACK_RIGHT:
		{
			moveBackRight(speed);
 8000f5a:	6838      	ldr	r0, [r7, #0]
 8000f5c:	f7ff ff74 	bl	8000e48 <moveBackRight>
			break;
 8000f60:	e007      	b.n	8000f72 <moveDirection+0x9a>
		}
		case ROTATE_LEFT:
		{
			rotateLeft(speed);
 8000f62:	6838      	ldr	r0, [r7, #0]
 8000f64:	f7ff ff88 	bl	8000e78 <rotateLeft>
			break;
 8000f68:	e003      	b.n	8000f72 <moveDirection+0x9a>
		}
		case ROTATE_RIGHT:
		{
			rotateRight(speed);
 8000f6a:	6838      	ldr	r0, [r7, #0]
 8000f6c:	f7ff ff9c 	bl	8000ea8 <rotateRight>
			break;
 8000f70:	bf00      	nop
		}
		}
	}
 8000f72:	bf00      	nop
 8000f74:	3708      	adds	r7, #8
 8000f76:	46bd      	mov	sp, r7
 8000f78:	bd80      	pop	{r7, pc}
 8000f7a:	bf00      	nop

08000f7c <initServo>:
	 * SERVO1: TIM_CHANNEL_3
	 * SERVO2: TIM_CHANNEL_2
	 * SERVO3: TIM_CHANNEL_1
	 */
	void initServo(const enum Servo servo_id)
	{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b082      	sub	sp, #8
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	4603      	mov	r3, r0
 8000f84:	71fb      	strb	r3, [r7, #7]
		HAL_TIM_PWM_Start(&htim4, servo_channel[servo_id]);
 8000f86:	79fb      	ldrb	r3, [r7, #7]
 8000f88:	4a05      	ldr	r2, [pc, #20]	@ (8000fa0 <initServo+0x24>)
 8000f8a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f8e:	4619      	mov	r1, r3
 8000f90:	4804      	ldr	r0, [pc, #16]	@ (8000fa4 <initServo+0x28>)
 8000f92:	f003 fa71 	bl	8004478 <HAL_TIM_PWM_Start>
	}
 8000f96:	bf00      	nop
 8000f98:	3708      	adds	r7, #8
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	bd80      	pop	{r7, pc}
 8000f9e:	bf00      	nop
 8000fa0:	08005f04 	.word	0x08005f04
 8000fa4:	200001e4 	.word	0x200001e4

08000fa8 <servoSetAngle>:
	 * SERVO1: TIM_CHANNEL_3
	 * SERVO2: TIM_CHANNEL_2
	 * SERVO3: TIM_CHANNEL_1
	 */
	void servoSetAngle(const enum Servo servo_id, uint16_t angle)
	{
 8000fa8:	b480      	push	{r7}
 8000faa:	b085      	sub	sp, #20
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	4603      	mov	r3, r0
 8000fb0:	460a      	mov	r2, r1
 8000fb2:	71fb      	strb	r3, [r7, #7]
 8000fb4:	4613      	mov	r3, r2
 8000fb6:	80bb      	strh	r3, [r7, #4]
		if (angle < 0)
		{
			angle = 0;
		}
		else if (angle > 180)
 8000fb8:	88bb      	ldrh	r3, [r7, #4]
 8000fba:	2bb4      	cmp	r3, #180	@ 0xb4
 8000fbc:	d901      	bls.n	8000fc2 <servoSetAngle+0x1a>
		{
			angle = 180;
 8000fbe:	23b4      	movs	r3, #180	@ 0xb4
 8000fc0:	80bb      	strh	r3, [r7, #4]
		}

		uint16_t duty_cycle = (angle * 110) / 180 + 20;
 8000fc2:	88bb      	ldrh	r3, [r7, #4]
 8000fc4:	226e      	movs	r2, #110	@ 0x6e
 8000fc6:	fb02 f303 	mul.w	r3, r2, r3
 8000fca:	4a1a      	ldr	r2, [pc, #104]	@ (8001034 <servoSetAngle+0x8c>)
 8000fcc:	fb82 1203 	smull	r1, r2, r2, r3
 8000fd0:	441a      	add	r2, r3
 8000fd2:	11d2      	asrs	r2, r2, #7
 8000fd4:	17db      	asrs	r3, r3, #31
 8000fd6:	1ad3      	subs	r3, r2, r3
 8000fd8:	b29b      	uxth	r3, r3
 8000fda:	3314      	adds	r3, #20
 8000fdc:	81fb      	strh	r3, [r7, #14]
		__HAL_TIM_SET_COMPARE(&htim4, servo_channel[servo_id], duty_cycle);
 8000fde:	79fb      	ldrb	r3, [r7, #7]
 8000fe0:	4a15      	ldr	r2, [pc, #84]	@ (8001038 <servoSetAngle+0x90>)
 8000fe2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d104      	bne.n	8000ff4 <servoSetAngle+0x4c>
 8000fea:	4b14      	ldr	r3, [pc, #80]	@ (800103c <servoSetAngle+0x94>)
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	89fa      	ldrh	r2, [r7, #14]
 8000ff0:	635a      	str	r2, [r3, #52]	@ 0x34
	}
 8000ff2:	e019      	b.n	8001028 <servoSetAngle+0x80>
		__HAL_TIM_SET_COMPARE(&htim4, servo_channel[servo_id], duty_cycle);
 8000ff4:	79fb      	ldrb	r3, [r7, #7]
 8000ff6:	4a10      	ldr	r2, [pc, #64]	@ (8001038 <servoSetAngle+0x90>)
 8000ff8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ffc:	2b04      	cmp	r3, #4
 8000ffe:	d104      	bne.n	800100a <servoSetAngle+0x62>
 8001000:	4b0e      	ldr	r3, [pc, #56]	@ (800103c <servoSetAngle+0x94>)
 8001002:	681a      	ldr	r2, [r3, #0]
 8001004:	89fb      	ldrh	r3, [r7, #14]
 8001006:	6393      	str	r3, [r2, #56]	@ 0x38
	}
 8001008:	e00e      	b.n	8001028 <servoSetAngle+0x80>
		__HAL_TIM_SET_COMPARE(&htim4, servo_channel[servo_id], duty_cycle);
 800100a:	79fb      	ldrb	r3, [r7, #7]
 800100c:	4a0a      	ldr	r2, [pc, #40]	@ (8001038 <servoSetAngle+0x90>)
 800100e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001012:	2b08      	cmp	r3, #8
 8001014:	d104      	bne.n	8001020 <servoSetAngle+0x78>
 8001016:	4b09      	ldr	r3, [pc, #36]	@ (800103c <servoSetAngle+0x94>)
 8001018:	681a      	ldr	r2, [r3, #0]
 800101a:	89fb      	ldrh	r3, [r7, #14]
 800101c:	63d3      	str	r3, [r2, #60]	@ 0x3c
	}
 800101e:	e003      	b.n	8001028 <servoSetAngle+0x80>
		__HAL_TIM_SET_COMPARE(&htim4, servo_channel[servo_id], duty_cycle);
 8001020:	4b06      	ldr	r3, [pc, #24]	@ (800103c <servoSetAngle+0x94>)
 8001022:	681a      	ldr	r2, [r3, #0]
 8001024:	89fb      	ldrh	r3, [r7, #14]
 8001026:	6413      	str	r3, [r2, #64]	@ 0x40
	}
 8001028:	bf00      	nop
 800102a:	3714      	adds	r7, #20
 800102c:	46bd      	mov	sp, r7
 800102e:	bc80      	pop	{r7}
 8001030:	4770      	bx	lr
 8001032:	bf00      	nop
 8001034:	b60b60b7 	.word	0xb60b60b7
 8001038:	08005f04 	.word	0x08005f04
 800103c:	200001e4 	.word	0x200001e4

08001040 <initTimer2>:

	/**
	 * @brief	init timer function
	 */
	void initTimer2()
	{
 8001040:	b580      	push	{r7, lr}
 8001042:	af00      	add	r7, sp, #0
		HAL_TIM_Base_Start_IT(&htim2);
 8001044:	4802      	ldr	r0, [pc, #8]	@ (8001050 <initTimer2+0x10>)
 8001046:	f003 f967 	bl	8004318 <HAL_TIM_Base_Start_IT>
	}
 800104a:	bf00      	nop
 800104c:	bd80      	pop	{r7, pc}
 800104e:	bf00      	nop
 8001050:	20000154 	.word	0x20000154

08001054 <sTimer2Set>:
	 * @brief	set timer duration(ms)
	 * @param	delay(ms)
	 * @param	period(ms)
	 */
	void sTimer2Set(uint16_t delay, uint16_t period)
	{
 8001054:	b480      	push	{r7}
 8001056:	b083      	sub	sp, #12
 8001058:	af00      	add	r7, sp, #0
 800105a:	4603      	mov	r3, r0
 800105c:	460a      	mov	r2, r1
 800105e:	80fb      	strh	r3, [r7, #6]
 8001060:	4613      	mov	r3, r2
 8001062:	80bb      	strh	r3, [r7, #4]
		timer_2_mul = period / TIMER_2_CYCLES;
 8001064:	4a06      	ldr	r2, [pc, #24]	@ (8001080 <sTimer2Set+0x2c>)
 8001066:	88bb      	ldrh	r3, [r7, #4]
 8001068:	8013      	strh	r3, [r2, #0]
		timer_2_counter = delay / TIMER_2_CYCLES;
 800106a:	4a06      	ldr	r2, [pc, #24]	@ (8001084 <sTimer2Set+0x30>)
 800106c:	88fb      	ldrh	r3, [r7, #6]
 800106e:	8013      	strh	r3, [r2, #0]
		timer_2_flag = 0;
 8001070:	4b05      	ldr	r3, [pc, #20]	@ (8001088 <sTimer2Set+0x34>)
 8001072:	2200      	movs	r2, #0
 8001074:	701a      	strb	r2, [r3, #0]
	}
 8001076:	bf00      	nop
 8001078:	370c      	adds	r7, #12
 800107a:	46bd      	mov	sp, r7
 800107c:	bc80      	pop	{r7}
 800107e:	4770      	bx	lr
 8001080:	200000f4 	.word	0x200000f4
 8001084:	200000f2 	.word	0x200000f2
 8001088:	200000f1 	.word	0x200000f1

0800108c <sTimer2GetFlag>:
	/**
	 * @brief	get flag timer fuction and auto reset flags and timer counter
	 * @return	timer flag
	 */
	uint8_t sTimer2GetFlag()
	{
 800108c:	b480      	push	{r7}
 800108e:	af00      	add	r7, sp, #0
		if (timer_2_flag)
 8001090:	4b08      	ldr	r3, [pc, #32]	@ (80010b4 <sTimer2GetFlag+0x28>)
 8001092:	781b      	ldrb	r3, [r3, #0]
 8001094:	2b00      	cmp	r3, #0
 8001096:	d008      	beq.n	80010aa <sTimer2GetFlag+0x1e>
		{
			timer_2_flag = 0;
 8001098:	4b06      	ldr	r3, [pc, #24]	@ (80010b4 <sTimer2GetFlag+0x28>)
 800109a:	2200      	movs	r2, #0
 800109c:	701a      	strb	r2, [r3, #0]
			timer_2_counter = timer_2_mul;
 800109e:	4b06      	ldr	r3, [pc, #24]	@ (80010b8 <sTimer2GetFlag+0x2c>)
 80010a0:	881a      	ldrh	r2, [r3, #0]
 80010a2:	4b06      	ldr	r3, [pc, #24]	@ (80010bc <sTimer2GetFlag+0x30>)
 80010a4:	801a      	strh	r2, [r3, #0]
			return 1;
 80010a6:	2301      	movs	r3, #1
 80010a8:	e000      	b.n	80010ac <sTimer2GetFlag+0x20>
		}
		return 0;
 80010aa:	2300      	movs	r3, #0
	}
 80010ac:	4618      	mov	r0, r3
 80010ae:	46bd      	mov	sp, r7
 80010b0:	bc80      	pop	{r7}
 80010b2:	4770      	bx	lr
 80010b4:	200000f1 	.word	0x200000f1
 80010b8:	200000f4 	.word	0x200000f4
 80010bc:	200000f2 	.word	0x200000f2

080010c0 <HAL_TIM_PeriodElapsedCallback>:

	/**
	 * @brief	callback function call every 1ms
	 */
	void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
	{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b082      	sub	sp, #8
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
		if (htim->Instance == TIM2)
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80010d0:	d110      	bne.n	80010f4 <HAL_TIM_PeriodElapsedCallback+0x34>
		{
			if (timer_2_counter > 0)
 80010d2:	4b0b      	ldr	r3, [pc, #44]	@ (8001100 <HAL_TIM_PeriodElapsedCallback+0x40>)
 80010d4:	881b      	ldrh	r3, [r3, #0]
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d005      	beq.n	80010e6 <HAL_TIM_PeriodElapsedCallback+0x26>
			{
				--timer_2_counter;
 80010da:	4b09      	ldr	r3, [pc, #36]	@ (8001100 <HAL_TIM_PeriodElapsedCallback+0x40>)
 80010dc:	881b      	ldrh	r3, [r3, #0]
 80010de:	3b01      	subs	r3, #1
 80010e0:	b29a      	uxth	r2, r3
 80010e2:	4b07      	ldr	r3, [pc, #28]	@ (8001100 <HAL_TIM_PeriodElapsedCallback+0x40>)
 80010e4:	801a      	strh	r2, [r3, #0]
			}
			if (timer_2_counter <= 0)
 80010e6:	4b06      	ldr	r3, [pc, #24]	@ (8001100 <HAL_TIM_PeriodElapsedCallback+0x40>)
 80010e8:	881b      	ldrh	r3, [r3, #0]
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d102      	bne.n	80010f4 <HAL_TIM_PeriodElapsedCallback+0x34>
			{
				timer_2_flag = 1;
 80010ee:	4b05      	ldr	r3, [pc, #20]	@ (8001104 <HAL_TIM_PeriodElapsedCallback+0x44>)
 80010f0:	2201      	movs	r2, #1
 80010f2:	701a      	strb	r2, [r3, #0]
			}
		}

		displayScan();
 80010f4:	f7ff f960 	bl	80003b8 <displayScan>
	}
 80010f8:	bf00      	nop
 80010fa:	3708      	adds	r7, #8
 80010fc:	46bd      	mov	sp, r7
 80010fe:	bd80      	pop	{r7, pc}
 8001100:	200000f2 	.word	0x200000f2
 8001104:	200000f1 	.word	0x200000f1

08001108 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 800110c:	4b17      	ldr	r3, [pc, #92]	@ (800116c <MX_SPI1_Init+0x64>)
 800110e:	4a18      	ldr	r2, [pc, #96]	@ (8001170 <MX_SPI1_Init+0x68>)
 8001110:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001112:	4b16      	ldr	r3, [pc, #88]	@ (800116c <MX_SPI1_Init+0x64>)
 8001114:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001118:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800111a:	4b14      	ldr	r3, [pc, #80]	@ (800116c <MX_SPI1_Init+0x64>)
 800111c:	2200      	movs	r2, #0
 800111e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001120:	4b12      	ldr	r3, [pc, #72]	@ (800116c <MX_SPI1_Init+0x64>)
 8001122:	2200      	movs	r2, #0
 8001124:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001126:	4b11      	ldr	r3, [pc, #68]	@ (800116c <MX_SPI1_Init+0x64>)
 8001128:	2200      	movs	r2, #0
 800112a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800112c:	4b0f      	ldr	r3, [pc, #60]	@ (800116c <MX_SPI1_Init+0x64>)
 800112e:	2200      	movs	r2, #0
 8001130:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8001132:	4b0e      	ldr	r3, [pc, #56]	@ (800116c <MX_SPI1_Init+0x64>)
 8001134:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8001138:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 800113a:	4b0c      	ldr	r3, [pc, #48]	@ (800116c <MX_SPI1_Init+0x64>)
 800113c:	2208      	movs	r2, #8
 800113e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001140:	4b0a      	ldr	r3, [pc, #40]	@ (800116c <MX_SPI1_Init+0x64>)
 8001142:	2200      	movs	r2, #0
 8001144:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001146:	4b09      	ldr	r3, [pc, #36]	@ (800116c <MX_SPI1_Init+0x64>)
 8001148:	2200      	movs	r2, #0
 800114a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800114c:	4b07      	ldr	r3, [pc, #28]	@ (800116c <MX_SPI1_Init+0x64>)
 800114e:	2200      	movs	r2, #0
 8001150:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001152:	4b06      	ldr	r3, [pc, #24]	@ (800116c <MX_SPI1_Init+0x64>)
 8001154:	220a      	movs	r2, #10
 8001156:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001158:	4804      	ldr	r0, [pc, #16]	@ (800116c <MX_SPI1_Init+0x64>)
 800115a:	f002 fe1f 	bl	8003d9c <HAL_SPI_Init>
 800115e:	4603      	mov	r3, r0
 8001160:	2b00      	cmp	r3, #0
 8001162:	d001      	beq.n	8001168 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001164:	f7ff fcc4 	bl	8000af0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001168:	bf00      	nop
 800116a:	bd80      	pop	{r7, pc}
 800116c:	200000f8 	.word	0x200000f8
 8001170:	40013000 	.word	0x40013000

08001174 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b088      	sub	sp, #32
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800117c:	f107 0310 	add.w	r3, r7, #16
 8001180:	2200      	movs	r2, #0
 8001182:	601a      	str	r2, [r3, #0]
 8001184:	605a      	str	r2, [r3, #4]
 8001186:	609a      	str	r2, [r3, #8]
 8001188:	60da      	str	r2, [r3, #12]
  if(spiHandle->Instance==SPI1)
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	4a1b      	ldr	r2, [pc, #108]	@ (80011fc <HAL_SPI_MspInit+0x88>)
 8001190:	4293      	cmp	r3, r2
 8001192:	d12f      	bne.n	80011f4 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001194:	4b1a      	ldr	r3, [pc, #104]	@ (8001200 <HAL_SPI_MspInit+0x8c>)
 8001196:	699b      	ldr	r3, [r3, #24]
 8001198:	4a19      	ldr	r2, [pc, #100]	@ (8001200 <HAL_SPI_MspInit+0x8c>)
 800119a:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800119e:	6193      	str	r3, [r2, #24]
 80011a0:	4b17      	ldr	r3, [pc, #92]	@ (8001200 <HAL_SPI_MspInit+0x8c>)
 80011a2:	699b      	ldr	r3, [r3, #24]
 80011a4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80011a8:	60fb      	str	r3, [r7, #12]
 80011aa:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011ac:	4b14      	ldr	r3, [pc, #80]	@ (8001200 <HAL_SPI_MspInit+0x8c>)
 80011ae:	699b      	ldr	r3, [r3, #24]
 80011b0:	4a13      	ldr	r2, [pc, #76]	@ (8001200 <HAL_SPI_MspInit+0x8c>)
 80011b2:	f043 0304 	orr.w	r3, r3, #4
 80011b6:	6193      	str	r3, [r2, #24]
 80011b8:	4b11      	ldr	r3, [pc, #68]	@ (8001200 <HAL_SPI_MspInit+0x8c>)
 80011ba:	699b      	ldr	r3, [r3, #24]
 80011bc:	f003 0304 	and.w	r3, r3, #4
 80011c0:	60bb      	str	r3, [r7, #8]
 80011c2:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7;
 80011c4:	23b0      	movs	r3, #176	@ 0xb0
 80011c6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011c8:	2302      	movs	r3, #2
 80011ca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80011cc:	2303      	movs	r3, #3
 80011ce:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011d0:	f107 0310 	add.w	r3, r7, #16
 80011d4:	4619      	mov	r1, r3
 80011d6:	480b      	ldr	r0, [pc, #44]	@ (8001204 <HAL_SPI_MspInit+0x90>)
 80011d8:	f001 ff54 	bl	8003084 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80011dc:	2340      	movs	r3, #64	@ 0x40
 80011de:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011e0:	2300      	movs	r3, #0
 80011e2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011e4:	2300      	movs	r3, #0
 80011e6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011e8:	f107 0310 	add.w	r3, r7, #16
 80011ec:	4619      	mov	r1, r3
 80011ee:	4805      	ldr	r0, [pc, #20]	@ (8001204 <HAL_SPI_MspInit+0x90>)
 80011f0:	f001 ff48 	bl	8003084 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80011f4:	bf00      	nop
 80011f6:	3720      	adds	r7, #32
 80011f8:	46bd      	mov	sp, r7
 80011fa:	bd80      	pop	{r7, pc}
 80011fc:	40013000 	.word	0x40013000
 8001200:	40021000 	.word	0x40021000
 8001204:	40010800 	.word	0x40010800

08001208 <HAL_TIM_PWM_PulseFinishedCallback>:
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, DUTY_CYCLE);
	HAL_TIM_PWM_Start_IT(&htim3, TIM_CHANNEL_1);
}

void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b082      	sub	sp, #8
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM3)
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	4a09      	ldr	r2, [pc, #36]	@ (800123c <HAL_TIM_PWM_PulseFinishedCallback+0x34>)
 8001216:	4293      	cmp	r3, r2
 8001218:	d10c      	bne.n	8001234 <HAL_TIM_PWM_PulseFinishedCallback+0x2c>
	{
		spr_counter--;
 800121a:	4b09      	ldr	r3, [pc, #36]	@ (8001240 <HAL_TIM_PWM_PulseFinishedCallback+0x38>)
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	3b01      	subs	r3, #1
 8001220:	4a07      	ldr	r2, [pc, #28]	@ (8001240 <HAL_TIM_PWM_PulseFinishedCallback+0x38>)
 8001222:	6013      	str	r3, [r2, #0]
		if (spr_counter <= 0)
 8001224:	4b06      	ldr	r3, [pc, #24]	@ (8001240 <HAL_TIM_PWM_PulseFinishedCallback+0x38>)
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	2b00      	cmp	r3, #0
 800122a:	d103      	bne.n	8001234 <HAL_TIM_PWM_PulseFinishedCallback+0x2c>
			HAL_TIM_PWM_Stop_IT(&htim3, TIM_CHANNEL_1);
 800122c:	2100      	movs	r1, #0
 800122e:	4805      	ldr	r0, [pc, #20]	@ (8001244 <HAL_TIM_PWM_PulseFinishedCallback+0x3c>)
 8001230:	f003 f9dc 	bl	80045ec <HAL_TIM_PWM_Stop_IT>
	}
}
 8001234:	bf00      	nop
 8001236:	3708      	adds	r7, #8
 8001238:	46bd      	mov	sp, r7
 800123a:	bd80      	pop	{r7, pc}
 800123c:	40000400 	.word	0x40000400
 8001240:	20000150 	.word	0x20000150
 8001244:	2000019c 	.word	0x2000019c

08001248 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001248:	b480      	push	{r7}
 800124a:	b085      	sub	sp, #20
 800124c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800124e:	4b15      	ldr	r3, [pc, #84]	@ (80012a4 <HAL_MspInit+0x5c>)
 8001250:	699b      	ldr	r3, [r3, #24]
 8001252:	4a14      	ldr	r2, [pc, #80]	@ (80012a4 <HAL_MspInit+0x5c>)
 8001254:	f043 0301 	orr.w	r3, r3, #1
 8001258:	6193      	str	r3, [r2, #24]
 800125a:	4b12      	ldr	r3, [pc, #72]	@ (80012a4 <HAL_MspInit+0x5c>)
 800125c:	699b      	ldr	r3, [r3, #24]
 800125e:	f003 0301 	and.w	r3, r3, #1
 8001262:	60bb      	str	r3, [r7, #8]
 8001264:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001266:	4b0f      	ldr	r3, [pc, #60]	@ (80012a4 <HAL_MspInit+0x5c>)
 8001268:	69db      	ldr	r3, [r3, #28]
 800126a:	4a0e      	ldr	r2, [pc, #56]	@ (80012a4 <HAL_MspInit+0x5c>)
 800126c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001270:	61d3      	str	r3, [r2, #28]
 8001272:	4b0c      	ldr	r3, [pc, #48]	@ (80012a4 <HAL_MspInit+0x5c>)
 8001274:	69db      	ldr	r3, [r3, #28]
 8001276:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800127a:	607b      	str	r3, [r7, #4]
 800127c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800127e:	4b0a      	ldr	r3, [pc, #40]	@ (80012a8 <HAL_MspInit+0x60>)
 8001280:	685b      	ldr	r3, [r3, #4]
 8001282:	60fb      	str	r3, [r7, #12]
 8001284:	68fb      	ldr	r3, [r7, #12]
 8001286:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800128a:	60fb      	str	r3, [r7, #12]
 800128c:	68fb      	ldr	r3, [r7, #12]
 800128e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001292:	60fb      	str	r3, [r7, #12]
 8001294:	4a04      	ldr	r2, [pc, #16]	@ (80012a8 <HAL_MspInit+0x60>)
 8001296:	68fb      	ldr	r3, [r7, #12]
 8001298:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800129a:	bf00      	nop
 800129c:	3714      	adds	r7, #20
 800129e:	46bd      	mov	sp, r7
 80012a0:	bc80      	pop	{r7}
 80012a2:	4770      	bx	lr
 80012a4:	40021000 	.word	0x40021000
 80012a8:	40010000 	.word	0x40010000

080012ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012ac:	b480      	push	{r7}
 80012ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80012b0:	bf00      	nop
 80012b2:	e7fd      	b.n	80012b0 <NMI_Handler+0x4>

080012b4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012b4:	b480      	push	{r7}
 80012b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012b8:	bf00      	nop
 80012ba:	e7fd      	b.n	80012b8 <HardFault_Handler+0x4>

080012bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012bc:	b480      	push	{r7}
 80012be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012c0:	bf00      	nop
 80012c2:	e7fd      	b.n	80012c0 <MemManage_Handler+0x4>

080012c4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012c4:	b480      	push	{r7}
 80012c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80012c8:	bf00      	nop
 80012ca:	e7fd      	b.n	80012c8 <BusFault_Handler+0x4>

080012cc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80012cc:	b480      	push	{r7}
 80012ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80012d0:	bf00      	nop
 80012d2:	e7fd      	b.n	80012d0 <UsageFault_Handler+0x4>

080012d4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80012d4:	b480      	push	{r7}
 80012d6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80012d8:	bf00      	nop
 80012da:	46bd      	mov	sp, r7
 80012dc:	bc80      	pop	{r7}
 80012de:	4770      	bx	lr

080012e0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80012e0:	b480      	push	{r7}
 80012e2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80012e4:	bf00      	nop
 80012e6:	46bd      	mov	sp, r7
 80012e8:	bc80      	pop	{r7}
 80012ea:	4770      	bx	lr

080012ec <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80012ec:	b480      	push	{r7}
 80012ee:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80012f0:	bf00      	nop
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bc80      	pop	{r7}
 80012f6:	4770      	bx	lr

080012f8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80012fc:	f000 fd36 	bl	8001d6c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001300:	bf00      	nop
 8001302:	bd80      	pop	{r7, pc}

08001304 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001308:	4802      	ldr	r0, [pc, #8]	@ (8001314 <DMA1_Channel1_IRQHandler+0x10>)
 800130a:	f001 fc51 	bl	8002bb0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800130e:	bf00      	nop
 8001310:	bd80      	pop	{r7, pc}
 8001312:	bf00      	nop
 8001314:	20000084 	.word	0x20000084

08001318 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800131c:	4802      	ldr	r0, [pc, #8]	@ (8001328 <TIM2_IRQHandler+0x10>)
 800131e:	f003 fa23 	bl	8004768 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001322:	bf00      	nop
 8001324:	bd80      	pop	{r7, pc}
 8001326:	bf00      	nop
 8001328:	20000154 	.word	0x20000154

0800132c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001330:	4802      	ldr	r0, [pc, #8]	@ (800133c <TIM3_IRQHandler+0x10>)
 8001332:	f003 fa19 	bl	8004768 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001336:	bf00      	nop
 8001338:	bd80      	pop	{r7, pc}
 800133a:	bf00      	nop
 800133c:	2000019c 	.word	0x2000019c

08001340 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001344:	4802      	ldr	r0, [pc, #8]	@ (8001350 <TIM4_IRQHandler+0x10>)
 8001346:	f003 fa0f 	bl	8004768 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800134a:	bf00      	nop
 800134c:	bd80      	pop	{r7, pc}
 800134e:	bf00      	nop
 8001350:	200001e4 	.word	0x200001e4

08001354 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001358:	4802      	ldr	r0, [pc, #8]	@ (8001364 <USART1_IRQHandler+0x10>)
 800135a:	f004 f8b1 	bl	80054c0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800135e:	bf00      	nop
 8001360:	bd80      	pop	{r7, pc}
 8001362:	bf00      	nop
 8001364:	200002bc 	.word	0x200002bc

08001368 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800136c:	4802      	ldr	r0, [pc, #8]	@ (8001378 <USART2_IRQHandler+0x10>)
 800136e:	f004 f8a7 	bl	80054c0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001372:	bf00      	nop
 8001374:	bd80      	pop	{r7, pc}
 8001376:	bf00      	nop
 8001378:	20000304 	.word	0x20000304

0800137c <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8001380:	4802      	ldr	r0, [pc, #8]	@ (800138c <TIM5_IRQHandler+0x10>)
 8001382:	f003 f9f1 	bl	8004768 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8001386:	bf00      	nop
 8001388:	bd80      	pop	{r7, pc}
 800138a:	bf00      	nop
 800138c:	2000022c 	.word	0x2000022c

08001390 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001390:	b480      	push	{r7}
 8001392:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001394:	bf00      	nop
 8001396:	46bd      	mov	sp, r7
 8001398:	bc80      	pop	{r7}
 800139a:	4770      	bx	lr

0800139c <MX_TIM2_Init>:
TIM_HandleTypeDef htim5;
TIM_HandleTypeDef htim8;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	b086      	sub	sp, #24
 80013a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80013a2:	f107 0308 	add.w	r3, r7, #8
 80013a6:	2200      	movs	r2, #0
 80013a8:	601a      	str	r2, [r3, #0]
 80013aa:	605a      	str	r2, [r3, #4]
 80013ac:	609a      	str	r2, [r3, #8]
 80013ae:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013b0:	463b      	mov	r3, r7
 80013b2:	2200      	movs	r2, #0
 80013b4:	601a      	str	r2, [r3, #0]
 80013b6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80013b8:	4b1d      	ldr	r3, [pc, #116]	@ (8001430 <MX_TIM2_Init+0x94>)
 80013ba:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80013be:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 72-1;
 80013c0:	4b1b      	ldr	r3, [pc, #108]	@ (8001430 <MX_TIM2_Init+0x94>)
 80013c2:	2247      	movs	r2, #71	@ 0x47
 80013c4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013c6:	4b1a      	ldr	r3, [pc, #104]	@ (8001430 <MX_TIM2_Init+0x94>)
 80013c8:	2200      	movs	r2, #0
 80013ca:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 80013cc:	4b18      	ldr	r3, [pc, #96]	@ (8001430 <MX_TIM2_Init+0x94>)
 80013ce:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80013d2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013d4:	4b16      	ldr	r3, [pc, #88]	@ (8001430 <MX_TIM2_Init+0x94>)
 80013d6:	2200      	movs	r2, #0
 80013d8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013da:	4b15      	ldr	r3, [pc, #84]	@ (8001430 <MX_TIM2_Init+0x94>)
 80013dc:	2200      	movs	r2, #0
 80013de:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80013e0:	4813      	ldr	r0, [pc, #76]	@ (8001430 <MX_TIM2_Init+0x94>)
 80013e2:	f002 ff49 	bl	8004278 <HAL_TIM_Base_Init>
 80013e6:	4603      	mov	r3, r0
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d001      	beq.n	80013f0 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80013ec:	f7ff fb80 	bl	8000af0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80013f0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80013f4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80013f6:	f107 0308 	add.w	r3, r7, #8
 80013fa:	4619      	mov	r1, r3
 80013fc:	480c      	ldr	r0, [pc, #48]	@ (8001430 <MX_TIM2_Init+0x94>)
 80013fe:	f003 fb7d 	bl	8004afc <HAL_TIM_ConfigClockSource>
 8001402:	4603      	mov	r3, r0
 8001404:	2b00      	cmp	r3, #0
 8001406:	d001      	beq.n	800140c <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001408:	f7ff fb72 	bl	8000af0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800140c:	2300      	movs	r3, #0
 800140e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001410:	2300      	movs	r3, #0
 8001412:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001414:	463b      	mov	r3, r7
 8001416:	4619      	mov	r1, r3
 8001418:	4805      	ldr	r0, [pc, #20]	@ (8001430 <MX_TIM2_Init+0x94>)
 800141a:	f003 ff31 	bl	8005280 <HAL_TIMEx_MasterConfigSynchronization>
 800141e:	4603      	mov	r3, r0
 8001420:	2b00      	cmp	r3, #0
 8001422:	d001      	beq.n	8001428 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001424:	f7ff fb64 	bl	8000af0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001428:	bf00      	nop
 800142a:	3718      	adds	r7, #24
 800142c:	46bd      	mov	sp, r7
 800142e:	bd80      	pop	{r7, pc}
 8001430:	20000154 	.word	0x20000154

08001434 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	b08a      	sub	sp, #40	@ 0x28
 8001438:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800143a:	f107 0320 	add.w	r3, r7, #32
 800143e:	2200      	movs	r2, #0
 8001440:	601a      	str	r2, [r3, #0]
 8001442:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001444:	1d3b      	adds	r3, r7, #4
 8001446:	2200      	movs	r2, #0
 8001448:	601a      	str	r2, [r3, #0]
 800144a:	605a      	str	r2, [r3, #4]
 800144c:	609a      	str	r2, [r3, #8]
 800144e:	60da      	str	r2, [r3, #12]
 8001450:	611a      	str	r2, [r3, #16]
 8001452:	615a      	str	r2, [r3, #20]
 8001454:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001456:	4b22      	ldr	r3, [pc, #136]	@ (80014e0 <MX_TIM3_Init+0xac>)
 8001458:	4a22      	ldr	r2, [pc, #136]	@ (80014e4 <MX_TIM3_Init+0xb0>)
 800145a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 720-1;
 800145c:	4b20      	ldr	r3, [pc, #128]	@ (80014e0 <MX_TIM3_Init+0xac>)
 800145e:	f240 22cf 	movw	r2, #719	@ 0x2cf
 8001462:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001464:	4b1e      	ldr	r3, [pc, #120]	@ (80014e0 <MX_TIM3_Init+0xac>)
 8001466:	2200      	movs	r2, #0
 8001468:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100-1;
 800146a:	4b1d      	ldr	r3, [pc, #116]	@ (80014e0 <MX_TIM3_Init+0xac>)
 800146c:	2263      	movs	r2, #99	@ 0x63
 800146e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001470:	4b1b      	ldr	r3, [pc, #108]	@ (80014e0 <MX_TIM3_Init+0xac>)
 8001472:	2200      	movs	r2, #0
 8001474:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001476:	4b1a      	ldr	r3, [pc, #104]	@ (80014e0 <MX_TIM3_Init+0xac>)
 8001478:	2200      	movs	r2, #0
 800147a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800147c:	4818      	ldr	r0, [pc, #96]	@ (80014e0 <MX_TIM3_Init+0xac>)
 800147e:	f002 ffab 	bl	80043d8 <HAL_TIM_PWM_Init>
 8001482:	4603      	mov	r3, r0
 8001484:	2b00      	cmp	r3, #0
 8001486:	d001      	beq.n	800148c <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8001488:	f7ff fb32 	bl	8000af0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800148c:	2300      	movs	r3, #0
 800148e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001490:	2300      	movs	r3, #0
 8001492:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001494:	f107 0320 	add.w	r3, r7, #32
 8001498:	4619      	mov	r1, r3
 800149a:	4811      	ldr	r0, [pc, #68]	@ (80014e0 <MX_TIM3_Init+0xac>)
 800149c:	f003 fef0 	bl	8005280 <HAL_TIMEx_MasterConfigSynchronization>
 80014a0:	4603      	mov	r3, r0
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d001      	beq.n	80014aa <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 80014a6:	f7ff fb23 	bl	8000af0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80014aa:	2360      	movs	r3, #96	@ 0x60
 80014ac:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80014ae:	2300      	movs	r3, #0
 80014b0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80014b2:	2300      	movs	r3, #0
 80014b4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80014b6:	2300      	movs	r3, #0
 80014b8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80014ba:	1d3b      	adds	r3, r7, #4
 80014bc:	2200      	movs	r2, #0
 80014be:	4619      	mov	r1, r3
 80014c0:	4807      	ldr	r0, [pc, #28]	@ (80014e0 <MX_TIM3_Init+0xac>)
 80014c2:	f003 fa59 	bl	8004978 <HAL_TIM_PWM_ConfigChannel>
 80014c6:	4603      	mov	r3, r0
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d001      	beq.n	80014d0 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 80014cc:	f7ff fb10 	bl	8000af0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80014d0:	4803      	ldr	r0, [pc, #12]	@ (80014e0 <MX_TIM3_Init+0xac>)
 80014d2:	f000 fa4b 	bl	800196c <HAL_TIM_MspPostInit>

}
 80014d6:	bf00      	nop
 80014d8:	3728      	adds	r7, #40	@ 0x28
 80014da:	46bd      	mov	sp, r7
 80014dc:	bd80      	pop	{r7, pc}
 80014de:	bf00      	nop
 80014e0:	2000019c 	.word	0x2000019c
 80014e4:	40000400 	.word	0x40000400

080014e8 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b08e      	sub	sp, #56	@ 0x38
 80014ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80014ee:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80014f2:	2200      	movs	r2, #0
 80014f4:	601a      	str	r2, [r3, #0]
 80014f6:	605a      	str	r2, [r3, #4]
 80014f8:	609a      	str	r2, [r3, #8]
 80014fa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014fc:	f107 0320 	add.w	r3, r7, #32
 8001500:	2200      	movs	r2, #0
 8001502:	601a      	str	r2, [r3, #0]
 8001504:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001506:	1d3b      	adds	r3, r7, #4
 8001508:	2200      	movs	r2, #0
 800150a:	601a      	str	r2, [r3, #0]
 800150c:	605a      	str	r2, [r3, #4]
 800150e:	609a      	str	r2, [r3, #8]
 8001510:	60da      	str	r2, [r3, #12]
 8001512:	611a      	str	r2, [r3, #16]
 8001514:	615a      	str	r2, [r3, #20]
 8001516:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001518:	4b38      	ldr	r3, [pc, #224]	@ (80015fc <MX_TIM4_Init+0x114>)
 800151a:	4a39      	ldr	r2, [pc, #228]	@ (8001600 <MX_TIM4_Init+0x118>)
 800151c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 1440-1;
 800151e:	4b37      	ldr	r3, [pc, #220]	@ (80015fc <MX_TIM4_Init+0x114>)
 8001520:	f240 529f 	movw	r2, #1439	@ 0x59f
 8001524:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001526:	4b35      	ldr	r3, [pc, #212]	@ (80015fc <MX_TIM4_Init+0x114>)
 8001528:	2200      	movs	r2, #0
 800152a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1000-1;
 800152c:	4b33      	ldr	r3, [pc, #204]	@ (80015fc <MX_TIM4_Init+0x114>)
 800152e:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001532:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001534:	4b31      	ldr	r3, [pc, #196]	@ (80015fc <MX_TIM4_Init+0x114>)
 8001536:	2200      	movs	r2, #0
 8001538:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800153a:	4b30      	ldr	r3, [pc, #192]	@ (80015fc <MX_TIM4_Init+0x114>)
 800153c:	2200      	movs	r2, #0
 800153e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001540:	482e      	ldr	r0, [pc, #184]	@ (80015fc <MX_TIM4_Init+0x114>)
 8001542:	f002 fe99 	bl	8004278 <HAL_TIM_Base_Init>
 8001546:	4603      	mov	r3, r0
 8001548:	2b00      	cmp	r3, #0
 800154a:	d001      	beq.n	8001550 <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 800154c:	f7ff fad0 	bl	8000af0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001550:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001554:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001556:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800155a:	4619      	mov	r1, r3
 800155c:	4827      	ldr	r0, [pc, #156]	@ (80015fc <MX_TIM4_Init+0x114>)
 800155e:	f003 facd 	bl	8004afc <HAL_TIM_ConfigClockSource>
 8001562:	4603      	mov	r3, r0
 8001564:	2b00      	cmp	r3, #0
 8001566:	d001      	beq.n	800156c <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 8001568:	f7ff fac2 	bl	8000af0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 800156c:	4823      	ldr	r0, [pc, #140]	@ (80015fc <MX_TIM4_Init+0x114>)
 800156e:	f002 ff33 	bl	80043d8 <HAL_TIM_PWM_Init>
 8001572:	4603      	mov	r3, r0
 8001574:	2b00      	cmp	r3, #0
 8001576:	d001      	beq.n	800157c <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 8001578:	f7ff faba 	bl	8000af0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800157c:	2300      	movs	r3, #0
 800157e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001580:	2300      	movs	r3, #0
 8001582:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001584:	f107 0320 	add.w	r3, r7, #32
 8001588:	4619      	mov	r1, r3
 800158a:	481c      	ldr	r0, [pc, #112]	@ (80015fc <MX_TIM4_Init+0x114>)
 800158c:	f003 fe78 	bl	8005280 <HAL_TIMEx_MasterConfigSynchronization>
 8001590:	4603      	mov	r3, r0
 8001592:	2b00      	cmp	r3, #0
 8001594:	d001      	beq.n	800159a <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 8001596:	f7ff faab 	bl	8000af0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800159a:	2360      	movs	r3, #96	@ 0x60
 800159c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800159e:	2300      	movs	r3, #0
 80015a0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80015a2:	2300      	movs	r3, #0
 80015a4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80015a6:	2300      	movs	r3, #0
 80015a8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80015aa:	1d3b      	adds	r3, r7, #4
 80015ac:	2200      	movs	r2, #0
 80015ae:	4619      	mov	r1, r3
 80015b0:	4812      	ldr	r0, [pc, #72]	@ (80015fc <MX_TIM4_Init+0x114>)
 80015b2:	f003 f9e1 	bl	8004978 <HAL_TIM_PWM_ConfigChannel>
 80015b6:	4603      	mov	r3, r0
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d001      	beq.n	80015c0 <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 80015bc:	f7ff fa98 	bl	8000af0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80015c0:	1d3b      	adds	r3, r7, #4
 80015c2:	2204      	movs	r2, #4
 80015c4:	4619      	mov	r1, r3
 80015c6:	480d      	ldr	r0, [pc, #52]	@ (80015fc <MX_TIM4_Init+0x114>)
 80015c8:	f003 f9d6 	bl	8004978 <HAL_TIM_PWM_ConfigChannel>
 80015cc:	4603      	mov	r3, r0
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d001      	beq.n	80015d6 <MX_TIM4_Init+0xee>
  {
    Error_Handler();
 80015d2:	f7ff fa8d 	bl	8000af0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80015d6:	1d3b      	adds	r3, r7, #4
 80015d8:	2208      	movs	r2, #8
 80015da:	4619      	mov	r1, r3
 80015dc:	4807      	ldr	r0, [pc, #28]	@ (80015fc <MX_TIM4_Init+0x114>)
 80015de:	f003 f9cb 	bl	8004978 <HAL_TIM_PWM_ConfigChannel>
 80015e2:	4603      	mov	r3, r0
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d001      	beq.n	80015ec <MX_TIM4_Init+0x104>
  {
    Error_Handler();
 80015e8:	f7ff fa82 	bl	8000af0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80015ec:	4803      	ldr	r0, [pc, #12]	@ (80015fc <MX_TIM4_Init+0x114>)
 80015ee:	f000 f9bd 	bl	800196c <HAL_TIM_MspPostInit>

}
 80015f2:	bf00      	nop
 80015f4:	3738      	adds	r7, #56	@ 0x38
 80015f6:	46bd      	mov	sp, r7
 80015f8:	bd80      	pop	{r7, pc}
 80015fa:	bf00      	nop
 80015fc:	200001e4 	.word	0x200001e4
 8001600:	40000800 	.word	0x40000800

08001604 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	b08e      	sub	sp, #56	@ 0x38
 8001608:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800160a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800160e:	2200      	movs	r2, #0
 8001610:	601a      	str	r2, [r3, #0]
 8001612:	605a      	str	r2, [r3, #4]
 8001614:	609a      	str	r2, [r3, #8]
 8001616:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001618:	f107 0320 	add.w	r3, r7, #32
 800161c:	2200      	movs	r2, #0
 800161e:	601a      	str	r2, [r3, #0]
 8001620:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001622:	1d3b      	adds	r3, r7, #4
 8001624:	2200      	movs	r2, #0
 8001626:	601a      	str	r2, [r3, #0]
 8001628:	605a      	str	r2, [r3, #4]
 800162a:	609a      	str	r2, [r3, #8]
 800162c:	60da      	str	r2, [r3, #12]
 800162e:	611a      	str	r2, [r3, #16]
 8001630:	615a      	str	r2, [r3, #20]
 8001632:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001634:	4b2c      	ldr	r3, [pc, #176]	@ (80016e8 <MX_TIM5_Init+0xe4>)
 8001636:	4a2d      	ldr	r2, [pc, #180]	@ (80016ec <MX_TIM5_Init+0xe8>)
 8001638:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 720-1;
 800163a:	4b2b      	ldr	r3, [pc, #172]	@ (80016e8 <MX_TIM5_Init+0xe4>)
 800163c:	f240 22cf 	movw	r2, #719	@ 0x2cf
 8001640:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001642:	4b29      	ldr	r3, [pc, #164]	@ (80016e8 <MX_TIM5_Init+0xe4>)
 8001644:	2200      	movs	r2, #0
 8001646:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 100-1;
 8001648:	4b27      	ldr	r3, [pc, #156]	@ (80016e8 <MX_TIM5_Init+0xe4>)
 800164a:	2263      	movs	r2, #99	@ 0x63
 800164c:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800164e:	4b26      	ldr	r3, [pc, #152]	@ (80016e8 <MX_TIM5_Init+0xe4>)
 8001650:	2200      	movs	r2, #0
 8001652:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001654:	4b24      	ldr	r3, [pc, #144]	@ (80016e8 <MX_TIM5_Init+0xe4>)
 8001656:	2200      	movs	r2, #0
 8001658:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 800165a:	4823      	ldr	r0, [pc, #140]	@ (80016e8 <MX_TIM5_Init+0xe4>)
 800165c:	f002 fe0c 	bl	8004278 <HAL_TIM_Base_Init>
 8001660:	4603      	mov	r3, r0
 8001662:	2b00      	cmp	r3, #0
 8001664:	d001      	beq.n	800166a <MX_TIM5_Init+0x66>
  {
    Error_Handler();
 8001666:	f7ff fa43 	bl	8000af0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800166a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800166e:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8001670:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001674:	4619      	mov	r1, r3
 8001676:	481c      	ldr	r0, [pc, #112]	@ (80016e8 <MX_TIM5_Init+0xe4>)
 8001678:	f003 fa40 	bl	8004afc <HAL_TIM_ConfigClockSource>
 800167c:	4603      	mov	r3, r0
 800167e:	2b00      	cmp	r3, #0
 8001680:	d001      	beq.n	8001686 <MX_TIM5_Init+0x82>
  {
    Error_Handler();
 8001682:	f7ff fa35 	bl	8000af0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8001686:	4818      	ldr	r0, [pc, #96]	@ (80016e8 <MX_TIM5_Init+0xe4>)
 8001688:	f002 fea6 	bl	80043d8 <HAL_TIM_PWM_Init>
 800168c:	4603      	mov	r3, r0
 800168e:	2b00      	cmp	r3, #0
 8001690:	d001      	beq.n	8001696 <MX_TIM5_Init+0x92>
  {
    Error_Handler();
 8001692:	f7ff fa2d 	bl	8000af0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001696:	2300      	movs	r3, #0
 8001698:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800169a:	2300      	movs	r3, #0
 800169c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800169e:	f107 0320 	add.w	r3, r7, #32
 80016a2:	4619      	mov	r1, r3
 80016a4:	4810      	ldr	r0, [pc, #64]	@ (80016e8 <MX_TIM5_Init+0xe4>)
 80016a6:	f003 fdeb 	bl	8005280 <HAL_TIMEx_MasterConfigSynchronization>
 80016aa:	4603      	mov	r3, r0
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d001      	beq.n	80016b4 <MX_TIM5_Init+0xb0>
  {
    Error_Handler();
 80016b0:	f7ff fa1e 	bl	8000af0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80016b4:	2360      	movs	r3, #96	@ 0x60
 80016b6:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80016b8:	2300      	movs	r3, #0
 80016ba:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80016bc:	2300      	movs	r3, #0
 80016be:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80016c0:	2300      	movs	r3, #0
 80016c2:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80016c4:	1d3b      	adds	r3, r7, #4
 80016c6:	2200      	movs	r2, #0
 80016c8:	4619      	mov	r1, r3
 80016ca:	4807      	ldr	r0, [pc, #28]	@ (80016e8 <MX_TIM5_Init+0xe4>)
 80016cc:	f003 f954 	bl	8004978 <HAL_TIM_PWM_ConfigChannel>
 80016d0:	4603      	mov	r3, r0
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d001      	beq.n	80016da <MX_TIM5_Init+0xd6>
  {
    Error_Handler();
 80016d6:	f7ff fa0b 	bl	8000af0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 80016da:	4803      	ldr	r0, [pc, #12]	@ (80016e8 <MX_TIM5_Init+0xe4>)
 80016dc:	f000 f946 	bl	800196c <HAL_TIM_MspPostInit>

}
 80016e0:	bf00      	nop
 80016e2:	3738      	adds	r7, #56	@ 0x38
 80016e4:	46bd      	mov	sp, r7
 80016e6:	bd80      	pop	{r7, pc}
 80016e8:	2000022c 	.word	0x2000022c
 80016ec:	40000c00 	.word	0x40000c00

080016f0 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b092      	sub	sp, #72	@ 0x48
 80016f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016f6:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80016fa:	2200      	movs	r2, #0
 80016fc:	601a      	str	r2, [r3, #0]
 80016fe:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001700:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001704:	2200      	movs	r2, #0
 8001706:	601a      	str	r2, [r3, #0]
 8001708:	605a      	str	r2, [r3, #4]
 800170a:	609a      	str	r2, [r3, #8]
 800170c:	60da      	str	r2, [r3, #12]
 800170e:	611a      	str	r2, [r3, #16]
 8001710:	615a      	str	r2, [r3, #20]
 8001712:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001714:	1d3b      	adds	r3, r7, #4
 8001716:	2220      	movs	r2, #32
 8001718:	2100      	movs	r1, #0
 800171a:	4618      	mov	r0, r3
 800171c:	f004 fbb2 	bl	8005e84 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001720:	4b45      	ldr	r3, [pc, #276]	@ (8001838 <MX_TIM8_Init+0x148>)
 8001722:	4a46      	ldr	r2, [pc, #280]	@ (800183c <MX_TIM8_Init+0x14c>)
 8001724:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 720-1;
 8001726:	4b44      	ldr	r3, [pc, #272]	@ (8001838 <MX_TIM8_Init+0x148>)
 8001728:	f240 22cf 	movw	r2, #719	@ 0x2cf
 800172c:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800172e:	4b42      	ldr	r3, [pc, #264]	@ (8001838 <MX_TIM8_Init+0x148>)
 8001730:	2200      	movs	r2, #0
 8001732:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 100-1;
 8001734:	4b40      	ldr	r3, [pc, #256]	@ (8001838 <MX_TIM8_Init+0x148>)
 8001736:	2263      	movs	r2, #99	@ 0x63
 8001738:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800173a:	4b3f      	ldr	r3, [pc, #252]	@ (8001838 <MX_TIM8_Init+0x148>)
 800173c:	2200      	movs	r2, #0
 800173e:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001740:	4b3d      	ldr	r3, [pc, #244]	@ (8001838 <MX_TIM8_Init+0x148>)
 8001742:	2200      	movs	r2, #0
 8001744:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001746:	4b3c      	ldr	r3, [pc, #240]	@ (8001838 <MX_TIM8_Init+0x148>)
 8001748:	2200      	movs	r2, #0
 800174a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 800174c:	483a      	ldr	r0, [pc, #232]	@ (8001838 <MX_TIM8_Init+0x148>)
 800174e:	f002 fe43 	bl	80043d8 <HAL_TIM_PWM_Init>
 8001752:	4603      	mov	r3, r0
 8001754:	2b00      	cmp	r3, #0
 8001756:	d001      	beq.n	800175c <MX_TIM8_Init+0x6c>
  {
    Error_Handler();
 8001758:	f7ff f9ca 	bl	8000af0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800175c:	2300      	movs	r3, #0
 800175e:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001760:	2300      	movs	r3, #0
 8001762:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001764:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001768:	4619      	mov	r1, r3
 800176a:	4833      	ldr	r0, [pc, #204]	@ (8001838 <MX_TIM8_Init+0x148>)
 800176c:	f003 fd88 	bl	8005280 <HAL_TIMEx_MasterConfigSynchronization>
 8001770:	4603      	mov	r3, r0
 8001772:	2b00      	cmp	r3, #0
 8001774:	d001      	beq.n	800177a <MX_TIM8_Init+0x8a>
  {
    Error_Handler();
 8001776:	f7ff f9bb 	bl	8000af0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800177a:	2360      	movs	r3, #96	@ 0x60
 800177c:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 800177e:	2300      	movs	r3, #0
 8001780:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001782:	2300      	movs	r3, #0
 8001784:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001786:	2300      	movs	r3, #0
 8001788:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800178a:	2300      	movs	r3, #0
 800178c:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800178e:	2300      	movs	r3, #0
 8001790:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001792:	2300      	movs	r3, #0
 8001794:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001796:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800179a:	2200      	movs	r2, #0
 800179c:	4619      	mov	r1, r3
 800179e:	4826      	ldr	r0, [pc, #152]	@ (8001838 <MX_TIM8_Init+0x148>)
 80017a0:	f003 f8ea 	bl	8004978 <HAL_TIM_PWM_ConfigChannel>
 80017a4:	4603      	mov	r3, r0
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d001      	beq.n	80017ae <MX_TIM8_Init+0xbe>
  {
    Error_Handler();
 80017aa:	f7ff f9a1 	bl	8000af0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80017ae:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80017b2:	2204      	movs	r2, #4
 80017b4:	4619      	mov	r1, r3
 80017b6:	4820      	ldr	r0, [pc, #128]	@ (8001838 <MX_TIM8_Init+0x148>)
 80017b8:	f003 f8de 	bl	8004978 <HAL_TIM_PWM_ConfigChannel>
 80017bc:	4603      	mov	r3, r0
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d001      	beq.n	80017c6 <MX_TIM8_Init+0xd6>
  {
    Error_Handler();
 80017c2:	f7ff f995 	bl	8000af0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80017c6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80017ca:	2208      	movs	r2, #8
 80017cc:	4619      	mov	r1, r3
 80017ce:	481a      	ldr	r0, [pc, #104]	@ (8001838 <MX_TIM8_Init+0x148>)
 80017d0:	f003 f8d2 	bl	8004978 <HAL_TIM_PWM_ConfigChannel>
 80017d4:	4603      	mov	r3, r0
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d001      	beq.n	80017de <MX_TIM8_Init+0xee>
  {
    Error_Handler();
 80017da:	f7ff f989 	bl	8000af0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80017de:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80017e2:	220c      	movs	r2, #12
 80017e4:	4619      	mov	r1, r3
 80017e6:	4814      	ldr	r0, [pc, #80]	@ (8001838 <MX_TIM8_Init+0x148>)
 80017e8:	f003 f8c6 	bl	8004978 <HAL_TIM_PWM_ConfigChannel>
 80017ec:	4603      	mov	r3, r0
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d001      	beq.n	80017f6 <MX_TIM8_Init+0x106>
  {
    Error_Handler();
 80017f2:	f7ff f97d 	bl	8000af0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80017f6:	2300      	movs	r3, #0
 80017f8:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80017fa:	2300      	movs	r3, #0
 80017fc:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80017fe:	2300      	movs	r3, #0
 8001800:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001802:	2300      	movs	r3, #0
 8001804:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001806:	2300      	movs	r3, #0
 8001808:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800180a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800180e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001810:	2300      	movs	r3, #0
 8001812:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8001814:	1d3b      	adds	r3, r7, #4
 8001816:	4619      	mov	r1, r3
 8001818:	4807      	ldr	r0, [pc, #28]	@ (8001838 <MX_TIM8_Init+0x148>)
 800181a:	f003 fd9d 	bl	8005358 <HAL_TIMEx_ConfigBreakDeadTime>
 800181e:	4603      	mov	r3, r0
 8001820:	2b00      	cmp	r3, #0
 8001822:	d001      	beq.n	8001828 <MX_TIM8_Init+0x138>
  {
    Error_Handler();
 8001824:	f7ff f964 	bl	8000af0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8001828:	4803      	ldr	r0, [pc, #12]	@ (8001838 <MX_TIM8_Init+0x148>)
 800182a:	f000 f89f 	bl	800196c <HAL_TIM_MspPostInit>

}
 800182e:	bf00      	nop
 8001830:	3748      	adds	r7, #72	@ 0x48
 8001832:	46bd      	mov	sp, r7
 8001834:	bd80      	pop	{r7, pc}
 8001836:	bf00      	nop
 8001838:	20000274 	.word	0x20000274
 800183c:	40013400 	.word	0x40013400

08001840 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	b086      	sub	sp, #24
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001850:	d114      	bne.n	800187c <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001852:	4b26      	ldr	r3, [pc, #152]	@ (80018ec <HAL_TIM_Base_MspInit+0xac>)
 8001854:	69db      	ldr	r3, [r3, #28]
 8001856:	4a25      	ldr	r2, [pc, #148]	@ (80018ec <HAL_TIM_Base_MspInit+0xac>)
 8001858:	f043 0301 	orr.w	r3, r3, #1
 800185c:	61d3      	str	r3, [r2, #28]
 800185e:	4b23      	ldr	r3, [pc, #140]	@ (80018ec <HAL_TIM_Base_MspInit+0xac>)
 8001860:	69db      	ldr	r3, [r3, #28]
 8001862:	f003 0301 	and.w	r3, r3, #1
 8001866:	617b      	str	r3, [r7, #20]
 8001868:	697b      	ldr	r3, [r7, #20]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800186a:	2200      	movs	r2, #0
 800186c:	2100      	movs	r1, #0
 800186e:	201c      	movs	r0, #28
 8001870:	f000 ff4d 	bl	800270e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001874:	201c      	movs	r0, #28
 8001876:	f000 ff66 	bl	8002746 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 800187a:	e032      	b.n	80018e2 <HAL_TIM_Base_MspInit+0xa2>
  else if(tim_baseHandle->Instance==TIM4)
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	4a1b      	ldr	r2, [pc, #108]	@ (80018f0 <HAL_TIM_Base_MspInit+0xb0>)
 8001882:	4293      	cmp	r3, r2
 8001884:	d114      	bne.n	80018b0 <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001886:	4b19      	ldr	r3, [pc, #100]	@ (80018ec <HAL_TIM_Base_MspInit+0xac>)
 8001888:	69db      	ldr	r3, [r3, #28]
 800188a:	4a18      	ldr	r2, [pc, #96]	@ (80018ec <HAL_TIM_Base_MspInit+0xac>)
 800188c:	f043 0304 	orr.w	r3, r3, #4
 8001890:	61d3      	str	r3, [r2, #28]
 8001892:	4b16      	ldr	r3, [pc, #88]	@ (80018ec <HAL_TIM_Base_MspInit+0xac>)
 8001894:	69db      	ldr	r3, [r3, #28]
 8001896:	f003 0304 	and.w	r3, r3, #4
 800189a:	613b      	str	r3, [r7, #16]
 800189c:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 800189e:	2200      	movs	r2, #0
 80018a0:	2100      	movs	r1, #0
 80018a2:	201e      	movs	r0, #30
 80018a4:	f000 ff33 	bl	800270e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80018a8:	201e      	movs	r0, #30
 80018aa:	f000 ff4c 	bl	8002746 <HAL_NVIC_EnableIRQ>
}
 80018ae:	e018      	b.n	80018e2 <HAL_TIM_Base_MspInit+0xa2>
  else if(tim_baseHandle->Instance==TIM5)
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	4a0f      	ldr	r2, [pc, #60]	@ (80018f4 <HAL_TIM_Base_MspInit+0xb4>)
 80018b6:	4293      	cmp	r3, r2
 80018b8:	d113      	bne.n	80018e2 <HAL_TIM_Base_MspInit+0xa2>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80018ba:	4b0c      	ldr	r3, [pc, #48]	@ (80018ec <HAL_TIM_Base_MspInit+0xac>)
 80018bc:	69db      	ldr	r3, [r3, #28]
 80018be:	4a0b      	ldr	r2, [pc, #44]	@ (80018ec <HAL_TIM_Base_MspInit+0xac>)
 80018c0:	f043 0308 	orr.w	r3, r3, #8
 80018c4:	61d3      	str	r3, [r2, #28]
 80018c6:	4b09      	ldr	r3, [pc, #36]	@ (80018ec <HAL_TIM_Base_MspInit+0xac>)
 80018c8:	69db      	ldr	r3, [r3, #28]
 80018ca:	f003 0308 	and.w	r3, r3, #8
 80018ce:	60fb      	str	r3, [r7, #12]
 80018d0:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 80018d2:	2200      	movs	r2, #0
 80018d4:	2100      	movs	r1, #0
 80018d6:	2032      	movs	r0, #50	@ 0x32
 80018d8:	f000 ff19 	bl	800270e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 80018dc:	2032      	movs	r0, #50	@ 0x32
 80018de:	f000 ff32 	bl	8002746 <HAL_NVIC_EnableIRQ>
}
 80018e2:	bf00      	nop
 80018e4:	3718      	adds	r7, #24
 80018e6:	46bd      	mov	sp, r7
 80018e8:	bd80      	pop	{r7, pc}
 80018ea:	bf00      	nop
 80018ec:	40021000 	.word	0x40021000
 80018f0:	40000800 	.word	0x40000800
 80018f4:	40000c00 	.word	0x40000c00

080018f8 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b084      	sub	sp, #16
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM3)
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	4a16      	ldr	r2, [pc, #88]	@ (8001960 <HAL_TIM_PWM_MspInit+0x68>)
 8001906:	4293      	cmp	r3, r2
 8001908:	d114      	bne.n	8001934 <HAL_TIM_PWM_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800190a:	4b16      	ldr	r3, [pc, #88]	@ (8001964 <HAL_TIM_PWM_MspInit+0x6c>)
 800190c:	69db      	ldr	r3, [r3, #28]
 800190e:	4a15      	ldr	r2, [pc, #84]	@ (8001964 <HAL_TIM_PWM_MspInit+0x6c>)
 8001910:	f043 0302 	orr.w	r3, r3, #2
 8001914:	61d3      	str	r3, [r2, #28]
 8001916:	4b13      	ldr	r3, [pc, #76]	@ (8001964 <HAL_TIM_PWM_MspInit+0x6c>)
 8001918:	69db      	ldr	r3, [r3, #28]
 800191a:	f003 0302 	and.w	r3, r3, #2
 800191e:	60fb      	str	r3, [r7, #12]
 8001920:	68fb      	ldr	r3, [r7, #12]

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001922:	2200      	movs	r2, #0
 8001924:	2100      	movs	r1, #0
 8001926:	201d      	movs	r0, #29
 8001928:	f000 fef1 	bl	800270e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800192c:	201d      	movs	r0, #29
 800192e:	f000 ff0a 	bl	8002746 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM8_CLK_ENABLE();
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 8001932:	e010      	b.n	8001956 <HAL_TIM_PWM_MspInit+0x5e>
  else if(tim_pwmHandle->Instance==TIM8)
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	4a0b      	ldr	r2, [pc, #44]	@ (8001968 <HAL_TIM_PWM_MspInit+0x70>)
 800193a:	4293      	cmp	r3, r2
 800193c:	d10b      	bne.n	8001956 <HAL_TIM_PWM_MspInit+0x5e>
    __HAL_RCC_TIM8_CLK_ENABLE();
 800193e:	4b09      	ldr	r3, [pc, #36]	@ (8001964 <HAL_TIM_PWM_MspInit+0x6c>)
 8001940:	699b      	ldr	r3, [r3, #24]
 8001942:	4a08      	ldr	r2, [pc, #32]	@ (8001964 <HAL_TIM_PWM_MspInit+0x6c>)
 8001944:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001948:	6193      	str	r3, [r2, #24]
 800194a:	4b06      	ldr	r3, [pc, #24]	@ (8001964 <HAL_TIM_PWM_MspInit+0x6c>)
 800194c:	699b      	ldr	r3, [r3, #24]
 800194e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001952:	60bb      	str	r3, [r7, #8]
 8001954:	68bb      	ldr	r3, [r7, #8]
}
 8001956:	bf00      	nop
 8001958:	3710      	adds	r7, #16
 800195a:	46bd      	mov	sp, r7
 800195c:	bd80      	pop	{r7, pc}
 800195e:	bf00      	nop
 8001960:	40000400 	.word	0x40000400
 8001964:	40021000 	.word	0x40021000
 8001968:	40013400 	.word	0x40013400

0800196c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	b08c      	sub	sp, #48	@ 0x30
 8001970:	af00      	add	r7, sp, #0
 8001972:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001974:	f107 031c 	add.w	r3, r7, #28
 8001978:	2200      	movs	r2, #0
 800197a:	601a      	str	r2, [r3, #0]
 800197c:	605a      	str	r2, [r3, #4]
 800197e:	609a      	str	r2, [r3, #8]
 8001980:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM3)
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	4a46      	ldr	r2, [pc, #280]	@ (8001aa0 <HAL_TIM_MspPostInit+0x134>)
 8001988:	4293      	cmp	r3, r2
 800198a:	d12a      	bne.n	80019e2 <HAL_TIM_MspPostInit+0x76>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800198c:	4b45      	ldr	r3, [pc, #276]	@ (8001aa4 <HAL_TIM_MspPostInit+0x138>)
 800198e:	699b      	ldr	r3, [r3, #24]
 8001990:	4a44      	ldr	r2, [pc, #272]	@ (8001aa4 <HAL_TIM_MspPostInit+0x138>)
 8001992:	f043 0308 	orr.w	r3, r3, #8
 8001996:	6193      	str	r3, [r2, #24]
 8001998:	4b42      	ldr	r3, [pc, #264]	@ (8001aa4 <HAL_TIM_MspPostInit+0x138>)
 800199a:	699b      	ldr	r3, [r3, #24]
 800199c:	f003 0308 	and.w	r3, r3, #8
 80019a0:	61bb      	str	r3, [r7, #24]
 80019a2:	69bb      	ldr	r3, [r7, #24]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80019a4:	2310      	movs	r3, #16
 80019a6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019a8:	2302      	movs	r3, #2
 80019aa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019ac:	2302      	movs	r3, #2
 80019ae:	62bb      	str	r3, [r7, #40]	@ 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019b0:	f107 031c 	add.w	r3, r7, #28
 80019b4:	4619      	mov	r1, r3
 80019b6:	483c      	ldr	r0, [pc, #240]	@ (8001aa8 <HAL_TIM_MspPostInit+0x13c>)
 80019b8:	f001 fb64 	bl	8003084 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM3_PARTIAL();
 80019bc:	4b3b      	ldr	r3, [pc, #236]	@ (8001aac <HAL_TIM_MspPostInit+0x140>)
 80019be:	685b      	ldr	r3, [r3, #4]
 80019c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80019c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80019c4:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 80019c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80019ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80019cc:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 80019d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80019d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80019d4:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80019d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80019da:	4a34      	ldr	r2, [pc, #208]	@ (8001aac <HAL_TIM_MspPostInit+0x140>)
 80019dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80019de:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 80019e0:	e05a      	b.n	8001a98 <HAL_TIM_MspPostInit+0x12c>
  else if(timHandle->Instance==TIM4)
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	4a32      	ldr	r2, [pc, #200]	@ (8001ab0 <HAL_TIM_MspPostInit+0x144>)
 80019e8:	4293      	cmp	r3, r2
 80019ea:	d119      	bne.n	8001a20 <HAL_TIM_MspPostInit+0xb4>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019ec:	4b2d      	ldr	r3, [pc, #180]	@ (8001aa4 <HAL_TIM_MspPostInit+0x138>)
 80019ee:	699b      	ldr	r3, [r3, #24]
 80019f0:	4a2c      	ldr	r2, [pc, #176]	@ (8001aa4 <HAL_TIM_MspPostInit+0x138>)
 80019f2:	f043 0308 	orr.w	r3, r3, #8
 80019f6:	6193      	str	r3, [r2, #24]
 80019f8:	4b2a      	ldr	r3, [pc, #168]	@ (8001aa4 <HAL_TIM_MspPostInit+0x138>)
 80019fa:	699b      	ldr	r3, [r3, #24]
 80019fc:	f003 0308 	and.w	r3, r3, #8
 8001a00:	617b      	str	r3, [r7, #20]
 8001a02:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8;
 8001a04:	f44f 73e0 	mov.w	r3, #448	@ 0x1c0
 8001a08:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a0a:	2302      	movs	r3, #2
 8001a0c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a0e:	2302      	movs	r3, #2
 8001a10:	62bb      	str	r3, [r7, #40]	@ 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a12:	f107 031c 	add.w	r3, r7, #28
 8001a16:	4619      	mov	r1, r3
 8001a18:	4823      	ldr	r0, [pc, #140]	@ (8001aa8 <HAL_TIM_MspPostInit+0x13c>)
 8001a1a:	f001 fb33 	bl	8003084 <HAL_GPIO_Init>
}
 8001a1e:	e03b      	b.n	8001a98 <HAL_TIM_MspPostInit+0x12c>
  else if(timHandle->Instance==TIM5)
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	4a23      	ldr	r2, [pc, #140]	@ (8001ab4 <HAL_TIM_MspPostInit+0x148>)
 8001a26:	4293      	cmp	r3, r2
 8001a28:	d118      	bne.n	8001a5c <HAL_TIM_MspPostInit+0xf0>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a2a:	4b1e      	ldr	r3, [pc, #120]	@ (8001aa4 <HAL_TIM_MspPostInit+0x138>)
 8001a2c:	699b      	ldr	r3, [r3, #24]
 8001a2e:	4a1d      	ldr	r2, [pc, #116]	@ (8001aa4 <HAL_TIM_MspPostInit+0x138>)
 8001a30:	f043 0304 	orr.w	r3, r3, #4
 8001a34:	6193      	str	r3, [r2, #24]
 8001a36:	4b1b      	ldr	r3, [pc, #108]	@ (8001aa4 <HAL_TIM_MspPostInit+0x138>)
 8001a38:	699b      	ldr	r3, [r3, #24]
 8001a3a:	f003 0304 	and.w	r3, r3, #4
 8001a3e:	613b      	str	r3, [r7, #16]
 8001a40:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = BUZZER_Pin;
 8001a42:	2301      	movs	r3, #1
 8001a44:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a46:	2302      	movs	r3, #2
 8001a48:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a4a:	2302      	movs	r3, #2
 8001a4c:	62bb      	str	r3, [r7, #40]	@ 0x28
    HAL_GPIO_Init(BUZZER_GPIO_Port, &GPIO_InitStruct);
 8001a4e:	f107 031c 	add.w	r3, r7, #28
 8001a52:	4619      	mov	r1, r3
 8001a54:	4818      	ldr	r0, [pc, #96]	@ (8001ab8 <HAL_TIM_MspPostInit+0x14c>)
 8001a56:	f001 fb15 	bl	8003084 <HAL_GPIO_Init>
}
 8001a5a:	e01d      	b.n	8001a98 <HAL_TIM_MspPostInit+0x12c>
  else if(timHandle->Instance==TIM8)
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	4a16      	ldr	r2, [pc, #88]	@ (8001abc <HAL_TIM_MspPostInit+0x150>)
 8001a62:	4293      	cmp	r3, r2
 8001a64:	d118      	bne.n	8001a98 <HAL_TIM_MspPostInit+0x12c>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a66:	4b0f      	ldr	r3, [pc, #60]	@ (8001aa4 <HAL_TIM_MspPostInit+0x138>)
 8001a68:	699b      	ldr	r3, [r3, #24]
 8001a6a:	4a0e      	ldr	r2, [pc, #56]	@ (8001aa4 <HAL_TIM_MspPostInit+0x138>)
 8001a6c:	f043 0310 	orr.w	r3, r3, #16
 8001a70:	6193      	str	r3, [r2, #24]
 8001a72:	4b0c      	ldr	r3, [pc, #48]	@ (8001aa4 <HAL_TIM_MspPostInit+0x138>)
 8001a74:	699b      	ldr	r3, [r3, #24]
 8001a76:	f003 0310 	and.w	r3, r3, #16
 8001a7a:	60fb      	str	r3, [r7, #12]
 8001a7c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8001a7e:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 8001a82:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a84:	2302      	movs	r3, #2
 8001a86:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a88:	2302      	movs	r3, #2
 8001a8a:	62bb      	str	r3, [r7, #40]	@ 0x28
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a8c:	f107 031c 	add.w	r3, r7, #28
 8001a90:	4619      	mov	r1, r3
 8001a92:	480b      	ldr	r0, [pc, #44]	@ (8001ac0 <HAL_TIM_MspPostInit+0x154>)
 8001a94:	f001 faf6 	bl	8003084 <HAL_GPIO_Init>
}
 8001a98:	bf00      	nop
 8001a9a:	3730      	adds	r7, #48	@ 0x30
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	bd80      	pop	{r7, pc}
 8001aa0:	40000400 	.word	0x40000400
 8001aa4:	40021000 	.word	0x40021000
 8001aa8:	40010c00 	.word	0x40010c00
 8001aac:	40010000 	.word	0x40010000
 8001ab0:	40000800 	.word	0x40000800
 8001ab4:	40000c00 	.word	0x40000c00
 8001ab8:	40010800 	.word	0x40010800
 8001abc:	40013400 	.word	0x40013400
 8001ac0:	40011000 	.word	0x40011000

08001ac4 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001ac8:	4b11      	ldr	r3, [pc, #68]	@ (8001b10 <MX_USART1_UART_Init+0x4c>)
 8001aca:	4a12      	ldr	r2, [pc, #72]	@ (8001b14 <MX_USART1_UART_Init+0x50>)
 8001acc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8001ace:	4b10      	ldr	r3, [pc, #64]	@ (8001b10 <MX_USART1_UART_Init+0x4c>)
 8001ad0:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8001ad4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001ad6:	4b0e      	ldr	r3, [pc, #56]	@ (8001b10 <MX_USART1_UART_Init+0x4c>)
 8001ad8:	2200      	movs	r2, #0
 8001ada:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001adc:	4b0c      	ldr	r3, [pc, #48]	@ (8001b10 <MX_USART1_UART_Init+0x4c>)
 8001ade:	2200      	movs	r2, #0
 8001ae0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001ae2:	4b0b      	ldr	r3, [pc, #44]	@ (8001b10 <MX_USART1_UART_Init+0x4c>)
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001ae8:	4b09      	ldr	r3, [pc, #36]	@ (8001b10 <MX_USART1_UART_Init+0x4c>)
 8001aea:	220c      	movs	r2, #12
 8001aec:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001aee:	4b08      	ldr	r3, [pc, #32]	@ (8001b10 <MX_USART1_UART_Init+0x4c>)
 8001af0:	2200      	movs	r2, #0
 8001af2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001af4:	4b06      	ldr	r3, [pc, #24]	@ (8001b10 <MX_USART1_UART_Init+0x4c>)
 8001af6:	2200      	movs	r2, #0
 8001af8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001afa:	4805      	ldr	r0, [pc, #20]	@ (8001b10 <MX_USART1_UART_Init+0x4c>)
 8001afc:	f003 fc8f 	bl	800541e <HAL_UART_Init>
 8001b00:	4603      	mov	r3, r0
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d001      	beq.n	8001b0a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001b06:	f7fe fff3 	bl	8000af0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001b0a:	bf00      	nop
 8001b0c:	bd80      	pop	{r7, pc}
 8001b0e:	bf00      	nop
 8001b10:	200002bc 	.word	0x200002bc
 8001b14:	40013800 	.word	0x40013800

08001b18 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001b1c:	4b11      	ldr	r3, [pc, #68]	@ (8001b64 <MX_USART2_UART_Init+0x4c>)
 8001b1e:	4a12      	ldr	r2, [pc, #72]	@ (8001b68 <MX_USART2_UART_Init+0x50>)
 8001b20:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8001b22:	4b10      	ldr	r3, [pc, #64]	@ (8001b64 <MX_USART2_UART_Init+0x4c>)
 8001b24:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8001b28:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001b2a:	4b0e      	ldr	r3, [pc, #56]	@ (8001b64 <MX_USART2_UART_Init+0x4c>)
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001b30:	4b0c      	ldr	r3, [pc, #48]	@ (8001b64 <MX_USART2_UART_Init+0x4c>)
 8001b32:	2200      	movs	r2, #0
 8001b34:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001b36:	4b0b      	ldr	r3, [pc, #44]	@ (8001b64 <MX_USART2_UART_Init+0x4c>)
 8001b38:	2200      	movs	r2, #0
 8001b3a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001b3c:	4b09      	ldr	r3, [pc, #36]	@ (8001b64 <MX_USART2_UART_Init+0x4c>)
 8001b3e:	220c      	movs	r2, #12
 8001b40:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b42:	4b08      	ldr	r3, [pc, #32]	@ (8001b64 <MX_USART2_UART_Init+0x4c>)
 8001b44:	2200      	movs	r2, #0
 8001b46:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b48:	4b06      	ldr	r3, [pc, #24]	@ (8001b64 <MX_USART2_UART_Init+0x4c>)
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001b4e:	4805      	ldr	r0, [pc, #20]	@ (8001b64 <MX_USART2_UART_Init+0x4c>)
 8001b50:	f003 fc65 	bl	800541e <HAL_UART_Init>
 8001b54:	4603      	mov	r3, r0
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d001      	beq.n	8001b5e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001b5a:	f7fe ffc9 	bl	8000af0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001b5e:	bf00      	nop
 8001b60:	bd80      	pop	{r7, pc}
 8001b62:	bf00      	nop
 8001b64:	20000304 	.word	0x20000304
 8001b68:	40004400 	.word	0x40004400

08001b6c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b08a      	sub	sp, #40	@ 0x28
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b74:	f107 0318 	add.w	r3, r7, #24
 8001b78:	2200      	movs	r2, #0
 8001b7a:	601a      	str	r2, [r3, #0]
 8001b7c:	605a      	str	r2, [r3, #4]
 8001b7e:	609a      	str	r2, [r3, #8]
 8001b80:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	4a3f      	ldr	r2, [pc, #252]	@ (8001c84 <HAL_UART_MspInit+0x118>)
 8001b88:	4293      	cmp	r3, r2
 8001b8a:	d13a      	bne.n	8001c02 <HAL_UART_MspInit+0x96>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001b8c:	4b3e      	ldr	r3, [pc, #248]	@ (8001c88 <HAL_UART_MspInit+0x11c>)
 8001b8e:	699b      	ldr	r3, [r3, #24]
 8001b90:	4a3d      	ldr	r2, [pc, #244]	@ (8001c88 <HAL_UART_MspInit+0x11c>)
 8001b92:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001b96:	6193      	str	r3, [r2, #24]
 8001b98:	4b3b      	ldr	r3, [pc, #236]	@ (8001c88 <HAL_UART_MspInit+0x11c>)
 8001b9a:	699b      	ldr	r3, [r3, #24]
 8001b9c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001ba0:	617b      	str	r3, [r7, #20]
 8001ba2:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ba4:	4b38      	ldr	r3, [pc, #224]	@ (8001c88 <HAL_UART_MspInit+0x11c>)
 8001ba6:	699b      	ldr	r3, [r3, #24]
 8001ba8:	4a37      	ldr	r2, [pc, #220]	@ (8001c88 <HAL_UART_MspInit+0x11c>)
 8001baa:	f043 0304 	orr.w	r3, r3, #4
 8001bae:	6193      	str	r3, [r2, #24]
 8001bb0:	4b35      	ldr	r3, [pc, #212]	@ (8001c88 <HAL_UART_MspInit+0x11c>)
 8001bb2:	699b      	ldr	r3, [r3, #24]
 8001bb4:	f003 0304 	and.w	r3, r3, #4
 8001bb8:	613b      	str	r3, [r7, #16]
 8001bba:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001bbc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001bc0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bc2:	2302      	movs	r3, #2
 8001bc4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001bc6:	2303      	movs	r3, #3
 8001bc8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bca:	f107 0318 	add.w	r3, r7, #24
 8001bce:	4619      	mov	r1, r3
 8001bd0:	482e      	ldr	r0, [pc, #184]	@ (8001c8c <HAL_UART_MspInit+0x120>)
 8001bd2:	f001 fa57 	bl	8003084 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001bd6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001bda:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001bdc:	2300      	movs	r3, #0
 8001bde:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001be0:	2300      	movs	r3, #0
 8001be2:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001be4:	f107 0318 	add.w	r3, r7, #24
 8001be8:	4619      	mov	r1, r3
 8001bea:	4828      	ldr	r0, [pc, #160]	@ (8001c8c <HAL_UART_MspInit+0x120>)
 8001bec:	f001 fa4a 	bl	8003084 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	2100      	movs	r1, #0
 8001bf4:	2025      	movs	r0, #37	@ 0x25
 8001bf6:	f000 fd8a 	bl	800270e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001bfa:	2025      	movs	r0, #37	@ 0x25
 8001bfc:	f000 fda3 	bl	8002746 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001c00:	e03c      	b.n	8001c7c <HAL_UART_MspInit+0x110>
  else if(uartHandle->Instance==USART2)
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	4a22      	ldr	r2, [pc, #136]	@ (8001c90 <HAL_UART_MspInit+0x124>)
 8001c08:	4293      	cmp	r3, r2
 8001c0a:	d137      	bne.n	8001c7c <HAL_UART_MspInit+0x110>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001c0c:	4b1e      	ldr	r3, [pc, #120]	@ (8001c88 <HAL_UART_MspInit+0x11c>)
 8001c0e:	69db      	ldr	r3, [r3, #28]
 8001c10:	4a1d      	ldr	r2, [pc, #116]	@ (8001c88 <HAL_UART_MspInit+0x11c>)
 8001c12:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001c16:	61d3      	str	r3, [r2, #28]
 8001c18:	4b1b      	ldr	r3, [pc, #108]	@ (8001c88 <HAL_UART_MspInit+0x11c>)
 8001c1a:	69db      	ldr	r3, [r3, #28]
 8001c1c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c20:	60fb      	str	r3, [r7, #12]
 8001c22:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c24:	4b18      	ldr	r3, [pc, #96]	@ (8001c88 <HAL_UART_MspInit+0x11c>)
 8001c26:	699b      	ldr	r3, [r3, #24]
 8001c28:	4a17      	ldr	r2, [pc, #92]	@ (8001c88 <HAL_UART_MspInit+0x11c>)
 8001c2a:	f043 0304 	orr.w	r3, r3, #4
 8001c2e:	6193      	str	r3, [r2, #24]
 8001c30:	4b15      	ldr	r3, [pc, #84]	@ (8001c88 <HAL_UART_MspInit+0x11c>)
 8001c32:	699b      	ldr	r3, [r3, #24]
 8001c34:	f003 0304 	and.w	r3, r3, #4
 8001c38:	60bb      	str	r3, [r7, #8]
 8001c3a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001c3c:	2304      	movs	r3, #4
 8001c3e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c40:	2302      	movs	r3, #2
 8001c42:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001c44:	2303      	movs	r3, #3
 8001c46:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c48:	f107 0318 	add.w	r3, r7, #24
 8001c4c:	4619      	mov	r1, r3
 8001c4e:	480f      	ldr	r0, [pc, #60]	@ (8001c8c <HAL_UART_MspInit+0x120>)
 8001c50:	f001 fa18 	bl	8003084 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001c54:	2308      	movs	r3, #8
 8001c56:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c58:	2300      	movs	r3, #0
 8001c5a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c60:	f107 0318 	add.w	r3, r7, #24
 8001c64:	4619      	mov	r1, r3
 8001c66:	4809      	ldr	r0, [pc, #36]	@ (8001c8c <HAL_UART_MspInit+0x120>)
 8001c68:	f001 fa0c 	bl	8003084 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	2100      	movs	r1, #0
 8001c70:	2026      	movs	r0, #38	@ 0x26
 8001c72:	f000 fd4c 	bl	800270e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001c76:	2026      	movs	r0, #38	@ 0x26
 8001c78:	f000 fd65 	bl	8002746 <HAL_NVIC_EnableIRQ>
}
 8001c7c:	bf00      	nop
 8001c7e:	3728      	adds	r7, #40	@ 0x28
 8001c80:	46bd      	mov	sp, r7
 8001c82:	bd80      	pop	{r7, pc}
 8001c84:	40013800 	.word	0x40013800
 8001c88:	40021000 	.word	0x40021000
 8001c8c:	40010800 	.word	0x40010800
 8001c90:	40004400 	.word	0x40004400

08001c94 <Reset_Handler>:
 8001c94:	f7ff fb7c 	bl	8001390 <SystemInit>
 8001c98:	480b      	ldr	r0, [pc, #44]	@ (8001cc8 <LoopFillZerobss+0xe>)
 8001c9a:	490c      	ldr	r1, [pc, #48]	@ (8001ccc <LoopFillZerobss+0x12>)
 8001c9c:	4a0c      	ldr	r2, [pc, #48]	@ (8001cd0 <LoopFillZerobss+0x16>)
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	e002      	b.n	8001ca8 <LoopCopyDataInit>

08001ca2 <CopyDataInit>:
 8001ca2:	58d4      	ldr	r4, [r2, r3]
 8001ca4:	50c4      	str	r4, [r0, r3]
 8001ca6:	3304      	adds	r3, #4

08001ca8 <LoopCopyDataInit>:
 8001ca8:	18c4      	adds	r4, r0, r3
 8001caa:	428c      	cmp	r4, r1
 8001cac:	d3f9      	bcc.n	8001ca2 <CopyDataInit>
 8001cae:	4a09      	ldr	r2, [pc, #36]	@ (8001cd4 <LoopFillZerobss+0x1a>)
 8001cb0:	4c09      	ldr	r4, [pc, #36]	@ (8001cd8 <LoopFillZerobss+0x1e>)
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	e001      	b.n	8001cba <LoopFillZerobss>

08001cb6 <FillZerobss>:
 8001cb6:	6013      	str	r3, [r2, #0]
 8001cb8:	3204      	adds	r2, #4

08001cba <LoopFillZerobss>:
 8001cba:	42a2      	cmp	r2, r4
 8001cbc:	d3fb      	bcc.n	8001cb6 <FillZerobss>
 8001cbe:	f004 f8e9 	bl	8005e94 <__libc_init_array>
 8001cc2:	f7fe fe59 	bl	8000978 <main>
 8001cc6:	4770      	bx	lr
 8001cc8:	20000000 	.word	0x20000000
 8001ccc:	20000038 	.word	0x20000038
 8001cd0:	08005f44 	.word	0x08005f44
 8001cd4:	20000038 	.word	0x20000038
 8001cd8:	20000350 	.word	0x20000350

08001cdc <ADC1_2_IRQHandler>:
 8001cdc:	e7fe      	b.n	8001cdc <ADC1_2_IRQHandler>
	...

08001ce0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001ce4:	4b08      	ldr	r3, [pc, #32]	@ (8001d08 <HAL_Init+0x28>)
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	4a07      	ldr	r2, [pc, #28]	@ (8001d08 <HAL_Init+0x28>)
 8001cea:	f043 0310 	orr.w	r3, r3, #16
 8001cee:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001cf0:	2003      	movs	r0, #3
 8001cf2:	f000 fd01 	bl	80026f8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001cf6:	200f      	movs	r0, #15
 8001cf8:	f000 f808 	bl	8001d0c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001cfc:	f7ff faa4 	bl	8001248 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001d00:	2300      	movs	r3, #0
}
 8001d02:	4618      	mov	r0, r3
 8001d04:	bd80      	pop	{r7, pc}
 8001d06:	bf00      	nop
 8001d08:	40022000 	.word	0x40022000

08001d0c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	b082      	sub	sp, #8
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001d14:	4b12      	ldr	r3, [pc, #72]	@ (8001d60 <HAL_InitTick+0x54>)
 8001d16:	681a      	ldr	r2, [r3, #0]
 8001d18:	4b12      	ldr	r3, [pc, #72]	@ (8001d64 <HAL_InitTick+0x58>)
 8001d1a:	781b      	ldrb	r3, [r3, #0]
 8001d1c:	4619      	mov	r1, r3
 8001d1e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001d22:	fbb3 f3f1 	udiv	r3, r3, r1
 8001d26:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	f000 fd19 	bl	8002762 <HAL_SYSTICK_Config>
 8001d30:	4603      	mov	r3, r0
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d001      	beq.n	8001d3a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001d36:	2301      	movs	r3, #1
 8001d38:	e00e      	b.n	8001d58 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	2b0f      	cmp	r3, #15
 8001d3e:	d80a      	bhi.n	8001d56 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001d40:	2200      	movs	r2, #0
 8001d42:	6879      	ldr	r1, [r7, #4]
 8001d44:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001d48:	f000 fce1 	bl	800270e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001d4c:	4a06      	ldr	r2, [pc, #24]	@ (8001d68 <HAL_InitTick+0x5c>)
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001d52:	2300      	movs	r3, #0
 8001d54:	e000      	b.n	8001d58 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001d56:	2301      	movs	r3, #1
}
 8001d58:	4618      	mov	r0, r3
 8001d5a:	3708      	adds	r7, #8
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	bd80      	pop	{r7, pc}
 8001d60:	2000002c 	.word	0x2000002c
 8001d64:	20000034 	.word	0x20000034
 8001d68:	20000030 	.word	0x20000030

08001d6c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d6c:	b480      	push	{r7}
 8001d6e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001d70:	4b05      	ldr	r3, [pc, #20]	@ (8001d88 <HAL_IncTick+0x1c>)
 8001d72:	781b      	ldrb	r3, [r3, #0]
 8001d74:	461a      	mov	r2, r3
 8001d76:	4b05      	ldr	r3, [pc, #20]	@ (8001d8c <HAL_IncTick+0x20>)
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	4413      	add	r3, r2
 8001d7c:	4a03      	ldr	r2, [pc, #12]	@ (8001d8c <HAL_IncTick+0x20>)
 8001d7e:	6013      	str	r3, [r2, #0]
}
 8001d80:	bf00      	nop
 8001d82:	46bd      	mov	sp, r7
 8001d84:	bc80      	pop	{r7}
 8001d86:	4770      	bx	lr
 8001d88:	20000034 	.word	0x20000034
 8001d8c:	2000034c 	.word	0x2000034c

08001d90 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d90:	b480      	push	{r7}
 8001d92:	af00      	add	r7, sp, #0
  return uwTick;
 8001d94:	4b02      	ldr	r3, [pc, #8]	@ (8001da0 <HAL_GetTick+0x10>)
 8001d96:	681b      	ldr	r3, [r3, #0]
}
 8001d98:	4618      	mov	r0, r3
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	bc80      	pop	{r7}
 8001d9e:	4770      	bx	lr
 8001da0:	2000034c 	.word	0x2000034c

08001da4 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b086      	sub	sp, #24
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001dac:	2300      	movs	r3, #0
 8001dae:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001db0:	2300      	movs	r3, #0
 8001db2:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001db4:	2300      	movs	r3, #0
 8001db6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001db8:	2300      	movs	r3, #0
 8001dba:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d101      	bne.n	8001dc6 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8001dc2:	2301      	movs	r3, #1
 8001dc4:	e0ce      	b.n	8001f64 <HAL_ADC_Init+0x1c0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	689b      	ldr	r3, [r3, #8]
 8001dca:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d109      	bne.n	8001de8 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	2200      	movs	r2, #0
 8001dde:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001de2:	6878      	ldr	r0, [r7, #4]
 8001de4:	f7fe fa5c 	bl	80002a0 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001de8:	6878      	ldr	r0, [r7, #4]
 8001dea:	f000 fb11 	bl	8002410 <ADC_ConversionStop_Disable>
 8001dee:	4603      	mov	r3, r0
 8001df0:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001df6:	f003 0310 	and.w	r3, r3, #16
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	f040 80a9 	bne.w	8001f52 <HAL_ADC_Init+0x1ae>
 8001e00:	7dfb      	ldrb	r3, [r7, #23]
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	f040 80a5 	bne.w	8001f52 <HAL_ADC_Init+0x1ae>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e0c:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001e10:	f023 0302 	bic.w	r3, r3, #2
 8001e14:	f043 0202 	orr.w	r2, r3, #2
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	4951      	ldr	r1, [pc, #324]	@ (8001f6c <HAL_ADC_Init+0x1c8>)
 8001e26:	428b      	cmp	r3, r1
 8001e28:	d10a      	bne.n	8001e40 <HAL_ADC_Init+0x9c>
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	69db      	ldr	r3, [r3, #28]
 8001e2e:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8001e32:	d002      	beq.n	8001e3a <HAL_ADC_Init+0x96>
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	69db      	ldr	r3, [r3, #28]
 8001e38:	e004      	b.n	8001e44 <HAL_ADC_Init+0xa0>
 8001e3a:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8001e3e:	e001      	b.n	8001e44 <HAL_ADC_Init+0xa0>
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001e44:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	7b1b      	ldrb	r3, [r3, #12]
 8001e4a:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001e4c:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001e4e:	68ba      	ldr	r2, [r7, #8]
 8001e50:	4313      	orrs	r3, r2
 8001e52:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	689b      	ldr	r3, [r3, #8]
 8001e58:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001e5c:	d003      	beq.n	8001e66 <HAL_ADC_Init+0xc2>
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	689b      	ldr	r3, [r3, #8]
 8001e62:	2b01      	cmp	r3, #1
 8001e64:	d102      	bne.n	8001e6c <HAL_ADC_Init+0xc8>
 8001e66:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001e6a:	e000      	b.n	8001e6e <HAL_ADC_Init+0xca>
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	693a      	ldr	r2, [r7, #16]
 8001e70:	4313      	orrs	r3, r2
 8001e72:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	7d1b      	ldrb	r3, [r3, #20]
 8001e78:	2b01      	cmp	r3, #1
 8001e7a:	d119      	bne.n	8001eb0 <HAL_ADC_Init+0x10c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	7b1b      	ldrb	r3, [r3, #12]
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d109      	bne.n	8001e98 <HAL_ADC_Init+0xf4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	699b      	ldr	r3, [r3, #24]
 8001e88:	3b01      	subs	r3, #1
 8001e8a:	035a      	lsls	r2, r3, #13
 8001e8c:	693b      	ldr	r3, [r7, #16]
 8001e8e:	4313      	orrs	r3, r2
 8001e90:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001e94:	613b      	str	r3, [r7, #16]
 8001e96:	e00b      	b.n	8001eb0 <HAL_ADC_Init+0x10c>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e9c:	f043 0220 	orr.w	r2, r3, #32
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ea8:	f043 0201 	orr.w	r2, r3, #1
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	685b      	ldr	r3, [r3, #4]
 8001eb6:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	693a      	ldr	r2, [r7, #16]
 8001ec0:	430a      	orrs	r2, r1
 8001ec2:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	689a      	ldr	r2, [r3, #8]
 8001eca:	4b29      	ldr	r3, [pc, #164]	@ (8001f70 <HAL_ADC_Init+0x1cc>)
 8001ecc:	4013      	ands	r3, r2
 8001ece:	687a      	ldr	r2, [r7, #4]
 8001ed0:	6812      	ldr	r2, [r2, #0]
 8001ed2:	68b9      	ldr	r1, [r7, #8]
 8001ed4:	430b      	orrs	r3, r1
 8001ed6:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	689b      	ldr	r3, [r3, #8]
 8001edc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001ee0:	d003      	beq.n	8001eea <HAL_ADC_Init+0x146>
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	689b      	ldr	r3, [r3, #8]
 8001ee6:	2b01      	cmp	r3, #1
 8001ee8:	d104      	bne.n	8001ef4 <HAL_ADC_Init+0x150>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	691b      	ldr	r3, [r3, #16]
 8001eee:	3b01      	subs	r3, #1
 8001ef0:	051b      	lsls	r3, r3, #20
 8001ef2:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001efa:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	68fa      	ldr	r2, [r7, #12]
 8001f04:	430a      	orrs	r2, r1
 8001f06:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	689a      	ldr	r2, [r3, #8]
 8001f0e:	4b19      	ldr	r3, [pc, #100]	@ (8001f74 <HAL_ADC_Init+0x1d0>)
 8001f10:	4013      	ands	r3, r2
 8001f12:	68ba      	ldr	r2, [r7, #8]
 8001f14:	429a      	cmp	r2, r3
 8001f16:	d10b      	bne.n	8001f30 <HAL_ADC_Init+0x18c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f22:	f023 0303 	bic.w	r3, r3, #3
 8001f26:	f043 0201 	orr.w	r2, r3, #1
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001f2e:	e018      	b.n	8001f62 <HAL_ADC_Init+0x1be>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f34:	f023 0312 	bic.w	r3, r3, #18
 8001f38:	f043 0210 	orr.w	r2, r3, #16
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f44:	f043 0201 	orr.w	r2, r3, #1
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001f4c:	2301      	movs	r3, #1
 8001f4e:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001f50:	e007      	b.n	8001f62 <HAL_ADC_Init+0x1be>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f56:	f043 0210 	orr.w	r2, r3, #16
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 8001f5e:	2301      	movs	r3, #1
 8001f60:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001f62:	7dfb      	ldrb	r3, [r7, #23]
}
 8001f64:	4618      	mov	r0, r3
 8001f66:	3718      	adds	r7, #24
 8001f68:	46bd      	mov	sp, r7
 8001f6a:	bd80      	pop	{r7, pc}
 8001f6c:	40013c00 	.word	0x40013c00
 8001f70:	ffe1f7fd 	.word	0xffe1f7fd
 8001f74:	ff1f0efe 	.word	0xff1f0efe

08001f78 <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	b086      	sub	sp, #24
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	60f8      	str	r0, [r7, #12]
 8001f80:	60b9      	str	r1, [r7, #8]
 8001f82:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001f84:	2300      	movs	r3, #0
 8001f86:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	4a64      	ldr	r2, [pc, #400]	@ (8002120 <HAL_ADC_Start_DMA+0x1a8>)
 8001f8e:	4293      	cmp	r3, r2
 8001f90:	d004      	beq.n	8001f9c <HAL_ADC_Start_DMA+0x24>
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	4a63      	ldr	r2, [pc, #396]	@ (8002124 <HAL_ADC_Start_DMA+0x1ac>)
 8001f98:	4293      	cmp	r3, r2
 8001f9a:	d106      	bne.n	8001faa <HAL_ADC_Start_DMA+0x32>
 8001f9c:	4b60      	ldr	r3, [pc, #384]	@ (8002120 <HAL_ADC_Start_DMA+0x1a8>)
 8001f9e:	685b      	ldr	r3, [r3, #4]
 8001fa0:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	f040 80b3 	bne.w	8002110 <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001fb0:	2b01      	cmp	r3, #1
 8001fb2:	d101      	bne.n	8001fb8 <HAL_ADC_Start_DMA+0x40>
 8001fb4:	2302      	movs	r3, #2
 8001fb6:	e0ae      	b.n	8002116 <HAL_ADC_Start_DMA+0x19e>
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	2201      	movs	r2, #1
 8001fbc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001fc0:	68f8      	ldr	r0, [r7, #12]
 8001fc2:	f000 f9cb 	bl	800235c <ADC_Enable>
 8001fc6:	4603      	mov	r3, r0
 8001fc8:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001fca:	7dfb      	ldrb	r3, [r7, #23]
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	f040 809a 	bne.w	8002106 <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001fd6:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8001fda:	f023 0301 	bic.w	r3, r3, #1
 8001fde:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	4a4e      	ldr	r2, [pc, #312]	@ (8002124 <HAL_ADC_Start_DMA+0x1ac>)
 8001fec:	4293      	cmp	r3, r2
 8001fee:	d105      	bne.n	8001ffc <HAL_ADC_Start_DMA+0x84>
 8001ff0:	4b4b      	ldr	r3, [pc, #300]	@ (8002120 <HAL_ADC_Start_DMA+0x1a8>)
 8001ff2:	685b      	ldr	r3, [r3, #4]
 8001ff4:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d115      	bne.n	8002028 <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002000:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	685b      	ldr	r3, [r3, #4]
 800200e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002012:	2b00      	cmp	r3, #0
 8002014:	d026      	beq.n	8002064 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800201a:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800201e:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	629a      	str	r2, [r3, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002026:	e01d      	b.n	8002064 <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800202c:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	4a39      	ldr	r2, [pc, #228]	@ (8002120 <HAL_ADC_Start_DMA+0x1a8>)
 800203a:	4293      	cmp	r3, r2
 800203c:	d004      	beq.n	8002048 <HAL_ADC_Start_DMA+0xd0>
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	4a38      	ldr	r2, [pc, #224]	@ (8002124 <HAL_ADC_Start_DMA+0x1ac>)
 8002044:	4293      	cmp	r3, r2
 8002046:	d10d      	bne.n	8002064 <HAL_ADC_Start_DMA+0xec>
 8002048:	4b35      	ldr	r3, [pc, #212]	@ (8002120 <HAL_ADC_Start_DMA+0x1a8>)
 800204a:	685b      	ldr	r3, [r3, #4]
 800204c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002050:	2b00      	cmp	r3, #0
 8002052:	d007      	beq.n	8002064 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002058:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800205c:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002068:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800206c:	2b00      	cmp	r3, #0
 800206e:	d006      	beq.n	800207e <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002074:	f023 0206 	bic.w	r2, r3, #6
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	62da      	str	r2, [r3, #44]	@ 0x2c
 800207c:	e002      	b.n	8002084 <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	2200      	movs	r2, #0
 8002082:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	2200      	movs	r2, #0
 8002088:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	6a1b      	ldr	r3, [r3, #32]
 8002090:	4a25      	ldr	r2, [pc, #148]	@ (8002128 <HAL_ADC_Start_DMA+0x1b0>)
 8002092:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	6a1b      	ldr	r3, [r3, #32]
 8002098:	4a24      	ldr	r2, [pc, #144]	@ (800212c <HAL_ADC_Start_DMA+0x1b4>)
 800209a:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	6a1b      	ldr	r3, [r3, #32]
 80020a0:	4a23      	ldr	r2, [pc, #140]	@ (8002130 <HAL_ADC_Start_DMA+0x1b8>)
 80020a2:	631a      	str	r2, [r3, #48]	@ 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f06f 0202 	mvn.w	r2, #2
 80020ac:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	689a      	ldr	r2, [r3, #8]
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80020bc:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	6a18      	ldr	r0, [r3, #32]
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	334c      	adds	r3, #76	@ 0x4c
 80020c8:	4619      	mov	r1, r3
 80020ca:	68ba      	ldr	r2, [r7, #8]
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	f000 fbcb 	bl	8002868 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	689b      	ldr	r3, [r3, #8]
 80020d8:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 80020dc:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 80020e0:	d108      	bne.n	80020f4 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	689a      	ldr	r2, [r3, #8]
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 80020f0:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 80020f2:	e00f      	b.n	8002114 <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	689a      	ldr	r2, [r3, #8]
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8002102:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8002104:	e006      	b.n	8002114 <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	2200      	movs	r2, #0
 800210a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    if (tmp_hal_status == HAL_OK)
 800210e:	e001      	b.n	8002114 <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002110:	2301      	movs	r3, #1
 8002112:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002114:	7dfb      	ldrb	r3, [r7, #23]
}
 8002116:	4618      	mov	r0, r3
 8002118:	3718      	adds	r7, #24
 800211a:	46bd      	mov	sp, r7
 800211c:	bd80      	pop	{r7, pc}
 800211e:	bf00      	nop
 8002120:	40012400 	.word	0x40012400
 8002124:	40012800 	.word	0x40012800
 8002128:	08002493 	.word	0x08002493
 800212c:	0800250f 	.word	0x0800250f
 8002130:	0800252b 	.word	0x0800252b

08002134 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002134:	b480      	push	{r7}
 8002136:	b083      	sub	sp, #12
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 800213c:	bf00      	nop
 800213e:	370c      	adds	r7, #12
 8002140:	46bd      	mov	sp, r7
 8002142:	bc80      	pop	{r7}
 8002144:	4770      	bx	lr

08002146 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002146:	b480      	push	{r7}
 8002148:	b083      	sub	sp, #12
 800214a:	af00      	add	r7, sp, #0
 800214c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 800214e:	bf00      	nop
 8002150:	370c      	adds	r7, #12
 8002152:	46bd      	mov	sp, r7
 8002154:	bc80      	pop	{r7}
 8002156:	4770      	bx	lr

08002158 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002158:	b480      	push	{r7}
 800215a:	b083      	sub	sp, #12
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002160:	bf00      	nop
 8002162:	370c      	adds	r7, #12
 8002164:	46bd      	mov	sp, r7
 8002166:	bc80      	pop	{r7}
 8002168:	4770      	bx	lr
	...

0800216c <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 800216c:	b480      	push	{r7}
 800216e:	b085      	sub	sp, #20
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]
 8002174:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002176:	2300      	movs	r3, #0
 8002178:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 800217a:	2300      	movs	r3, #0
 800217c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002184:	2b01      	cmp	r3, #1
 8002186:	d101      	bne.n	800218c <HAL_ADC_ConfigChannel+0x20>
 8002188:	2302      	movs	r3, #2
 800218a:	e0dc      	b.n	8002346 <HAL_ADC_ConfigChannel+0x1da>
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	2201      	movs	r2, #1
 8002190:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002194:	683b      	ldr	r3, [r7, #0]
 8002196:	685b      	ldr	r3, [r3, #4]
 8002198:	2b06      	cmp	r3, #6
 800219a:	d81c      	bhi.n	80021d6 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80021a2:	683b      	ldr	r3, [r7, #0]
 80021a4:	685a      	ldr	r2, [r3, #4]
 80021a6:	4613      	mov	r3, r2
 80021a8:	009b      	lsls	r3, r3, #2
 80021aa:	4413      	add	r3, r2
 80021ac:	3b05      	subs	r3, #5
 80021ae:	221f      	movs	r2, #31
 80021b0:	fa02 f303 	lsl.w	r3, r2, r3
 80021b4:	43db      	mvns	r3, r3
 80021b6:	4019      	ands	r1, r3
 80021b8:	683b      	ldr	r3, [r7, #0]
 80021ba:	6818      	ldr	r0, [r3, #0]
 80021bc:	683b      	ldr	r3, [r7, #0]
 80021be:	685a      	ldr	r2, [r3, #4]
 80021c0:	4613      	mov	r3, r2
 80021c2:	009b      	lsls	r3, r3, #2
 80021c4:	4413      	add	r3, r2
 80021c6:	3b05      	subs	r3, #5
 80021c8:	fa00 f203 	lsl.w	r2, r0, r3
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	430a      	orrs	r2, r1
 80021d2:	635a      	str	r2, [r3, #52]	@ 0x34
 80021d4:	e03c      	b.n	8002250 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80021d6:	683b      	ldr	r3, [r7, #0]
 80021d8:	685b      	ldr	r3, [r3, #4]
 80021da:	2b0c      	cmp	r3, #12
 80021dc:	d81c      	bhi.n	8002218 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80021e4:	683b      	ldr	r3, [r7, #0]
 80021e6:	685a      	ldr	r2, [r3, #4]
 80021e8:	4613      	mov	r3, r2
 80021ea:	009b      	lsls	r3, r3, #2
 80021ec:	4413      	add	r3, r2
 80021ee:	3b23      	subs	r3, #35	@ 0x23
 80021f0:	221f      	movs	r2, #31
 80021f2:	fa02 f303 	lsl.w	r3, r2, r3
 80021f6:	43db      	mvns	r3, r3
 80021f8:	4019      	ands	r1, r3
 80021fa:	683b      	ldr	r3, [r7, #0]
 80021fc:	6818      	ldr	r0, [r3, #0]
 80021fe:	683b      	ldr	r3, [r7, #0]
 8002200:	685a      	ldr	r2, [r3, #4]
 8002202:	4613      	mov	r3, r2
 8002204:	009b      	lsls	r3, r3, #2
 8002206:	4413      	add	r3, r2
 8002208:	3b23      	subs	r3, #35	@ 0x23
 800220a:	fa00 f203 	lsl.w	r2, r0, r3
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	430a      	orrs	r2, r1
 8002214:	631a      	str	r2, [r3, #48]	@ 0x30
 8002216:	e01b      	b.n	8002250 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800221e:	683b      	ldr	r3, [r7, #0]
 8002220:	685a      	ldr	r2, [r3, #4]
 8002222:	4613      	mov	r3, r2
 8002224:	009b      	lsls	r3, r3, #2
 8002226:	4413      	add	r3, r2
 8002228:	3b41      	subs	r3, #65	@ 0x41
 800222a:	221f      	movs	r2, #31
 800222c:	fa02 f303 	lsl.w	r3, r2, r3
 8002230:	43db      	mvns	r3, r3
 8002232:	4019      	ands	r1, r3
 8002234:	683b      	ldr	r3, [r7, #0]
 8002236:	6818      	ldr	r0, [r3, #0]
 8002238:	683b      	ldr	r3, [r7, #0]
 800223a:	685a      	ldr	r2, [r3, #4]
 800223c:	4613      	mov	r3, r2
 800223e:	009b      	lsls	r3, r3, #2
 8002240:	4413      	add	r3, r2
 8002242:	3b41      	subs	r3, #65	@ 0x41
 8002244:	fa00 f203 	lsl.w	r2, r0, r3
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	430a      	orrs	r2, r1
 800224e:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8002250:	683b      	ldr	r3, [r7, #0]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	2b09      	cmp	r3, #9
 8002256:	d91c      	bls.n	8002292 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	68d9      	ldr	r1, [r3, #12]
 800225e:	683b      	ldr	r3, [r7, #0]
 8002260:	681a      	ldr	r2, [r3, #0]
 8002262:	4613      	mov	r3, r2
 8002264:	005b      	lsls	r3, r3, #1
 8002266:	4413      	add	r3, r2
 8002268:	3b1e      	subs	r3, #30
 800226a:	2207      	movs	r2, #7
 800226c:	fa02 f303 	lsl.w	r3, r2, r3
 8002270:	43db      	mvns	r3, r3
 8002272:	4019      	ands	r1, r3
 8002274:	683b      	ldr	r3, [r7, #0]
 8002276:	6898      	ldr	r0, [r3, #8]
 8002278:	683b      	ldr	r3, [r7, #0]
 800227a:	681a      	ldr	r2, [r3, #0]
 800227c:	4613      	mov	r3, r2
 800227e:	005b      	lsls	r3, r3, #1
 8002280:	4413      	add	r3, r2
 8002282:	3b1e      	subs	r3, #30
 8002284:	fa00 f203 	lsl.w	r2, r0, r3
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	430a      	orrs	r2, r1
 800228e:	60da      	str	r2, [r3, #12]
 8002290:	e019      	b.n	80022c6 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	6919      	ldr	r1, [r3, #16]
 8002298:	683b      	ldr	r3, [r7, #0]
 800229a:	681a      	ldr	r2, [r3, #0]
 800229c:	4613      	mov	r3, r2
 800229e:	005b      	lsls	r3, r3, #1
 80022a0:	4413      	add	r3, r2
 80022a2:	2207      	movs	r2, #7
 80022a4:	fa02 f303 	lsl.w	r3, r2, r3
 80022a8:	43db      	mvns	r3, r3
 80022aa:	4019      	ands	r1, r3
 80022ac:	683b      	ldr	r3, [r7, #0]
 80022ae:	6898      	ldr	r0, [r3, #8]
 80022b0:	683b      	ldr	r3, [r7, #0]
 80022b2:	681a      	ldr	r2, [r3, #0]
 80022b4:	4613      	mov	r3, r2
 80022b6:	005b      	lsls	r3, r3, #1
 80022b8:	4413      	add	r3, r2
 80022ba:	fa00 f203 	lsl.w	r2, r0, r3
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	430a      	orrs	r2, r1
 80022c4:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80022c6:	683b      	ldr	r3, [r7, #0]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	2b10      	cmp	r3, #16
 80022cc:	d003      	beq.n	80022d6 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80022ce:	683b      	ldr	r3, [r7, #0]
 80022d0:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80022d2:	2b11      	cmp	r3, #17
 80022d4:	d132      	bne.n	800233c <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	4a1d      	ldr	r2, [pc, #116]	@ (8002350 <HAL_ADC_ConfigChannel+0x1e4>)
 80022dc:	4293      	cmp	r3, r2
 80022de:	d125      	bne.n	800232c <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	689b      	ldr	r3, [r3, #8]
 80022e6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d126      	bne.n	800233c <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	689a      	ldr	r2, [r3, #8]
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 80022fc:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80022fe:	683b      	ldr	r3, [r7, #0]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	2b10      	cmp	r3, #16
 8002304:	d11a      	bne.n	800233c <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002306:	4b13      	ldr	r3, [pc, #76]	@ (8002354 <HAL_ADC_ConfigChannel+0x1e8>)
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	4a13      	ldr	r2, [pc, #76]	@ (8002358 <HAL_ADC_ConfigChannel+0x1ec>)
 800230c:	fba2 2303 	umull	r2, r3, r2, r3
 8002310:	0c9a      	lsrs	r2, r3, #18
 8002312:	4613      	mov	r3, r2
 8002314:	009b      	lsls	r3, r3, #2
 8002316:	4413      	add	r3, r2
 8002318:	005b      	lsls	r3, r3, #1
 800231a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800231c:	e002      	b.n	8002324 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 800231e:	68bb      	ldr	r3, [r7, #8]
 8002320:	3b01      	subs	r3, #1
 8002322:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002324:	68bb      	ldr	r3, [r7, #8]
 8002326:	2b00      	cmp	r3, #0
 8002328:	d1f9      	bne.n	800231e <HAL_ADC_ConfigChannel+0x1b2>
 800232a:	e007      	b.n	800233c <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002330:	f043 0220 	orr.w	r2, r3, #32
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 8002338:	2301      	movs	r3, #1
 800233a:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	2200      	movs	r2, #0
 8002340:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002344:	7bfb      	ldrb	r3, [r7, #15]
}
 8002346:	4618      	mov	r0, r3
 8002348:	3714      	adds	r7, #20
 800234a:	46bd      	mov	sp, r7
 800234c:	bc80      	pop	{r7}
 800234e:	4770      	bx	lr
 8002350:	40012400 	.word	0x40012400
 8002354:	2000002c 	.word	0x2000002c
 8002358:	431bde83 	.word	0x431bde83

0800235c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 800235c:	b580      	push	{r7, lr}
 800235e:	b084      	sub	sp, #16
 8002360:	af00      	add	r7, sp, #0
 8002362:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002364:	2300      	movs	r3, #0
 8002366:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8002368:	2300      	movs	r3, #0
 800236a:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	689b      	ldr	r3, [r3, #8]
 8002372:	f003 0301 	and.w	r3, r3, #1
 8002376:	2b01      	cmp	r3, #1
 8002378:	d040      	beq.n	80023fc <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	689a      	ldr	r2, [r3, #8]
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	f042 0201 	orr.w	r2, r2, #1
 8002388:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800238a:	4b1f      	ldr	r3, [pc, #124]	@ (8002408 <ADC_Enable+0xac>)
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	4a1f      	ldr	r2, [pc, #124]	@ (800240c <ADC_Enable+0xb0>)
 8002390:	fba2 2303 	umull	r2, r3, r2, r3
 8002394:	0c9b      	lsrs	r3, r3, #18
 8002396:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002398:	e002      	b.n	80023a0 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 800239a:	68bb      	ldr	r3, [r7, #8]
 800239c:	3b01      	subs	r3, #1
 800239e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80023a0:	68bb      	ldr	r3, [r7, #8]
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d1f9      	bne.n	800239a <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 80023a6:	f7ff fcf3 	bl	8001d90 <HAL_GetTick>
 80023aa:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 80023ac:	e01f      	b.n	80023ee <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80023ae:	f7ff fcef 	bl	8001d90 <HAL_GetTick>
 80023b2:	4602      	mov	r2, r0
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	1ad3      	subs	r3, r2, r3
 80023b8:	2b02      	cmp	r3, #2
 80023ba:	d918      	bls.n	80023ee <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	689b      	ldr	r3, [r3, #8]
 80023c2:	f003 0301 	and.w	r3, r3, #1
 80023c6:	2b01      	cmp	r3, #1
 80023c8:	d011      	beq.n	80023ee <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023ce:	f043 0210 	orr.w	r2, r3, #16
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023da:	f043 0201 	orr.w	r2, r3, #1
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	62da      	str	r2, [r3, #44]	@ 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	2200      	movs	r2, #0
 80023e6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 80023ea:	2301      	movs	r3, #1
 80023ec:	e007      	b.n	80023fe <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	689b      	ldr	r3, [r3, #8]
 80023f4:	f003 0301 	and.w	r3, r3, #1
 80023f8:	2b01      	cmp	r3, #1
 80023fa:	d1d8      	bne.n	80023ae <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80023fc:	2300      	movs	r3, #0
}
 80023fe:	4618      	mov	r0, r3
 8002400:	3710      	adds	r7, #16
 8002402:	46bd      	mov	sp, r7
 8002404:	bd80      	pop	{r7, pc}
 8002406:	bf00      	nop
 8002408:	2000002c 	.word	0x2000002c
 800240c:	431bde83 	.word	0x431bde83

08002410 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8002410:	b580      	push	{r7, lr}
 8002412:	b084      	sub	sp, #16
 8002414:	af00      	add	r7, sp, #0
 8002416:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002418:	2300      	movs	r3, #0
 800241a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	689b      	ldr	r3, [r3, #8]
 8002422:	f003 0301 	and.w	r3, r3, #1
 8002426:	2b01      	cmp	r3, #1
 8002428:	d12e      	bne.n	8002488 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	689a      	ldr	r2, [r3, #8]
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f022 0201 	bic.w	r2, r2, #1
 8002438:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 800243a:	f7ff fca9 	bl	8001d90 <HAL_GetTick>
 800243e:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002440:	e01b      	b.n	800247a <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002442:	f7ff fca5 	bl	8001d90 <HAL_GetTick>
 8002446:	4602      	mov	r2, r0
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	1ad3      	subs	r3, r2, r3
 800244c:	2b02      	cmp	r3, #2
 800244e:	d914      	bls.n	800247a <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	689b      	ldr	r3, [r3, #8]
 8002456:	f003 0301 	and.w	r3, r3, #1
 800245a:	2b01      	cmp	r3, #1
 800245c:	d10d      	bne.n	800247a <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002462:	f043 0210 	orr.w	r2, r3, #16
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800246e:	f043 0201 	orr.w	r2, r3, #1
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 8002476:	2301      	movs	r3, #1
 8002478:	e007      	b.n	800248a <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	689b      	ldr	r3, [r3, #8]
 8002480:	f003 0301 	and.w	r3, r3, #1
 8002484:	2b01      	cmp	r3, #1
 8002486:	d0dc      	beq.n	8002442 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002488:	2300      	movs	r3, #0
}
 800248a:	4618      	mov	r0, r3
 800248c:	3710      	adds	r7, #16
 800248e:	46bd      	mov	sp, r7
 8002490:	bd80      	pop	{r7, pc}

08002492 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002492:	b580      	push	{r7, lr}
 8002494:	b084      	sub	sp, #16
 8002496:	af00      	add	r7, sp, #0
 8002498:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800249e:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024a4:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d127      	bne.n	80024fc <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024b0:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	629a      	str	r2, [r3, #40]	@ 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	689b      	ldr	r3, [r3, #8]
 80024be:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 80024c2:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 80024c6:	d115      	bne.n	80024f4 <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d111      	bne.n	80024f4 <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024d4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	629a      	str	r2, [r3, #40]	@ 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024e0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d105      	bne.n	80024f4 <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024ec:	f043 0201 	orr.w	r2, r3, #1
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80024f4:	68f8      	ldr	r0, [r7, #12]
 80024f6:	f7ff fe1d 	bl	8002134 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 80024fa:	e004      	b.n	8002506 <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	6a1b      	ldr	r3, [r3, #32]
 8002500:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002502:	6878      	ldr	r0, [r7, #4]
 8002504:	4798      	blx	r3
}
 8002506:	bf00      	nop
 8002508:	3710      	adds	r7, #16
 800250a:	46bd      	mov	sp, r7
 800250c:	bd80      	pop	{r7, pc}

0800250e <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800250e:	b580      	push	{r7, lr}
 8002510:	b084      	sub	sp, #16
 8002512:	af00      	add	r7, sp, #0
 8002514:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800251a:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800251c:	68f8      	ldr	r0, [r7, #12]
 800251e:	f7ff fe12 	bl	8002146 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002522:	bf00      	nop
 8002524:	3710      	adds	r7, #16
 8002526:	46bd      	mov	sp, r7
 8002528:	bd80      	pop	{r7, pc}

0800252a <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800252a:	b580      	push	{r7, lr}
 800252c:	b084      	sub	sp, #16
 800252e:	af00      	add	r7, sp, #0
 8002530:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002536:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800253c:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	629a      	str	r2, [r3, #40]	@ 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002548:	f043 0204 	orr.w	r2, r3, #4
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002550:	68f8      	ldr	r0, [r7, #12]
 8002552:	f7ff fe01 	bl	8002158 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002556:	bf00      	nop
 8002558:	3710      	adds	r7, #16
 800255a:	46bd      	mov	sp, r7
 800255c:	bd80      	pop	{r7, pc}
	...

08002560 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002560:	b480      	push	{r7}
 8002562:	b085      	sub	sp, #20
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	f003 0307 	and.w	r3, r3, #7
 800256e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002570:	4b0c      	ldr	r3, [pc, #48]	@ (80025a4 <__NVIC_SetPriorityGrouping+0x44>)
 8002572:	68db      	ldr	r3, [r3, #12]
 8002574:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002576:	68ba      	ldr	r2, [r7, #8]
 8002578:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800257c:	4013      	ands	r3, r2
 800257e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002584:	68bb      	ldr	r3, [r7, #8]
 8002586:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002588:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800258c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002590:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002592:	4a04      	ldr	r2, [pc, #16]	@ (80025a4 <__NVIC_SetPriorityGrouping+0x44>)
 8002594:	68bb      	ldr	r3, [r7, #8]
 8002596:	60d3      	str	r3, [r2, #12]
}
 8002598:	bf00      	nop
 800259a:	3714      	adds	r7, #20
 800259c:	46bd      	mov	sp, r7
 800259e:	bc80      	pop	{r7}
 80025a0:	4770      	bx	lr
 80025a2:	bf00      	nop
 80025a4:	e000ed00 	.word	0xe000ed00

080025a8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80025a8:	b480      	push	{r7}
 80025aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80025ac:	4b04      	ldr	r3, [pc, #16]	@ (80025c0 <__NVIC_GetPriorityGrouping+0x18>)
 80025ae:	68db      	ldr	r3, [r3, #12]
 80025b0:	0a1b      	lsrs	r3, r3, #8
 80025b2:	f003 0307 	and.w	r3, r3, #7
}
 80025b6:	4618      	mov	r0, r3
 80025b8:	46bd      	mov	sp, r7
 80025ba:	bc80      	pop	{r7}
 80025bc:	4770      	bx	lr
 80025be:	bf00      	nop
 80025c0:	e000ed00 	.word	0xe000ed00

080025c4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80025c4:	b480      	push	{r7}
 80025c6:	b083      	sub	sp, #12
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	4603      	mov	r3, r0
 80025cc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	db0b      	blt.n	80025ee <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80025d6:	79fb      	ldrb	r3, [r7, #7]
 80025d8:	f003 021f 	and.w	r2, r3, #31
 80025dc:	4906      	ldr	r1, [pc, #24]	@ (80025f8 <__NVIC_EnableIRQ+0x34>)
 80025de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025e2:	095b      	lsrs	r3, r3, #5
 80025e4:	2001      	movs	r0, #1
 80025e6:	fa00 f202 	lsl.w	r2, r0, r2
 80025ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80025ee:	bf00      	nop
 80025f0:	370c      	adds	r7, #12
 80025f2:	46bd      	mov	sp, r7
 80025f4:	bc80      	pop	{r7}
 80025f6:	4770      	bx	lr
 80025f8:	e000e100 	.word	0xe000e100

080025fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80025fc:	b480      	push	{r7}
 80025fe:	b083      	sub	sp, #12
 8002600:	af00      	add	r7, sp, #0
 8002602:	4603      	mov	r3, r0
 8002604:	6039      	str	r1, [r7, #0]
 8002606:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002608:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800260c:	2b00      	cmp	r3, #0
 800260e:	db0a      	blt.n	8002626 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002610:	683b      	ldr	r3, [r7, #0]
 8002612:	b2da      	uxtb	r2, r3
 8002614:	490c      	ldr	r1, [pc, #48]	@ (8002648 <__NVIC_SetPriority+0x4c>)
 8002616:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800261a:	0112      	lsls	r2, r2, #4
 800261c:	b2d2      	uxtb	r2, r2
 800261e:	440b      	add	r3, r1
 8002620:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002624:	e00a      	b.n	800263c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002626:	683b      	ldr	r3, [r7, #0]
 8002628:	b2da      	uxtb	r2, r3
 800262a:	4908      	ldr	r1, [pc, #32]	@ (800264c <__NVIC_SetPriority+0x50>)
 800262c:	79fb      	ldrb	r3, [r7, #7]
 800262e:	f003 030f 	and.w	r3, r3, #15
 8002632:	3b04      	subs	r3, #4
 8002634:	0112      	lsls	r2, r2, #4
 8002636:	b2d2      	uxtb	r2, r2
 8002638:	440b      	add	r3, r1
 800263a:	761a      	strb	r2, [r3, #24]
}
 800263c:	bf00      	nop
 800263e:	370c      	adds	r7, #12
 8002640:	46bd      	mov	sp, r7
 8002642:	bc80      	pop	{r7}
 8002644:	4770      	bx	lr
 8002646:	bf00      	nop
 8002648:	e000e100 	.word	0xe000e100
 800264c:	e000ed00 	.word	0xe000ed00

08002650 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002650:	b480      	push	{r7}
 8002652:	b089      	sub	sp, #36	@ 0x24
 8002654:	af00      	add	r7, sp, #0
 8002656:	60f8      	str	r0, [r7, #12]
 8002658:	60b9      	str	r1, [r7, #8]
 800265a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	f003 0307 	and.w	r3, r3, #7
 8002662:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002664:	69fb      	ldr	r3, [r7, #28]
 8002666:	f1c3 0307 	rsb	r3, r3, #7
 800266a:	2b04      	cmp	r3, #4
 800266c:	bf28      	it	cs
 800266e:	2304      	movcs	r3, #4
 8002670:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002672:	69fb      	ldr	r3, [r7, #28]
 8002674:	3304      	adds	r3, #4
 8002676:	2b06      	cmp	r3, #6
 8002678:	d902      	bls.n	8002680 <NVIC_EncodePriority+0x30>
 800267a:	69fb      	ldr	r3, [r7, #28]
 800267c:	3b03      	subs	r3, #3
 800267e:	e000      	b.n	8002682 <NVIC_EncodePriority+0x32>
 8002680:	2300      	movs	r3, #0
 8002682:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002684:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002688:	69bb      	ldr	r3, [r7, #24]
 800268a:	fa02 f303 	lsl.w	r3, r2, r3
 800268e:	43da      	mvns	r2, r3
 8002690:	68bb      	ldr	r3, [r7, #8]
 8002692:	401a      	ands	r2, r3
 8002694:	697b      	ldr	r3, [r7, #20]
 8002696:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002698:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800269c:	697b      	ldr	r3, [r7, #20]
 800269e:	fa01 f303 	lsl.w	r3, r1, r3
 80026a2:	43d9      	mvns	r1, r3
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026a8:	4313      	orrs	r3, r2
         );
}
 80026aa:	4618      	mov	r0, r3
 80026ac:	3724      	adds	r7, #36	@ 0x24
 80026ae:	46bd      	mov	sp, r7
 80026b0:	bc80      	pop	{r7}
 80026b2:	4770      	bx	lr

080026b4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80026b4:	b580      	push	{r7, lr}
 80026b6:	b082      	sub	sp, #8
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	3b01      	subs	r3, #1
 80026c0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80026c4:	d301      	bcc.n	80026ca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80026c6:	2301      	movs	r3, #1
 80026c8:	e00f      	b.n	80026ea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80026ca:	4a0a      	ldr	r2, [pc, #40]	@ (80026f4 <SysTick_Config+0x40>)
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	3b01      	subs	r3, #1
 80026d0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80026d2:	210f      	movs	r1, #15
 80026d4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80026d8:	f7ff ff90 	bl	80025fc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80026dc:	4b05      	ldr	r3, [pc, #20]	@ (80026f4 <SysTick_Config+0x40>)
 80026de:	2200      	movs	r2, #0
 80026e0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80026e2:	4b04      	ldr	r3, [pc, #16]	@ (80026f4 <SysTick_Config+0x40>)
 80026e4:	2207      	movs	r2, #7
 80026e6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80026e8:	2300      	movs	r3, #0
}
 80026ea:	4618      	mov	r0, r3
 80026ec:	3708      	adds	r7, #8
 80026ee:	46bd      	mov	sp, r7
 80026f0:	bd80      	pop	{r7, pc}
 80026f2:	bf00      	nop
 80026f4:	e000e010 	.word	0xe000e010

080026f8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026f8:	b580      	push	{r7, lr}
 80026fa:	b082      	sub	sp, #8
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002700:	6878      	ldr	r0, [r7, #4]
 8002702:	f7ff ff2d 	bl	8002560 <__NVIC_SetPriorityGrouping>
}
 8002706:	bf00      	nop
 8002708:	3708      	adds	r7, #8
 800270a:	46bd      	mov	sp, r7
 800270c:	bd80      	pop	{r7, pc}

0800270e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800270e:	b580      	push	{r7, lr}
 8002710:	b086      	sub	sp, #24
 8002712:	af00      	add	r7, sp, #0
 8002714:	4603      	mov	r3, r0
 8002716:	60b9      	str	r1, [r7, #8]
 8002718:	607a      	str	r2, [r7, #4]
 800271a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800271c:	2300      	movs	r3, #0
 800271e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002720:	f7ff ff42 	bl	80025a8 <__NVIC_GetPriorityGrouping>
 8002724:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002726:	687a      	ldr	r2, [r7, #4]
 8002728:	68b9      	ldr	r1, [r7, #8]
 800272a:	6978      	ldr	r0, [r7, #20]
 800272c:	f7ff ff90 	bl	8002650 <NVIC_EncodePriority>
 8002730:	4602      	mov	r2, r0
 8002732:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002736:	4611      	mov	r1, r2
 8002738:	4618      	mov	r0, r3
 800273a:	f7ff ff5f 	bl	80025fc <__NVIC_SetPriority>
}
 800273e:	bf00      	nop
 8002740:	3718      	adds	r7, #24
 8002742:	46bd      	mov	sp, r7
 8002744:	bd80      	pop	{r7, pc}

08002746 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002746:	b580      	push	{r7, lr}
 8002748:	b082      	sub	sp, #8
 800274a:	af00      	add	r7, sp, #0
 800274c:	4603      	mov	r3, r0
 800274e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002750:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002754:	4618      	mov	r0, r3
 8002756:	f7ff ff35 	bl	80025c4 <__NVIC_EnableIRQ>
}
 800275a:	bf00      	nop
 800275c:	3708      	adds	r7, #8
 800275e:	46bd      	mov	sp, r7
 8002760:	bd80      	pop	{r7, pc}

08002762 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002762:	b580      	push	{r7, lr}
 8002764:	b082      	sub	sp, #8
 8002766:	af00      	add	r7, sp, #0
 8002768:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800276a:	6878      	ldr	r0, [r7, #4]
 800276c:	f7ff ffa2 	bl	80026b4 <SysTick_Config>
 8002770:	4603      	mov	r3, r0
}
 8002772:	4618      	mov	r0, r3
 8002774:	3708      	adds	r7, #8
 8002776:	46bd      	mov	sp, r7
 8002778:	bd80      	pop	{r7, pc}
	...

0800277c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800277c:	b480      	push	{r7}
 800277e:	b085      	sub	sp, #20
 8002780:	af00      	add	r7, sp, #0
 8002782:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002784:	2300      	movs	r3, #0
 8002786:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	2b00      	cmp	r3, #0
 800278c:	d101      	bne.n	8002792 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800278e:	2301      	movs	r3, #1
 8002790:	e059      	b.n	8002846 <HAL_DMA_Init+0xca>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	461a      	mov	r2, r3
 8002798:	4b2d      	ldr	r3, [pc, #180]	@ (8002850 <HAL_DMA_Init+0xd4>)
 800279a:	429a      	cmp	r2, r3
 800279c:	d80f      	bhi.n	80027be <HAL_DMA_Init+0x42>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	461a      	mov	r2, r3
 80027a4:	4b2b      	ldr	r3, [pc, #172]	@ (8002854 <HAL_DMA_Init+0xd8>)
 80027a6:	4413      	add	r3, r2
 80027a8:	4a2b      	ldr	r2, [pc, #172]	@ (8002858 <HAL_DMA_Init+0xdc>)
 80027aa:	fba2 2303 	umull	r2, r3, r2, r3
 80027ae:	091b      	lsrs	r3, r3, #4
 80027b0:	009a      	lsls	r2, r3, #2
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	641a      	str	r2, [r3, #64]	@ 0x40
    hdma->DmaBaseAddress = DMA1;
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	4a28      	ldr	r2, [pc, #160]	@ (800285c <HAL_DMA_Init+0xe0>)
 80027ba:	63da      	str	r2, [r3, #60]	@ 0x3c
 80027bc:	e00e      	b.n	80027dc <HAL_DMA_Init+0x60>
  }
  else 
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	461a      	mov	r2, r3
 80027c4:	4b26      	ldr	r3, [pc, #152]	@ (8002860 <HAL_DMA_Init+0xe4>)
 80027c6:	4413      	add	r3, r2
 80027c8:	4a23      	ldr	r2, [pc, #140]	@ (8002858 <HAL_DMA_Init+0xdc>)
 80027ca:	fba2 2303 	umull	r2, r3, r2, r3
 80027ce:	091b      	lsrs	r3, r3, #4
 80027d0:	009a      	lsls	r2, r3, #2
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	641a      	str	r2, [r3, #64]	@ 0x40
    hdma->DmaBaseAddress = DMA2;
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	4a22      	ldr	r2, [pc, #136]	@ (8002864 <HAL_DMA_Init+0xe8>)
 80027da:	63da      	str	r2, [r3, #60]	@ 0x3c
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	2202      	movs	r2, #2
 80027e0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80027f2:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 80027f6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8002800:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	68db      	ldr	r3, [r3, #12]
 8002806:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800280c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	695b      	ldr	r3, [r3, #20]
 8002812:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002818:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	69db      	ldr	r3, [r3, #28]
 800281e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002820:	68fa      	ldr	r2, [r7, #12]
 8002822:	4313      	orrs	r3, r2
 8002824:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	68fa      	ldr	r2, [r7, #12]
 800282c:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	2200      	movs	r2, #0
 8002832:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	2201      	movs	r2, #1
 8002838:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	2200      	movs	r2, #0
 8002840:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8002844:	2300      	movs	r3, #0
}
 8002846:	4618      	mov	r0, r3
 8002848:	3714      	adds	r7, #20
 800284a:	46bd      	mov	sp, r7
 800284c:	bc80      	pop	{r7}
 800284e:	4770      	bx	lr
 8002850:	40020407 	.word	0x40020407
 8002854:	bffdfff8 	.word	0xbffdfff8
 8002858:	cccccccd 	.word	0xcccccccd
 800285c:	40020000 	.word	0x40020000
 8002860:	bffdfbf8 	.word	0xbffdfbf8
 8002864:	40020400 	.word	0x40020400

08002868 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002868:	b580      	push	{r7, lr}
 800286a:	b086      	sub	sp, #24
 800286c:	af00      	add	r7, sp, #0
 800286e:	60f8      	str	r0, [r7, #12]
 8002870:	60b9      	str	r1, [r7, #8]
 8002872:	607a      	str	r2, [r7, #4]
 8002874:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002876:	2300      	movs	r3, #0
 8002878:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002880:	2b01      	cmp	r3, #1
 8002882:	d101      	bne.n	8002888 <HAL_DMA_Start_IT+0x20>
 8002884:	2302      	movs	r3, #2
 8002886:	e04b      	b.n	8002920 <HAL_DMA_Start_IT+0xb8>
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	2201      	movs	r2, #1
 800288c:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002896:	b2db      	uxtb	r3, r3
 8002898:	2b01      	cmp	r3, #1
 800289a:	d13a      	bne.n	8002912 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	2202      	movs	r2, #2
 80028a0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	2200      	movs	r2, #0
 80028a8:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	681a      	ldr	r2, [r3, #0]
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f022 0201 	bic.w	r2, r2, #1
 80028b8:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80028ba:	683b      	ldr	r3, [r7, #0]
 80028bc:	687a      	ldr	r2, [r7, #4]
 80028be:	68b9      	ldr	r1, [r7, #8]
 80028c0:	68f8      	ldr	r0, [r7, #12]
 80028c2:	f000 fbb1 	bl	8003028 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d008      	beq.n	80028e0 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	681a      	ldr	r2, [r3, #0]
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f042 020e 	orr.w	r2, r2, #14
 80028dc:	601a      	str	r2, [r3, #0]
 80028de:	e00f      	b.n	8002900 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	681a      	ldr	r2, [r3, #0]
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f022 0204 	bic.w	r2, r2, #4
 80028ee:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	681a      	ldr	r2, [r3, #0]
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f042 020a 	orr.w	r2, r2, #10
 80028fe:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	681a      	ldr	r2, [r3, #0]
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f042 0201 	orr.w	r2, r2, #1
 800290e:	601a      	str	r2, [r3, #0]
 8002910:	e005      	b.n	800291e <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	2200      	movs	r2, #0
 8002916:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 800291a:	2302      	movs	r3, #2
 800291c:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 800291e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002920:	4618      	mov	r0, r3
 8002922:	3718      	adds	r7, #24
 8002924:	46bd      	mov	sp, r7
 8002926:	bd80      	pop	{r7, pc}

08002928 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002928:	b480      	push	{r7}
 800292a:	b085      	sub	sp, #20
 800292c:	af00      	add	r7, sp, #0
 800292e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002930:	2300      	movs	r3, #0
 8002932:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800293a:	b2db      	uxtb	r3, r3
 800293c:	2b02      	cmp	r3, #2
 800293e:	d008      	beq.n	8002952 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	2204      	movs	r2, #4
 8002944:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	2200      	movs	r2, #0
 800294a:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 800294e:	2301      	movs	r3, #1
 8002950:	e020      	b.n	8002994 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	681a      	ldr	r2, [r3, #0]
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f022 020e 	bic.w	r2, r2, #14
 8002960:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	681a      	ldr	r2, [r3, #0]
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f022 0201 	bic.w	r2, r2, #1
 8002970:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800297a:	2101      	movs	r1, #1
 800297c:	fa01 f202 	lsl.w	r2, r1, r2
 8002980:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	2201      	movs	r2, #1
 8002986:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	2200      	movs	r2, #0
 800298e:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8002992:	7bfb      	ldrb	r3, [r7, #15]
}
 8002994:	4618      	mov	r0, r3
 8002996:	3714      	adds	r7, #20
 8002998:	46bd      	mov	sp, r7
 800299a:	bc80      	pop	{r7}
 800299c:	4770      	bx	lr
	...

080029a0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80029a0:	b580      	push	{r7, lr}
 80029a2:	b084      	sub	sp, #16
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80029a8:	2300      	movs	r3, #0
 80029aa:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80029b2:	b2db      	uxtb	r3, r3
 80029b4:	2b02      	cmp	r3, #2
 80029b6:	d005      	beq.n	80029c4 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	2204      	movs	r2, #4
 80029bc:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 80029be:	2301      	movs	r3, #1
 80029c0:	73fb      	strb	r3, [r7, #15]
 80029c2:	e0d6      	b.n	8002b72 <HAL_DMA_Abort_IT+0x1d2>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	681a      	ldr	r2, [r3, #0]
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f022 020e 	bic.w	r2, r2, #14
 80029d2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	681a      	ldr	r2, [r3, #0]
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f022 0201 	bic.w	r2, r2, #1
 80029e2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	461a      	mov	r2, r3
 80029ea:	4b64      	ldr	r3, [pc, #400]	@ (8002b7c <HAL_DMA_Abort_IT+0x1dc>)
 80029ec:	429a      	cmp	r2, r3
 80029ee:	d958      	bls.n	8002aa2 <HAL_DMA_Abort_IT+0x102>
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	4a62      	ldr	r2, [pc, #392]	@ (8002b80 <HAL_DMA_Abort_IT+0x1e0>)
 80029f6:	4293      	cmp	r3, r2
 80029f8:	d04f      	beq.n	8002a9a <HAL_DMA_Abort_IT+0xfa>
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	4a61      	ldr	r2, [pc, #388]	@ (8002b84 <HAL_DMA_Abort_IT+0x1e4>)
 8002a00:	4293      	cmp	r3, r2
 8002a02:	d048      	beq.n	8002a96 <HAL_DMA_Abort_IT+0xf6>
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	4a5f      	ldr	r2, [pc, #380]	@ (8002b88 <HAL_DMA_Abort_IT+0x1e8>)
 8002a0a:	4293      	cmp	r3, r2
 8002a0c:	d040      	beq.n	8002a90 <HAL_DMA_Abort_IT+0xf0>
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	4a5e      	ldr	r2, [pc, #376]	@ (8002b8c <HAL_DMA_Abort_IT+0x1ec>)
 8002a14:	4293      	cmp	r3, r2
 8002a16:	d038      	beq.n	8002a8a <HAL_DMA_Abort_IT+0xea>
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	4a5c      	ldr	r2, [pc, #368]	@ (8002b90 <HAL_DMA_Abort_IT+0x1f0>)
 8002a1e:	4293      	cmp	r3, r2
 8002a20:	d030      	beq.n	8002a84 <HAL_DMA_Abort_IT+0xe4>
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	4a5b      	ldr	r2, [pc, #364]	@ (8002b94 <HAL_DMA_Abort_IT+0x1f4>)
 8002a28:	4293      	cmp	r3, r2
 8002a2a:	d028      	beq.n	8002a7e <HAL_DMA_Abort_IT+0xde>
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	4a52      	ldr	r2, [pc, #328]	@ (8002b7c <HAL_DMA_Abort_IT+0x1dc>)
 8002a32:	4293      	cmp	r3, r2
 8002a34:	d020      	beq.n	8002a78 <HAL_DMA_Abort_IT+0xd8>
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	4a57      	ldr	r2, [pc, #348]	@ (8002b98 <HAL_DMA_Abort_IT+0x1f8>)
 8002a3c:	4293      	cmp	r3, r2
 8002a3e:	d019      	beq.n	8002a74 <HAL_DMA_Abort_IT+0xd4>
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	4a55      	ldr	r2, [pc, #340]	@ (8002b9c <HAL_DMA_Abort_IT+0x1fc>)
 8002a46:	4293      	cmp	r3, r2
 8002a48:	d012      	beq.n	8002a70 <HAL_DMA_Abort_IT+0xd0>
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	4a54      	ldr	r2, [pc, #336]	@ (8002ba0 <HAL_DMA_Abort_IT+0x200>)
 8002a50:	4293      	cmp	r3, r2
 8002a52:	d00a      	beq.n	8002a6a <HAL_DMA_Abort_IT+0xca>
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	4a52      	ldr	r2, [pc, #328]	@ (8002ba4 <HAL_DMA_Abort_IT+0x204>)
 8002a5a:	4293      	cmp	r3, r2
 8002a5c:	d102      	bne.n	8002a64 <HAL_DMA_Abort_IT+0xc4>
 8002a5e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002a62:	e01b      	b.n	8002a9c <HAL_DMA_Abort_IT+0xfc>
 8002a64:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002a68:	e018      	b.n	8002a9c <HAL_DMA_Abort_IT+0xfc>
 8002a6a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002a6e:	e015      	b.n	8002a9c <HAL_DMA_Abort_IT+0xfc>
 8002a70:	2310      	movs	r3, #16
 8002a72:	e013      	b.n	8002a9c <HAL_DMA_Abort_IT+0xfc>
 8002a74:	2301      	movs	r3, #1
 8002a76:	e011      	b.n	8002a9c <HAL_DMA_Abort_IT+0xfc>
 8002a78:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002a7c:	e00e      	b.n	8002a9c <HAL_DMA_Abort_IT+0xfc>
 8002a7e:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8002a82:	e00b      	b.n	8002a9c <HAL_DMA_Abort_IT+0xfc>
 8002a84:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002a88:	e008      	b.n	8002a9c <HAL_DMA_Abort_IT+0xfc>
 8002a8a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002a8e:	e005      	b.n	8002a9c <HAL_DMA_Abort_IT+0xfc>
 8002a90:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002a94:	e002      	b.n	8002a9c <HAL_DMA_Abort_IT+0xfc>
 8002a96:	2310      	movs	r3, #16
 8002a98:	e000      	b.n	8002a9c <HAL_DMA_Abort_IT+0xfc>
 8002a9a:	2301      	movs	r3, #1
 8002a9c:	4a42      	ldr	r2, [pc, #264]	@ (8002ba8 <HAL_DMA_Abort_IT+0x208>)
 8002a9e:	6053      	str	r3, [r2, #4]
 8002aa0:	e057      	b.n	8002b52 <HAL_DMA_Abort_IT+0x1b2>
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	4a36      	ldr	r2, [pc, #216]	@ (8002b80 <HAL_DMA_Abort_IT+0x1e0>)
 8002aa8:	4293      	cmp	r3, r2
 8002aaa:	d04f      	beq.n	8002b4c <HAL_DMA_Abort_IT+0x1ac>
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	4a34      	ldr	r2, [pc, #208]	@ (8002b84 <HAL_DMA_Abort_IT+0x1e4>)
 8002ab2:	4293      	cmp	r3, r2
 8002ab4:	d048      	beq.n	8002b48 <HAL_DMA_Abort_IT+0x1a8>
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	4a33      	ldr	r2, [pc, #204]	@ (8002b88 <HAL_DMA_Abort_IT+0x1e8>)
 8002abc:	4293      	cmp	r3, r2
 8002abe:	d040      	beq.n	8002b42 <HAL_DMA_Abort_IT+0x1a2>
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	4a31      	ldr	r2, [pc, #196]	@ (8002b8c <HAL_DMA_Abort_IT+0x1ec>)
 8002ac6:	4293      	cmp	r3, r2
 8002ac8:	d038      	beq.n	8002b3c <HAL_DMA_Abort_IT+0x19c>
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	4a30      	ldr	r2, [pc, #192]	@ (8002b90 <HAL_DMA_Abort_IT+0x1f0>)
 8002ad0:	4293      	cmp	r3, r2
 8002ad2:	d030      	beq.n	8002b36 <HAL_DMA_Abort_IT+0x196>
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	4a2e      	ldr	r2, [pc, #184]	@ (8002b94 <HAL_DMA_Abort_IT+0x1f4>)
 8002ada:	4293      	cmp	r3, r2
 8002adc:	d028      	beq.n	8002b30 <HAL_DMA_Abort_IT+0x190>
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	4a26      	ldr	r2, [pc, #152]	@ (8002b7c <HAL_DMA_Abort_IT+0x1dc>)
 8002ae4:	4293      	cmp	r3, r2
 8002ae6:	d020      	beq.n	8002b2a <HAL_DMA_Abort_IT+0x18a>
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	4a2a      	ldr	r2, [pc, #168]	@ (8002b98 <HAL_DMA_Abort_IT+0x1f8>)
 8002aee:	4293      	cmp	r3, r2
 8002af0:	d019      	beq.n	8002b26 <HAL_DMA_Abort_IT+0x186>
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	4a29      	ldr	r2, [pc, #164]	@ (8002b9c <HAL_DMA_Abort_IT+0x1fc>)
 8002af8:	4293      	cmp	r3, r2
 8002afa:	d012      	beq.n	8002b22 <HAL_DMA_Abort_IT+0x182>
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	4a27      	ldr	r2, [pc, #156]	@ (8002ba0 <HAL_DMA_Abort_IT+0x200>)
 8002b02:	4293      	cmp	r3, r2
 8002b04:	d00a      	beq.n	8002b1c <HAL_DMA_Abort_IT+0x17c>
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	4a26      	ldr	r2, [pc, #152]	@ (8002ba4 <HAL_DMA_Abort_IT+0x204>)
 8002b0c:	4293      	cmp	r3, r2
 8002b0e:	d102      	bne.n	8002b16 <HAL_DMA_Abort_IT+0x176>
 8002b10:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002b14:	e01b      	b.n	8002b4e <HAL_DMA_Abort_IT+0x1ae>
 8002b16:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002b1a:	e018      	b.n	8002b4e <HAL_DMA_Abort_IT+0x1ae>
 8002b1c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002b20:	e015      	b.n	8002b4e <HAL_DMA_Abort_IT+0x1ae>
 8002b22:	2310      	movs	r3, #16
 8002b24:	e013      	b.n	8002b4e <HAL_DMA_Abort_IT+0x1ae>
 8002b26:	2301      	movs	r3, #1
 8002b28:	e011      	b.n	8002b4e <HAL_DMA_Abort_IT+0x1ae>
 8002b2a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002b2e:	e00e      	b.n	8002b4e <HAL_DMA_Abort_IT+0x1ae>
 8002b30:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8002b34:	e00b      	b.n	8002b4e <HAL_DMA_Abort_IT+0x1ae>
 8002b36:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002b3a:	e008      	b.n	8002b4e <HAL_DMA_Abort_IT+0x1ae>
 8002b3c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002b40:	e005      	b.n	8002b4e <HAL_DMA_Abort_IT+0x1ae>
 8002b42:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002b46:	e002      	b.n	8002b4e <HAL_DMA_Abort_IT+0x1ae>
 8002b48:	2310      	movs	r3, #16
 8002b4a:	e000      	b.n	8002b4e <HAL_DMA_Abort_IT+0x1ae>
 8002b4c:	2301      	movs	r3, #1
 8002b4e:	4a17      	ldr	r2, [pc, #92]	@ (8002bac <HAL_DMA_Abort_IT+0x20c>)
 8002b50:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	2201      	movs	r2, #1
 8002b56:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d003      	beq.n	8002b72 <HAL_DMA_Abort_IT+0x1d2>
    {
      hdma->XferAbortCallback(hdma);
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002b6e:	6878      	ldr	r0, [r7, #4]
 8002b70:	4798      	blx	r3
    } 
  }
  return status;
 8002b72:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b74:	4618      	mov	r0, r3
 8002b76:	3710      	adds	r7, #16
 8002b78:	46bd      	mov	sp, r7
 8002b7a:	bd80      	pop	{r7, pc}
 8002b7c:	40020080 	.word	0x40020080
 8002b80:	40020008 	.word	0x40020008
 8002b84:	4002001c 	.word	0x4002001c
 8002b88:	40020030 	.word	0x40020030
 8002b8c:	40020044 	.word	0x40020044
 8002b90:	40020058 	.word	0x40020058
 8002b94:	4002006c 	.word	0x4002006c
 8002b98:	40020408 	.word	0x40020408
 8002b9c:	4002041c 	.word	0x4002041c
 8002ba0:	40020430 	.word	0x40020430
 8002ba4:	40020444 	.word	0x40020444
 8002ba8:	40020400 	.word	0x40020400
 8002bac:	40020000 	.word	0x40020000

08002bb0 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002bb0:	b580      	push	{r7, lr}
 8002bb2:	b084      	sub	sp, #16
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bcc:	2204      	movs	r2, #4
 8002bce:	409a      	lsls	r2, r3
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	4013      	ands	r3, r2
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	f000 80f1 	beq.w	8002dbc <HAL_DMA_IRQHandler+0x20c>
 8002bda:	68bb      	ldr	r3, [r7, #8]
 8002bdc:	f003 0304 	and.w	r3, r3, #4
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	f000 80eb 	beq.w	8002dbc <HAL_DMA_IRQHandler+0x20c>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f003 0320 	and.w	r3, r3, #32
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d107      	bne.n	8002c04 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	681a      	ldr	r2, [r3, #0]
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f022 0204 	bic.w	r2, r2, #4
 8002c02:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	461a      	mov	r2, r3
 8002c0a:	4b5f      	ldr	r3, [pc, #380]	@ (8002d88 <HAL_DMA_IRQHandler+0x1d8>)
 8002c0c:	429a      	cmp	r2, r3
 8002c0e:	d958      	bls.n	8002cc2 <HAL_DMA_IRQHandler+0x112>
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	4a5d      	ldr	r2, [pc, #372]	@ (8002d8c <HAL_DMA_IRQHandler+0x1dc>)
 8002c16:	4293      	cmp	r3, r2
 8002c18:	d04f      	beq.n	8002cba <HAL_DMA_IRQHandler+0x10a>
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	4a5c      	ldr	r2, [pc, #368]	@ (8002d90 <HAL_DMA_IRQHandler+0x1e0>)
 8002c20:	4293      	cmp	r3, r2
 8002c22:	d048      	beq.n	8002cb6 <HAL_DMA_IRQHandler+0x106>
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	4a5a      	ldr	r2, [pc, #360]	@ (8002d94 <HAL_DMA_IRQHandler+0x1e4>)
 8002c2a:	4293      	cmp	r3, r2
 8002c2c:	d040      	beq.n	8002cb0 <HAL_DMA_IRQHandler+0x100>
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	4a59      	ldr	r2, [pc, #356]	@ (8002d98 <HAL_DMA_IRQHandler+0x1e8>)
 8002c34:	4293      	cmp	r3, r2
 8002c36:	d038      	beq.n	8002caa <HAL_DMA_IRQHandler+0xfa>
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	4a57      	ldr	r2, [pc, #348]	@ (8002d9c <HAL_DMA_IRQHandler+0x1ec>)
 8002c3e:	4293      	cmp	r3, r2
 8002c40:	d030      	beq.n	8002ca4 <HAL_DMA_IRQHandler+0xf4>
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	4a56      	ldr	r2, [pc, #344]	@ (8002da0 <HAL_DMA_IRQHandler+0x1f0>)
 8002c48:	4293      	cmp	r3, r2
 8002c4a:	d028      	beq.n	8002c9e <HAL_DMA_IRQHandler+0xee>
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	4a4d      	ldr	r2, [pc, #308]	@ (8002d88 <HAL_DMA_IRQHandler+0x1d8>)
 8002c52:	4293      	cmp	r3, r2
 8002c54:	d020      	beq.n	8002c98 <HAL_DMA_IRQHandler+0xe8>
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	4a52      	ldr	r2, [pc, #328]	@ (8002da4 <HAL_DMA_IRQHandler+0x1f4>)
 8002c5c:	4293      	cmp	r3, r2
 8002c5e:	d019      	beq.n	8002c94 <HAL_DMA_IRQHandler+0xe4>
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	4a50      	ldr	r2, [pc, #320]	@ (8002da8 <HAL_DMA_IRQHandler+0x1f8>)
 8002c66:	4293      	cmp	r3, r2
 8002c68:	d012      	beq.n	8002c90 <HAL_DMA_IRQHandler+0xe0>
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	4a4f      	ldr	r2, [pc, #316]	@ (8002dac <HAL_DMA_IRQHandler+0x1fc>)
 8002c70:	4293      	cmp	r3, r2
 8002c72:	d00a      	beq.n	8002c8a <HAL_DMA_IRQHandler+0xda>
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	4a4d      	ldr	r2, [pc, #308]	@ (8002db0 <HAL_DMA_IRQHandler+0x200>)
 8002c7a:	4293      	cmp	r3, r2
 8002c7c:	d102      	bne.n	8002c84 <HAL_DMA_IRQHandler+0xd4>
 8002c7e:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002c82:	e01b      	b.n	8002cbc <HAL_DMA_IRQHandler+0x10c>
 8002c84:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8002c88:	e018      	b.n	8002cbc <HAL_DMA_IRQHandler+0x10c>
 8002c8a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002c8e:	e015      	b.n	8002cbc <HAL_DMA_IRQHandler+0x10c>
 8002c90:	2340      	movs	r3, #64	@ 0x40
 8002c92:	e013      	b.n	8002cbc <HAL_DMA_IRQHandler+0x10c>
 8002c94:	2304      	movs	r3, #4
 8002c96:	e011      	b.n	8002cbc <HAL_DMA_IRQHandler+0x10c>
 8002c98:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8002c9c:	e00e      	b.n	8002cbc <HAL_DMA_IRQHandler+0x10c>
 8002c9e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8002ca2:	e00b      	b.n	8002cbc <HAL_DMA_IRQHandler+0x10c>
 8002ca4:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8002ca8:	e008      	b.n	8002cbc <HAL_DMA_IRQHandler+0x10c>
 8002caa:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002cae:	e005      	b.n	8002cbc <HAL_DMA_IRQHandler+0x10c>
 8002cb0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002cb4:	e002      	b.n	8002cbc <HAL_DMA_IRQHandler+0x10c>
 8002cb6:	2340      	movs	r3, #64	@ 0x40
 8002cb8:	e000      	b.n	8002cbc <HAL_DMA_IRQHandler+0x10c>
 8002cba:	2304      	movs	r3, #4
 8002cbc:	4a3d      	ldr	r2, [pc, #244]	@ (8002db4 <HAL_DMA_IRQHandler+0x204>)
 8002cbe:	6053      	str	r3, [r2, #4]
 8002cc0:	e057      	b.n	8002d72 <HAL_DMA_IRQHandler+0x1c2>
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	4a31      	ldr	r2, [pc, #196]	@ (8002d8c <HAL_DMA_IRQHandler+0x1dc>)
 8002cc8:	4293      	cmp	r3, r2
 8002cca:	d04f      	beq.n	8002d6c <HAL_DMA_IRQHandler+0x1bc>
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	4a2f      	ldr	r2, [pc, #188]	@ (8002d90 <HAL_DMA_IRQHandler+0x1e0>)
 8002cd2:	4293      	cmp	r3, r2
 8002cd4:	d048      	beq.n	8002d68 <HAL_DMA_IRQHandler+0x1b8>
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	4a2e      	ldr	r2, [pc, #184]	@ (8002d94 <HAL_DMA_IRQHandler+0x1e4>)
 8002cdc:	4293      	cmp	r3, r2
 8002cde:	d040      	beq.n	8002d62 <HAL_DMA_IRQHandler+0x1b2>
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	4a2c      	ldr	r2, [pc, #176]	@ (8002d98 <HAL_DMA_IRQHandler+0x1e8>)
 8002ce6:	4293      	cmp	r3, r2
 8002ce8:	d038      	beq.n	8002d5c <HAL_DMA_IRQHandler+0x1ac>
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	4a2b      	ldr	r2, [pc, #172]	@ (8002d9c <HAL_DMA_IRQHandler+0x1ec>)
 8002cf0:	4293      	cmp	r3, r2
 8002cf2:	d030      	beq.n	8002d56 <HAL_DMA_IRQHandler+0x1a6>
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	4a29      	ldr	r2, [pc, #164]	@ (8002da0 <HAL_DMA_IRQHandler+0x1f0>)
 8002cfa:	4293      	cmp	r3, r2
 8002cfc:	d028      	beq.n	8002d50 <HAL_DMA_IRQHandler+0x1a0>
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	4a21      	ldr	r2, [pc, #132]	@ (8002d88 <HAL_DMA_IRQHandler+0x1d8>)
 8002d04:	4293      	cmp	r3, r2
 8002d06:	d020      	beq.n	8002d4a <HAL_DMA_IRQHandler+0x19a>
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	4a25      	ldr	r2, [pc, #148]	@ (8002da4 <HAL_DMA_IRQHandler+0x1f4>)
 8002d0e:	4293      	cmp	r3, r2
 8002d10:	d019      	beq.n	8002d46 <HAL_DMA_IRQHandler+0x196>
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	4a24      	ldr	r2, [pc, #144]	@ (8002da8 <HAL_DMA_IRQHandler+0x1f8>)
 8002d18:	4293      	cmp	r3, r2
 8002d1a:	d012      	beq.n	8002d42 <HAL_DMA_IRQHandler+0x192>
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	4a22      	ldr	r2, [pc, #136]	@ (8002dac <HAL_DMA_IRQHandler+0x1fc>)
 8002d22:	4293      	cmp	r3, r2
 8002d24:	d00a      	beq.n	8002d3c <HAL_DMA_IRQHandler+0x18c>
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	4a21      	ldr	r2, [pc, #132]	@ (8002db0 <HAL_DMA_IRQHandler+0x200>)
 8002d2c:	4293      	cmp	r3, r2
 8002d2e:	d102      	bne.n	8002d36 <HAL_DMA_IRQHandler+0x186>
 8002d30:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002d34:	e01b      	b.n	8002d6e <HAL_DMA_IRQHandler+0x1be>
 8002d36:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8002d3a:	e018      	b.n	8002d6e <HAL_DMA_IRQHandler+0x1be>
 8002d3c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002d40:	e015      	b.n	8002d6e <HAL_DMA_IRQHandler+0x1be>
 8002d42:	2340      	movs	r3, #64	@ 0x40
 8002d44:	e013      	b.n	8002d6e <HAL_DMA_IRQHandler+0x1be>
 8002d46:	2304      	movs	r3, #4
 8002d48:	e011      	b.n	8002d6e <HAL_DMA_IRQHandler+0x1be>
 8002d4a:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8002d4e:	e00e      	b.n	8002d6e <HAL_DMA_IRQHandler+0x1be>
 8002d50:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8002d54:	e00b      	b.n	8002d6e <HAL_DMA_IRQHandler+0x1be>
 8002d56:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8002d5a:	e008      	b.n	8002d6e <HAL_DMA_IRQHandler+0x1be>
 8002d5c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002d60:	e005      	b.n	8002d6e <HAL_DMA_IRQHandler+0x1be>
 8002d62:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002d66:	e002      	b.n	8002d6e <HAL_DMA_IRQHandler+0x1be>
 8002d68:	2340      	movs	r3, #64	@ 0x40
 8002d6a:	e000      	b.n	8002d6e <HAL_DMA_IRQHandler+0x1be>
 8002d6c:	2304      	movs	r3, #4
 8002d6e:	4a12      	ldr	r2, [pc, #72]	@ (8002db8 <HAL_DMA_IRQHandler+0x208>)
 8002d70:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	f000 8136 	beq.w	8002fe8 <HAL_DMA_IRQHandler+0x438>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d80:	6878      	ldr	r0, [r7, #4]
 8002d82:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8002d84:	e130      	b.n	8002fe8 <HAL_DMA_IRQHandler+0x438>
 8002d86:	bf00      	nop
 8002d88:	40020080 	.word	0x40020080
 8002d8c:	40020008 	.word	0x40020008
 8002d90:	4002001c 	.word	0x4002001c
 8002d94:	40020030 	.word	0x40020030
 8002d98:	40020044 	.word	0x40020044
 8002d9c:	40020058 	.word	0x40020058
 8002da0:	4002006c 	.word	0x4002006c
 8002da4:	40020408 	.word	0x40020408
 8002da8:	4002041c 	.word	0x4002041c
 8002dac:	40020430 	.word	0x40020430
 8002db0:	40020444 	.word	0x40020444
 8002db4:	40020400 	.word	0x40020400
 8002db8:	40020000 	.word	0x40020000
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dc0:	2202      	movs	r2, #2
 8002dc2:	409a      	lsls	r2, r3
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	4013      	ands	r3, r2
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	f000 80dd 	beq.w	8002f88 <HAL_DMA_IRQHandler+0x3d8>
 8002dce:	68bb      	ldr	r3, [r7, #8]
 8002dd0:	f003 0302 	and.w	r3, r3, #2
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	f000 80d7 	beq.w	8002f88 <HAL_DMA_IRQHandler+0x3d8>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	f003 0320 	and.w	r3, r3, #32
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d10b      	bne.n	8002e00 <HAL_DMA_IRQHandler+0x250>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	681a      	ldr	r2, [r3, #0]
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f022 020a 	bic.w	r2, r2, #10
 8002df6:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	2201      	movs	r2, #1
 8002dfc:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	461a      	mov	r2, r3
 8002e06:	4b7b      	ldr	r3, [pc, #492]	@ (8002ff4 <HAL_DMA_IRQHandler+0x444>)
 8002e08:	429a      	cmp	r2, r3
 8002e0a:	d958      	bls.n	8002ebe <HAL_DMA_IRQHandler+0x30e>
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	4a79      	ldr	r2, [pc, #484]	@ (8002ff8 <HAL_DMA_IRQHandler+0x448>)
 8002e12:	4293      	cmp	r3, r2
 8002e14:	d04f      	beq.n	8002eb6 <HAL_DMA_IRQHandler+0x306>
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	4a78      	ldr	r2, [pc, #480]	@ (8002ffc <HAL_DMA_IRQHandler+0x44c>)
 8002e1c:	4293      	cmp	r3, r2
 8002e1e:	d048      	beq.n	8002eb2 <HAL_DMA_IRQHandler+0x302>
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	4a76      	ldr	r2, [pc, #472]	@ (8003000 <HAL_DMA_IRQHandler+0x450>)
 8002e26:	4293      	cmp	r3, r2
 8002e28:	d040      	beq.n	8002eac <HAL_DMA_IRQHandler+0x2fc>
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	4a75      	ldr	r2, [pc, #468]	@ (8003004 <HAL_DMA_IRQHandler+0x454>)
 8002e30:	4293      	cmp	r3, r2
 8002e32:	d038      	beq.n	8002ea6 <HAL_DMA_IRQHandler+0x2f6>
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	4a73      	ldr	r2, [pc, #460]	@ (8003008 <HAL_DMA_IRQHandler+0x458>)
 8002e3a:	4293      	cmp	r3, r2
 8002e3c:	d030      	beq.n	8002ea0 <HAL_DMA_IRQHandler+0x2f0>
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	4a72      	ldr	r2, [pc, #456]	@ (800300c <HAL_DMA_IRQHandler+0x45c>)
 8002e44:	4293      	cmp	r3, r2
 8002e46:	d028      	beq.n	8002e9a <HAL_DMA_IRQHandler+0x2ea>
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	4a69      	ldr	r2, [pc, #420]	@ (8002ff4 <HAL_DMA_IRQHandler+0x444>)
 8002e4e:	4293      	cmp	r3, r2
 8002e50:	d020      	beq.n	8002e94 <HAL_DMA_IRQHandler+0x2e4>
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	4a6e      	ldr	r2, [pc, #440]	@ (8003010 <HAL_DMA_IRQHandler+0x460>)
 8002e58:	4293      	cmp	r3, r2
 8002e5a:	d019      	beq.n	8002e90 <HAL_DMA_IRQHandler+0x2e0>
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	4a6c      	ldr	r2, [pc, #432]	@ (8003014 <HAL_DMA_IRQHandler+0x464>)
 8002e62:	4293      	cmp	r3, r2
 8002e64:	d012      	beq.n	8002e8c <HAL_DMA_IRQHandler+0x2dc>
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	4a6b      	ldr	r2, [pc, #428]	@ (8003018 <HAL_DMA_IRQHandler+0x468>)
 8002e6c:	4293      	cmp	r3, r2
 8002e6e:	d00a      	beq.n	8002e86 <HAL_DMA_IRQHandler+0x2d6>
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	4a69      	ldr	r2, [pc, #420]	@ (800301c <HAL_DMA_IRQHandler+0x46c>)
 8002e76:	4293      	cmp	r3, r2
 8002e78:	d102      	bne.n	8002e80 <HAL_DMA_IRQHandler+0x2d0>
 8002e7a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002e7e:	e01b      	b.n	8002eb8 <HAL_DMA_IRQHandler+0x308>
 8002e80:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002e84:	e018      	b.n	8002eb8 <HAL_DMA_IRQHandler+0x308>
 8002e86:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002e8a:	e015      	b.n	8002eb8 <HAL_DMA_IRQHandler+0x308>
 8002e8c:	2320      	movs	r3, #32
 8002e8e:	e013      	b.n	8002eb8 <HAL_DMA_IRQHandler+0x308>
 8002e90:	2302      	movs	r3, #2
 8002e92:	e011      	b.n	8002eb8 <HAL_DMA_IRQHandler+0x308>
 8002e94:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002e98:	e00e      	b.n	8002eb8 <HAL_DMA_IRQHandler+0x308>
 8002e9a:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8002e9e:	e00b      	b.n	8002eb8 <HAL_DMA_IRQHandler+0x308>
 8002ea0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002ea4:	e008      	b.n	8002eb8 <HAL_DMA_IRQHandler+0x308>
 8002ea6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002eaa:	e005      	b.n	8002eb8 <HAL_DMA_IRQHandler+0x308>
 8002eac:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002eb0:	e002      	b.n	8002eb8 <HAL_DMA_IRQHandler+0x308>
 8002eb2:	2320      	movs	r3, #32
 8002eb4:	e000      	b.n	8002eb8 <HAL_DMA_IRQHandler+0x308>
 8002eb6:	2302      	movs	r3, #2
 8002eb8:	4a59      	ldr	r2, [pc, #356]	@ (8003020 <HAL_DMA_IRQHandler+0x470>)
 8002eba:	6053      	str	r3, [r2, #4]
 8002ebc:	e057      	b.n	8002f6e <HAL_DMA_IRQHandler+0x3be>
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	4a4d      	ldr	r2, [pc, #308]	@ (8002ff8 <HAL_DMA_IRQHandler+0x448>)
 8002ec4:	4293      	cmp	r3, r2
 8002ec6:	d04f      	beq.n	8002f68 <HAL_DMA_IRQHandler+0x3b8>
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	4a4b      	ldr	r2, [pc, #300]	@ (8002ffc <HAL_DMA_IRQHandler+0x44c>)
 8002ece:	4293      	cmp	r3, r2
 8002ed0:	d048      	beq.n	8002f64 <HAL_DMA_IRQHandler+0x3b4>
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	4a4a      	ldr	r2, [pc, #296]	@ (8003000 <HAL_DMA_IRQHandler+0x450>)
 8002ed8:	4293      	cmp	r3, r2
 8002eda:	d040      	beq.n	8002f5e <HAL_DMA_IRQHandler+0x3ae>
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	4a48      	ldr	r2, [pc, #288]	@ (8003004 <HAL_DMA_IRQHandler+0x454>)
 8002ee2:	4293      	cmp	r3, r2
 8002ee4:	d038      	beq.n	8002f58 <HAL_DMA_IRQHandler+0x3a8>
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	4a47      	ldr	r2, [pc, #284]	@ (8003008 <HAL_DMA_IRQHandler+0x458>)
 8002eec:	4293      	cmp	r3, r2
 8002eee:	d030      	beq.n	8002f52 <HAL_DMA_IRQHandler+0x3a2>
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	4a45      	ldr	r2, [pc, #276]	@ (800300c <HAL_DMA_IRQHandler+0x45c>)
 8002ef6:	4293      	cmp	r3, r2
 8002ef8:	d028      	beq.n	8002f4c <HAL_DMA_IRQHandler+0x39c>
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	4a3d      	ldr	r2, [pc, #244]	@ (8002ff4 <HAL_DMA_IRQHandler+0x444>)
 8002f00:	4293      	cmp	r3, r2
 8002f02:	d020      	beq.n	8002f46 <HAL_DMA_IRQHandler+0x396>
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	4a41      	ldr	r2, [pc, #260]	@ (8003010 <HAL_DMA_IRQHandler+0x460>)
 8002f0a:	4293      	cmp	r3, r2
 8002f0c:	d019      	beq.n	8002f42 <HAL_DMA_IRQHandler+0x392>
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	4a40      	ldr	r2, [pc, #256]	@ (8003014 <HAL_DMA_IRQHandler+0x464>)
 8002f14:	4293      	cmp	r3, r2
 8002f16:	d012      	beq.n	8002f3e <HAL_DMA_IRQHandler+0x38e>
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	4a3e      	ldr	r2, [pc, #248]	@ (8003018 <HAL_DMA_IRQHandler+0x468>)
 8002f1e:	4293      	cmp	r3, r2
 8002f20:	d00a      	beq.n	8002f38 <HAL_DMA_IRQHandler+0x388>
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	4a3d      	ldr	r2, [pc, #244]	@ (800301c <HAL_DMA_IRQHandler+0x46c>)
 8002f28:	4293      	cmp	r3, r2
 8002f2a:	d102      	bne.n	8002f32 <HAL_DMA_IRQHandler+0x382>
 8002f2c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002f30:	e01b      	b.n	8002f6a <HAL_DMA_IRQHandler+0x3ba>
 8002f32:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002f36:	e018      	b.n	8002f6a <HAL_DMA_IRQHandler+0x3ba>
 8002f38:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002f3c:	e015      	b.n	8002f6a <HAL_DMA_IRQHandler+0x3ba>
 8002f3e:	2320      	movs	r3, #32
 8002f40:	e013      	b.n	8002f6a <HAL_DMA_IRQHandler+0x3ba>
 8002f42:	2302      	movs	r3, #2
 8002f44:	e011      	b.n	8002f6a <HAL_DMA_IRQHandler+0x3ba>
 8002f46:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002f4a:	e00e      	b.n	8002f6a <HAL_DMA_IRQHandler+0x3ba>
 8002f4c:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8002f50:	e00b      	b.n	8002f6a <HAL_DMA_IRQHandler+0x3ba>
 8002f52:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002f56:	e008      	b.n	8002f6a <HAL_DMA_IRQHandler+0x3ba>
 8002f58:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002f5c:	e005      	b.n	8002f6a <HAL_DMA_IRQHandler+0x3ba>
 8002f5e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002f62:	e002      	b.n	8002f6a <HAL_DMA_IRQHandler+0x3ba>
 8002f64:	2320      	movs	r3, #32
 8002f66:	e000      	b.n	8002f6a <HAL_DMA_IRQHandler+0x3ba>
 8002f68:	2302      	movs	r3, #2
 8002f6a:	4a2e      	ldr	r2, [pc, #184]	@ (8003024 <HAL_DMA_IRQHandler+0x474>)
 8002f6c:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	2200      	movs	r2, #0
 8002f72:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d034      	beq.n	8002fe8 <HAL_DMA_IRQHandler+0x438>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f82:	6878      	ldr	r0, [r7, #4]
 8002f84:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002f86:	e02f      	b.n	8002fe8 <HAL_DMA_IRQHandler+0x438>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f8c:	2208      	movs	r2, #8
 8002f8e:	409a      	lsls	r2, r3
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	4013      	ands	r3, r2
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d028      	beq.n	8002fea <HAL_DMA_IRQHandler+0x43a>
 8002f98:	68bb      	ldr	r3, [r7, #8]
 8002f9a:	f003 0308 	and.w	r3, r3, #8
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d023      	beq.n	8002fea <HAL_DMA_IRQHandler+0x43a>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	681a      	ldr	r2, [r3, #0]
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f022 020e 	bic.w	r2, r2, #14
 8002fb0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002fba:	2101      	movs	r1, #1
 8002fbc:	fa01 f202 	lsl.w	r2, r1, r2
 8002fc0:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	2201      	movs	r2, #1
 8002fc6:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	2201      	movs	r2, #1
 8002fcc:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	2200      	movs	r2, #0
 8002fd4:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d004      	beq.n	8002fea <HAL_DMA_IRQHandler+0x43a>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fe4:	6878      	ldr	r0, [r7, #4]
 8002fe6:	4798      	blx	r3
    }
  }
  return;
 8002fe8:	bf00      	nop
 8002fea:	bf00      	nop
}
 8002fec:	3710      	adds	r7, #16
 8002fee:	46bd      	mov	sp, r7
 8002ff0:	bd80      	pop	{r7, pc}
 8002ff2:	bf00      	nop
 8002ff4:	40020080 	.word	0x40020080
 8002ff8:	40020008 	.word	0x40020008
 8002ffc:	4002001c 	.word	0x4002001c
 8003000:	40020030 	.word	0x40020030
 8003004:	40020044 	.word	0x40020044
 8003008:	40020058 	.word	0x40020058
 800300c:	4002006c 	.word	0x4002006c
 8003010:	40020408 	.word	0x40020408
 8003014:	4002041c 	.word	0x4002041c
 8003018:	40020430 	.word	0x40020430
 800301c:	40020444 	.word	0x40020444
 8003020:	40020400 	.word	0x40020400
 8003024:	40020000 	.word	0x40020000

08003028 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003028:	b480      	push	{r7}
 800302a:	b085      	sub	sp, #20
 800302c:	af00      	add	r7, sp, #0
 800302e:	60f8      	str	r0, [r7, #12]
 8003030:	60b9      	str	r1, [r7, #8]
 8003032:	607a      	str	r2, [r7, #4]
 8003034:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800303e:	2101      	movs	r1, #1
 8003040:	fa01 f202 	lsl.w	r2, r1, r2
 8003044:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	683a      	ldr	r2, [r7, #0]
 800304c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	685b      	ldr	r3, [r3, #4]
 8003052:	2b10      	cmp	r3, #16
 8003054:	d108      	bne.n	8003068 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	687a      	ldr	r2, [r7, #4]
 800305c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	68ba      	ldr	r2, [r7, #8]
 8003064:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003066:	e007      	b.n	8003078 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	68ba      	ldr	r2, [r7, #8]
 800306e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	687a      	ldr	r2, [r7, #4]
 8003076:	60da      	str	r2, [r3, #12]
}
 8003078:	bf00      	nop
 800307a:	3714      	adds	r7, #20
 800307c:	46bd      	mov	sp, r7
 800307e:	bc80      	pop	{r7}
 8003080:	4770      	bx	lr
	...

08003084 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003084:	b480      	push	{r7}
 8003086:	b08b      	sub	sp, #44	@ 0x2c
 8003088:	af00      	add	r7, sp, #0
 800308a:	6078      	str	r0, [r7, #4]
 800308c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800308e:	2300      	movs	r3, #0
 8003090:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8003092:	2300      	movs	r3, #0
 8003094:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003096:	e179      	b.n	800338c <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003098:	2201      	movs	r2, #1
 800309a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800309c:	fa02 f303 	lsl.w	r3, r2, r3
 80030a0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80030a2:	683b      	ldr	r3, [r7, #0]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	69fa      	ldr	r2, [r7, #28]
 80030a8:	4013      	ands	r3, r2
 80030aa:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80030ac:	69ba      	ldr	r2, [r7, #24]
 80030ae:	69fb      	ldr	r3, [r7, #28]
 80030b0:	429a      	cmp	r2, r3
 80030b2:	f040 8168 	bne.w	8003386 <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80030b6:	683b      	ldr	r3, [r7, #0]
 80030b8:	685b      	ldr	r3, [r3, #4]
 80030ba:	4a96      	ldr	r2, [pc, #600]	@ (8003314 <HAL_GPIO_Init+0x290>)
 80030bc:	4293      	cmp	r3, r2
 80030be:	d05e      	beq.n	800317e <HAL_GPIO_Init+0xfa>
 80030c0:	4a94      	ldr	r2, [pc, #592]	@ (8003314 <HAL_GPIO_Init+0x290>)
 80030c2:	4293      	cmp	r3, r2
 80030c4:	d875      	bhi.n	80031b2 <HAL_GPIO_Init+0x12e>
 80030c6:	4a94      	ldr	r2, [pc, #592]	@ (8003318 <HAL_GPIO_Init+0x294>)
 80030c8:	4293      	cmp	r3, r2
 80030ca:	d058      	beq.n	800317e <HAL_GPIO_Init+0xfa>
 80030cc:	4a92      	ldr	r2, [pc, #584]	@ (8003318 <HAL_GPIO_Init+0x294>)
 80030ce:	4293      	cmp	r3, r2
 80030d0:	d86f      	bhi.n	80031b2 <HAL_GPIO_Init+0x12e>
 80030d2:	4a92      	ldr	r2, [pc, #584]	@ (800331c <HAL_GPIO_Init+0x298>)
 80030d4:	4293      	cmp	r3, r2
 80030d6:	d052      	beq.n	800317e <HAL_GPIO_Init+0xfa>
 80030d8:	4a90      	ldr	r2, [pc, #576]	@ (800331c <HAL_GPIO_Init+0x298>)
 80030da:	4293      	cmp	r3, r2
 80030dc:	d869      	bhi.n	80031b2 <HAL_GPIO_Init+0x12e>
 80030de:	4a90      	ldr	r2, [pc, #576]	@ (8003320 <HAL_GPIO_Init+0x29c>)
 80030e0:	4293      	cmp	r3, r2
 80030e2:	d04c      	beq.n	800317e <HAL_GPIO_Init+0xfa>
 80030e4:	4a8e      	ldr	r2, [pc, #568]	@ (8003320 <HAL_GPIO_Init+0x29c>)
 80030e6:	4293      	cmp	r3, r2
 80030e8:	d863      	bhi.n	80031b2 <HAL_GPIO_Init+0x12e>
 80030ea:	4a8e      	ldr	r2, [pc, #568]	@ (8003324 <HAL_GPIO_Init+0x2a0>)
 80030ec:	4293      	cmp	r3, r2
 80030ee:	d046      	beq.n	800317e <HAL_GPIO_Init+0xfa>
 80030f0:	4a8c      	ldr	r2, [pc, #560]	@ (8003324 <HAL_GPIO_Init+0x2a0>)
 80030f2:	4293      	cmp	r3, r2
 80030f4:	d85d      	bhi.n	80031b2 <HAL_GPIO_Init+0x12e>
 80030f6:	2b12      	cmp	r3, #18
 80030f8:	d82a      	bhi.n	8003150 <HAL_GPIO_Init+0xcc>
 80030fa:	2b12      	cmp	r3, #18
 80030fc:	d859      	bhi.n	80031b2 <HAL_GPIO_Init+0x12e>
 80030fe:	a201      	add	r2, pc, #4	@ (adr r2, 8003104 <HAL_GPIO_Init+0x80>)
 8003100:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003104:	0800317f 	.word	0x0800317f
 8003108:	08003159 	.word	0x08003159
 800310c:	0800316b 	.word	0x0800316b
 8003110:	080031ad 	.word	0x080031ad
 8003114:	080031b3 	.word	0x080031b3
 8003118:	080031b3 	.word	0x080031b3
 800311c:	080031b3 	.word	0x080031b3
 8003120:	080031b3 	.word	0x080031b3
 8003124:	080031b3 	.word	0x080031b3
 8003128:	080031b3 	.word	0x080031b3
 800312c:	080031b3 	.word	0x080031b3
 8003130:	080031b3 	.word	0x080031b3
 8003134:	080031b3 	.word	0x080031b3
 8003138:	080031b3 	.word	0x080031b3
 800313c:	080031b3 	.word	0x080031b3
 8003140:	080031b3 	.word	0x080031b3
 8003144:	080031b3 	.word	0x080031b3
 8003148:	08003161 	.word	0x08003161
 800314c:	08003175 	.word	0x08003175
 8003150:	4a75      	ldr	r2, [pc, #468]	@ (8003328 <HAL_GPIO_Init+0x2a4>)
 8003152:	4293      	cmp	r3, r2
 8003154:	d013      	beq.n	800317e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8003156:	e02c      	b.n	80031b2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003158:	683b      	ldr	r3, [r7, #0]
 800315a:	68db      	ldr	r3, [r3, #12]
 800315c:	623b      	str	r3, [r7, #32]
          break;
 800315e:	e029      	b.n	80031b4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003160:	683b      	ldr	r3, [r7, #0]
 8003162:	68db      	ldr	r3, [r3, #12]
 8003164:	3304      	adds	r3, #4
 8003166:	623b      	str	r3, [r7, #32]
          break;
 8003168:	e024      	b.n	80031b4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800316a:	683b      	ldr	r3, [r7, #0]
 800316c:	68db      	ldr	r3, [r3, #12]
 800316e:	3308      	adds	r3, #8
 8003170:	623b      	str	r3, [r7, #32]
          break;
 8003172:	e01f      	b.n	80031b4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003174:	683b      	ldr	r3, [r7, #0]
 8003176:	68db      	ldr	r3, [r3, #12]
 8003178:	330c      	adds	r3, #12
 800317a:	623b      	str	r3, [r7, #32]
          break;
 800317c:	e01a      	b.n	80031b4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800317e:	683b      	ldr	r3, [r7, #0]
 8003180:	689b      	ldr	r3, [r3, #8]
 8003182:	2b00      	cmp	r3, #0
 8003184:	d102      	bne.n	800318c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003186:	2304      	movs	r3, #4
 8003188:	623b      	str	r3, [r7, #32]
          break;
 800318a:	e013      	b.n	80031b4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800318c:	683b      	ldr	r3, [r7, #0]
 800318e:	689b      	ldr	r3, [r3, #8]
 8003190:	2b01      	cmp	r3, #1
 8003192:	d105      	bne.n	80031a0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003194:	2308      	movs	r3, #8
 8003196:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	69fa      	ldr	r2, [r7, #28]
 800319c:	611a      	str	r2, [r3, #16]
          break;
 800319e:	e009      	b.n	80031b4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80031a0:	2308      	movs	r3, #8
 80031a2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	69fa      	ldr	r2, [r7, #28]
 80031a8:	615a      	str	r2, [r3, #20]
          break;
 80031aa:	e003      	b.n	80031b4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80031ac:	2300      	movs	r3, #0
 80031ae:	623b      	str	r3, [r7, #32]
          break;
 80031b0:	e000      	b.n	80031b4 <HAL_GPIO_Init+0x130>
          break;
 80031b2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80031b4:	69bb      	ldr	r3, [r7, #24]
 80031b6:	2bff      	cmp	r3, #255	@ 0xff
 80031b8:	d801      	bhi.n	80031be <HAL_GPIO_Init+0x13a>
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	e001      	b.n	80031c2 <HAL_GPIO_Init+0x13e>
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	3304      	adds	r3, #4
 80031c2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80031c4:	69bb      	ldr	r3, [r7, #24]
 80031c6:	2bff      	cmp	r3, #255	@ 0xff
 80031c8:	d802      	bhi.n	80031d0 <HAL_GPIO_Init+0x14c>
 80031ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031cc:	009b      	lsls	r3, r3, #2
 80031ce:	e002      	b.n	80031d6 <HAL_GPIO_Init+0x152>
 80031d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031d2:	3b08      	subs	r3, #8
 80031d4:	009b      	lsls	r3, r3, #2
 80031d6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80031d8:	697b      	ldr	r3, [r7, #20]
 80031da:	681a      	ldr	r2, [r3, #0]
 80031dc:	210f      	movs	r1, #15
 80031de:	693b      	ldr	r3, [r7, #16]
 80031e0:	fa01 f303 	lsl.w	r3, r1, r3
 80031e4:	43db      	mvns	r3, r3
 80031e6:	401a      	ands	r2, r3
 80031e8:	6a39      	ldr	r1, [r7, #32]
 80031ea:	693b      	ldr	r3, [r7, #16]
 80031ec:	fa01 f303 	lsl.w	r3, r1, r3
 80031f0:	431a      	orrs	r2, r3
 80031f2:	697b      	ldr	r3, [r7, #20]
 80031f4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80031f6:	683b      	ldr	r3, [r7, #0]
 80031f8:	685b      	ldr	r3, [r3, #4]
 80031fa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80031fe:	2b00      	cmp	r3, #0
 8003200:	f000 80c1 	beq.w	8003386 <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003204:	4b49      	ldr	r3, [pc, #292]	@ (800332c <HAL_GPIO_Init+0x2a8>)
 8003206:	699b      	ldr	r3, [r3, #24]
 8003208:	4a48      	ldr	r2, [pc, #288]	@ (800332c <HAL_GPIO_Init+0x2a8>)
 800320a:	f043 0301 	orr.w	r3, r3, #1
 800320e:	6193      	str	r3, [r2, #24]
 8003210:	4b46      	ldr	r3, [pc, #280]	@ (800332c <HAL_GPIO_Init+0x2a8>)
 8003212:	699b      	ldr	r3, [r3, #24]
 8003214:	f003 0301 	and.w	r3, r3, #1
 8003218:	60bb      	str	r3, [r7, #8]
 800321a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800321c:	4a44      	ldr	r2, [pc, #272]	@ (8003330 <HAL_GPIO_Init+0x2ac>)
 800321e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003220:	089b      	lsrs	r3, r3, #2
 8003222:	3302      	adds	r3, #2
 8003224:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003228:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800322a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800322c:	f003 0303 	and.w	r3, r3, #3
 8003230:	009b      	lsls	r3, r3, #2
 8003232:	220f      	movs	r2, #15
 8003234:	fa02 f303 	lsl.w	r3, r2, r3
 8003238:	43db      	mvns	r3, r3
 800323a:	68fa      	ldr	r2, [r7, #12]
 800323c:	4013      	ands	r3, r2
 800323e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	4a3c      	ldr	r2, [pc, #240]	@ (8003334 <HAL_GPIO_Init+0x2b0>)
 8003244:	4293      	cmp	r3, r2
 8003246:	d01f      	beq.n	8003288 <HAL_GPIO_Init+0x204>
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	4a3b      	ldr	r2, [pc, #236]	@ (8003338 <HAL_GPIO_Init+0x2b4>)
 800324c:	4293      	cmp	r3, r2
 800324e:	d019      	beq.n	8003284 <HAL_GPIO_Init+0x200>
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	4a3a      	ldr	r2, [pc, #232]	@ (800333c <HAL_GPIO_Init+0x2b8>)
 8003254:	4293      	cmp	r3, r2
 8003256:	d013      	beq.n	8003280 <HAL_GPIO_Init+0x1fc>
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	4a39      	ldr	r2, [pc, #228]	@ (8003340 <HAL_GPIO_Init+0x2bc>)
 800325c:	4293      	cmp	r3, r2
 800325e:	d00d      	beq.n	800327c <HAL_GPIO_Init+0x1f8>
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	4a38      	ldr	r2, [pc, #224]	@ (8003344 <HAL_GPIO_Init+0x2c0>)
 8003264:	4293      	cmp	r3, r2
 8003266:	d007      	beq.n	8003278 <HAL_GPIO_Init+0x1f4>
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	4a37      	ldr	r2, [pc, #220]	@ (8003348 <HAL_GPIO_Init+0x2c4>)
 800326c:	4293      	cmp	r3, r2
 800326e:	d101      	bne.n	8003274 <HAL_GPIO_Init+0x1f0>
 8003270:	2305      	movs	r3, #5
 8003272:	e00a      	b.n	800328a <HAL_GPIO_Init+0x206>
 8003274:	2306      	movs	r3, #6
 8003276:	e008      	b.n	800328a <HAL_GPIO_Init+0x206>
 8003278:	2304      	movs	r3, #4
 800327a:	e006      	b.n	800328a <HAL_GPIO_Init+0x206>
 800327c:	2303      	movs	r3, #3
 800327e:	e004      	b.n	800328a <HAL_GPIO_Init+0x206>
 8003280:	2302      	movs	r3, #2
 8003282:	e002      	b.n	800328a <HAL_GPIO_Init+0x206>
 8003284:	2301      	movs	r3, #1
 8003286:	e000      	b.n	800328a <HAL_GPIO_Init+0x206>
 8003288:	2300      	movs	r3, #0
 800328a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800328c:	f002 0203 	and.w	r2, r2, #3
 8003290:	0092      	lsls	r2, r2, #2
 8003292:	4093      	lsls	r3, r2
 8003294:	68fa      	ldr	r2, [r7, #12]
 8003296:	4313      	orrs	r3, r2
 8003298:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800329a:	4925      	ldr	r1, [pc, #148]	@ (8003330 <HAL_GPIO_Init+0x2ac>)
 800329c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800329e:	089b      	lsrs	r3, r3, #2
 80032a0:	3302      	adds	r3, #2
 80032a2:	68fa      	ldr	r2, [r7, #12]
 80032a4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80032a8:	683b      	ldr	r3, [r7, #0]
 80032aa:	685b      	ldr	r3, [r3, #4]
 80032ac:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d006      	beq.n	80032c2 <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80032b4:	4b25      	ldr	r3, [pc, #148]	@ (800334c <HAL_GPIO_Init+0x2c8>)
 80032b6:	689a      	ldr	r2, [r3, #8]
 80032b8:	4924      	ldr	r1, [pc, #144]	@ (800334c <HAL_GPIO_Init+0x2c8>)
 80032ba:	69bb      	ldr	r3, [r7, #24]
 80032bc:	4313      	orrs	r3, r2
 80032be:	608b      	str	r3, [r1, #8]
 80032c0:	e006      	b.n	80032d0 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80032c2:	4b22      	ldr	r3, [pc, #136]	@ (800334c <HAL_GPIO_Init+0x2c8>)
 80032c4:	689a      	ldr	r2, [r3, #8]
 80032c6:	69bb      	ldr	r3, [r7, #24]
 80032c8:	43db      	mvns	r3, r3
 80032ca:	4920      	ldr	r1, [pc, #128]	@ (800334c <HAL_GPIO_Init+0x2c8>)
 80032cc:	4013      	ands	r3, r2
 80032ce:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80032d0:	683b      	ldr	r3, [r7, #0]
 80032d2:	685b      	ldr	r3, [r3, #4]
 80032d4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d006      	beq.n	80032ea <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80032dc:	4b1b      	ldr	r3, [pc, #108]	@ (800334c <HAL_GPIO_Init+0x2c8>)
 80032de:	68da      	ldr	r2, [r3, #12]
 80032e0:	491a      	ldr	r1, [pc, #104]	@ (800334c <HAL_GPIO_Init+0x2c8>)
 80032e2:	69bb      	ldr	r3, [r7, #24]
 80032e4:	4313      	orrs	r3, r2
 80032e6:	60cb      	str	r3, [r1, #12]
 80032e8:	e006      	b.n	80032f8 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80032ea:	4b18      	ldr	r3, [pc, #96]	@ (800334c <HAL_GPIO_Init+0x2c8>)
 80032ec:	68da      	ldr	r2, [r3, #12]
 80032ee:	69bb      	ldr	r3, [r7, #24]
 80032f0:	43db      	mvns	r3, r3
 80032f2:	4916      	ldr	r1, [pc, #88]	@ (800334c <HAL_GPIO_Init+0x2c8>)
 80032f4:	4013      	ands	r3, r2
 80032f6:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80032f8:	683b      	ldr	r3, [r7, #0]
 80032fa:	685b      	ldr	r3, [r3, #4]
 80032fc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003300:	2b00      	cmp	r3, #0
 8003302:	d025      	beq.n	8003350 <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003304:	4b11      	ldr	r3, [pc, #68]	@ (800334c <HAL_GPIO_Init+0x2c8>)
 8003306:	685a      	ldr	r2, [r3, #4]
 8003308:	4910      	ldr	r1, [pc, #64]	@ (800334c <HAL_GPIO_Init+0x2c8>)
 800330a:	69bb      	ldr	r3, [r7, #24]
 800330c:	4313      	orrs	r3, r2
 800330e:	604b      	str	r3, [r1, #4]
 8003310:	e025      	b.n	800335e <HAL_GPIO_Init+0x2da>
 8003312:	bf00      	nop
 8003314:	10320000 	.word	0x10320000
 8003318:	10310000 	.word	0x10310000
 800331c:	10220000 	.word	0x10220000
 8003320:	10210000 	.word	0x10210000
 8003324:	10120000 	.word	0x10120000
 8003328:	10110000 	.word	0x10110000
 800332c:	40021000 	.word	0x40021000
 8003330:	40010000 	.word	0x40010000
 8003334:	40010800 	.word	0x40010800
 8003338:	40010c00 	.word	0x40010c00
 800333c:	40011000 	.word	0x40011000
 8003340:	40011400 	.word	0x40011400
 8003344:	40011800 	.word	0x40011800
 8003348:	40011c00 	.word	0x40011c00
 800334c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003350:	4b15      	ldr	r3, [pc, #84]	@ (80033a8 <HAL_GPIO_Init+0x324>)
 8003352:	685a      	ldr	r2, [r3, #4]
 8003354:	69bb      	ldr	r3, [r7, #24]
 8003356:	43db      	mvns	r3, r3
 8003358:	4913      	ldr	r1, [pc, #76]	@ (80033a8 <HAL_GPIO_Init+0x324>)
 800335a:	4013      	ands	r3, r2
 800335c:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800335e:	683b      	ldr	r3, [r7, #0]
 8003360:	685b      	ldr	r3, [r3, #4]
 8003362:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003366:	2b00      	cmp	r3, #0
 8003368:	d006      	beq.n	8003378 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800336a:	4b0f      	ldr	r3, [pc, #60]	@ (80033a8 <HAL_GPIO_Init+0x324>)
 800336c:	681a      	ldr	r2, [r3, #0]
 800336e:	490e      	ldr	r1, [pc, #56]	@ (80033a8 <HAL_GPIO_Init+0x324>)
 8003370:	69bb      	ldr	r3, [r7, #24]
 8003372:	4313      	orrs	r3, r2
 8003374:	600b      	str	r3, [r1, #0]
 8003376:	e006      	b.n	8003386 <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003378:	4b0b      	ldr	r3, [pc, #44]	@ (80033a8 <HAL_GPIO_Init+0x324>)
 800337a:	681a      	ldr	r2, [r3, #0]
 800337c:	69bb      	ldr	r3, [r7, #24]
 800337e:	43db      	mvns	r3, r3
 8003380:	4909      	ldr	r1, [pc, #36]	@ (80033a8 <HAL_GPIO_Init+0x324>)
 8003382:	4013      	ands	r3, r2
 8003384:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8003386:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003388:	3301      	adds	r3, #1
 800338a:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800338c:	683b      	ldr	r3, [r7, #0]
 800338e:	681a      	ldr	r2, [r3, #0]
 8003390:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003392:	fa22 f303 	lsr.w	r3, r2, r3
 8003396:	2b00      	cmp	r3, #0
 8003398:	f47f ae7e 	bne.w	8003098 <HAL_GPIO_Init+0x14>
  }
}
 800339c:	bf00      	nop
 800339e:	bf00      	nop
 80033a0:	372c      	adds	r7, #44	@ 0x2c
 80033a2:	46bd      	mov	sp, r7
 80033a4:	bc80      	pop	{r7}
 80033a6:	4770      	bx	lr
 80033a8:	40010400 	.word	0x40010400

080033ac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80033ac:	b480      	push	{r7}
 80033ae:	b083      	sub	sp, #12
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	6078      	str	r0, [r7, #4]
 80033b4:	460b      	mov	r3, r1
 80033b6:	807b      	strh	r3, [r7, #2]
 80033b8:	4613      	mov	r3, r2
 80033ba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80033bc:	787b      	ldrb	r3, [r7, #1]
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d003      	beq.n	80033ca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80033c2:	887a      	ldrh	r2, [r7, #2]
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80033c8:	e003      	b.n	80033d2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80033ca:	887b      	ldrh	r3, [r7, #2]
 80033cc:	041a      	lsls	r2, r3, #16
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	611a      	str	r2, [r3, #16]
}
 80033d2:	bf00      	nop
 80033d4:	370c      	adds	r7, #12
 80033d6:	46bd      	mov	sp, r7
 80033d8:	bc80      	pop	{r7}
 80033da:	4770      	bx	lr

080033dc <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80033dc:	b480      	push	{r7}
 80033de:	b085      	sub	sp, #20
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	6078      	str	r0, [r7, #4]
 80033e4:	460b      	mov	r3, r1
 80033e6:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	68db      	ldr	r3, [r3, #12]
 80033ec:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80033ee:	887a      	ldrh	r2, [r7, #2]
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	4013      	ands	r3, r2
 80033f4:	041a      	lsls	r2, r3, #16
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	43d9      	mvns	r1, r3
 80033fa:	887b      	ldrh	r3, [r7, #2]
 80033fc:	400b      	ands	r3, r1
 80033fe:	431a      	orrs	r2, r3
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	611a      	str	r2, [r3, #16]
}
 8003404:	bf00      	nop
 8003406:	3714      	adds	r7, #20
 8003408:	46bd      	mov	sp, r7
 800340a:	bc80      	pop	{r7}
 800340c:	4770      	bx	lr
	...

08003410 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003410:	b580      	push	{r7, lr}
 8003412:	b086      	sub	sp, #24
 8003414:	af00      	add	r7, sp, #0
 8003416:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	2b00      	cmp	r3, #0
 800341c:	d101      	bne.n	8003422 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800341e:	2301      	movs	r3, #1
 8003420:	e272      	b.n	8003908 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f003 0301 	and.w	r3, r3, #1
 800342a:	2b00      	cmp	r3, #0
 800342c:	f000 8087 	beq.w	800353e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003430:	4b92      	ldr	r3, [pc, #584]	@ (800367c <HAL_RCC_OscConfig+0x26c>)
 8003432:	685b      	ldr	r3, [r3, #4]
 8003434:	f003 030c 	and.w	r3, r3, #12
 8003438:	2b04      	cmp	r3, #4
 800343a:	d00c      	beq.n	8003456 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800343c:	4b8f      	ldr	r3, [pc, #572]	@ (800367c <HAL_RCC_OscConfig+0x26c>)
 800343e:	685b      	ldr	r3, [r3, #4]
 8003440:	f003 030c 	and.w	r3, r3, #12
 8003444:	2b08      	cmp	r3, #8
 8003446:	d112      	bne.n	800346e <HAL_RCC_OscConfig+0x5e>
 8003448:	4b8c      	ldr	r3, [pc, #560]	@ (800367c <HAL_RCC_OscConfig+0x26c>)
 800344a:	685b      	ldr	r3, [r3, #4]
 800344c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003450:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003454:	d10b      	bne.n	800346e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003456:	4b89      	ldr	r3, [pc, #548]	@ (800367c <HAL_RCC_OscConfig+0x26c>)
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800345e:	2b00      	cmp	r3, #0
 8003460:	d06c      	beq.n	800353c <HAL_RCC_OscConfig+0x12c>
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	685b      	ldr	r3, [r3, #4]
 8003466:	2b00      	cmp	r3, #0
 8003468:	d168      	bne.n	800353c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800346a:	2301      	movs	r3, #1
 800346c:	e24c      	b.n	8003908 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	685b      	ldr	r3, [r3, #4]
 8003472:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003476:	d106      	bne.n	8003486 <HAL_RCC_OscConfig+0x76>
 8003478:	4b80      	ldr	r3, [pc, #512]	@ (800367c <HAL_RCC_OscConfig+0x26c>)
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	4a7f      	ldr	r2, [pc, #508]	@ (800367c <HAL_RCC_OscConfig+0x26c>)
 800347e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003482:	6013      	str	r3, [r2, #0]
 8003484:	e02e      	b.n	80034e4 <HAL_RCC_OscConfig+0xd4>
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	685b      	ldr	r3, [r3, #4]
 800348a:	2b00      	cmp	r3, #0
 800348c:	d10c      	bne.n	80034a8 <HAL_RCC_OscConfig+0x98>
 800348e:	4b7b      	ldr	r3, [pc, #492]	@ (800367c <HAL_RCC_OscConfig+0x26c>)
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	4a7a      	ldr	r2, [pc, #488]	@ (800367c <HAL_RCC_OscConfig+0x26c>)
 8003494:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003498:	6013      	str	r3, [r2, #0]
 800349a:	4b78      	ldr	r3, [pc, #480]	@ (800367c <HAL_RCC_OscConfig+0x26c>)
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	4a77      	ldr	r2, [pc, #476]	@ (800367c <HAL_RCC_OscConfig+0x26c>)
 80034a0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80034a4:	6013      	str	r3, [r2, #0]
 80034a6:	e01d      	b.n	80034e4 <HAL_RCC_OscConfig+0xd4>
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	685b      	ldr	r3, [r3, #4]
 80034ac:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80034b0:	d10c      	bne.n	80034cc <HAL_RCC_OscConfig+0xbc>
 80034b2:	4b72      	ldr	r3, [pc, #456]	@ (800367c <HAL_RCC_OscConfig+0x26c>)
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	4a71      	ldr	r2, [pc, #452]	@ (800367c <HAL_RCC_OscConfig+0x26c>)
 80034b8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80034bc:	6013      	str	r3, [r2, #0]
 80034be:	4b6f      	ldr	r3, [pc, #444]	@ (800367c <HAL_RCC_OscConfig+0x26c>)
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	4a6e      	ldr	r2, [pc, #440]	@ (800367c <HAL_RCC_OscConfig+0x26c>)
 80034c4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80034c8:	6013      	str	r3, [r2, #0]
 80034ca:	e00b      	b.n	80034e4 <HAL_RCC_OscConfig+0xd4>
 80034cc:	4b6b      	ldr	r3, [pc, #428]	@ (800367c <HAL_RCC_OscConfig+0x26c>)
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	4a6a      	ldr	r2, [pc, #424]	@ (800367c <HAL_RCC_OscConfig+0x26c>)
 80034d2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80034d6:	6013      	str	r3, [r2, #0]
 80034d8:	4b68      	ldr	r3, [pc, #416]	@ (800367c <HAL_RCC_OscConfig+0x26c>)
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	4a67      	ldr	r2, [pc, #412]	@ (800367c <HAL_RCC_OscConfig+0x26c>)
 80034de:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80034e2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	685b      	ldr	r3, [r3, #4]
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d013      	beq.n	8003514 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034ec:	f7fe fc50 	bl	8001d90 <HAL_GetTick>
 80034f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80034f2:	e008      	b.n	8003506 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80034f4:	f7fe fc4c 	bl	8001d90 <HAL_GetTick>
 80034f8:	4602      	mov	r2, r0
 80034fa:	693b      	ldr	r3, [r7, #16]
 80034fc:	1ad3      	subs	r3, r2, r3
 80034fe:	2b64      	cmp	r3, #100	@ 0x64
 8003500:	d901      	bls.n	8003506 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003502:	2303      	movs	r3, #3
 8003504:	e200      	b.n	8003908 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003506:	4b5d      	ldr	r3, [pc, #372]	@ (800367c <HAL_RCC_OscConfig+0x26c>)
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800350e:	2b00      	cmp	r3, #0
 8003510:	d0f0      	beq.n	80034f4 <HAL_RCC_OscConfig+0xe4>
 8003512:	e014      	b.n	800353e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003514:	f7fe fc3c 	bl	8001d90 <HAL_GetTick>
 8003518:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800351a:	e008      	b.n	800352e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800351c:	f7fe fc38 	bl	8001d90 <HAL_GetTick>
 8003520:	4602      	mov	r2, r0
 8003522:	693b      	ldr	r3, [r7, #16]
 8003524:	1ad3      	subs	r3, r2, r3
 8003526:	2b64      	cmp	r3, #100	@ 0x64
 8003528:	d901      	bls.n	800352e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800352a:	2303      	movs	r3, #3
 800352c:	e1ec      	b.n	8003908 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800352e:	4b53      	ldr	r3, [pc, #332]	@ (800367c <HAL_RCC_OscConfig+0x26c>)
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003536:	2b00      	cmp	r3, #0
 8003538:	d1f0      	bne.n	800351c <HAL_RCC_OscConfig+0x10c>
 800353a:	e000      	b.n	800353e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800353c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	f003 0302 	and.w	r3, r3, #2
 8003546:	2b00      	cmp	r3, #0
 8003548:	d063      	beq.n	8003612 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800354a:	4b4c      	ldr	r3, [pc, #304]	@ (800367c <HAL_RCC_OscConfig+0x26c>)
 800354c:	685b      	ldr	r3, [r3, #4]
 800354e:	f003 030c 	and.w	r3, r3, #12
 8003552:	2b00      	cmp	r3, #0
 8003554:	d00b      	beq.n	800356e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003556:	4b49      	ldr	r3, [pc, #292]	@ (800367c <HAL_RCC_OscConfig+0x26c>)
 8003558:	685b      	ldr	r3, [r3, #4]
 800355a:	f003 030c 	and.w	r3, r3, #12
 800355e:	2b08      	cmp	r3, #8
 8003560:	d11c      	bne.n	800359c <HAL_RCC_OscConfig+0x18c>
 8003562:	4b46      	ldr	r3, [pc, #280]	@ (800367c <HAL_RCC_OscConfig+0x26c>)
 8003564:	685b      	ldr	r3, [r3, #4]
 8003566:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800356a:	2b00      	cmp	r3, #0
 800356c:	d116      	bne.n	800359c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800356e:	4b43      	ldr	r3, [pc, #268]	@ (800367c <HAL_RCC_OscConfig+0x26c>)
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f003 0302 	and.w	r3, r3, #2
 8003576:	2b00      	cmp	r3, #0
 8003578:	d005      	beq.n	8003586 <HAL_RCC_OscConfig+0x176>
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	691b      	ldr	r3, [r3, #16]
 800357e:	2b01      	cmp	r3, #1
 8003580:	d001      	beq.n	8003586 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003582:	2301      	movs	r3, #1
 8003584:	e1c0      	b.n	8003908 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003586:	4b3d      	ldr	r3, [pc, #244]	@ (800367c <HAL_RCC_OscConfig+0x26c>)
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	695b      	ldr	r3, [r3, #20]
 8003592:	00db      	lsls	r3, r3, #3
 8003594:	4939      	ldr	r1, [pc, #228]	@ (800367c <HAL_RCC_OscConfig+0x26c>)
 8003596:	4313      	orrs	r3, r2
 8003598:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800359a:	e03a      	b.n	8003612 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	691b      	ldr	r3, [r3, #16]
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d020      	beq.n	80035e6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80035a4:	4b36      	ldr	r3, [pc, #216]	@ (8003680 <HAL_RCC_OscConfig+0x270>)
 80035a6:	2201      	movs	r2, #1
 80035a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035aa:	f7fe fbf1 	bl	8001d90 <HAL_GetTick>
 80035ae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035b0:	e008      	b.n	80035c4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80035b2:	f7fe fbed 	bl	8001d90 <HAL_GetTick>
 80035b6:	4602      	mov	r2, r0
 80035b8:	693b      	ldr	r3, [r7, #16]
 80035ba:	1ad3      	subs	r3, r2, r3
 80035bc:	2b02      	cmp	r3, #2
 80035be:	d901      	bls.n	80035c4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80035c0:	2303      	movs	r3, #3
 80035c2:	e1a1      	b.n	8003908 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035c4:	4b2d      	ldr	r3, [pc, #180]	@ (800367c <HAL_RCC_OscConfig+0x26c>)
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f003 0302 	and.w	r3, r3, #2
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d0f0      	beq.n	80035b2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80035d0:	4b2a      	ldr	r3, [pc, #168]	@ (800367c <HAL_RCC_OscConfig+0x26c>)
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	695b      	ldr	r3, [r3, #20]
 80035dc:	00db      	lsls	r3, r3, #3
 80035de:	4927      	ldr	r1, [pc, #156]	@ (800367c <HAL_RCC_OscConfig+0x26c>)
 80035e0:	4313      	orrs	r3, r2
 80035e2:	600b      	str	r3, [r1, #0]
 80035e4:	e015      	b.n	8003612 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80035e6:	4b26      	ldr	r3, [pc, #152]	@ (8003680 <HAL_RCC_OscConfig+0x270>)
 80035e8:	2200      	movs	r2, #0
 80035ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035ec:	f7fe fbd0 	bl	8001d90 <HAL_GetTick>
 80035f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80035f2:	e008      	b.n	8003606 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80035f4:	f7fe fbcc 	bl	8001d90 <HAL_GetTick>
 80035f8:	4602      	mov	r2, r0
 80035fa:	693b      	ldr	r3, [r7, #16]
 80035fc:	1ad3      	subs	r3, r2, r3
 80035fe:	2b02      	cmp	r3, #2
 8003600:	d901      	bls.n	8003606 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003602:	2303      	movs	r3, #3
 8003604:	e180      	b.n	8003908 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003606:	4b1d      	ldr	r3, [pc, #116]	@ (800367c <HAL_RCC_OscConfig+0x26c>)
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f003 0302 	and.w	r3, r3, #2
 800360e:	2b00      	cmp	r3, #0
 8003610:	d1f0      	bne.n	80035f4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f003 0308 	and.w	r3, r3, #8
 800361a:	2b00      	cmp	r3, #0
 800361c:	d03a      	beq.n	8003694 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	699b      	ldr	r3, [r3, #24]
 8003622:	2b00      	cmp	r3, #0
 8003624:	d019      	beq.n	800365a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003626:	4b17      	ldr	r3, [pc, #92]	@ (8003684 <HAL_RCC_OscConfig+0x274>)
 8003628:	2201      	movs	r2, #1
 800362a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800362c:	f7fe fbb0 	bl	8001d90 <HAL_GetTick>
 8003630:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003632:	e008      	b.n	8003646 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003634:	f7fe fbac 	bl	8001d90 <HAL_GetTick>
 8003638:	4602      	mov	r2, r0
 800363a:	693b      	ldr	r3, [r7, #16]
 800363c:	1ad3      	subs	r3, r2, r3
 800363e:	2b02      	cmp	r3, #2
 8003640:	d901      	bls.n	8003646 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003642:	2303      	movs	r3, #3
 8003644:	e160      	b.n	8003908 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003646:	4b0d      	ldr	r3, [pc, #52]	@ (800367c <HAL_RCC_OscConfig+0x26c>)
 8003648:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800364a:	f003 0302 	and.w	r3, r3, #2
 800364e:	2b00      	cmp	r3, #0
 8003650:	d0f0      	beq.n	8003634 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003652:	2001      	movs	r0, #1
 8003654:	f000 face 	bl	8003bf4 <RCC_Delay>
 8003658:	e01c      	b.n	8003694 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800365a:	4b0a      	ldr	r3, [pc, #40]	@ (8003684 <HAL_RCC_OscConfig+0x274>)
 800365c:	2200      	movs	r2, #0
 800365e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003660:	f7fe fb96 	bl	8001d90 <HAL_GetTick>
 8003664:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003666:	e00f      	b.n	8003688 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003668:	f7fe fb92 	bl	8001d90 <HAL_GetTick>
 800366c:	4602      	mov	r2, r0
 800366e:	693b      	ldr	r3, [r7, #16]
 8003670:	1ad3      	subs	r3, r2, r3
 8003672:	2b02      	cmp	r3, #2
 8003674:	d908      	bls.n	8003688 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003676:	2303      	movs	r3, #3
 8003678:	e146      	b.n	8003908 <HAL_RCC_OscConfig+0x4f8>
 800367a:	bf00      	nop
 800367c:	40021000 	.word	0x40021000
 8003680:	42420000 	.word	0x42420000
 8003684:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003688:	4b92      	ldr	r3, [pc, #584]	@ (80038d4 <HAL_RCC_OscConfig+0x4c4>)
 800368a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800368c:	f003 0302 	and.w	r3, r3, #2
 8003690:	2b00      	cmp	r3, #0
 8003692:	d1e9      	bne.n	8003668 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f003 0304 	and.w	r3, r3, #4
 800369c:	2b00      	cmp	r3, #0
 800369e:	f000 80a6 	beq.w	80037ee <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80036a2:	2300      	movs	r3, #0
 80036a4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80036a6:	4b8b      	ldr	r3, [pc, #556]	@ (80038d4 <HAL_RCC_OscConfig+0x4c4>)
 80036a8:	69db      	ldr	r3, [r3, #28]
 80036aa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d10d      	bne.n	80036ce <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80036b2:	4b88      	ldr	r3, [pc, #544]	@ (80038d4 <HAL_RCC_OscConfig+0x4c4>)
 80036b4:	69db      	ldr	r3, [r3, #28]
 80036b6:	4a87      	ldr	r2, [pc, #540]	@ (80038d4 <HAL_RCC_OscConfig+0x4c4>)
 80036b8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80036bc:	61d3      	str	r3, [r2, #28]
 80036be:	4b85      	ldr	r3, [pc, #532]	@ (80038d4 <HAL_RCC_OscConfig+0x4c4>)
 80036c0:	69db      	ldr	r3, [r3, #28]
 80036c2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80036c6:	60bb      	str	r3, [r7, #8]
 80036c8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80036ca:	2301      	movs	r3, #1
 80036cc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036ce:	4b82      	ldr	r3, [pc, #520]	@ (80038d8 <HAL_RCC_OscConfig+0x4c8>)
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d118      	bne.n	800370c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80036da:	4b7f      	ldr	r3, [pc, #508]	@ (80038d8 <HAL_RCC_OscConfig+0x4c8>)
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	4a7e      	ldr	r2, [pc, #504]	@ (80038d8 <HAL_RCC_OscConfig+0x4c8>)
 80036e0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80036e4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80036e6:	f7fe fb53 	bl	8001d90 <HAL_GetTick>
 80036ea:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036ec:	e008      	b.n	8003700 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80036ee:	f7fe fb4f 	bl	8001d90 <HAL_GetTick>
 80036f2:	4602      	mov	r2, r0
 80036f4:	693b      	ldr	r3, [r7, #16]
 80036f6:	1ad3      	subs	r3, r2, r3
 80036f8:	2b64      	cmp	r3, #100	@ 0x64
 80036fa:	d901      	bls.n	8003700 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80036fc:	2303      	movs	r3, #3
 80036fe:	e103      	b.n	8003908 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003700:	4b75      	ldr	r3, [pc, #468]	@ (80038d8 <HAL_RCC_OscConfig+0x4c8>)
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003708:	2b00      	cmp	r3, #0
 800370a:	d0f0      	beq.n	80036ee <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	68db      	ldr	r3, [r3, #12]
 8003710:	2b01      	cmp	r3, #1
 8003712:	d106      	bne.n	8003722 <HAL_RCC_OscConfig+0x312>
 8003714:	4b6f      	ldr	r3, [pc, #444]	@ (80038d4 <HAL_RCC_OscConfig+0x4c4>)
 8003716:	6a1b      	ldr	r3, [r3, #32]
 8003718:	4a6e      	ldr	r2, [pc, #440]	@ (80038d4 <HAL_RCC_OscConfig+0x4c4>)
 800371a:	f043 0301 	orr.w	r3, r3, #1
 800371e:	6213      	str	r3, [r2, #32]
 8003720:	e02d      	b.n	800377e <HAL_RCC_OscConfig+0x36e>
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	68db      	ldr	r3, [r3, #12]
 8003726:	2b00      	cmp	r3, #0
 8003728:	d10c      	bne.n	8003744 <HAL_RCC_OscConfig+0x334>
 800372a:	4b6a      	ldr	r3, [pc, #424]	@ (80038d4 <HAL_RCC_OscConfig+0x4c4>)
 800372c:	6a1b      	ldr	r3, [r3, #32]
 800372e:	4a69      	ldr	r2, [pc, #420]	@ (80038d4 <HAL_RCC_OscConfig+0x4c4>)
 8003730:	f023 0301 	bic.w	r3, r3, #1
 8003734:	6213      	str	r3, [r2, #32]
 8003736:	4b67      	ldr	r3, [pc, #412]	@ (80038d4 <HAL_RCC_OscConfig+0x4c4>)
 8003738:	6a1b      	ldr	r3, [r3, #32]
 800373a:	4a66      	ldr	r2, [pc, #408]	@ (80038d4 <HAL_RCC_OscConfig+0x4c4>)
 800373c:	f023 0304 	bic.w	r3, r3, #4
 8003740:	6213      	str	r3, [r2, #32]
 8003742:	e01c      	b.n	800377e <HAL_RCC_OscConfig+0x36e>
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	68db      	ldr	r3, [r3, #12]
 8003748:	2b05      	cmp	r3, #5
 800374a:	d10c      	bne.n	8003766 <HAL_RCC_OscConfig+0x356>
 800374c:	4b61      	ldr	r3, [pc, #388]	@ (80038d4 <HAL_RCC_OscConfig+0x4c4>)
 800374e:	6a1b      	ldr	r3, [r3, #32]
 8003750:	4a60      	ldr	r2, [pc, #384]	@ (80038d4 <HAL_RCC_OscConfig+0x4c4>)
 8003752:	f043 0304 	orr.w	r3, r3, #4
 8003756:	6213      	str	r3, [r2, #32]
 8003758:	4b5e      	ldr	r3, [pc, #376]	@ (80038d4 <HAL_RCC_OscConfig+0x4c4>)
 800375a:	6a1b      	ldr	r3, [r3, #32]
 800375c:	4a5d      	ldr	r2, [pc, #372]	@ (80038d4 <HAL_RCC_OscConfig+0x4c4>)
 800375e:	f043 0301 	orr.w	r3, r3, #1
 8003762:	6213      	str	r3, [r2, #32]
 8003764:	e00b      	b.n	800377e <HAL_RCC_OscConfig+0x36e>
 8003766:	4b5b      	ldr	r3, [pc, #364]	@ (80038d4 <HAL_RCC_OscConfig+0x4c4>)
 8003768:	6a1b      	ldr	r3, [r3, #32]
 800376a:	4a5a      	ldr	r2, [pc, #360]	@ (80038d4 <HAL_RCC_OscConfig+0x4c4>)
 800376c:	f023 0301 	bic.w	r3, r3, #1
 8003770:	6213      	str	r3, [r2, #32]
 8003772:	4b58      	ldr	r3, [pc, #352]	@ (80038d4 <HAL_RCC_OscConfig+0x4c4>)
 8003774:	6a1b      	ldr	r3, [r3, #32]
 8003776:	4a57      	ldr	r2, [pc, #348]	@ (80038d4 <HAL_RCC_OscConfig+0x4c4>)
 8003778:	f023 0304 	bic.w	r3, r3, #4
 800377c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	68db      	ldr	r3, [r3, #12]
 8003782:	2b00      	cmp	r3, #0
 8003784:	d015      	beq.n	80037b2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003786:	f7fe fb03 	bl	8001d90 <HAL_GetTick>
 800378a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800378c:	e00a      	b.n	80037a4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800378e:	f7fe faff 	bl	8001d90 <HAL_GetTick>
 8003792:	4602      	mov	r2, r0
 8003794:	693b      	ldr	r3, [r7, #16]
 8003796:	1ad3      	subs	r3, r2, r3
 8003798:	f241 3288 	movw	r2, #5000	@ 0x1388
 800379c:	4293      	cmp	r3, r2
 800379e:	d901      	bls.n	80037a4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80037a0:	2303      	movs	r3, #3
 80037a2:	e0b1      	b.n	8003908 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80037a4:	4b4b      	ldr	r3, [pc, #300]	@ (80038d4 <HAL_RCC_OscConfig+0x4c4>)
 80037a6:	6a1b      	ldr	r3, [r3, #32]
 80037a8:	f003 0302 	and.w	r3, r3, #2
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d0ee      	beq.n	800378e <HAL_RCC_OscConfig+0x37e>
 80037b0:	e014      	b.n	80037dc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80037b2:	f7fe faed 	bl	8001d90 <HAL_GetTick>
 80037b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80037b8:	e00a      	b.n	80037d0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80037ba:	f7fe fae9 	bl	8001d90 <HAL_GetTick>
 80037be:	4602      	mov	r2, r0
 80037c0:	693b      	ldr	r3, [r7, #16]
 80037c2:	1ad3      	subs	r3, r2, r3
 80037c4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80037c8:	4293      	cmp	r3, r2
 80037ca:	d901      	bls.n	80037d0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80037cc:	2303      	movs	r3, #3
 80037ce:	e09b      	b.n	8003908 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80037d0:	4b40      	ldr	r3, [pc, #256]	@ (80038d4 <HAL_RCC_OscConfig+0x4c4>)
 80037d2:	6a1b      	ldr	r3, [r3, #32]
 80037d4:	f003 0302 	and.w	r3, r3, #2
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d1ee      	bne.n	80037ba <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80037dc:	7dfb      	ldrb	r3, [r7, #23]
 80037de:	2b01      	cmp	r3, #1
 80037e0:	d105      	bne.n	80037ee <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80037e2:	4b3c      	ldr	r3, [pc, #240]	@ (80038d4 <HAL_RCC_OscConfig+0x4c4>)
 80037e4:	69db      	ldr	r3, [r3, #28]
 80037e6:	4a3b      	ldr	r2, [pc, #236]	@ (80038d4 <HAL_RCC_OscConfig+0x4c4>)
 80037e8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80037ec:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	69db      	ldr	r3, [r3, #28]
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	f000 8087 	beq.w	8003906 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80037f8:	4b36      	ldr	r3, [pc, #216]	@ (80038d4 <HAL_RCC_OscConfig+0x4c4>)
 80037fa:	685b      	ldr	r3, [r3, #4]
 80037fc:	f003 030c 	and.w	r3, r3, #12
 8003800:	2b08      	cmp	r3, #8
 8003802:	d061      	beq.n	80038c8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	69db      	ldr	r3, [r3, #28]
 8003808:	2b02      	cmp	r3, #2
 800380a:	d146      	bne.n	800389a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800380c:	4b33      	ldr	r3, [pc, #204]	@ (80038dc <HAL_RCC_OscConfig+0x4cc>)
 800380e:	2200      	movs	r2, #0
 8003810:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003812:	f7fe fabd 	bl	8001d90 <HAL_GetTick>
 8003816:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003818:	e008      	b.n	800382c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800381a:	f7fe fab9 	bl	8001d90 <HAL_GetTick>
 800381e:	4602      	mov	r2, r0
 8003820:	693b      	ldr	r3, [r7, #16]
 8003822:	1ad3      	subs	r3, r2, r3
 8003824:	2b02      	cmp	r3, #2
 8003826:	d901      	bls.n	800382c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003828:	2303      	movs	r3, #3
 800382a:	e06d      	b.n	8003908 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800382c:	4b29      	ldr	r3, [pc, #164]	@ (80038d4 <HAL_RCC_OscConfig+0x4c4>)
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003834:	2b00      	cmp	r3, #0
 8003836:	d1f0      	bne.n	800381a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	6a1b      	ldr	r3, [r3, #32]
 800383c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003840:	d108      	bne.n	8003854 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003842:	4b24      	ldr	r3, [pc, #144]	@ (80038d4 <HAL_RCC_OscConfig+0x4c4>)
 8003844:	685b      	ldr	r3, [r3, #4]
 8003846:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	689b      	ldr	r3, [r3, #8]
 800384e:	4921      	ldr	r1, [pc, #132]	@ (80038d4 <HAL_RCC_OscConfig+0x4c4>)
 8003850:	4313      	orrs	r3, r2
 8003852:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003854:	4b1f      	ldr	r3, [pc, #124]	@ (80038d4 <HAL_RCC_OscConfig+0x4c4>)
 8003856:	685b      	ldr	r3, [r3, #4]
 8003858:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	6a19      	ldr	r1, [r3, #32]
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003864:	430b      	orrs	r3, r1
 8003866:	491b      	ldr	r1, [pc, #108]	@ (80038d4 <HAL_RCC_OscConfig+0x4c4>)
 8003868:	4313      	orrs	r3, r2
 800386a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800386c:	4b1b      	ldr	r3, [pc, #108]	@ (80038dc <HAL_RCC_OscConfig+0x4cc>)
 800386e:	2201      	movs	r2, #1
 8003870:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003872:	f7fe fa8d 	bl	8001d90 <HAL_GetTick>
 8003876:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003878:	e008      	b.n	800388c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800387a:	f7fe fa89 	bl	8001d90 <HAL_GetTick>
 800387e:	4602      	mov	r2, r0
 8003880:	693b      	ldr	r3, [r7, #16]
 8003882:	1ad3      	subs	r3, r2, r3
 8003884:	2b02      	cmp	r3, #2
 8003886:	d901      	bls.n	800388c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003888:	2303      	movs	r3, #3
 800388a:	e03d      	b.n	8003908 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800388c:	4b11      	ldr	r3, [pc, #68]	@ (80038d4 <HAL_RCC_OscConfig+0x4c4>)
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003894:	2b00      	cmp	r3, #0
 8003896:	d0f0      	beq.n	800387a <HAL_RCC_OscConfig+0x46a>
 8003898:	e035      	b.n	8003906 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800389a:	4b10      	ldr	r3, [pc, #64]	@ (80038dc <HAL_RCC_OscConfig+0x4cc>)
 800389c:	2200      	movs	r2, #0
 800389e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038a0:	f7fe fa76 	bl	8001d90 <HAL_GetTick>
 80038a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80038a6:	e008      	b.n	80038ba <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80038a8:	f7fe fa72 	bl	8001d90 <HAL_GetTick>
 80038ac:	4602      	mov	r2, r0
 80038ae:	693b      	ldr	r3, [r7, #16]
 80038b0:	1ad3      	subs	r3, r2, r3
 80038b2:	2b02      	cmp	r3, #2
 80038b4:	d901      	bls.n	80038ba <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80038b6:	2303      	movs	r3, #3
 80038b8:	e026      	b.n	8003908 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80038ba:	4b06      	ldr	r3, [pc, #24]	@ (80038d4 <HAL_RCC_OscConfig+0x4c4>)
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d1f0      	bne.n	80038a8 <HAL_RCC_OscConfig+0x498>
 80038c6:	e01e      	b.n	8003906 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	69db      	ldr	r3, [r3, #28]
 80038cc:	2b01      	cmp	r3, #1
 80038ce:	d107      	bne.n	80038e0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80038d0:	2301      	movs	r3, #1
 80038d2:	e019      	b.n	8003908 <HAL_RCC_OscConfig+0x4f8>
 80038d4:	40021000 	.word	0x40021000
 80038d8:	40007000 	.word	0x40007000
 80038dc:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80038e0:	4b0b      	ldr	r3, [pc, #44]	@ (8003910 <HAL_RCC_OscConfig+0x500>)
 80038e2:	685b      	ldr	r3, [r3, #4]
 80038e4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	6a1b      	ldr	r3, [r3, #32]
 80038f0:	429a      	cmp	r2, r3
 80038f2:	d106      	bne.n	8003902 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80038fe:	429a      	cmp	r2, r3
 8003900:	d001      	beq.n	8003906 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003902:	2301      	movs	r3, #1
 8003904:	e000      	b.n	8003908 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003906:	2300      	movs	r3, #0
}
 8003908:	4618      	mov	r0, r3
 800390a:	3718      	adds	r7, #24
 800390c:	46bd      	mov	sp, r7
 800390e:	bd80      	pop	{r7, pc}
 8003910:	40021000 	.word	0x40021000

08003914 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003914:	b580      	push	{r7, lr}
 8003916:	b084      	sub	sp, #16
 8003918:	af00      	add	r7, sp, #0
 800391a:	6078      	str	r0, [r7, #4]
 800391c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	2b00      	cmp	r3, #0
 8003922:	d101      	bne.n	8003928 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003924:	2301      	movs	r3, #1
 8003926:	e0d0      	b.n	8003aca <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003928:	4b6a      	ldr	r3, [pc, #424]	@ (8003ad4 <HAL_RCC_ClockConfig+0x1c0>)
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	f003 0307 	and.w	r3, r3, #7
 8003930:	683a      	ldr	r2, [r7, #0]
 8003932:	429a      	cmp	r2, r3
 8003934:	d910      	bls.n	8003958 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003936:	4b67      	ldr	r3, [pc, #412]	@ (8003ad4 <HAL_RCC_ClockConfig+0x1c0>)
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f023 0207 	bic.w	r2, r3, #7
 800393e:	4965      	ldr	r1, [pc, #404]	@ (8003ad4 <HAL_RCC_ClockConfig+0x1c0>)
 8003940:	683b      	ldr	r3, [r7, #0]
 8003942:	4313      	orrs	r3, r2
 8003944:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003946:	4b63      	ldr	r3, [pc, #396]	@ (8003ad4 <HAL_RCC_ClockConfig+0x1c0>)
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f003 0307 	and.w	r3, r3, #7
 800394e:	683a      	ldr	r2, [r7, #0]
 8003950:	429a      	cmp	r2, r3
 8003952:	d001      	beq.n	8003958 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003954:	2301      	movs	r3, #1
 8003956:	e0b8      	b.n	8003aca <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	f003 0302 	and.w	r3, r3, #2
 8003960:	2b00      	cmp	r3, #0
 8003962:	d020      	beq.n	80039a6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	f003 0304 	and.w	r3, r3, #4
 800396c:	2b00      	cmp	r3, #0
 800396e:	d005      	beq.n	800397c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003970:	4b59      	ldr	r3, [pc, #356]	@ (8003ad8 <HAL_RCC_ClockConfig+0x1c4>)
 8003972:	685b      	ldr	r3, [r3, #4]
 8003974:	4a58      	ldr	r2, [pc, #352]	@ (8003ad8 <HAL_RCC_ClockConfig+0x1c4>)
 8003976:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800397a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	f003 0308 	and.w	r3, r3, #8
 8003984:	2b00      	cmp	r3, #0
 8003986:	d005      	beq.n	8003994 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003988:	4b53      	ldr	r3, [pc, #332]	@ (8003ad8 <HAL_RCC_ClockConfig+0x1c4>)
 800398a:	685b      	ldr	r3, [r3, #4]
 800398c:	4a52      	ldr	r2, [pc, #328]	@ (8003ad8 <HAL_RCC_ClockConfig+0x1c4>)
 800398e:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8003992:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003994:	4b50      	ldr	r3, [pc, #320]	@ (8003ad8 <HAL_RCC_ClockConfig+0x1c4>)
 8003996:	685b      	ldr	r3, [r3, #4]
 8003998:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	689b      	ldr	r3, [r3, #8]
 80039a0:	494d      	ldr	r1, [pc, #308]	@ (8003ad8 <HAL_RCC_ClockConfig+0x1c4>)
 80039a2:	4313      	orrs	r3, r2
 80039a4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	f003 0301 	and.w	r3, r3, #1
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d040      	beq.n	8003a34 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	685b      	ldr	r3, [r3, #4]
 80039b6:	2b01      	cmp	r3, #1
 80039b8:	d107      	bne.n	80039ca <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80039ba:	4b47      	ldr	r3, [pc, #284]	@ (8003ad8 <HAL_RCC_ClockConfig+0x1c4>)
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d115      	bne.n	80039f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80039c6:	2301      	movs	r3, #1
 80039c8:	e07f      	b.n	8003aca <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	685b      	ldr	r3, [r3, #4]
 80039ce:	2b02      	cmp	r3, #2
 80039d0:	d107      	bne.n	80039e2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80039d2:	4b41      	ldr	r3, [pc, #260]	@ (8003ad8 <HAL_RCC_ClockConfig+0x1c4>)
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d109      	bne.n	80039f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80039de:	2301      	movs	r3, #1
 80039e0:	e073      	b.n	8003aca <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039e2:	4b3d      	ldr	r3, [pc, #244]	@ (8003ad8 <HAL_RCC_ClockConfig+0x1c4>)
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f003 0302 	and.w	r3, r3, #2
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d101      	bne.n	80039f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80039ee:	2301      	movs	r3, #1
 80039f0:	e06b      	b.n	8003aca <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80039f2:	4b39      	ldr	r3, [pc, #228]	@ (8003ad8 <HAL_RCC_ClockConfig+0x1c4>)
 80039f4:	685b      	ldr	r3, [r3, #4]
 80039f6:	f023 0203 	bic.w	r2, r3, #3
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	685b      	ldr	r3, [r3, #4]
 80039fe:	4936      	ldr	r1, [pc, #216]	@ (8003ad8 <HAL_RCC_ClockConfig+0x1c4>)
 8003a00:	4313      	orrs	r3, r2
 8003a02:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003a04:	f7fe f9c4 	bl	8001d90 <HAL_GetTick>
 8003a08:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a0a:	e00a      	b.n	8003a22 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003a0c:	f7fe f9c0 	bl	8001d90 <HAL_GetTick>
 8003a10:	4602      	mov	r2, r0
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	1ad3      	subs	r3, r2, r3
 8003a16:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003a1a:	4293      	cmp	r3, r2
 8003a1c:	d901      	bls.n	8003a22 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003a1e:	2303      	movs	r3, #3
 8003a20:	e053      	b.n	8003aca <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a22:	4b2d      	ldr	r3, [pc, #180]	@ (8003ad8 <HAL_RCC_ClockConfig+0x1c4>)
 8003a24:	685b      	ldr	r3, [r3, #4]
 8003a26:	f003 020c 	and.w	r2, r3, #12
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	685b      	ldr	r3, [r3, #4]
 8003a2e:	009b      	lsls	r3, r3, #2
 8003a30:	429a      	cmp	r2, r3
 8003a32:	d1eb      	bne.n	8003a0c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003a34:	4b27      	ldr	r3, [pc, #156]	@ (8003ad4 <HAL_RCC_ClockConfig+0x1c0>)
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	f003 0307 	and.w	r3, r3, #7
 8003a3c:	683a      	ldr	r2, [r7, #0]
 8003a3e:	429a      	cmp	r2, r3
 8003a40:	d210      	bcs.n	8003a64 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a42:	4b24      	ldr	r3, [pc, #144]	@ (8003ad4 <HAL_RCC_ClockConfig+0x1c0>)
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	f023 0207 	bic.w	r2, r3, #7
 8003a4a:	4922      	ldr	r1, [pc, #136]	@ (8003ad4 <HAL_RCC_ClockConfig+0x1c0>)
 8003a4c:	683b      	ldr	r3, [r7, #0]
 8003a4e:	4313      	orrs	r3, r2
 8003a50:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a52:	4b20      	ldr	r3, [pc, #128]	@ (8003ad4 <HAL_RCC_ClockConfig+0x1c0>)
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	f003 0307 	and.w	r3, r3, #7
 8003a5a:	683a      	ldr	r2, [r7, #0]
 8003a5c:	429a      	cmp	r2, r3
 8003a5e:	d001      	beq.n	8003a64 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003a60:	2301      	movs	r3, #1
 8003a62:	e032      	b.n	8003aca <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	f003 0304 	and.w	r3, r3, #4
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d008      	beq.n	8003a82 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003a70:	4b19      	ldr	r3, [pc, #100]	@ (8003ad8 <HAL_RCC_ClockConfig+0x1c4>)
 8003a72:	685b      	ldr	r3, [r3, #4]
 8003a74:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	68db      	ldr	r3, [r3, #12]
 8003a7c:	4916      	ldr	r1, [pc, #88]	@ (8003ad8 <HAL_RCC_ClockConfig+0x1c4>)
 8003a7e:	4313      	orrs	r3, r2
 8003a80:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	f003 0308 	and.w	r3, r3, #8
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d009      	beq.n	8003aa2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003a8e:	4b12      	ldr	r3, [pc, #72]	@ (8003ad8 <HAL_RCC_ClockConfig+0x1c4>)
 8003a90:	685b      	ldr	r3, [r3, #4]
 8003a92:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	691b      	ldr	r3, [r3, #16]
 8003a9a:	00db      	lsls	r3, r3, #3
 8003a9c:	490e      	ldr	r1, [pc, #56]	@ (8003ad8 <HAL_RCC_ClockConfig+0x1c4>)
 8003a9e:	4313      	orrs	r3, r2
 8003aa0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003aa2:	f000 f821 	bl	8003ae8 <HAL_RCC_GetSysClockFreq>
 8003aa6:	4602      	mov	r2, r0
 8003aa8:	4b0b      	ldr	r3, [pc, #44]	@ (8003ad8 <HAL_RCC_ClockConfig+0x1c4>)
 8003aaa:	685b      	ldr	r3, [r3, #4]
 8003aac:	091b      	lsrs	r3, r3, #4
 8003aae:	f003 030f 	and.w	r3, r3, #15
 8003ab2:	490a      	ldr	r1, [pc, #40]	@ (8003adc <HAL_RCC_ClockConfig+0x1c8>)
 8003ab4:	5ccb      	ldrb	r3, [r1, r3]
 8003ab6:	fa22 f303 	lsr.w	r3, r2, r3
 8003aba:	4a09      	ldr	r2, [pc, #36]	@ (8003ae0 <HAL_RCC_ClockConfig+0x1cc>)
 8003abc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003abe:	4b09      	ldr	r3, [pc, #36]	@ (8003ae4 <HAL_RCC_ClockConfig+0x1d0>)
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	4618      	mov	r0, r3
 8003ac4:	f7fe f922 	bl	8001d0c <HAL_InitTick>

  return HAL_OK;
 8003ac8:	2300      	movs	r3, #0
}
 8003aca:	4618      	mov	r0, r3
 8003acc:	3710      	adds	r7, #16
 8003ace:	46bd      	mov	sp, r7
 8003ad0:	bd80      	pop	{r7, pc}
 8003ad2:	bf00      	nop
 8003ad4:	40022000 	.word	0x40022000
 8003ad8:	40021000 	.word	0x40021000
 8003adc:	08005f10 	.word	0x08005f10
 8003ae0:	2000002c 	.word	0x2000002c
 8003ae4:	20000030 	.word	0x20000030

08003ae8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003ae8:	b480      	push	{r7}
 8003aea:	b087      	sub	sp, #28
 8003aec:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003aee:	2300      	movs	r3, #0
 8003af0:	60fb      	str	r3, [r7, #12]
 8003af2:	2300      	movs	r3, #0
 8003af4:	60bb      	str	r3, [r7, #8]
 8003af6:	2300      	movs	r3, #0
 8003af8:	617b      	str	r3, [r7, #20]
 8003afa:	2300      	movs	r3, #0
 8003afc:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003afe:	2300      	movs	r3, #0
 8003b00:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003b02:	4b1e      	ldr	r3, [pc, #120]	@ (8003b7c <HAL_RCC_GetSysClockFreq+0x94>)
 8003b04:	685b      	ldr	r3, [r3, #4]
 8003b06:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	f003 030c 	and.w	r3, r3, #12
 8003b0e:	2b04      	cmp	r3, #4
 8003b10:	d002      	beq.n	8003b18 <HAL_RCC_GetSysClockFreq+0x30>
 8003b12:	2b08      	cmp	r3, #8
 8003b14:	d003      	beq.n	8003b1e <HAL_RCC_GetSysClockFreq+0x36>
 8003b16:	e027      	b.n	8003b68 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003b18:	4b19      	ldr	r3, [pc, #100]	@ (8003b80 <HAL_RCC_GetSysClockFreq+0x98>)
 8003b1a:	613b      	str	r3, [r7, #16]
      break;
 8003b1c:	e027      	b.n	8003b6e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	0c9b      	lsrs	r3, r3, #18
 8003b22:	f003 030f 	and.w	r3, r3, #15
 8003b26:	4a17      	ldr	r2, [pc, #92]	@ (8003b84 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003b28:	5cd3      	ldrb	r3, [r2, r3]
 8003b2a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d010      	beq.n	8003b58 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003b36:	4b11      	ldr	r3, [pc, #68]	@ (8003b7c <HAL_RCC_GetSysClockFreq+0x94>)
 8003b38:	685b      	ldr	r3, [r3, #4]
 8003b3a:	0c5b      	lsrs	r3, r3, #17
 8003b3c:	f003 0301 	and.w	r3, r3, #1
 8003b40:	4a11      	ldr	r2, [pc, #68]	@ (8003b88 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003b42:	5cd3      	ldrb	r3, [r2, r3]
 8003b44:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	4a0d      	ldr	r2, [pc, #52]	@ (8003b80 <HAL_RCC_GetSysClockFreq+0x98>)
 8003b4a:	fb03 f202 	mul.w	r2, r3, r2
 8003b4e:	68bb      	ldr	r3, [r7, #8]
 8003b50:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b54:	617b      	str	r3, [r7, #20]
 8003b56:	e004      	b.n	8003b62 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	4a0c      	ldr	r2, [pc, #48]	@ (8003b8c <HAL_RCC_GetSysClockFreq+0xa4>)
 8003b5c:	fb02 f303 	mul.w	r3, r2, r3
 8003b60:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8003b62:	697b      	ldr	r3, [r7, #20]
 8003b64:	613b      	str	r3, [r7, #16]
      break;
 8003b66:	e002      	b.n	8003b6e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003b68:	4b05      	ldr	r3, [pc, #20]	@ (8003b80 <HAL_RCC_GetSysClockFreq+0x98>)
 8003b6a:	613b      	str	r3, [r7, #16]
      break;
 8003b6c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003b6e:	693b      	ldr	r3, [r7, #16]
}
 8003b70:	4618      	mov	r0, r3
 8003b72:	371c      	adds	r7, #28
 8003b74:	46bd      	mov	sp, r7
 8003b76:	bc80      	pop	{r7}
 8003b78:	4770      	bx	lr
 8003b7a:	bf00      	nop
 8003b7c:	40021000 	.word	0x40021000
 8003b80:	007a1200 	.word	0x007a1200
 8003b84:	08005f28 	.word	0x08005f28
 8003b88:	08005f38 	.word	0x08005f38
 8003b8c:	003d0900 	.word	0x003d0900

08003b90 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003b90:	b480      	push	{r7}
 8003b92:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003b94:	4b02      	ldr	r3, [pc, #8]	@ (8003ba0 <HAL_RCC_GetHCLKFreq+0x10>)
 8003b96:	681b      	ldr	r3, [r3, #0]
}
 8003b98:	4618      	mov	r0, r3
 8003b9a:	46bd      	mov	sp, r7
 8003b9c:	bc80      	pop	{r7}
 8003b9e:	4770      	bx	lr
 8003ba0:	2000002c 	.word	0x2000002c

08003ba4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003ba4:	b580      	push	{r7, lr}
 8003ba6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003ba8:	f7ff fff2 	bl	8003b90 <HAL_RCC_GetHCLKFreq>
 8003bac:	4602      	mov	r2, r0
 8003bae:	4b05      	ldr	r3, [pc, #20]	@ (8003bc4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003bb0:	685b      	ldr	r3, [r3, #4]
 8003bb2:	0a1b      	lsrs	r3, r3, #8
 8003bb4:	f003 0307 	and.w	r3, r3, #7
 8003bb8:	4903      	ldr	r1, [pc, #12]	@ (8003bc8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003bba:	5ccb      	ldrb	r3, [r1, r3]
 8003bbc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003bc0:	4618      	mov	r0, r3
 8003bc2:	bd80      	pop	{r7, pc}
 8003bc4:	40021000 	.word	0x40021000
 8003bc8:	08005f20 	.word	0x08005f20

08003bcc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003bcc:	b580      	push	{r7, lr}
 8003bce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003bd0:	f7ff ffde 	bl	8003b90 <HAL_RCC_GetHCLKFreq>
 8003bd4:	4602      	mov	r2, r0
 8003bd6:	4b05      	ldr	r3, [pc, #20]	@ (8003bec <HAL_RCC_GetPCLK2Freq+0x20>)
 8003bd8:	685b      	ldr	r3, [r3, #4]
 8003bda:	0adb      	lsrs	r3, r3, #11
 8003bdc:	f003 0307 	and.w	r3, r3, #7
 8003be0:	4903      	ldr	r1, [pc, #12]	@ (8003bf0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003be2:	5ccb      	ldrb	r3, [r1, r3]
 8003be4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003be8:	4618      	mov	r0, r3
 8003bea:	bd80      	pop	{r7, pc}
 8003bec:	40021000 	.word	0x40021000
 8003bf0:	08005f20 	.word	0x08005f20

08003bf4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003bf4:	b480      	push	{r7}
 8003bf6:	b085      	sub	sp, #20
 8003bf8:	af00      	add	r7, sp, #0
 8003bfa:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003bfc:	4b0a      	ldr	r3, [pc, #40]	@ (8003c28 <RCC_Delay+0x34>)
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	4a0a      	ldr	r2, [pc, #40]	@ (8003c2c <RCC_Delay+0x38>)
 8003c02:	fba2 2303 	umull	r2, r3, r2, r3
 8003c06:	0a5b      	lsrs	r3, r3, #9
 8003c08:	687a      	ldr	r2, [r7, #4]
 8003c0a:	fb02 f303 	mul.w	r3, r2, r3
 8003c0e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003c10:	bf00      	nop
  }
  while (Delay --);
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	1e5a      	subs	r2, r3, #1
 8003c16:	60fa      	str	r2, [r7, #12]
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d1f9      	bne.n	8003c10 <RCC_Delay+0x1c>
}
 8003c1c:	bf00      	nop
 8003c1e:	bf00      	nop
 8003c20:	3714      	adds	r7, #20
 8003c22:	46bd      	mov	sp, r7
 8003c24:	bc80      	pop	{r7}
 8003c26:	4770      	bx	lr
 8003c28:	2000002c 	.word	0x2000002c
 8003c2c:	10624dd3 	.word	0x10624dd3

08003c30 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003c30:	b580      	push	{r7, lr}
 8003c32:	b086      	sub	sp, #24
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003c38:	2300      	movs	r3, #0
 8003c3a:	613b      	str	r3, [r7, #16]
 8003c3c:	2300      	movs	r3, #0
 8003c3e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	f003 0301 	and.w	r3, r3, #1
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d07d      	beq.n	8003d48 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8003c4c:	2300      	movs	r3, #0
 8003c4e:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003c50:	4b4f      	ldr	r3, [pc, #316]	@ (8003d90 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c52:	69db      	ldr	r3, [r3, #28]
 8003c54:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d10d      	bne.n	8003c78 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003c5c:	4b4c      	ldr	r3, [pc, #304]	@ (8003d90 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c5e:	69db      	ldr	r3, [r3, #28]
 8003c60:	4a4b      	ldr	r2, [pc, #300]	@ (8003d90 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c62:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003c66:	61d3      	str	r3, [r2, #28]
 8003c68:	4b49      	ldr	r3, [pc, #292]	@ (8003d90 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c6a:	69db      	ldr	r3, [r3, #28]
 8003c6c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003c70:	60bb      	str	r3, [r7, #8]
 8003c72:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003c74:	2301      	movs	r3, #1
 8003c76:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c78:	4b46      	ldr	r3, [pc, #280]	@ (8003d94 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d118      	bne.n	8003cb6 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003c84:	4b43      	ldr	r3, [pc, #268]	@ (8003d94 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	4a42      	ldr	r2, [pc, #264]	@ (8003d94 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003c8a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003c8e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003c90:	f7fe f87e 	bl	8001d90 <HAL_GetTick>
 8003c94:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c96:	e008      	b.n	8003caa <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c98:	f7fe f87a 	bl	8001d90 <HAL_GetTick>
 8003c9c:	4602      	mov	r2, r0
 8003c9e:	693b      	ldr	r3, [r7, #16]
 8003ca0:	1ad3      	subs	r3, r2, r3
 8003ca2:	2b64      	cmp	r3, #100	@ 0x64
 8003ca4:	d901      	bls.n	8003caa <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8003ca6:	2303      	movs	r3, #3
 8003ca8:	e06d      	b.n	8003d86 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003caa:	4b3a      	ldr	r3, [pc, #232]	@ (8003d94 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d0f0      	beq.n	8003c98 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003cb6:	4b36      	ldr	r3, [pc, #216]	@ (8003d90 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003cb8:	6a1b      	ldr	r3, [r3, #32]
 8003cba:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003cbe:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d02e      	beq.n	8003d24 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	685b      	ldr	r3, [r3, #4]
 8003cca:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003cce:	68fa      	ldr	r2, [r7, #12]
 8003cd0:	429a      	cmp	r2, r3
 8003cd2:	d027      	beq.n	8003d24 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003cd4:	4b2e      	ldr	r3, [pc, #184]	@ (8003d90 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003cd6:	6a1b      	ldr	r3, [r3, #32]
 8003cd8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003cdc:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003cde:	4b2e      	ldr	r3, [pc, #184]	@ (8003d98 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003ce0:	2201      	movs	r2, #1
 8003ce2:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003ce4:	4b2c      	ldr	r3, [pc, #176]	@ (8003d98 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003ce6:	2200      	movs	r2, #0
 8003ce8:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003cea:	4a29      	ldr	r2, [pc, #164]	@ (8003d90 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	f003 0301 	and.w	r3, r3, #1
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d014      	beq.n	8003d24 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cfa:	f7fe f849 	bl	8001d90 <HAL_GetTick>
 8003cfe:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d00:	e00a      	b.n	8003d18 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d02:	f7fe f845 	bl	8001d90 <HAL_GetTick>
 8003d06:	4602      	mov	r2, r0
 8003d08:	693b      	ldr	r3, [r7, #16]
 8003d0a:	1ad3      	subs	r3, r2, r3
 8003d0c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003d10:	4293      	cmp	r3, r2
 8003d12:	d901      	bls.n	8003d18 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003d14:	2303      	movs	r3, #3
 8003d16:	e036      	b.n	8003d86 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d18:	4b1d      	ldr	r3, [pc, #116]	@ (8003d90 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d1a:	6a1b      	ldr	r3, [r3, #32]
 8003d1c:	f003 0302 	and.w	r3, r3, #2
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d0ee      	beq.n	8003d02 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003d24:	4b1a      	ldr	r3, [pc, #104]	@ (8003d90 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d26:	6a1b      	ldr	r3, [r3, #32]
 8003d28:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	685b      	ldr	r3, [r3, #4]
 8003d30:	4917      	ldr	r1, [pc, #92]	@ (8003d90 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d32:	4313      	orrs	r3, r2
 8003d34:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003d36:	7dfb      	ldrb	r3, [r7, #23]
 8003d38:	2b01      	cmp	r3, #1
 8003d3a:	d105      	bne.n	8003d48 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d3c:	4b14      	ldr	r3, [pc, #80]	@ (8003d90 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d3e:	69db      	ldr	r3, [r3, #28]
 8003d40:	4a13      	ldr	r2, [pc, #76]	@ (8003d90 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d42:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003d46:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f003 0302 	and.w	r3, r3, #2
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d008      	beq.n	8003d66 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003d54:	4b0e      	ldr	r3, [pc, #56]	@ (8003d90 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d56:	685b      	ldr	r3, [r3, #4]
 8003d58:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	689b      	ldr	r3, [r3, #8]
 8003d60:	490b      	ldr	r1, [pc, #44]	@ (8003d90 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d62:	4313      	orrs	r3, r2
 8003d64:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	f003 0310 	and.w	r3, r3, #16
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d008      	beq.n	8003d84 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003d72:	4b07      	ldr	r3, [pc, #28]	@ (8003d90 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d74:	685b      	ldr	r3, [r3, #4]
 8003d76:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	695b      	ldr	r3, [r3, #20]
 8003d7e:	4904      	ldr	r1, [pc, #16]	@ (8003d90 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d80:	4313      	orrs	r3, r2
 8003d82:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003d84:	2300      	movs	r3, #0
}
 8003d86:	4618      	mov	r0, r3
 8003d88:	3718      	adds	r7, #24
 8003d8a:	46bd      	mov	sp, r7
 8003d8c:	bd80      	pop	{r7, pc}
 8003d8e:	bf00      	nop
 8003d90:	40021000 	.word	0x40021000
 8003d94:	40007000 	.word	0x40007000
 8003d98:	42420440 	.word	0x42420440

08003d9c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003d9c:	b580      	push	{r7, lr}
 8003d9e:	b082      	sub	sp, #8
 8003da0:	af00      	add	r7, sp, #0
 8003da2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d101      	bne.n	8003dae <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003daa:	2301      	movs	r3, #1
 8003dac:	e076      	b.n	8003e9c <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d108      	bne.n	8003dc8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	685b      	ldr	r3, [r3, #4]
 8003dba:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003dbe:	d009      	beq.n	8003dd4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	2200      	movs	r2, #0
 8003dc4:	61da      	str	r2, [r3, #28]
 8003dc6:	e005      	b.n	8003dd4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	2200      	movs	r2, #0
 8003dcc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	2200      	movs	r2, #0
 8003dd2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	2200      	movs	r2, #0
 8003dd8:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003de0:	b2db      	uxtb	r3, r3
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d106      	bne.n	8003df4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	2200      	movs	r2, #0
 8003dea:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003dee:	6878      	ldr	r0, [r7, #4]
 8003df0:	f7fd f9c0 	bl	8001174 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	2202      	movs	r2, #2
 8003df8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	681a      	ldr	r2, [r3, #0]
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003e0a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	685b      	ldr	r3, [r3, #4]
 8003e10:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	689b      	ldr	r3, [r3, #8]
 8003e18:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8003e1c:	431a      	orrs	r2, r3
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	68db      	ldr	r3, [r3, #12]
 8003e22:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003e26:	431a      	orrs	r2, r3
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	691b      	ldr	r3, [r3, #16]
 8003e2c:	f003 0302 	and.w	r3, r3, #2
 8003e30:	431a      	orrs	r2, r3
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	695b      	ldr	r3, [r3, #20]
 8003e36:	f003 0301 	and.w	r3, r3, #1
 8003e3a:	431a      	orrs	r2, r3
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	699b      	ldr	r3, [r3, #24]
 8003e40:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003e44:	431a      	orrs	r2, r3
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	69db      	ldr	r3, [r3, #28]
 8003e4a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003e4e:	431a      	orrs	r2, r3
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	6a1b      	ldr	r3, [r3, #32]
 8003e54:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003e58:	ea42 0103 	orr.w	r1, r2, r3
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e60:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	430a      	orrs	r2, r1
 8003e6a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	699b      	ldr	r3, [r3, #24]
 8003e70:	0c1a      	lsrs	r2, r3, #16
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	f002 0204 	and.w	r2, r2, #4
 8003e7a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	69da      	ldr	r2, [r3, #28]
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003e8a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	2200      	movs	r2, #0
 8003e90:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	2201      	movs	r2, #1
 8003e96:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8003e9a:	2300      	movs	r3, #0
}
 8003e9c:	4618      	mov	r0, r3
 8003e9e:	3708      	adds	r7, #8
 8003ea0:	46bd      	mov	sp, r7
 8003ea2:	bd80      	pop	{r7, pc}

08003ea4 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003ea4:	b580      	push	{r7, lr}
 8003ea6:	b088      	sub	sp, #32
 8003ea8:	af00      	add	r7, sp, #0
 8003eaa:	60f8      	str	r0, [r7, #12]
 8003eac:	60b9      	str	r1, [r7, #8]
 8003eae:	603b      	str	r3, [r7, #0]
 8003eb0:	4613      	mov	r3, r2
 8003eb2:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003eb4:	2300      	movs	r3, #0
 8003eb6:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003ebe:	2b01      	cmp	r3, #1
 8003ec0:	d101      	bne.n	8003ec6 <HAL_SPI_Transmit+0x22>
 8003ec2:	2302      	movs	r3, #2
 8003ec4:	e12d      	b.n	8004122 <HAL_SPI_Transmit+0x27e>
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	2201      	movs	r2, #1
 8003eca:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003ece:	f7fd ff5f 	bl	8001d90 <HAL_GetTick>
 8003ed2:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003ed4:	88fb      	ldrh	r3, [r7, #6]
 8003ed6:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003ede:	b2db      	uxtb	r3, r3
 8003ee0:	2b01      	cmp	r3, #1
 8003ee2:	d002      	beq.n	8003eea <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003ee4:	2302      	movs	r3, #2
 8003ee6:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003ee8:	e116      	b.n	8004118 <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 8003eea:	68bb      	ldr	r3, [r7, #8]
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d002      	beq.n	8003ef6 <HAL_SPI_Transmit+0x52>
 8003ef0:	88fb      	ldrh	r3, [r7, #6]
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d102      	bne.n	8003efc <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003ef6:	2301      	movs	r3, #1
 8003ef8:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003efa:	e10d      	b.n	8004118 <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	2203      	movs	r2, #3
 8003f00:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	2200      	movs	r2, #0
 8003f08:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	68ba      	ldr	r2, [r7, #8]
 8003f0e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	88fa      	ldrh	r2, [r7, #6]
 8003f14:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	88fa      	ldrh	r2, [r7, #6]
 8003f1a:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	2200      	movs	r2, #0
 8003f20:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	2200      	movs	r2, #0
 8003f26:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	2200      	movs	r2, #0
 8003f2c:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	2200      	movs	r2, #0
 8003f32:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	2200      	movs	r2, #0
 8003f38:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	689b      	ldr	r3, [r3, #8]
 8003f3e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003f42:	d10f      	bne.n	8003f64 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	681a      	ldr	r2, [r3, #0]
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003f52:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	681a      	ldr	r2, [r3, #0]
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003f62:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f6e:	2b40      	cmp	r3, #64	@ 0x40
 8003f70:	d007      	beq.n	8003f82 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	681a      	ldr	r2, [r3, #0]
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003f80:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	68db      	ldr	r3, [r3, #12]
 8003f86:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003f8a:	d14f      	bne.n	800402c <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	685b      	ldr	r3, [r3, #4]
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d002      	beq.n	8003f9a <HAL_SPI_Transmit+0xf6>
 8003f94:	8afb      	ldrh	r3, [r7, #22]
 8003f96:	2b01      	cmp	r3, #1
 8003f98:	d142      	bne.n	8004020 <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f9e:	881a      	ldrh	r2, [r3, #0]
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003faa:	1c9a      	adds	r2, r3, #2
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003fb4:	b29b      	uxth	r3, r3
 8003fb6:	3b01      	subs	r3, #1
 8003fb8:	b29a      	uxth	r2, r3
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003fbe:	e02f      	b.n	8004020 <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	689b      	ldr	r3, [r3, #8]
 8003fc6:	f003 0302 	and.w	r3, r3, #2
 8003fca:	2b02      	cmp	r3, #2
 8003fcc:	d112      	bne.n	8003ff4 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fd2:	881a      	ldrh	r2, [r3, #0]
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fde:	1c9a      	adds	r2, r3, #2
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003fe8:	b29b      	uxth	r3, r3
 8003fea:	3b01      	subs	r3, #1
 8003fec:	b29a      	uxth	r2, r3
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	86da      	strh	r2, [r3, #54]	@ 0x36
 8003ff2:	e015      	b.n	8004020 <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003ff4:	f7fd fecc 	bl	8001d90 <HAL_GetTick>
 8003ff8:	4602      	mov	r2, r0
 8003ffa:	69bb      	ldr	r3, [r7, #24]
 8003ffc:	1ad3      	subs	r3, r2, r3
 8003ffe:	683a      	ldr	r2, [r7, #0]
 8004000:	429a      	cmp	r2, r3
 8004002:	d803      	bhi.n	800400c <HAL_SPI_Transmit+0x168>
 8004004:	683b      	ldr	r3, [r7, #0]
 8004006:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800400a:	d102      	bne.n	8004012 <HAL_SPI_Transmit+0x16e>
 800400c:	683b      	ldr	r3, [r7, #0]
 800400e:	2b00      	cmp	r3, #0
 8004010:	d106      	bne.n	8004020 <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 8004012:	2303      	movs	r3, #3
 8004014:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	2201      	movs	r2, #1
 800401a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 800401e:	e07b      	b.n	8004118 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004024:	b29b      	uxth	r3, r3
 8004026:	2b00      	cmp	r3, #0
 8004028:	d1ca      	bne.n	8003fc0 <HAL_SPI_Transmit+0x11c>
 800402a:	e050      	b.n	80040ce <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	685b      	ldr	r3, [r3, #4]
 8004030:	2b00      	cmp	r3, #0
 8004032:	d002      	beq.n	800403a <HAL_SPI_Transmit+0x196>
 8004034:	8afb      	ldrh	r3, [r7, #22]
 8004036:	2b01      	cmp	r3, #1
 8004038:	d144      	bne.n	80040c4 <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	330c      	adds	r3, #12
 8004044:	7812      	ldrb	r2, [r2, #0]
 8004046:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800404c:	1c5a      	adds	r2, r3, #1
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004056:	b29b      	uxth	r3, r3
 8004058:	3b01      	subs	r3, #1
 800405a:	b29a      	uxth	r2, r3
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004060:	e030      	b.n	80040c4 <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	689b      	ldr	r3, [r3, #8]
 8004068:	f003 0302 	and.w	r3, r3, #2
 800406c:	2b02      	cmp	r3, #2
 800406e:	d113      	bne.n	8004098 <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	330c      	adds	r3, #12
 800407a:	7812      	ldrb	r2, [r2, #0]
 800407c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004082:	1c5a      	adds	r2, r3, #1
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800408c:	b29b      	uxth	r3, r3
 800408e:	3b01      	subs	r3, #1
 8004090:	b29a      	uxth	r2, r3
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	86da      	strh	r2, [r3, #54]	@ 0x36
 8004096:	e015      	b.n	80040c4 <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004098:	f7fd fe7a 	bl	8001d90 <HAL_GetTick>
 800409c:	4602      	mov	r2, r0
 800409e:	69bb      	ldr	r3, [r7, #24]
 80040a0:	1ad3      	subs	r3, r2, r3
 80040a2:	683a      	ldr	r2, [r7, #0]
 80040a4:	429a      	cmp	r2, r3
 80040a6:	d803      	bhi.n	80040b0 <HAL_SPI_Transmit+0x20c>
 80040a8:	683b      	ldr	r3, [r7, #0]
 80040aa:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80040ae:	d102      	bne.n	80040b6 <HAL_SPI_Transmit+0x212>
 80040b0:	683b      	ldr	r3, [r7, #0]
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d106      	bne.n	80040c4 <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 80040b6:	2303      	movs	r3, #3
 80040b8:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	2201      	movs	r2, #1
 80040be:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 80040c2:	e029      	b.n	8004118 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80040c8:	b29b      	uxth	r3, r3
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d1c9      	bne.n	8004062 <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80040ce:	69ba      	ldr	r2, [r7, #24]
 80040d0:	6839      	ldr	r1, [r7, #0]
 80040d2:	68f8      	ldr	r0, [r7, #12]
 80040d4:	f000 f8b2 	bl	800423c <SPI_EndRxTxTransaction>
 80040d8:	4603      	mov	r3, r0
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d002      	beq.n	80040e4 <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	2220      	movs	r2, #32
 80040e2:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	689b      	ldr	r3, [r3, #8]
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d10a      	bne.n	8004102 <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80040ec:	2300      	movs	r3, #0
 80040ee:	613b      	str	r3, [r7, #16]
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	68db      	ldr	r3, [r3, #12]
 80040f6:	613b      	str	r3, [r7, #16]
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	689b      	ldr	r3, [r3, #8]
 80040fe:	613b      	str	r3, [r7, #16]
 8004100:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004106:	2b00      	cmp	r3, #0
 8004108:	d002      	beq.n	8004110 <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 800410a:	2301      	movs	r3, #1
 800410c:	77fb      	strb	r3, [r7, #31]
 800410e:	e003      	b.n	8004118 <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	2201      	movs	r2, #1
 8004114:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	2200      	movs	r2, #0
 800411c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8004120:	7ffb      	ldrb	r3, [r7, #31]
}
 8004122:	4618      	mov	r0, r3
 8004124:	3720      	adds	r7, #32
 8004126:	46bd      	mov	sp, r7
 8004128:	bd80      	pop	{r7, pc}
	...

0800412c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800412c:	b580      	push	{r7, lr}
 800412e:	b088      	sub	sp, #32
 8004130:	af00      	add	r7, sp, #0
 8004132:	60f8      	str	r0, [r7, #12]
 8004134:	60b9      	str	r1, [r7, #8]
 8004136:	603b      	str	r3, [r7, #0]
 8004138:	4613      	mov	r3, r2
 800413a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800413c:	f7fd fe28 	bl	8001d90 <HAL_GetTick>
 8004140:	4602      	mov	r2, r0
 8004142:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004144:	1a9b      	subs	r3, r3, r2
 8004146:	683a      	ldr	r2, [r7, #0]
 8004148:	4413      	add	r3, r2
 800414a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800414c:	f7fd fe20 	bl	8001d90 <HAL_GetTick>
 8004150:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004152:	4b39      	ldr	r3, [pc, #228]	@ (8004238 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	015b      	lsls	r3, r3, #5
 8004158:	0d1b      	lsrs	r3, r3, #20
 800415a:	69fa      	ldr	r2, [r7, #28]
 800415c:	fb02 f303 	mul.w	r3, r2, r3
 8004160:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004162:	e054      	b.n	800420e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004164:	683b      	ldr	r3, [r7, #0]
 8004166:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800416a:	d050      	beq.n	800420e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800416c:	f7fd fe10 	bl	8001d90 <HAL_GetTick>
 8004170:	4602      	mov	r2, r0
 8004172:	69bb      	ldr	r3, [r7, #24]
 8004174:	1ad3      	subs	r3, r2, r3
 8004176:	69fa      	ldr	r2, [r7, #28]
 8004178:	429a      	cmp	r2, r3
 800417a:	d902      	bls.n	8004182 <SPI_WaitFlagStateUntilTimeout+0x56>
 800417c:	69fb      	ldr	r3, [r7, #28]
 800417e:	2b00      	cmp	r3, #0
 8004180:	d13d      	bne.n	80041fe <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	685a      	ldr	r2, [r3, #4]
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004190:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	685b      	ldr	r3, [r3, #4]
 8004196:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800419a:	d111      	bne.n	80041c0 <SPI_WaitFlagStateUntilTimeout+0x94>
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	689b      	ldr	r3, [r3, #8]
 80041a0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80041a4:	d004      	beq.n	80041b0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	689b      	ldr	r3, [r3, #8]
 80041aa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80041ae:	d107      	bne.n	80041c0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	681a      	ldr	r2, [r3, #0]
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80041be:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041c4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80041c8:	d10f      	bne.n	80041ea <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	681a      	ldr	r2, [r3, #0]
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80041d8:	601a      	str	r2, [r3, #0]
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	681a      	ldr	r2, [r3, #0]
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80041e8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	2201      	movs	r2, #1
 80041ee:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	2200      	movs	r2, #0
 80041f6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 80041fa:	2303      	movs	r3, #3
 80041fc:	e017      	b.n	800422e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80041fe:	697b      	ldr	r3, [r7, #20]
 8004200:	2b00      	cmp	r3, #0
 8004202:	d101      	bne.n	8004208 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004204:	2300      	movs	r3, #0
 8004206:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004208:	697b      	ldr	r3, [r7, #20]
 800420a:	3b01      	subs	r3, #1
 800420c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	689a      	ldr	r2, [r3, #8]
 8004214:	68bb      	ldr	r3, [r7, #8]
 8004216:	4013      	ands	r3, r2
 8004218:	68ba      	ldr	r2, [r7, #8]
 800421a:	429a      	cmp	r2, r3
 800421c:	bf0c      	ite	eq
 800421e:	2301      	moveq	r3, #1
 8004220:	2300      	movne	r3, #0
 8004222:	b2db      	uxtb	r3, r3
 8004224:	461a      	mov	r2, r3
 8004226:	79fb      	ldrb	r3, [r7, #7]
 8004228:	429a      	cmp	r2, r3
 800422a:	d19b      	bne.n	8004164 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800422c:	2300      	movs	r3, #0
}
 800422e:	4618      	mov	r0, r3
 8004230:	3720      	adds	r7, #32
 8004232:	46bd      	mov	sp, r7
 8004234:	bd80      	pop	{r7, pc}
 8004236:	bf00      	nop
 8004238:	2000002c 	.word	0x2000002c

0800423c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800423c:	b580      	push	{r7, lr}
 800423e:	b086      	sub	sp, #24
 8004240:	af02      	add	r7, sp, #8
 8004242:	60f8      	str	r0, [r7, #12]
 8004244:	60b9      	str	r1, [r7, #8]
 8004246:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	9300      	str	r3, [sp, #0]
 800424c:	68bb      	ldr	r3, [r7, #8]
 800424e:	2200      	movs	r2, #0
 8004250:	2180      	movs	r1, #128	@ 0x80
 8004252:	68f8      	ldr	r0, [r7, #12]
 8004254:	f7ff ff6a 	bl	800412c <SPI_WaitFlagStateUntilTimeout>
 8004258:	4603      	mov	r3, r0
 800425a:	2b00      	cmp	r3, #0
 800425c:	d007      	beq.n	800426e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004262:	f043 0220 	orr.w	r2, r3, #32
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 800426a:	2303      	movs	r3, #3
 800426c:	e000      	b.n	8004270 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 800426e:	2300      	movs	r3, #0
}
 8004270:	4618      	mov	r0, r3
 8004272:	3710      	adds	r7, #16
 8004274:	46bd      	mov	sp, r7
 8004276:	bd80      	pop	{r7, pc}

08004278 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004278:	b580      	push	{r7, lr}
 800427a:	b082      	sub	sp, #8
 800427c:	af00      	add	r7, sp, #0
 800427e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	2b00      	cmp	r3, #0
 8004284:	d101      	bne.n	800428a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004286:	2301      	movs	r3, #1
 8004288:	e041      	b.n	800430e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004290:	b2db      	uxtb	r3, r3
 8004292:	2b00      	cmp	r3, #0
 8004294:	d106      	bne.n	80042a4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	2200      	movs	r2, #0
 800429a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800429e:	6878      	ldr	r0, [r7, #4]
 80042a0:	f7fd face 	bl	8001840 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	2202      	movs	r2, #2
 80042a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681a      	ldr	r2, [r3, #0]
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	3304      	adds	r3, #4
 80042b4:	4619      	mov	r1, r3
 80042b6:	4610      	mov	r0, r2
 80042b8:	f000 fd02 	bl	8004cc0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	2201      	movs	r2, #1
 80042c0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	2201      	movs	r2, #1
 80042c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	2201      	movs	r2, #1
 80042d0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	2201      	movs	r2, #1
 80042d8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	2201      	movs	r2, #1
 80042e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	2201      	movs	r2, #1
 80042e8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	2201      	movs	r2, #1
 80042f0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	2201      	movs	r2, #1
 80042f8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	2201      	movs	r2, #1
 8004300:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	2201      	movs	r2, #1
 8004308:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800430c:	2300      	movs	r3, #0
}
 800430e:	4618      	mov	r0, r3
 8004310:	3708      	adds	r7, #8
 8004312:	46bd      	mov	sp, r7
 8004314:	bd80      	pop	{r7, pc}
	...

08004318 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004318:	b480      	push	{r7}
 800431a:	b085      	sub	sp, #20
 800431c:	af00      	add	r7, sp, #0
 800431e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004326:	b2db      	uxtb	r3, r3
 8004328:	2b01      	cmp	r3, #1
 800432a:	d001      	beq.n	8004330 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800432c:	2301      	movs	r3, #1
 800432e:	e044      	b.n	80043ba <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	2202      	movs	r2, #2
 8004334:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	68da      	ldr	r2, [r3, #12]
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	f042 0201 	orr.w	r2, r2, #1
 8004346:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	4a1d      	ldr	r2, [pc, #116]	@ (80043c4 <HAL_TIM_Base_Start_IT+0xac>)
 800434e:	4293      	cmp	r3, r2
 8004350:	d018      	beq.n	8004384 <HAL_TIM_Base_Start_IT+0x6c>
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	4a1c      	ldr	r2, [pc, #112]	@ (80043c8 <HAL_TIM_Base_Start_IT+0xb0>)
 8004358:	4293      	cmp	r3, r2
 800435a:	d013      	beq.n	8004384 <HAL_TIM_Base_Start_IT+0x6c>
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004364:	d00e      	beq.n	8004384 <HAL_TIM_Base_Start_IT+0x6c>
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	4a18      	ldr	r2, [pc, #96]	@ (80043cc <HAL_TIM_Base_Start_IT+0xb4>)
 800436c:	4293      	cmp	r3, r2
 800436e:	d009      	beq.n	8004384 <HAL_TIM_Base_Start_IT+0x6c>
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	4a16      	ldr	r2, [pc, #88]	@ (80043d0 <HAL_TIM_Base_Start_IT+0xb8>)
 8004376:	4293      	cmp	r3, r2
 8004378:	d004      	beq.n	8004384 <HAL_TIM_Base_Start_IT+0x6c>
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	4a15      	ldr	r2, [pc, #84]	@ (80043d4 <HAL_TIM_Base_Start_IT+0xbc>)
 8004380:	4293      	cmp	r3, r2
 8004382:	d111      	bne.n	80043a8 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	689b      	ldr	r3, [r3, #8]
 800438a:	f003 0307 	and.w	r3, r3, #7
 800438e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	2b06      	cmp	r3, #6
 8004394:	d010      	beq.n	80043b8 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	681a      	ldr	r2, [r3, #0]
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	f042 0201 	orr.w	r2, r2, #1
 80043a4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80043a6:	e007      	b.n	80043b8 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	681a      	ldr	r2, [r3, #0]
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	f042 0201 	orr.w	r2, r2, #1
 80043b6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80043b8:	2300      	movs	r3, #0
}
 80043ba:	4618      	mov	r0, r3
 80043bc:	3714      	adds	r7, #20
 80043be:	46bd      	mov	sp, r7
 80043c0:	bc80      	pop	{r7}
 80043c2:	4770      	bx	lr
 80043c4:	40012c00 	.word	0x40012c00
 80043c8:	40013400 	.word	0x40013400
 80043cc:	40000400 	.word	0x40000400
 80043d0:	40000800 	.word	0x40000800
 80043d4:	40000c00 	.word	0x40000c00

080043d8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80043d8:	b580      	push	{r7, lr}
 80043da:	b082      	sub	sp, #8
 80043dc:	af00      	add	r7, sp, #0
 80043de:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d101      	bne.n	80043ea <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80043e6:	2301      	movs	r3, #1
 80043e8:	e041      	b.n	800446e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80043f0:	b2db      	uxtb	r3, r3
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d106      	bne.n	8004404 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	2200      	movs	r2, #0
 80043fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80043fe:	6878      	ldr	r0, [r7, #4]
 8004400:	f7fd fa7a 	bl	80018f8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	2202      	movs	r2, #2
 8004408:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681a      	ldr	r2, [r3, #0]
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	3304      	adds	r3, #4
 8004414:	4619      	mov	r1, r3
 8004416:	4610      	mov	r0, r2
 8004418:	f000 fc52 	bl	8004cc0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	2201      	movs	r2, #1
 8004420:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	2201      	movs	r2, #1
 8004428:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	2201      	movs	r2, #1
 8004430:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	2201      	movs	r2, #1
 8004438:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	2201      	movs	r2, #1
 8004440:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	2201      	movs	r2, #1
 8004448:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	2201      	movs	r2, #1
 8004450:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	2201      	movs	r2, #1
 8004458:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	2201      	movs	r2, #1
 8004460:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	2201      	movs	r2, #1
 8004468:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800446c:	2300      	movs	r3, #0
}
 800446e:	4618      	mov	r0, r3
 8004470:	3708      	adds	r7, #8
 8004472:	46bd      	mov	sp, r7
 8004474:	bd80      	pop	{r7, pc}
	...

08004478 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004478:	b580      	push	{r7, lr}
 800447a:	b084      	sub	sp, #16
 800447c:	af00      	add	r7, sp, #0
 800447e:	6078      	str	r0, [r7, #4]
 8004480:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004482:	683b      	ldr	r3, [r7, #0]
 8004484:	2b00      	cmp	r3, #0
 8004486:	d109      	bne.n	800449c <HAL_TIM_PWM_Start+0x24>
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800448e:	b2db      	uxtb	r3, r3
 8004490:	2b01      	cmp	r3, #1
 8004492:	bf14      	ite	ne
 8004494:	2301      	movne	r3, #1
 8004496:	2300      	moveq	r3, #0
 8004498:	b2db      	uxtb	r3, r3
 800449a:	e022      	b.n	80044e2 <HAL_TIM_PWM_Start+0x6a>
 800449c:	683b      	ldr	r3, [r7, #0]
 800449e:	2b04      	cmp	r3, #4
 80044a0:	d109      	bne.n	80044b6 <HAL_TIM_PWM_Start+0x3e>
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80044a8:	b2db      	uxtb	r3, r3
 80044aa:	2b01      	cmp	r3, #1
 80044ac:	bf14      	ite	ne
 80044ae:	2301      	movne	r3, #1
 80044b0:	2300      	moveq	r3, #0
 80044b2:	b2db      	uxtb	r3, r3
 80044b4:	e015      	b.n	80044e2 <HAL_TIM_PWM_Start+0x6a>
 80044b6:	683b      	ldr	r3, [r7, #0]
 80044b8:	2b08      	cmp	r3, #8
 80044ba:	d109      	bne.n	80044d0 <HAL_TIM_PWM_Start+0x58>
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80044c2:	b2db      	uxtb	r3, r3
 80044c4:	2b01      	cmp	r3, #1
 80044c6:	bf14      	ite	ne
 80044c8:	2301      	movne	r3, #1
 80044ca:	2300      	moveq	r3, #0
 80044cc:	b2db      	uxtb	r3, r3
 80044ce:	e008      	b.n	80044e2 <HAL_TIM_PWM_Start+0x6a>
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80044d6:	b2db      	uxtb	r3, r3
 80044d8:	2b01      	cmp	r3, #1
 80044da:	bf14      	ite	ne
 80044dc:	2301      	movne	r3, #1
 80044de:	2300      	moveq	r3, #0
 80044e0:	b2db      	uxtb	r3, r3
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d001      	beq.n	80044ea <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80044e6:	2301      	movs	r3, #1
 80044e8:	e072      	b.n	80045d0 <HAL_TIM_PWM_Start+0x158>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80044ea:	683b      	ldr	r3, [r7, #0]
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d104      	bne.n	80044fa <HAL_TIM_PWM_Start+0x82>
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	2202      	movs	r2, #2
 80044f4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80044f8:	e013      	b.n	8004522 <HAL_TIM_PWM_Start+0xaa>
 80044fa:	683b      	ldr	r3, [r7, #0]
 80044fc:	2b04      	cmp	r3, #4
 80044fe:	d104      	bne.n	800450a <HAL_TIM_PWM_Start+0x92>
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	2202      	movs	r2, #2
 8004504:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004508:	e00b      	b.n	8004522 <HAL_TIM_PWM_Start+0xaa>
 800450a:	683b      	ldr	r3, [r7, #0]
 800450c:	2b08      	cmp	r3, #8
 800450e:	d104      	bne.n	800451a <HAL_TIM_PWM_Start+0xa2>
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	2202      	movs	r2, #2
 8004514:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004518:	e003      	b.n	8004522 <HAL_TIM_PWM_Start+0xaa>
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	2202      	movs	r2, #2
 800451e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	2201      	movs	r2, #1
 8004528:	6839      	ldr	r1, [r7, #0]
 800452a:	4618      	mov	r0, r3
 800452c:	f000 fe84 	bl	8005238 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	4a28      	ldr	r2, [pc, #160]	@ (80045d8 <HAL_TIM_PWM_Start+0x160>)
 8004536:	4293      	cmp	r3, r2
 8004538:	d004      	beq.n	8004544 <HAL_TIM_PWM_Start+0xcc>
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	4a27      	ldr	r2, [pc, #156]	@ (80045dc <HAL_TIM_PWM_Start+0x164>)
 8004540:	4293      	cmp	r3, r2
 8004542:	d101      	bne.n	8004548 <HAL_TIM_PWM_Start+0xd0>
 8004544:	2301      	movs	r3, #1
 8004546:	e000      	b.n	800454a <HAL_TIM_PWM_Start+0xd2>
 8004548:	2300      	movs	r3, #0
 800454a:	2b00      	cmp	r3, #0
 800454c:	d007      	beq.n	800455e <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800455c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	4a1d      	ldr	r2, [pc, #116]	@ (80045d8 <HAL_TIM_PWM_Start+0x160>)
 8004564:	4293      	cmp	r3, r2
 8004566:	d018      	beq.n	800459a <HAL_TIM_PWM_Start+0x122>
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	4a1b      	ldr	r2, [pc, #108]	@ (80045dc <HAL_TIM_PWM_Start+0x164>)
 800456e:	4293      	cmp	r3, r2
 8004570:	d013      	beq.n	800459a <HAL_TIM_PWM_Start+0x122>
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800457a:	d00e      	beq.n	800459a <HAL_TIM_PWM_Start+0x122>
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	4a17      	ldr	r2, [pc, #92]	@ (80045e0 <HAL_TIM_PWM_Start+0x168>)
 8004582:	4293      	cmp	r3, r2
 8004584:	d009      	beq.n	800459a <HAL_TIM_PWM_Start+0x122>
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	4a16      	ldr	r2, [pc, #88]	@ (80045e4 <HAL_TIM_PWM_Start+0x16c>)
 800458c:	4293      	cmp	r3, r2
 800458e:	d004      	beq.n	800459a <HAL_TIM_PWM_Start+0x122>
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	4a14      	ldr	r2, [pc, #80]	@ (80045e8 <HAL_TIM_PWM_Start+0x170>)
 8004596:	4293      	cmp	r3, r2
 8004598:	d111      	bne.n	80045be <HAL_TIM_PWM_Start+0x146>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	689b      	ldr	r3, [r3, #8]
 80045a0:	f003 0307 	and.w	r3, r3, #7
 80045a4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	2b06      	cmp	r3, #6
 80045aa:	d010      	beq.n	80045ce <HAL_TIM_PWM_Start+0x156>
    {
      __HAL_TIM_ENABLE(htim);
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	681a      	ldr	r2, [r3, #0]
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	f042 0201 	orr.w	r2, r2, #1
 80045ba:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80045bc:	e007      	b.n	80045ce <HAL_TIM_PWM_Start+0x156>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	681a      	ldr	r2, [r3, #0]
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	f042 0201 	orr.w	r2, r2, #1
 80045cc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80045ce:	2300      	movs	r3, #0
}
 80045d0:	4618      	mov	r0, r3
 80045d2:	3710      	adds	r7, #16
 80045d4:	46bd      	mov	sp, r7
 80045d6:	bd80      	pop	{r7, pc}
 80045d8:	40012c00 	.word	0x40012c00
 80045dc:	40013400 	.word	0x40013400
 80045e0:	40000400 	.word	0x40000400
 80045e4:	40000800 	.word	0x40000800
 80045e8:	40000c00 	.word	0x40000c00

080045ec <HAL_TIM_PWM_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80045ec:	b580      	push	{r7, lr}
 80045ee:	b084      	sub	sp, #16
 80045f0:	af00      	add	r7, sp, #0
 80045f2:	6078      	str	r0, [r7, #4]
 80045f4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80045f6:	2300      	movs	r3, #0
 80045f8:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 80045fa:	683b      	ldr	r3, [r7, #0]
 80045fc:	2b0c      	cmp	r3, #12
 80045fe:	d841      	bhi.n	8004684 <HAL_TIM_PWM_Stop_IT+0x98>
 8004600:	a201      	add	r2, pc, #4	@ (adr r2, 8004608 <HAL_TIM_PWM_Stop_IT+0x1c>)
 8004602:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004606:	bf00      	nop
 8004608:	0800463d 	.word	0x0800463d
 800460c:	08004685 	.word	0x08004685
 8004610:	08004685 	.word	0x08004685
 8004614:	08004685 	.word	0x08004685
 8004618:	0800464f 	.word	0x0800464f
 800461c:	08004685 	.word	0x08004685
 8004620:	08004685 	.word	0x08004685
 8004624:	08004685 	.word	0x08004685
 8004628:	08004661 	.word	0x08004661
 800462c:	08004685 	.word	0x08004685
 8004630:	08004685 	.word	0x08004685
 8004634:	08004685 	.word	0x08004685
 8004638:	08004673 	.word	0x08004673
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	68da      	ldr	r2, [r3, #12]
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	f022 0202 	bic.w	r2, r2, #2
 800464a:	60da      	str	r2, [r3, #12]
      break;
 800464c:	e01d      	b.n	800468a <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	68da      	ldr	r2, [r3, #12]
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	f022 0204 	bic.w	r2, r2, #4
 800465c:	60da      	str	r2, [r3, #12]
      break;
 800465e:	e014      	b.n	800468a <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	68da      	ldr	r2, [r3, #12]
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	f022 0208 	bic.w	r2, r2, #8
 800466e:	60da      	str	r2, [r3, #12]
      break;
 8004670:	e00b      	b.n	800468a <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	68da      	ldr	r2, [r3, #12]
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	f022 0210 	bic.w	r2, r2, #16
 8004680:	60da      	str	r2, [r3, #12]
      break;
 8004682:	e002      	b.n	800468a <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 8004684:	2301      	movs	r3, #1
 8004686:	73fb      	strb	r3, [r7, #15]
      break;
 8004688:	bf00      	nop
  }

  if (status == HAL_OK)
 800468a:	7bfb      	ldrb	r3, [r7, #15]
 800468c:	2b00      	cmp	r3, #0
 800468e:	d161      	bne.n	8004754 <HAL_TIM_PWM_Stop_IT+0x168>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	2200      	movs	r2, #0
 8004696:	6839      	ldr	r1, [r7, #0]
 8004698:	4618      	mov	r0, r3
 800469a:	f000 fdcd 	bl	8005238 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	4a2f      	ldr	r2, [pc, #188]	@ (8004760 <HAL_TIM_PWM_Stop_IT+0x174>)
 80046a4:	4293      	cmp	r3, r2
 80046a6:	d004      	beq.n	80046b2 <HAL_TIM_PWM_Stop_IT+0xc6>
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	4a2d      	ldr	r2, [pc, #180]	@ (8004764 <HAL_TIM_PWM_Stop_IT+0x178>)
 80046ae:	4293      	cmp	r3, r2
 80046b0:	d101      	bne.n	80046b6 <HAL_TIM_PWM_Stop_IT+0xca>
 80046b2:	2301      	movs	r3, #1
 80046b4:	e000      	b.n	80046b8 <HAL_TIM_PWM_Stop_IT+0xcc>
 80046b6:	2300      	movs	r3, #0
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d017      	beq.n	80046ec <HAL_TIM_PWM_Stop_IT+0x100>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	6a1a      	ldr	r2, [r3, #32]
 80046c2:	f241 1311 	movw	r3, #4369	@ 0x1111
 80046c6:	4013      	ands	r3, r2
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d10f      	bne.n	80046ec <HAL_TIM_PWM_Stop_IT+0x100>
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	6a1a      	ldr	r2, [r3, #32]
 80046d2:	f240 4344 	movw	r3, #1092	@ 0x444
 80046d6:	4013      	ands	r3, r2
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d107      	bne.n	80046ec <HAL_TIM_PWM_Stop_IT+0x100>
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80046ea:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	6a1a      	ldr	r2, [r3, #32]
 80046f2:	f241 1311 	movw	r3, #4369	@ 0x1111
 80046f6:	4013      	ands	r3, r2
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d10f      	bne.n	800471c <HAL_TIM_PWM_Stop_IT+0x130>
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	6a1a      	ldr	r2, [r3, #32]
 8004702:	f240 4344 	movw	r3, #1092	@ 0x444
 8004706:	4013      	ands	r3, r2
 8004708:	2b00      	cmp	r3, #0
 800470a:	d107      	bne.n	800471c <HAL_TIM_PWM_Stop_IT+0x130>
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	681a      	ldr	r2, [r3, #0]
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	f022 0201 	bic.w	r2, r2, #1
 800471a:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800471c:	683b      	ldr	r3, [r7, #0]
 800471e:	2b00      	cmp	r3, #0
 8004720:	d104      	bne.n	800472c <HAL_TIM_PWM_Stop_IT+0x140>
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	2201      	movs	r2, #1
 8004726:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800472a:	e013      	b.n	8004754 <HAL_TIM_PWM_Stop_IT+0x168>
 800472c:	683b      	ldr	r3, [r7, #0]
 800472e:	2b04      	cmp	r3, #4
 8004730:	d104      	bne.n	800473c <HAL_TIM_PWM_Stop_IT+0x150>
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	2201      	movs	r2, #1
 8004736:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800473a:	e00b      	b.n	8004754 <HAL_TIM_PWM_Stop_IT+0x168>
 800473c:	683b      	ldr	r3, [r7, #0]
 800473e:	2b08      	cmp	r3, #8
 8004740:	d104      	bne.n	800474c <HAL_TIM_PWM_Stop_IT+0x160>
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	2201      	movs	r2, #1
 8004746:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800474a:	e003      	b.n	8004754 <HAL_TIM_PWM_Stop_IT+0x168>
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	2201      	movs	r2, #1
 8004750:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

  /* Return function status */
  return status;
 8004754:	7bfb      	ldrb	r3, [r7, #15]
}
 8004756:	4618      	mov	r0, r3
 8004758:	3710      	adds	r7, #16
 800475a:	46bd      	mov	sp, r7
 800475c:	bd80      	pop	{r7, pc}
 800475e:	bf00      	nop
 8004760:	40012c00 	.word	0x40012c00
 8004764:	40013400 	.word	0x40013400

08004768 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004768:	b580      	push	{r7, lr}
 800476a:	b082      	sub	sp, #8
 800476c:	af00      	add	r7, sp, #0
 800476e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	691b      	ldr	r3, [r3, #16]
 8004776:	f003 0302 	and.w	r3, r3, #2
 800477a:	2b02      	cmp	r3, #2
 800477c:	d122      	bne.n	80047c4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	68db      	ldr	r3, [r3, #12]
 8004784:	f003 0302 	and.w	r3, r3, #2
 8004788:	2b02      	cmp	r3, #2
 800478a:	d11b      	bne.n	80047c4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	f06f 0202 	mvn.w	r2, #2
 8004794:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	2201      	movs	r2, #1
 800479a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	699b      	ldr	r3, [r3, #24]
 80047a2:	f003 0303 	and.w	r3, r3, #3
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d003      	beq.n	80047b2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80047aa:	6878      	ldr	r0, [r7, #4]
 80047ac:	f000 fa76 	bl	8004c9c <HAL_TIM_IC_CaptureCallback>
 80047b0:	e005      	b.n	80047be <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80047b2:	6878      	ldr	r0, [r7, #4]
 80047b4:	f000 fa69 	bl	8004c8a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80047b8:	6878      	ldr	r0, [r7, #4]
 80047ba:	f7fc fd25 	bl	8001208 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	2200      	movs	r2, #0
 80047c2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	691b      	ldr	r3, [r3, #16]
 80047ca:	f003 0304 	and.w	r3, r3, #4
 80047ce:	2b04      	cmp	r3, #4
 80047d0:	d122      	bne.n	8004818 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	68db      	ldr	r3, [r3, #12]
 80047d8:	f003 0304 	and.w	r3, r3, #4
 80047dc:	2b04      	cmp	r3, #4
 80047de:	d11b      	bne.n	8004818 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	f06f 0204 	mvn.w	r2, #4
 80047e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	2202      	movs	r2, #2
 80047ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	699b      	ldr	r3, [r3, #24]
 80047f6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d003      	beq.n	8004806 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80047fe:	6878      	ldr	r0, [r7, #4]
 8004800:	f000 fa4c 	bl	8004c9c <HAL_TIM_IC_CaptureCallback>
 8004804:	e005      	b.n	8004812 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004806:	6878      	ldr	r0, [r7, #4]
 8004808:	f000 fa3f 	bl	8004c8a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800480c:	6878      	ldr	r0, [r7, #4]
 800480e:	f7fc fcfb 	bl	8001208 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	2200      	movs	r2, #0
 8004816:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	691b      	ldr	r3, [r3, #16]
 800481e:	f003 0308 	and.w	r3, r3, #8
 8004822:	2b08      	cmp	r3, #8
 8004824:	d122      	bne.n	800486c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	68db      	ldr	r3, [r3, #12]
 800482c:	f003 0308 	and.w	r3, r3, #8
 8004830:	2b08      	cmp	r3, #8
 8004832:	d11b      	bne.n	800486c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	f06f 0208 	mvn.w	r2, #8
 800483c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	2204      	movs	r2, #4
 8004842:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	69db      	ldr	r3, [r3, #28]
 800484a:	f003 0303 	and.w	r3, r3, #3
 800484e:	2b00      	cmp	r3, #0
 8004850:	d003      	beq.n	800485a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004852:	6878      	ldr	r0, [r7, #4]
 8004854:	f000 fa22 	bl	8004c9c <HAL_TIM_IC_CaptureCallback>
 8004858:	e005      	b.n	8004866 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800485a:	6878      	ldr	r0, [r7, #4]
 800485c:	f000 fa15 	bl	8004c8a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004860:	6878      	ldr	r0, [r7, #4]
 8004862:	f7fc fcd1 	bl	8001208 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	2200      	movs	r2, #0
 800486a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	691b      	ldr	r3, [r3, #16]
 8004872:	f003 0310 	and.w	r3, r3, #16
 8004876:	2b10      	cmp	r3, #16
 8004878:	d122      	bne.n	80048c0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	68db      	ldr	r3, [r3, #12]
 8004880:	f003 0310 	and.w	r3, r3, #16
 8004884:	2b10      	cmp	r3, #16
 8004886:	d11b      	bne.n	80048c0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	f06f 0210 	mvn.w	r2, #16
 8004890:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	2208      	movs	r2, #8
 8004896:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	69db      	ldr	r3, [r3, #28]
 800489e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d003      	beq.n	80048ae <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80048a6:	6878      	ldr	r0, [r7, #4]
 80048a8:	f000 f9f8 	bl	8004c9c <HAL_TIM_IC_CaptureCallback>
 80048ac:	e005      	b.n	80048ba <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80048ae:	6878      	ldr	r0, [r7, #4]
 80048b0:	f000 f9eb 	bl	8004c8a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80048b4:	6878      	ldr	r0, [r7, #4]
 80048b6:	f7fc fca7 	bl	8001208 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	2200      	movs	r2, #0
 80048be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	691b      	ldr	r3, [r3, #16]
 80048c6:	f003 0301 	and.w	r3, r3, #1
 80048ca:	2b01      	cmp	r3, #1
 80048cc:	d10e      	bne.n	80048ec <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	68db      	ldr	r3, [r3, #12]
 80048d4:	f003 0301 	and.w	r3, r3, #1
 80048d8:	2b01      	cmp	r3, #1
 80048da:	d107      	bne.n	80048ec <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	f06f 0201 	mvn.w	r2, #1
 80048e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80048e6:	6878      	ldr	r0, [r7, #4]
 80048e8:	f7fc fbea 	bl	80010c0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	691b      	ldr	r3, [r3, #16]
 80048f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80048f6:	2b80      	cmp	r3, #128	@ 0x80
 80048f8:	d10e      	bne.n	8004918 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	68db      	ldr	r3, [r3, #12]
 8004900:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004904:	2b80      	cmp	r3, #128	@ 0x80
 8004906:	d107      	bne.n	8004918 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004910:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004912:	6878      	ldr	r0, [r7, #4]
 8004914:	f000 fd7a 	bl	800540c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	691b      	ldr	r3, [r3, #16]
 800491e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004922:	2b40      	cmp	r3, #64	@ 0x40
 8004924:	d10e      	bne.n	8004944 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	68db      	ldr	r3, [r3, #12]
 800492c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004930:	2b40      	cmp	r3, #64	@ 0x40
 8004932:	d107      	bne.n	8004944 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800493c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800493e:	6878      	ldr	r0, [r7, #4]
 8004940:	f000 f9b5 	bl	8004cae <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	691b      	ldr	r3, [r3, #16]
 800494a:	f003 0320 	and.w	r3, r3, #32
 800494e:	2b20      	cmp	r3, #32
 8004950:	d10e      	bne.n	8004970 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	68db      	ldr	r3, [r3, #12]
 8004958:	f003 0320 	and.w	r3, r3, #32
 800495c:	2b20      	cmp	r3, #32
 800495e:	d107      	bne.n	8004970 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	f06f 0220 	mvn.w	r2, #32
 8004968:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800496a:	6878      	ldr	r0, [r7, #4]
 800496c:	f000 fd45 	bl	80053fa <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004970:	bf00      	nop
 8004972:	3708      	adds	r7, #8
 8004974:	46bd      	mov	sp, r7
 8004976:	bd80      	pop	{r7, pc}

08004978 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004978:	b580      	push	{r7, lr}
 800497a:	b086      	sub	sp, #24
 800497c:	af00      	add	r7, sp, #0
 800497e:	60f8      	str	r0, [r7, #12]
 8004980:	60b9      	str	r1, [r7, #8]
 8004982:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004984:	2300      	movs	r3, #0
 8004986:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800498e:	2b01      	cmp	r3, #1
 8004990:	d101      	bne.n	8004996 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004992:	2302      	movs	r3, #2
 8004994:	e0ae      	b.n	8004af4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	2201      	movs	r2, #1
 800499a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	2b0c      	cmp	r3, #12
 80049a2:	f200 809f 	bhi.w	8004ae4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80049a6:	a201      	add	r2, pc, #4	@ (adr r2, 80049ac <HAL_TIM_PWM_ConfigChannel+0x34>)
 80049a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049ac:	080049e1 	.word	0x080049e1
 80049b0:	08004ae5 	.word	0x08004ae5
 80049b4:	08004ae5 	.word	0x08004ae5
 80049b8:	08004ae5 	.word	0x08004ae5
 80049bc:	08004a21 	.word	0x08004a21
 80049c0:	08004ae5 	.word	0x08004ae5
 80049c4:	08004ae5 	.word	0x08004ae5
 80049c8:	08004ae5 	.word	0x08004ae5
 80049cc:	08004a63 	.word	0x08004a63
 80049d0:	08004ae5 	.word	0x08004ae5
 80049d4:	08004ae5 	.word	0x08004ae5
 80049d8:	08004ae5 	.word	0x08004ae5
 80049dc:	08004aa3 	.word	0x08004aa3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	68b9      	ldr	r1, [r7, #8]
 80049e6:	4618      	mov	r0, r3
 80049e8:	f000 f9e4 	bl	8004db4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	699a      	ldr	r2, [r3, #24]
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	f042 0208 	orr.w	r2, r2, #8
 80049fa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	699a      	ldr	r2, [r3, #24]
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	f022 0204 	bic.w	r2, r2, #4
 8004a0a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	6999      	ldr	r1, [r3, #24]
 8004a12:	68bb      	ldr	r3, [r7, #8]
 8004a14:	691a      	ldr	r2, [r3, #16]
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	430a      	orrs	r2, r1
 8004a1c:	619a      	str	r2, [r3, #24]
      break;
 8004a1e:	e064      	b.n	8004aea <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	68b9      	ldr	r1, [r7, #8]
 8004a26:	4618      	mov	r0, r3
 8004a28:	f000 fa34 	bl	8004e94 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	699a      	ldr	r2, [r3, #24]
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004a3a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	699a      	ldr	r2, [r3, #24]
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004a4a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	6999      	ldr	r1, [r3, #24]
 8004a52:	68bb      	ldr	r3, [r7, #8]
 8004a54:	691b      	ldr	r3, [r3, #16]
 8004a56:	021a      	lsls	r2, r3, #8
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	430a      	orrs	r2, r1
 8004a5e:	619a      	str	r2, [r3, #24]
      break;
 8004a60:	e043      	b.n	8004aea <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	68b9      	ldr	r1, [r7, #8]
 8004a68:	4618      	mov	r0, r3
 8004a6a:	f000 fa87 	bl	8004f7c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	69da      	ldr	r2, [r3, #28]
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	f042 0208 	orr.w	r2, r2, #8
 8004a7c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	69da      	ldr	r2, [r3, #28]
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	f022 0204 	bic.w	r2, r2, #4
 8004a8c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	69d9      	ldr	r1, [r3, #28]
 8004a94:	68bb      	ldr	r3, [r7, #8]
 8004a96:	691a      	ldr	r2, [r3, #16]
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	430a      	orrs	r2, r1
 8004a9e:	61da      	str	r2, [r3, #28]
      break;
 8004aa0:	e023      	b.n	8004aea <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	68b9      	ldr	r1, [r7, #8]
 8004aa8:	4618      	mov	r0, r3
 8004aaa:	f000 fadb 	bl	8005064 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	69da      	ldr	r2, [r3, #28]
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004abc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	69da      	ldr	r2, [r3, #28]
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004acc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	69d9      	ldr	r1, [r3, #28]
 8004ad4:	68bb      	ldr	r3, [r7, #8]
 8004ad6:	691b      	ldr	r3, [r3, #16]
 8004ad8:	021a      	lsls	r2, r3, #8
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	430a      	orrs	r2, r1
 8004ae0:	61da      	str	r2, [r3, #28]
      break;
 8004ae2:	e002      	b.n	8004aea <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004ae4:	2301      	movs	r3, #1
 8004ae6:	75fb      	strb	r3, [r7, #23]
      break;
 8004ae8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	2200      	movs	r2, #0
 8004aee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004af2:	7dfb      	ldrb	r3, [r7, #23]
}
 8004af4:	4618      	mov	r0, r3
 8004af6:	3718      	adds	r7, #24
 8004af8:	46bd      	mov	sp, r7
 8004afa:	bd80      	pop	{r7, pc}

08004afc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004afc:	b580      	push	{r7, lr}
 8004afe:	b084      	sub	sp, #16
 8004b00:	af00      	add	r7, sp, #0
 8004b02:	6078      	str	r0, [r7, #4]
 8004b04:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004b06:	2300      	movs	r3, #0
 8004b08:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004b10:	2b01      	cmp	r3, #1
 8004b12:	d101      	bne.n	8004b18 <HAL_TIM_ConfigClockSource+0x1c>
 8004b14:	2302      	movs	r3, #2
 8004b16:	e0b4      	b.n	8004c82 <HAL_TIM_ConfigClockSource+0x186>
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	2201      	movs	r2, #1
 8004b1c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	2202      	movs	r2, #2
 8004b24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	689b      	ldr	r3, [r3, #8]
 8004b2e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004b30:	68bb      	ldr	r3, [r7, #8]
 8004b32:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004b36:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004b38:	68bb      	ldr	r3, [r7, #8]
 8004b3a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004b3e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	68ba      	ldr	r2, [r7, #8]
 8004b46:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004b48:	683b      	ldr	r3, [r7, #0]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004b50:	d03e      	beq.n	8004bd0 <HAL_TIM_ConfigClockSource+0xd4>
 8004b52:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004b56:	f200 8087 	bhi.w	8004c68 <HAL_TIM_ConfigClockSource+0x16c>
 8004b5a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004b5e:	f000 8086 	beq.w	8004c6e <HAL_TIM_ConfigClockSource+0x172>
 8004b62:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004b66:	d87f      	bhi.n	8004c68 <HAL_TIM_ConfigClockSource+0x16c>
 8004b68:	2b70      	cmp	r3, #112	@ 0x70
 8004b6a:	d01a      	beq.n	8004ba2 <HAL_TIM_ConfigClockSource+0xa6>
 8004b6c:	2b70      	cmp	r3, #112	@ 0x70
 8004b6e:	d87b      	bhi.n	8004c68 <HAL_TIM_ConfigClockSource+0x16c>
 8004b70:	2b60      	cmp	r3, #96	@ 0x60
 8004b72:	d050      	beq.n	8004c16 <HAL_TIM_ConfigClockSource+0x11a>
 8004b74:	2b60      	cmp	r3, #96	@ 0x60
 8004b76:	d877      	bhi.n	8004c68 <HAL_TIM_ConfigClockSource+0x16c>
 8004b78:	2b50      	cmp	r3, #80	@ 0x50
 8004b7a:	d03c      	beq.n	8004bf6 <HAL_TIM_ConfigClockSource+0xfa>
 8004b7c:	2b50      	cmp	r3, #80	@ 0x50
 8004b7e:	d873      	bhi.n	8004c68 <HAL_TIM_ConfigClockSource+0x16c>
 8004b80:	2b40      	cmp	r3, #64	@ 0x40
 8004b82:	d058      	beq.n	8004c36 <HAL_TIM_ConfigClockSource+0x13a>
 8004b84:	2b40      	cmp	r3, #64	@ 0x40
 8004b86:	d86f      	bhi.n	8004c68 <HAL_TIM_ConfigClockSource+0x16c>
 8004b88:	2b30      	cmp	r3, #48	@ 0x30
 8004b8a:	d064      	beq.n	8004c56 <HAL_TIM_ConfigClockSource+0x15a>
 8004b8c:	2b30      	cmp	r3, #48	@ 0x30
 8004b8e:	d86b      	bhi.n	8004c68 <HAL_TIM_ConfigClockSource+0x16c>
 8004b90:	2b20      	cmp	r3, #32
 8004b92:	d060      	beq.n	8004c56 <HAL_TIM_ConfigClockSource+0x15a>
 8004b94:	2b20      	cmp	r3, #32
 8004b96:	d867      	bhi.n	8004c68 <HAL_TIM_ConfigClockSource+0x16c>
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d05c      	beq.n	8004c56 <HAL_TIM_ConfigClockSource+0x15a>
 8004b9c:	2b10      	cmp	r3, #16
 8004b9e:	d05a      	beq.n	8004c56 <HAL_TIM_ConfigClockSource+0x15a>
 8004ba0:	e062      	b.n	8004c68 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004ba6:	683b      	ldr	r3, [r7, #0]
 8004ba8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004baa:	683b      	ldr	r3, [r7, #0]
 8004bac:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004bae:	683b      	ldr	r3, [r7, #0]
 8004bb0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004bb2:	f000 fb22 	bl	80051fa <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	689b      	ldr	r3, [r3, #8]
 8004bbc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004bbe:	68bb      	ldr	r3, [r7, #8]
 8004bc0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004bc4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	68ba      	ldr	r2, [r7, #8]
 8004bcc:	609a      	str	r2, [r3, #8]
      break;
 8004bce:	e04f      	b.n	8004c70 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004bd4:	683b      	ldr	r3, [r7, #0]
 8004bd6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004bd8:	683b      	ldr	r3, [r7, #0]
 8004bda:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004bdc:	683b      	ldr	r3, [r7, #0]
 8004bde:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004be0:	f000 fb0b 	bl	80051fa <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	689a      	ldr	r2, [r3, #8]
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004bf2:	609a      	str	r2, [r3, #8]
      break;
 8004bf4:	e03c      	b.n	8004c70 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004bfa:	683b      	ldr	r3, [r7, #0]
 8004bfc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004bfe:	683b      	ldr	r3, [r7, #0]
 8004c00:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004c02:	461a      	mov	r2, r3
 8004c04:	f000 fa82 	bl	800510c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	2150      	movs	r1, #80	@ 0x50
 8004c0e:	4618      	mov	r0, r3
 8004c10:	f000 fad9 	bl	80051c6 <TIM_ITRx_SetConfig>
      break;
 8004c14:	e02c      	b.n	8004c70 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004c1a:	683b      	ldr	r3, [r7, #0]
 8004c1c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004c1e:	683b      	ldr	r3, [r7, #0]
 8004c20:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004c22:	461a      	mov	r2, r3
 8004c24:	f000 faa0 	bl	8005168 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	2160      	movs	r1, #96	@ 0x60
 8004c2e:	4618      	mov	r0, r3
 8004c30:	f000 fac9 	bl	80051c6 <TIM_ITRx_SetConfig>
      break;
 8004c34:	e01c      	b.n	8004c70 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004c3a:	683b      	ldr	r3, [r7, #0]
 8004c3c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004c3e:	683b      	ldr	r3, [r7, #0]
 8004c40:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004c42:	461a      	mov	r2, r3
 8004c44:	f000 fa62 	bl	800510c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	2140      	movs	r1, #64	@ 0x40
 8004c4e:	4618      	mov	r0, r3
 8004c50:	f000 fab9 	bl	80051c6 <TIM_ITRx_SetConfig>
      break;
 8004c54:	e00c      	b.n	8004c70 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681a      	ldr	r2, [r3, #0]
 8004c5a:	683b      	ldr	r3, [r7, #0]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	4619      	mov	r1, r3
 8004c60:	4610      	mov	r0, r2
 8004c62:	f000 fab0 	bl	80051c6 <TIM_ITRx_SetConfig>
      break;
 8004c66:	e003      	b.n	8004c70 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004c68:	2301      	movs	r3, #1
 8004c6a:	73fb      	strb	r3, [r7, #15]
      break;
 8004c6c:	e000      	b.n	8004c70 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004c6e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	2201      	movs	r2, #1
 8004c74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	2200      	movs	r2, #0
 8004c7c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004c80:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c82:	4618      	mov	r0, r3
 8004c84:	3710      	adds	r7, #16
 8004c86:	46bd      	mov	sp, r7
 8004c88:	bd80      	pop	{r7, pc}

08004c8a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004c8a:	b480      	push	{r7}
 8004c8c:	b083      	sub	sp, #12
 8004c8e:	af00      	add	r7, sp, #0
 8004c90:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004c92:	bf00      	nop
 8004c94:	370c      	adds	r7, #12
 8004c96:	46bd      	mov	sp, r7
 8004c98:	bc80      	pop	{r7}
 8004c9a:	4770      	bx	lr

08004c9c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004c9c:	b480      	push	{r7}
 8004c9e:	b083      	sub	sp, #12
 8004ca0:	af00      	add	r7, sp, #0
 8004ca2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004ca4:	bf00      	nop
 8004ca6:	370c      	adds	r7, #12
 8004ca8:	46bd      	mov	sp, r7
 8004caa:	bc80      	pop	{r7}
 8004cac:	4770      	bx	lr

08004cae <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004cae:	b480      	push	{r7}
 8004cb0:	b083      	sub	sp, #12
 8004cb2:	af00      	add	r7, sp, #0
 8004cb4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004cb6:	bf00      	nop
 8004cb8:	370c      	adds	r7, #12
 8004cba:	46bd      	mov	sp, r7
 8004cbc:	bc80      	pop	{r7}
 8004cbe:	4770      	bx	lr

08004cc0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004cc0:	b480      	push	{r7}
 8004cc2:	b085      	sub	sp, #20
 8004cc4:	af00      	add	r7, sp, #0
 8004cc6:	6078      	str	r0, [r7, #4]
 8004cc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	4a33      	ldr	r2, [pc, #204]	@ (8004da0 <TIM_Base_SetConfig+0xe0>)
 8004cd4:	4293      	cmp	r3, r2
 8004cd6:	d013      	beq.n	8004d00 <TIM_Base_SetConfig+0x40>
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	4a32      	ldr	r2, [pc, #200]	@ (8004da4 <TIM_Base_SetConfig+0xe4>)
 8004cdc:	4293      	cmp	r3, r2
 8004cde:	d00f      	beq.n	8004d00 <TIM_Base_SetConfig+0x40>
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004ce6:	d00b      	beq.n	8004d00 <TIM_Base_SetConfig+0x40>
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	4a2f      	ldr	r2, [pc, #188]	@ (8004da8 <TIM_Base_SetConfig+0xe8>)
 8004cec:	4293      	cmp	r3, r2
 8004cee:	d007      	beq.n	8004d00 <TIM_Base_SetConfig+0x40>
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	4a2e      	ldr	r2, [pc, #184]	@ (8004dac <TIM_Base_SetConfig+0xec>)
 8004cf4:	4293      	cmp	r3, r2
 8004cf6:	d003      	beq.n	8004d00 <TIM_Base_SetConfig+0x40>
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	4a2d      	ldr	r2, [pc, #180]	@ (8004db0 <TIM_Base_SetConfig+0xf0>)
 8004cfc:	4293      	cmp	r3, r2
 8004cfe:	d108      	bne.n	8004d12 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004d06:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004d08:	683b      	ldr	r3, [r7, #0]
 8004d0a:	685b      	ldr	r3, [r3, #4]
 8004d0c:	68fa      	ldr	r2, [r7, #12]
 8004d0e:	4313      	orrs	r3, r2
 8004d10:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	4a22      	ldr	r2, [pc, #136]	@ (8004da0 <TIM_Base_SetConfig+0xe0>)
 8004d16:	4293      	cmp	r3, r2
 8004d18:	d013      	beq.n	8004d42 <TIM_Base_SetConfig+0x82>
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	4a21      	ldr	r2, [pc, #132]	@ (8004da4 <TIM_Base_SetConfig+0xe4>)
 8004d1e:	4293      	cmp	r3, r2
 8004d20:	d00f      	beq.n	8004d42 <TIM_Base_SetConfig+0x82>
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004d28:	d00b      	beq.n	8004d42 <TIM_Base_SetConfig+0x82>
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	4a1e      	ldr	r2, [pc, #120]	@ (8004da8 <TIM_Base_SetConfig+0xe8>)
 8004d2e:	4293      	cmp	r3, r2
 8004d30:	d007      	beq.n	8004d42 <TIM_Base_SetConfig+0x82>
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	4a1d      	ldr	r2, [pc, #116]	@ (8004dac <TIM_Base_SetConfig+0xec>)
 8004d36:	4293      	cmp	r3, r2
 8004d38:	d003      	beq.n	8004d42 <TIM_Base_SetConfig+0x82>
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	4a1c      	ldr	r2, [pc, #112]	@ (8004db0 <TIM_Base_SetConfig+0xf0>)
 8004d3e:	4293      	cmp	r3, r2
 8004d40:	d108      	bne.n	8004d54 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004d48:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004d4a:	683b      	ldr	r3, [r7, #0]
 8004d4c:	68db      	ldr	r3, [r3, #12]
 8004d4e:	68fa      	ldr	r2, [r7, #12]
 8004d50:	4313      	orrs	r3, r2
 8004d52:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004d5a:	683b      	ldr	r3, [r7, #0]
 8004d5c:	695b      	ldr	r3, [r3, #20]
 8004d5e:	4313      	orrs	r3, r2
 8004d60:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	68fa      	ldr	r2, [r7, #12]
 8004d66:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004d68:	683b      	ldr	r3, [r7, #0]
 8004d6a:	689a      	ldr	r2, [r3, #8]
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004d70:	683b      	ldr	r3, [r7, #0]
 8004d72:	681a      	ldr	r2, [r3, #0]
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	4a09      	ldr	r2, [pc, #36]	@ (8004da0 <TIM_Base_SetConfig+0xe0>)
 8004d7c:	4293      	cmp	r3, r2
 8004d7e:	d003      	beq.n	8004d88 <TIM_Base_SetConfig+0xc8>
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	4a08      	ldr	r2, [pc, #32]	@ (8004da4 <TIM_Base_SetConfig+0xe4>)
 8004d84:	4293      	cmp	r3, r2
 8004d86:	d103      	bne.n	8004d90 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004d88:	683b      	ldr	r3, [r7, #0]
 8004d8a:	691a      	ldr	r2, [r3, #16]
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	2201      	movs	r2, #1
 8004d94:	615a      	str	r2, [r3, #20]
}
 8004d96:	bf00      	nop
 8004d98:	3714      	adds	r7, #20
 8004d9a:	46bd      	mov	sp, r7
 8004d9c:	bc80      	pop	{r7}
 8004d9e:	4770      	bx	lr
 8004da0:	40012c00 	.word	0x40012c00
 8004da4:	40013400 	.word	0x40013400
 8004da8:	40000400 	.word	0x40000400
 8004dac:	40000800 	.word	0x40000800
 8004db0:	40000c00 	.word	0x40000c00

08004db4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004db4:	b480      	push	{r7}
 8004db6:	b087      	sub	sp, #28
 8004db8:	af00      	add	r7, sp, #0
 8004dba:	6078      	str	r0, [r7, #4]
 8004dbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	6a1b      	ldr	r3, [r3, #32]
 8004dc2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	6a1b      	ldr	r3, [r3, #32]
 8004dc8:	f023 0201 	bic.w	r2, r3, #1
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	685b      	ldr	r3, [r3, #4]
 8004dd4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	699b      	ldr	r3, [r3, #24]
 8004dda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004de2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	f023 0303 	bic.w	r3, r3, #3
 8004dea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004dec:	683b      	ldr	r3, [r7, #0]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	68fa      	ldr	r2, [r7, #12]
 8004df2:	4313      	orrs	r3, r2
 8004df4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004df6:	697b      	ldr	r3, [r7, #20]
 8004df8:	f023 0302 	bic.w	r3, r3, #2
 8004dfc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004dfe:	683b      	ldr	r3, [r7, #0]
 8004e00:	689b      	ldr	r3, [r3, #8]
 8004e02:	697a      	ldr	r2, [r7, #20]
 8004e04:	4313      	orrs	r3, r2
 8004e06:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	4a20      	ldr	r2, [pc, #128]	@ (8004e8c <TIM_OC1_SetConfig+0xd8>)
 8004e0c:	4293      	cmp	r3, r2
 8004e0e:	d003      	beq.n	8004e18 <TIM_OC1_SetConfig+0x64>
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	4a1f      	ldr	r2, [pc, #124]	@ (8004e90 <TIM_OC1_SetConfig+0xdc>)
 8004e14:	4293      	cmp	r3, r2
 8004e16:	d10c      	bne.n	8004e32 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004e18:	697b      	ldr	r3, [r7, #20]
 8004e1a:	f023 0308 	bic.w	r3, r3, #8
 8004e1e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004e20:	683b      	ldr	r3, [r7, #0]
 8004e22:	68db      	ldr	r3, [r3, #12]
 8004e24:	697a      	ldr	r2, [r7, #20]
 8004e26:	4313      	orrs	r3, r2
 8004e28:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004e2a:	697b      	ldr	r3, [r7, #20]
 8004e2c:	f023 0304 	bic.w	r3, r3, #4
 8004e30:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	4a15      	ldr	r2, [pc, #84]	@ (8004e8c <TIM_OC1_SetConfig+0xd8>)
 8004e36:	4293      	cmp	r3, r2
 8004e38:	d003      	beq.n	8004e42 <TIM_OC1_SetConfig+0x8e>
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	4a14      	ldr	r2, [pc, #80]	@ (8004e90 <TIM_OC1_SetConfig+0xdc>)
 8004e3e:	4293      	cmp	r3, r2
 8004e40:	d111      	bne.n	8004e66 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004e42:	693b      	ldr	r3, [r7, #16]
 8004e44:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004e48:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004e4a:	693b      	ldr	r3, [r7, #16]
 8004e4c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004e50:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004e52:	683b      	ldr	r3, [r7, #0]
 8004e54:	695b      	ldr	r3, [r3, #20]
 8004e56:	693a      	ldr	r2, [r7, #16]
 8004e58:	4313      	orrs	r3, r2
 8004e5a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004e5c:	683b      	ldr	r3, [r7, #0]
 8004e5e:	699b      	ldr	r3, [r3, #24]
 8004e60:	693a      	ldr	r2, [r7, #16]
 8004e62:	4313      	orrs	r3, r2
 8004e64:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	693a      	ldr	r2, [r7, #16]
 8004e6a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	68fa      	ldr	r2, [r7, #12]
 8004e70:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004e72:	683b      	ldr	r3, [r7, #0]
 8004e74:	685a      	ldr	r2, [r3, #4]
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	697a      	ldr	r2, [r7, #20]
 8004e7e:	621a      	str	r2, [r3, #32]
}
 8004e80:	bf00      	nop
 8004e82:	371c      	adds	r7, #28
 8004e84:	46bd      	mov	sp, r7
 8004e86:	bc80      	pop	{r7}
 8004e88:	4770      	bx	lr
 8004e8a:	bf00      	nop
 8004e8c:	40012c00 	.word	0x40012c00
 8004e90:	40013400 	.word	0x40013400

08004e94 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004e94:	b480      	push	{r7}
 8004e96:	b087      	sub	sp, #28
 8004e98:	af00      	add	r7, sp, #0
 8004e9a:	6078      	str	r0, [r7, #4]
 8004e9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	6a1b      	ldr	r3, [r3, #32]
 8004ea2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	6a1b      	ldr	r3, [r3, #32]
 8004ea8:	f023 0210 	bic.w	r2, r3, #16
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	685b      	ldr	r3, [r3, #4]
 8004eb4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	699b      	ldr	r3, [r3, #24]
 8004eba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004ec2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004eca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004ecc:	683b      	ldr	r3, [r7, #0]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	021b      	lsls	r3, r3, #8
 8004ed2:	68fa      	ldr	r2, [r7, #12]
 8004ed4:	4313      	orrs	r3, r2
 8004ed6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004ed8:	697b      	ldr	r3, [r7, #20]
 8004eda:	f023 0320 	bic.w	r3, r3, #32
 8004ede:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004ee0:	683b      	ldr	r3, [r7, #0]
 8004ee2:	689b      	ldr	r3, [r3, #8]
 8004ee4:	011b      	lsls	r3, r3, #4
 8004ee6:	697a      	ldr	r2, [r7, #20]
 8004ee8:	4313      	orrs	r3, r2
 8004eea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	4a21      	ldr	r2, [pc, #132]	@ (8004f74 <TIM_OC2_SetConfig+0xe0>)
 8004ef0:	4293      	cmp	r3, r2
 8004ef2:	d003      	beq.n	8004efc <TIM_OC2_SetConfig+0x68>
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	4a20      	ldr	r2, [pc, #128]	@ (8004f78 <TIM_OC2_SetConfig+0xe4>)
 8004ef8:	4293      	cmp	r3, r2
 8004efa:	d10d      	bne.n	8004f18 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004efc:	697b      	ldr	r3, [r7, #20]
 8004efe:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004f02:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004f04:	683b      	ldr	r3, [r7, #0]
 8004f06:	68db      	ldr	r3, [r3, #12]
 8004f08:	011b      	lsls	r3, r3, #4
 8004f0a:	697a      	ldr	r2, [r7, #20]
 8004f0c:	4313      	orrs	r3, r2
 8004f0e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004f10:	697b      	ldr	r3, [r7, #20]
 8004f12:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004f16:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	4a16      	ldr	r2, [pc, #88]	@ (8004f74 <TIM_OC2_SetConfig+0xe0>)
 8004f1c:	4293      	cmp	r3, r2
 8004f1e:	d003      	beq.n	8004f28 <TIM_OC2_SetConfig+0x94>
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	4a15      	ldr	r2, [pc, #84]	@ (8004f78 <TIM_OC2_SetConfig+0xe4>)
 8004f24:	4293      	cmp	r3, r2
 8004f26:	d113      	bne.n	8004f50 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004f28:	693b      	ldr	r3, [r7, #16]
 8004f2a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004f2e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004f30:	693b      	ldr	r3, [r7, #16]
 8004f32:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004f36:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004f38:	683b      	ldr	r3, [r7, #0]
 8004f3a:	695b      	ldr	r3, [r3, #20]
 8004f3c:	009b      	lsls	r3, r3, #2
 8004f3e:	693a      	ldr	r2, [r7, #16]
 8004f40:	4313      	orrs	r3, r2
 8004f42:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004f44:	683b      	ldr	r3, [r7, #0]
 8004f46:	699b      	ldr	r3, [r3, #24]
 8004f48:	009b      	lsls	r3, r3, #2
 8004f4a:	693a      	ldr	r2, [r7, #16]
 8004f4c:	4313      	orrs	r3, r2
 8004f4e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	693a      	ldr	r2, [r7, #16]
 8004f54:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	68fa      	ldr	r2, [r7, #12]
 8004f5a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004f5c:	683b      	ldr	r3, [r7, #0]
 8004f5e:	685a      	ldr	r2, [r3, #4]
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	697a      	ldr	r2, [r7, #20]
 8004f68:	621a      	str	r2, [r3, #32]
}
 8004f6a:	bf00      	nop
 8004f6c:	371c      	adds	r7, #28
 8004f6e:	46bd      	mov	sp, r7
 8004f70:	bc80      	pop	{r7}
 8004f72:	4770      	bx	lr
 8004f74:	40012c00 	.word	0x40012c00
 8004f78:	40013400 	.word	0x40013400

08004f7c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004f7c:	b480      	push	{r7}
 8004f7e:	b087      	sub	sp, #28
 8004f80:	af00      	add	r7, sp, #0
 8004f82:	6078      	str	r0, [r7, #4]
 8004f84:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	6a1b      	ldr	r3, [r3, #32]
 8004f8a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	6a1b      	ldr	r3, [r3, #32]
 8004f90:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	685b      	ldr	r3, [r3, #4]
 8004f9c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	69db      	ldr	r3, [r3, #28]
 8004fa2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004faa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	f023 0303 	bic.w	r3, r3, #3
 8004fb2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004fb4:	683b      	ldr	r3, [r7, #0]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	68fa      	ldr	r2, [r7, #12]
 8004fba:	4313      	orrs	r3, r2
 8004fbc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004fbe:	697b      	ldr	r3, [r7, #20]
 8004fc0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004fc4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004fc6:	683b      	ldr	r3, [r7, #0]
 8004fc8:	689b      	ldr	r3, [r3, #8]
 8004fca:	021b      	lsls	r3, r3, #8
 8004fcc:	697a      	ldr	r2, [r7, #20]
 8004fce:	4313      	orrs	r3, r2
 8004fd0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	4a21      	ldr	r2, [pc, #132]	@ (800505c <TIM_OC3_SetConfig+0xe0>)
 8004fd6:	4293      	cmp	r3, r2
 8004fd8:	d003      	beq.n	8004fe2 <TIM_OC3_SetConfig+0x66>
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	4a20      	ldr	r2, [pc, #128]	@ (8005060 <TIM_OC3_SetConfig+0xe4>)
 8004fde:	4293      	cmp	r3, r2
 8004fe0:	d10d      	bne.n	8004ffe <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004fe2:	697b      	ldr	r3, [r7, #20]
 8004fe4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004fe8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004fea:	683b      	ldr	r3, [r7, #0]
 8004fec:	68db      	ldr	r3, [r3, #12]
 8004fee:	021b      	lsls	r3, r3, #8
 8004ff0:	697a      	ldr	r2, [r7, #20]
 8004ff2:	4313      	orrs	r3, r2
 8004ff4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004ff6:	697b      	ldr	r3, [r7, #20]
 8004ff8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004ffc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	4a16      	ldr	r2, [pc, #88]	@ (800505c <TIM_OC3_SetConfig+0xe0>)
 8005002:	4293      	cmp	r3, r2
 8005004:	d003      	beq.n	800500e <TIM_OC3_SetConfig+0x92>
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	4a15      	ldr	r2, [pc, #84]	@ (8005060 <TIM_OC3_SetConfig+0xe4>)
 800500a:	4293      	cmp	r3, r2
 800500c:	d113      	bne.n	8005036 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800500e:	693b      	ldr	r3, [r7, #16]
 8005010:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005014:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005016:	693b      	ldr	r3, [r7, #16]
 8005018:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800501c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800501e:	683b      	ldr	r3, [r7, #0]
 8005020:	695b      	ldr	r3, [r3, #20]
 8005022:	011b      	lsls	r3, r3, #4
 8005024:	693a      	ldr	r2, [r7, #16]
 8005026:	4313      	orrs	r3, r2
 8005028:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800502a:	683b      	ldr	r3, [r7, #0]
 800502c:	699b      	ldr	r3, [r3, #24]
 800502e:	011b      	lsls	r3, r3, #4
 8005030:	693a      	ldr	r2, [r7, #16]
 8005032:	4313      	orrs	r3, r2
 8005034:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	693a      	ldr	r2, [r7, #16]
 800503a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	68fa      	ldr	r2, [r7, #12]
 8005040:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005042:	683b      	ldr	r3, [r7, #0]
 8005044:	685a      	ldr	r2, [r3, #4]
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	697a      	ldr	r2, [r7, #20]
 800504e:	621a      	str	r2, [r3, #32]
}
 8005050:	bf00      	nop
 8005052:	371c      	adds	r7, #28
 8005054:	46bd      	mov	sp, r7
 8005056:	bc80      	pop	{r7}
 8005058:	4770      	bx	lr
 800505a:	bf00      	nop
 800505c:	40012c00 	.word	0x40012c00
 8005060:	40013400 	.word	0x40013400

08005064 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005064:	b480      	push	{r7}
 8005066:	b087      	sub	sp, #28
 8005068:	af00      	add	r7, sp, #0
 800506a:	6078      	str	r0, [r7, #4]
 800506c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	6a1b      	ldr	r3, [r3, #32]
 8005072:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	6a1b      	ldr	r3, [r3, #32]
 8005078:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	685b      	ldr	r3, [r3, #4]
 8005084:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	69db      	ldr	r3, [r3, #28]
 800508a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005092:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800509a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800509c:	683b      	ldr	r3, [r7, #0]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	021b      	lsls	r3, r3, #8
 80050a2:	68fa      	ldr	r2, [r7, #12]
 80050a4:	4313      	orrs	r3, r2
 80050a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80050a8:	693b      	ldr	r3, [r7, #16]
 80050aa:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80050ae:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80050b0:	683b      	ldr	r3, [r7, #0]
 80050b2:	689b      	ldr	r3, [r3, #8]
 80050b4:	031b      	lsls	r3, r3, #12
 80050b6:	693a      	ldr	r2, [r7, #16]
 80050b8:	4313      	orrs	r3, r2
 80050ba:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	4a11      	ldr	r2, [pc, #68]	@ (8005104 <TIM_OC4_SetConfig+0xa0>)
 80050c0:	4293      	cmp	r3, r2
 80050c2:	d003      	beq.n	80050cc <TIM_OC4_SetConfig+0x68>
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	4a10      	ldr	r2, [pc, #64]	@ (8005108 <TIM_OC4_SetConfig+0xa4>)
 80050c8:	4293      	cmp	r3, r2
 80050ca:	d109      	bne.n	80050e0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80050cc:	697b      	ldr	r3, [r7, #20]
 80050ce:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80050d2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80050d4:	683b      	ldr	r3, [r7, #0]
 80050d6:	695b      	ldr	r3, [r3, #20]
 80050d8:	019b      	lsls	r3, r3, #6
 80050da:	697a      	ldr	r2, [r7, #20]
 80050dc:	4313      	orrs	r3, r2
 80050de:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	697a      	ldr	r2, [r7, #20]
 80050e4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	68fa      	ldr	r2, [r7, #12]
 80050ea:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80050ec:	683b      	ldr	r3, [r7, #0]
 80050ee:	685a      	ldr	r2, [r3, #4]
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	693a      	ldr	r2, [r7, #16]
 80050f8:	621a      	str	r2, [r3, #32]
}
 80050fa:	bf00      	nop
 80050fc:	371c      	adds	r7, #28
 80050fe:	46bd      	mov	sp, r7
 8005100:	bc80      	pop	{r7}
 8005102:	4770      	bx	lr
 8005104:	40012c00 	.word	0x40012c00
 8005108:	40013400 	.word	0x40013400

0800510c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800510c:	b480      	push	{r7}
 800510e:	b087      	sub	sp, #28
 8005110:	af00      	add	r7, sp, #0
 8005112:	60f8      	str	r0, [r7, #12]
 8005114:	60b9      	str	r1, [r7, #8]
 8005116:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	6a1b      	ldr	r3, [r3, #32]
 800511c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	6a1b      	ldr	r3, [r3, #32]
 8005122:	f023 0201 	bic.w	r2, r3, #1
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	699b      	ldr	r3, [r3, #24]
 800512e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005130:	693b      	ldr	r3, [r7, #16]
 8005132:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005136:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	011b      	lsls	r3, r3, #4
 800513c:	693a      	ldr	r2, [r7, #16]
 800513e:	4313      	orrs	r3, r2
 8005140:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005142:	697b      	ldr	r3, [r7, #20]
 8005144:	f023 030a 	bic.w	r3, r3, #10
 8005148:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800514a:	697a      	ldr	r2, [r7, #20]
 800514c:	68bb      	ldr	r3, [r7, #8]
 800514e:	4313      	orrs	r3, r2
 8005150:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	693a      	ldr	r2, [r7, #16]
 8005156:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	697a      	ldr	r2, [r7, #20]
 800515c:	621a      	str	r2, [r3, #32]
}
 800515e:	bf00      	nop
 8005160:	371c      	adds	r7, #28
 8005162:	46bd      	mov	sp, r7
 8005164:	bc80      	pop	{r7}
 8005166:	4770      	bx	lr

08005168 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005168:	b480      	push	{r7}
 800516a:	b087      	sub	sp, #28
 800516c:	af00      	add	r7, sp, #0
 800516e:	60f8      	str	r0, [r7, #12]
 8005170:	60b9      	str	r1, [r7, #8]
 8005172:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	6a1b      	ldr	r3, [r3, #32]
 8005178:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	6a1b      	ldr	r3, [r3, #32]
 800517e:	f023 0210 	bic.w	r2, r3, #16
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	699b      	ldr	r3, [r3, #24]
 800518a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800518c:	693b      	ldr	r3, [r7, #16]
 800518e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005192:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	031b      	lsls	r3, r3, #12
 8005198:	693a      	ldr	r2, [r7, #16]
 800519a:	4313      	orrs	r3, r2
 800519c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800519e:	697b      	ldr	r3, [r7, #20]
 80051a0:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80051a4:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80051a6:	68bb      	ldr	r3, [r7, #8]
 80051a8:	011b      	lsls	r3, r3, #4
 80051aa:	697a      	ldr	r2, [r7, #20]
 80051ac:	4313      	orrs	r3, r2
 80051ae:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	693a      	ldr	r2, [r7, #16]
 80051b4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	697a      	ldr	r2, [r7, #20]
 80051ba:	621a      	str	r2, [r3, #32]
}
 80051bc:	bf00      	nop
 80051be:	371c      	adds	r7, #28
 80051c0:	46bd      	mov	sp, r7
 80051c2:	bc80      	pop	{r7}
 80051c4:	4770      	bx	lr

080051c6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80051c6:	b480      	push	{r7}
 80051c8:	b085      	sub	sp, #20
 80051ca:	af00      	add	r7, sp, #0
 80051cc:	6078      	str	r0, [r7, #4]
 80051ce:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	689b      	ldr	r3, [r3, #8]
 80051d4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80051dc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80051de:	683a      	ldr	r2, [r7, #0]
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	4313      	orrs	r3, r2
 80051e4:	f043 0307 	orr.w	r3, r3, #7
 80051e8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	68fa      	ldr	r2, [r7, #12]
 80051ee:	609a      	str	r2, [r3, #8]
}
 80051f0:	bf00      	nop
 80051f2:	3714      	adds	r7, #20
 80051f4:	46bd      	mov	sp, r7
 80051f6:	bc80      	pop	{r7}
 80051f8:	4770      	bx	lr

080051fa <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80051fa:	b480      	push	{r7}
 80051fc:	b087      	sub	sp, #28
 80051fe:	af00      	add	r7, sp, #0
 8005200:	60f8      	str	r0, [r7, #12]
 8005202:	60b9      	str	r1, [r7, #8]
 8005204:	607a      	str	r2, [r7, #4]
 8005206:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	689b      	ldr	r3, [r3, #8]
 800520c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800520e:	697b      	ldr	r3, [r7, #20]
 8005210:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005214:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005216:	683b      	ldr	r3, [r7, #0]
 8005218:	021a      	lsls	r2, r3, #8
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	431a      	orrs	r2, r3
 800521e:	68bb      	ldr	r3, [r7, #8]
 8005220:	4313      	orrs	r3, r2
 8005222:	697a      	ldr	r2, [r7, #20]
 8005224:	4313      	orrs	r3, r2
 8005226:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	697a      	ldr	r2, [r7, #20]
 800522c:	609a      	str	r2, [r3, #8]
}
 800522e:	bf00      	nop
 8005230:	371c      	adds	r7, #28
 8005232:	46bd      	mov	sp, r7
 8005234:	bc80      	pop	{r7}
 8005236:	4770      	bx	lr

08005238 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005238:	b480      	push	{r7}
 800523a:	b087      	sub	sp, #28
 800523c:	af00      	add	r7, sp, #0
 800523e:	60f8      	str	r0, [r7, #12]
 8005240:	60b9      	str	r1, [r7, #8]
 8005242:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005244:	68bb      	ldr	r3, [r7, #8]
 8005246:	f003 031f 	and.w	r3, r3, #31
 800524a:	2201      	movs	r2, #1
 800524c:	fa02 f303 	lsl.w	r3, r2, r3
 8005250:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	6a1a      	ldr	r2, [r3, #32]
 8005256:	697b      	ldr	r3, [r7, #20]
 8005258:	43db      	mvns	r3, r3
 800525a:	401a      	ands	r2, r3
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	6a1a      	ldr	r2, [r3, #32]
 8005264:	68bb      	ldr	r3, [r7, #8]
 8005266:	f003 031f 	and.w	r3, r3, #31
 800526a:	6879      	ldr	r1, [r7, #4]
 800526c:	fa01 f303 	lsl.w	r3, r1, r3
 8005270:	431a      	orrs	r2, r3
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	621a      	str	r2, [r3, #32]
}
 8005276:	bf00      	nop
 8005278:	371c      	adds	r7, #28
 800527a:	46bd      	mov	sp, r7
 800527c:	bc80      	pop	{r7}
 800527e:	4770      	bx	lr

08005280 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005280:	b480      	push	{r7}
 8005282:	b085      	sub	sp, #20
 8005284:	af00      	add	r7, sp, #0
 8005286:	6078      	str	r0, [r7, #4]
 8005288:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005290:	2b01      	cmp	r3, #1
 8005292:	d101      	bne.n	8005298 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005294:	2302      	movs	r3, #2
 8005296:	e050      	b.n	800533a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	2201      	movs	r2, #1
 800529c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	2202      	movs	r2, #2
 80052a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	685b      	ldr	r3, [r3, #4]
 80052ae:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	689b      	ldr	r3, [r3, #8]
 80052b6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80052be:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80052c0:	683b      	ldr	r3, [r7, #0]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	68fa      	ldr	r2, [r7, #12]
 80052c6:	4313      	orrs	r3, r2
 80052c8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	68fa      	ldr	r2, [r7, #12]
 80052d0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	4a1b      	ldr	r2, [pc, #108]	@ (8005344 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80052d8:	4293      	cmp	r3, r2
 80052da:	d018      	beq.n	800530e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	4a19      	ldr	r2, [pc, #100]	@ (8005348 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80052e2:	4293      	cmp	r3, r2
 80052e4:	d013      	beq.n	800530e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80052ee:	d00e      	beq.n	800530e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	4a15      	ldr	r2, [pc, #84]	@ (800534c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80052f6:	4293      	cmp	r3, r2
 80052f8:	d009      	beq.n	800530e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	4a14      	ldr	r2, [pc, #80]	@ (8005350 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8005300:	4293      	cmp	r3, r2
 8005302:	d004      	beq.n	800530e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	4a12      	ldr	r2, [pc, #72]	@ (8005354 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800530a:	4293      	cmp	r3, r2
 800530c:	d10c      	bne.n	8005328 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800530e:	68bb      	ldr	r3, [r7, #8]
 8005310:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005314:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005316:	683b      	ldr	r3, [r7, #0]
 8005318:	685b      	ldr	r3, [r3, #4]
 800531a:	68ba      	ldr	r2, [r7, #8]
 800531c:	4313      	orrs	r3, r2
 800531e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	68ba      	ldr	r2, [r7, #8]
 8005326:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	2201      	movs	r2, #1
 800532c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	2200      	movs	r2, #0
 8005334:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005338:	2300      	movs	r3, #0
}
 800533a:	4618      	mov	r0, r3
 800533c:	3714      	adds	r7, #20
 800533e:	46bd      	mov	sp, r7
 8005340:	bc80      	pop	{r7}
 8005342:	4770      	bx	lr
 8005344:	40012c00 	.word	0x40012c00
 8005348:	40013400 	.word	0x40013400
 800534c:	40000400 	.word	0x40000400
 8005350:	40000800 	.word	0x40000800
 8005354:	40000c00 	.word	0x40000c00

08005358 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005358:	b480      	push	{r7}
 800535a:	b085      	sub	sp, #20
 800535c:	af00      	add	r7, sp, #0
 800535e:	6078      	str	r0, [r7, #4]
 8005360:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005362:	2300      	movs	r3, #0
 8005364:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800536c:	2b01      	cmp	r3, #1
 800536e:	d101      	bne.n	8005374 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005370:	2302      	movs	r3, #2
 8005372:	e03d      	b.n	80053f0 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	2201      	movs	r2, #1
 8005378:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8005382:	683b      	ldr	r3, [r7, #0]
 8005384:	68db      	ldr	r3, [r3, #12]
 8005386:	4313      	orrs	r3, r2
 8005388:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005390:	683b      	ldr	r3, [r7, #0]
 8005392:	689b      	ldr	r3, [r3, #8]
 8005394:	4313      	orrs	r3, r2
 8005396:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800539e:	683b      	ldr	r3, [r7, #0]
 80053a0:	685b      	ldr	r3, [r3, #4]
 80053a2:	4313      	orrs	r3, r2
 80053a4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80053ac:	683b      	ldr	r3, [r7, #0]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	4313      	orrs	r3, r2
 80053b2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80053ba:	683b      	ldr	r3, [r7, #0]
 80053bc:	691b      	ldr	r3, [r3, #16]
 80053be:	4313      	orrs	r3, r2
 80053c0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80053c8:	683b      	ldr	r3, [r7, #0]
 80053ca:	695b      	ldr	r3, [r3, #20]
 80053cc:	4313      	orrs	r3, r2
 80053ce:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80053d6:	683b      	ldr	r3, [r7, #0]
 80053d8:	69db      	ldr	r3, [r3, #28]
 80053da:	4313      	orrs	r3, r2
 80053dc:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	68fa      	ldr	r2, [r7, #12]
 80053e4:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	2200      	movs	r2, #0
 80053ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80053ee:	2300      	movs	r3, #0
}
 80053f0:	4618      	mov	r0, r3
 80053f2:	3714      	adds	r7, #20
 80053f4:	46bd      	mov	sp, r7
 80053f6:	bc80      	pop	{r7}
 80053f8:	4770      	bx	lr

080053fa <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80053fa:	b480      	push	{r7}
 80053fc:	b083      	sub	sp, #12
 80053fe:	af00      	add	r7, sp, #0
 8005400:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005402:	bf00      	nop
 8005404:	370c      	adds	r7, #12
 8005406:	46bd      	mov	sp, r7
 8005408:	bc80      	pop	{r7}
 800540a:	4770      	bx	lr

0800540c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800540c:	b480      	push	{r7}
 800540e:	b083      	sub	sp, #12
 8005410:	af00      	add	r7, sp, #0
 8005412:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005414:	bf00      	nop
 8005416:	370c      	adds	r7, #12
 8005418:	46bd      	mov	sp, r7
 800541a:	bc80      	pop	{r7}
 800541c:	4770      	bx	lr

0800541e <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800541e:	b580      	push	{r7, lr}
 8005420:	b082      	sub	sp, #8
 8005422:	af00      	add	r7, sp, #0
 8005424:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	2b00      	cmp	r3, #0
 800542a:	d101      	bne.n	8005430 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800542c:	2301      	movs	r3, #1
 800542e:	e042      	b.n	80054b6 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005436:	b2db      	uxtb	r3, r3
 8005438:	2b00      	cmp	r3, #0
 800543a:	d106      	bne.n	800544a <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	2200      	movs	r2, #0
 8005440:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005444:	6878      	ldr	r0, [r7, #4]
 8005446:	f7fc fb91 	bl	8001b6c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	2224      	movs	r2, #36	@ 0x24
 800544e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	68da      	ldr	r2, [r3, #12]
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005460:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005462:	6878      	ldr	r0, [r7, #4]
 8005464:	f000 fc80 	bl	8005d68 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	691a      	ldr	r2, [r3, #16]
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005476:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	695a      	ldr	r2, [r3, #20]
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005486:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	68da      	ldr	r2, [r3, #12]
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005496:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	2200      	movs	r2, #0
 800549c:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	2220      	movs	r2, #32
 80054a2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	2220      	movs	r2, #32
 80054aa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	2200      	movs	r2, #0
 80054b2:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80054b4:	2300      	movs	r3, #0
}
 80054b6:	4618      	mov	r0, r3
 80054b8:	3708      	adds	r7, #8
 80054ba:	46bd      	mov	sp, r7
 80054bc:	bd80      	pop	{r7, pc}
	...

080054c0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80054c0:	b580      	push	{r7, lr}
 80054c2:	b0ba      	sub	sp, #232	@ 0xe8
 80054c4:	af00      	add	r7, sp, #0
 80054c6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	68db      	ldr	r3, [r3, #12]
 80054d8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	695b      	ldr	r3, [r3, #20]
 80054e2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80054e6:	2300      	movs	r3, #0
 80054e8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80054ec:	2300      	movs	r3, #0
 80054ee:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80054f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80054f6:	f003 030f 	and.w	r3, r3, #15
 80054fa:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80054fe:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005502:	2b00      	cmp	r3, #0
 8005504:	d10f      	bne.n	8005526 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005506:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800550a:	f003 0320 	and.w	r3, r3, #32
 800550e:	2b00      	cmp	r3, #0
 8005510:	d009      	beq.n	8005526 <HAL_UART_IRQHandler+0x66>
 8005512:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005516:	f003 0320 	and.w	r3, r3, #32
 800551a:	2b00      	cmp	r3, #0
 800551c:	d003      	beq.n	8005526 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800551e:	6878      	ldr	r0, [r7, #4]
 8005520:	f000 fb63 	bl	8005bea <UART_Receive_IT>
      return;
 8005524:	e25b      	b.n	80059de <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005526:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800552a:	2b00      	cmp	r3, #0
 800552c:	f000 80de 	beq.w	80056ec <HAL_UART_IRQHandler+0x22c>
 8005530:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005534:	f003 0301 	and.w	r3, r3, #1
 8005538:	2b00      	cmp	r3, #0
 800553a:	d106      	bne.n	800554a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800553c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005540:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8005544:	2b00      	cmp	r3, #0
 8005546:	f000 80d1 	beq.w	80056ec <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800554a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800554e:	f003 0301 	and.w	r3, r3, #1
 8005552:	2b00      	cmp	r3, #0
 8005554:	d00b      	beq.n	800556e <HAL_UART_IRQHandler+0xae>
 8005556:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800555a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800555e:	2b00      	cmp	r3, #0
 8005560:	d005      	beq.n	800556e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005566:	f043 0201 	orr.w	r2, r3, #1
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800556e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005572:	f003 0304 	and.w	r3, r3, #4
 8005576:	2b00      	cmp	r3, #0
 8005578:	d00b      	beq.n	8005592 <HAL_UART_IRQHandler+0xd2>
 800557a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800557e:	f003 0301 	and.w	r3, r3, #1
 8005582:	2b00      	cmp	r3, #0
 8005584:	d005      	beq.n	8005592 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800558a:	f043 0202 	orr.w	r2, r3, #2
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005592:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005596:	f003 0302 	and.w	r3, r3, #2
 800559a:	2b00      	cmp	r3, #0
 800559c:	d00b      	beq.n	80055b6 <HAL_UART_IRQHandler+0xf6>
 800559e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80055a2:	f003 0301 	and.w	r3, r3, #1
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d005      	beq.n	80055b6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80055ae:	f043 0204 	orr.w	r2, r3, #4
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80055b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80055ba:	f003 0308 	and.w	r3, r3, #8
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d011      	beq.n	80055e6 <HAL_UART_IRQHandler+0x126>
 80055c2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80055c6:	f003 0320 	and.w	r3, r3, #32
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d105      	bne.n	80055da <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80055ce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80055d2:	f003 0301 	and.w	r3, r3, #1
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d005      	beq.n	80055e6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80055de:	f043 0208 	orr.w	r2, r3, #8
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	f000 81f2 	beq.w	80059d4 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80055f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80055f4:	f003 0320 	and.w	r3, r3, #32
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d008      	beq.n	800560e <HAL_UART_IRQHandler+0x14e>
 80055fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005600:	f003 0320 	and.w	r3, r3, #32
 8005604:	2b00      	cmp	r3, #0
 8005606:	d002      	beq.n	800560e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005608:	6878      	ldr	r0, [r7, #4]
 800560a:	f000 faee 	bl	8005bea <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	695b      	ldr	r3, [r3, #20]
 8005614:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005618:	2b00      	cmp	r3, #0
 800561a:	bf14      	ite	ne
 800561c:	2301      	movne	r3, #1
 800561e:	2300      	moveq	r3, #0
 8005620:	b2db      	uxtb	r3, r3
 8005622:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800562a:	f003 0308 	and.w	r3, r3, #8
 800562e:	2b00      	cmp	r3, #0
 8005630:	d103      	bne.n	800563a <HAL_UART_IRQHandler+0x17a>
 8005632:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005636:	2b00      	cmp	r3, #0
 8005638:	d04f      	beq.n	80056da <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800563a:	6878      	ldr	r0, [r7, #4]
 800563c:	f000 f9f8 	bl	8005a30 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	695b      	ldr	r3, [r3, #20]
 8005646:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800564a:	2b00      	cmp	r3, #0
 800564c:	d041      	beq.n	80056d2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	3314      	adds	r3, #20
 8005654:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005658:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800565c:	e853 3f00 	ldrex	r3, [r3]
 8005660:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8005664:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005668:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800566c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	3314      	adds	r3, #20
 8005676:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800567a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800567e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005682:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8005686:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800568a:	e841 2300 	strex	r3, r2, [r1]
 800568e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8005692:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005696:	2b00      	cmp	r3, #0
 8005698:	d1d9      	bne.n	800564e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d013      	beq.n	80056ca <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80056a6:	4a7e      	ldr	r2, [pc, #504]	@ (80058a0 <HAL_UART_IRQHandler+0x3e0>)
 80056a8:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80056ae:	4618      	mov	r0, r3
 80056b0:	f7fd f976 	bl	80029a0 <HAL_DMA_Abort_IT>
 80056b4:	4603      	mov	r3, r0
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d016      	beq.n	80056e8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80056be:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80056c0:	687a      	ldr	r2, [r7, #4]
 80056c2:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80056c4:	4610      	mov	r0, r2
 80056c6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80056c8:	e00e      	b.n	80056e8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80056ca:	6878      	ldr	r0, [r7, #4]
 80056cc:	f000 f99c 	bl	8005a08 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80056d0:	e00a      	b.n	80056e8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80056d2:	6878      	ldr	r0, [r7, #4]
 80056d4:	f000 f998 	bl	8005a08 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80056d8:	e006      	b.n	80056e8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80056da:	6878      	ldr	r0, [r7, #4]
 80056dc:	f000 f994 	bl	8005a08 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	2200      	movs	r2, #0
 80056e4:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80056e6:	e175      	b.n	80059d4 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80056e8:	bf00      	nop
    return;
 80056ea:	e173      	b.n	80059d4 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80056f0:	2b01      	cmp	r3, #1
 80056f2:	f040 814f 	bne.w	8005994 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80056f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80056fa:	f003 0310 	and.w	r3, r3, #16
 80056fe:	2b00      	cmp	r3, #0
 8005700:	f000 8148 	beq.w	8005994 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005704:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005708:	f003 0310 	and.w	r3, r3, #16
 800570c:	2b00      	cmp	r3, #0
 800570e:	f000 8141 	beq.w	8005994 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005712:	2300      	movs	r3, #0
 8005714:	60bb      	str	r3, [r7, #8]
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	60bb      	str	r3, [r7, #8]
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	685b      	ldr	r3, [r3, #4]
 8005724:	60bb      	str	r3, [r7, #8]
 8005726:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	695b      	ldr	r3, [r3, #20]
 800572e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005732:	2b00      	cmp	r3, #0
 8005734:	f000 80b6 	beq.w	80058a4 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	685b      	ldr	r3, [r3, #4]
 8005740:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005744:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8005748:	2b00      	cmp	r3, #0
 800574a:	f000 8145 	beq.w	80059d8 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005752:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005756:	429a      	cmp	r2, r3
 8005758:	f080 813e 	bcs.w	80059d8 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005762:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005768:	699b      	ldr	r3, [r3, #24]
 800576a:	2b20      	cmp	r3, #32
 800576c:	f000 8088 	beq.w	8005880 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	330c      	adds	r3, #12
 8005776:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800577a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800577e:	e853 3f00 	ldrex	r3, [r3]
 8005782:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8005786:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800578a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800578e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	330c      	adds	r3, #12
 8005798:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800579c:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80057a0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057a4:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80057a8:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80057ac:	e841 2300 	strex	r3, r2, [r1]
 80057b0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80057b4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d1d9      	bne.n	8005770 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	3314      	adds	r3, #20
 80057c2:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057c4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80057c6:	e853 3f00 	ldrex	r3, [r3]
 80057ca:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80057cc:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80057ce:	f023 0301 	bic.w	r3, r3, #1
 80057d2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	3314      	adds	r3, #20
 80057dc:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80057e0:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80057e4:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057e6:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80057e8:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80057ec:	e841 2300 	strex	r3, r2, [r1]
 80057f0:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80057f2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d1e1      	bne.n	80057bc <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	3314      	adds	r3, #20
 80057fe:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005800:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005802:	e853 3f00 	ldrex	r3, [r3]
 8005806:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8005808:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800580a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800580e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	3314      	adds	r3, #20
 8005818:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800581c:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800581e:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005820:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8005822:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8005824:	e841 2300 	strex	r3, r2, [r1]
 8005828:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800582a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800582c:	2b00      	cmp	r3, #0
 800582e:	d1e3      	bne.n	80057f8 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	2220      	movs	r2, #32
 8005834:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	2200      	movs	r2, #0
 800583c:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	330c      	adds	r3, #12
 8005844:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005846:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005848:	e853 3f00 	ldrex	r3, [r3]
 800584c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800584e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005850:	f023 0310 	bic.w	r3, r3, #16
 8005854:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	330c      	adds	r3, #12
 800585e:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8005862:	65ba      	str	r2, [r7, #88]	@ 0x58
 8005864:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005866:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005868:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800586a:	e841 2300 	strex	r3, r2, [r1]
 800586e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005870:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005872:	2b00      	cmp	r3, #0
 8005874:	d1e3      	bne.n	800583e <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800587a:	4618      	mov	r0, r3
 800587c:	f7fd f854 	bl	8002928 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	2202      	movs	r2, #2
 8005884:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800588e:	b29b      	uxth	r3, r3
 8005890:	1ad3      	subs	r3, r2, r3
 8005892:	b29b      	uxth	r3, r3
 8005894:	4619      	mov	r1, r3
 8005896:	6878      	ldr	r0, [r7, #4]
 8005898:	f000 f8bf 	bl	8005a1a <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800589c:	e09c      	b.n	80059d8 <HAL_UART_IRQHandler+0x518>
 800589e:	bf00      	nop
 80058a0:	08005af5 	.word	0x08005af5
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80058ac:	b29b      	uxth	r3, r3
 80058ae:	1ad3      	subs	r3, r2, r3
 80058b0:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80058b8:	b29b      	uxth	r3, r3
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	f000 808e 	beq.w	80059dc <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80058c0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	f000 8089 	beq.w	80059dc <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	330c      	adds	r3, #12
 80058d0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80058d4:	e853 3f00 	ldrex	r3, [r3]
 80058d8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80058da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80058dc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80058e0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	330c      	adds	r3, #12
 80058ea:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80058ee:	647a      	str	r2, [r7, #68]	@ 0x44
 80058f0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058f2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80058f4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80058f6:	e841 2300 	strex	r3, r2, [r1]
 80058fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80058fc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d1e3      	bne.n	80058ca <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	3314      	adds	r3, #20
 8005908:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800590a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800590c:	e853 3f00 	ldrex	r3, [r3]
 8005910:	623b      	str	r3, [r7, #32]
   return(result);
 8005912:	6a3b      	ldr	r3, [r7, #32]
 8005914:	f023 0301 	bic.w	r3, r3, #1
 8005918:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	3314      	adds	r3, #20
 8005922:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8005926:	633a      	str	r2, [r7, #48]	@ 0x30
 8005928:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800592a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800592c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800592e:	e841 2300 	strex	r3, r2, [r1]
 8005932:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005934:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005936:	2b00      	cmp	r3, #0
 8005938:	d1e3      	bne.n	8005902 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	2220      	movs	r2, #32
 800593e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	2200      	movs	r2, #0
 8005946:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	330c      	adds	r3, #12
 800594e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005950:	693b      	ldr	r3, [r7, #16]
 8005952:	e853 3f00 	ldrex	r3, [r3]
 8005956:	60fb      	str	r3, [r7, #12]
   return(result);
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	f023 0310 	bic.w	r3, r3, #16
 800595e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	330c      	adds	r3, #12
 8005968:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 800596c:	61fa      	str	r2, [r7, #28]
 800596e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005970:	69b9      	ldr	r1, [r7, #24]
 8005972:	69fa      	ldr	r2, [r7, #28]
 8005974:	e841 2300 	strex	r3, r2, [r1]
 8005978:	617b      	str	r3, [r7, #20]
   return(result);
 800597a:	697b      	ldr	r3, [r7, #20]
 800597c:	2b00      	cmp	r3, #0
 800597e:	d1e3      	bne.n	8005948 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	2202      	movs	r2, #2
 8005984:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005986:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800598a:	4619      	mov	r1, r3
 800598c:	6878      	ldr	r0, [r7, #4]
 800598e:	f000 f844 	bl	8005a1a <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005992:	e023      	b.n	80059dc <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005994:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005998:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800599c:	2b00      	cmp	r3, #0
 800599e:	d009      	beq.n	80059b4 <HAL_UART_IRQHandler+0x4f4>
 80059a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80059a4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d003      	beq.n	80059b4 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80059ac:	6878      	ldr	r0, [r7, #4]
 80059ae:	f000 f8b5 	bl	8005b1c <UART_Transmit_IT>
    return;
 80059b2:	e014      	b.n	80059de <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80059b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80059b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d00e      	beq.n	80059de <HAL_UART_IRQHandler+0x51e>
 80059c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80059c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d008      	beq.n	80059de <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80059cc:	6878      	ldr	r0, [r7, #4]
 80059ce:	f000 f8f4 	bl	8005bba <UART_EndTransmit_IT>
    return;
 80059d2:	e004      	b.n	80059de <HAL_UART_IRQHandler+0x51e>
    return;
 80059d4:	bf00      	nop
 80059d6:	e002      	b.n	80059de <HAL_UART_IRQHandler+0x51e>
      return;
 80059d8:	bf00      	nop
 80059da:	e000      	b.n	80059de <HAL_UART_IRQHandler+0x51e>
      return;
 80059dc:	bf00      	nop
  }
}
 80059de:	37e8      	adds	r7, #232	@ 0xe8
 80059e0:	46bd      	mov	sp, r7
 80059e2:	bd80      	pop	{r7, pc}

080059e4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80059e4:	b480      	push	{r7}
 80059e6:	b083      	sub	sp, #12
 80059e8:	af00      	add	r7, sp, #0
 80059ea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80059ec:	bf00      	nop
 80059ee:	370c      	adds	r7, #12
 80059f0:	46bd      	mov	sp, r7
 80059f2:	bc80      	pop	{r7}
 80059f4:	4770      	bx	lr

080059f6 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80059f6:	b480      	push	{r7}
 80059f8:	b083      	sub	sp, #12
 80059fa:	af00      	add	r7, sp, #0
 80059fc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80059fe:	bf00      	nop
 8005a00:	370c      	adds	r7, #12
 8005a02:	46bd      	mov	sp, r7
 8005a04:	bc80      	pop	{r7}
 8005a06:	4770      	bx	lr

08005a08 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005a08:	b480      	push	{r7}
 8005a0a:	b083      	sub	sp, #12
 8005a0c:	af00      	add	r7, sp, #0
 8005a0e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005a10:	bf00      	nop
 8005a12:	370c      	adds	r7, #12
 8005a14:	46bd      	mov	sp, r7
 8005a16:	bc80      	pop	{r7}
 8005a18:	4770      	bx	lr

08005a1a <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005a1a:	b480      	push	{r7}
 8005a1c:	b083      	sub	sp, #12
 8005a1e:	af00      	add	r7, sp, #0
 8005a20:	6078      	str	r0, [r7, #4]
 8005a22:	460b      	mov	r3, r1
 8005a24:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005a26:	bf00      	nop
 8005a28:	370c      	adds	r7, #12
 8005a2a:	46bd      	mov	sp, r7
 8005a2c:	bc80      	pop	{r7}
 8005a2e:	4770      	bx	lr

08005a30 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005a30:	b480      	push	{r7}
 8005a32:	b095      	sub	sp, #84	@ 0x54
 8005a34:	af00      	add	r7, sp, #0
 8005a36:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	330c      	adds	r3, #12
 8005a3e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a40:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005a42:	e853 3f00 	ldrex	r3, [r3]
 8005a46:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005a48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a4a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005a4e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	330c      	adds	r3, #12
 8005a56:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005a58:	643a      	str	r2, [r7, #64]	@ 0x40
 8005a5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a5c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005a5e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005a60:	e841 2300 	strex	r3, r2, [r1]
 8005a64:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005a66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d1e5      	bne.n	8005a38 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	3314      	adds	r3, #20
 8005a72:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a74:	6a3b      	ldr	r3, [r7, #32]
 8005a76:	e853 3f00 	ldrex	r3, [r3]
 8005a7a:	61fb      	str	r3, [r7, #28]
   return(result);
 8005a7c:	69fb      	ldr	r3, [r7, #28]
 8005a7e:	f023 0301 	bic.w	r3, r3, #1
 8005a82:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	3314      	adds	r3, #20
 8005a8a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005a8c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005a8e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a90:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005a92:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005a94:	e841 2300 	strex	r3, r2, [r1]
 8005a98:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005a9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d1e5      	bne.n	8005a6c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005aa4:	2b01      	cmp	r3, #1
 8005aa6:	d119      	bne.n	8005adc <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	330c      	adds	r3, #12
 8005aae:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	e853 3f00 	ldrex	r3, [r3]
 8005ab6:	60bb      	str	r3, [r7, #8]
   return(result);
 8005ab8:	68bb      	ldr	r3, [r7, #8]
 8005aba:	f023 0310 	bic.w	r3, r3, #16
 8005abe:	647b      	str	r3, [r7, #68]	@ 0x44
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	330c      	adds	r3, #12
 8005ac6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005ac8:	61ba      	str	r2, [r7, #24]
 8005aca:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005acc:	6979      	ldr	r1, [r7, #20]
 8005ace:	69ba      	ldr	r2, [r7, #24]
 8005ad0:	e841 2300 	strex	r3, r2, [r1]
 8005ad4:	613b      	str	r3, [r7, #16]
   return(result);
 8005ad6:	693b      	ldr	r3, [r7, #16]
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d1e5      	bne.n	8005aa8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	2220      	movs	r2, #32
 8005ae0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	2200      	movs	r2, #0
 8005ae8:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8005aea:	bf00      	nop
 8005aec:	3754      	adds	r7, #84	@ 0x54
 8005aee:	46bd      	mov	sp, r7
 8005af0:	bc80      	pop	{r7}
 8005af2:	4770      	bx	lr

08005af4 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005af4:	b580      	push	{r7, lr}
 8005af6:	b084      	sub	sp, #16
 8005af8:	af00      	add	r7, sp, #0
 8005afa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b00:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	2200      	movs	r2, #0
 8005b06:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	2200      	movs	r2, #0
 8005b0c:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005b0e:	68f8      	ldr	r0, [r7, #12]
 8005b10:	f7ff ff7a 	bl	8005a08 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005b14:	bf00      	nop
 8005b16:	3710      	adds	r7, #16
 8005b18:	46bd      	mov	sp, r7
 8005b1a:	bd80      	pop	{r7, pc}

08005b1c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005b1c:	b480      	push	{r7}
 8005b1e:	b085      	sub	sp, #20
 8005b20:	af00      	add	r7, sp, #0
 8005b22:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005b2a:	b2db      	uxtb	r3, r3
 8005b2c:	2b21      	cmp	r3, #33	@ 0x21
 8005b2e:	d13e      	bne.n	8005bae <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	689b      	ldr	r3, [r3, #8]
 8005b34:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005b38:	d114      	bne.n	8005b64 <UART_Transmit_IT+0x48>
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	691b      	ldr	r3, [r3, #16]
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d110      	bne.n	8005b64 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	6a1b      	ldr	r3, [r3, #32]
 8005b46:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	881b      	ldrh	r3, [r3, #0]
 8005b4c:	461a      	mov	r2, r3
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005b56:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	6a1b      	ldr	r3, [r3, #32]
 8005b5c:	1c9a      	adds	r2, r3, #2
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	621a      	str	r2, [r3, #32]
 8005b62:	e008      	b.n	8005b76 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	6a1b      	ldr	r3, [r3, #32]
 8005b68:	1c59      	adds	r1, r3, #1
 8005b6a:	687a      	ldr	r2, [r7, #4]
 8005b6c:	6211      	str	r1, [r2, #32]
 8005b6e:	781a      	ldrb	r2, [r3, #0]
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005b7a:	b29b      	uxth	r3, r3
 8005b7c:	3b01      	subs	r3, #1
 8005b7e:	b29b      	uxth	r3, r3
 8005b80:	687a      	ldr	r2, [r7, #4]
 8005b82:	4619      	mov	r1, r3
 8005b84:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d10f      	bne.n	8005baa <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	68da      	ldr	r2, [r3, #12]
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005b98:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	68da      	ldr	r2, [r3, #12]
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005ba8:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005baa:	2300      	movs	r3, #0
 8005bac:	e000      	b.n	8005bb0 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005bae:	2302      	movs	r3, #2
  }
}
 8005bb0:	4618      	mov	r0, r3
 8005bb2:	3714      	adds	r7, #20
 8005bb4:	46bd      	mov	sp, r7
 8005bb6:	bc80      	pop	{r7}
 8005bb8:	4770      	bx	lr

08005bba <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005bba:	b580      	push	{r7, lr}
 8005bbc:	b082      	sub	sp, #8
 8005bbe:	af00      	add	r7, sp, #0
 8005bc0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	68da      	ldr	r2, [r3, #12]
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005bd0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	2220      	movs	r2, #32
 8005bd6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005bda:	6878      	ldr	r0, [r7, #4]
 8005bdc:	f7ff ff02 	bl	80059e4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005be0:	2300      	movs	r3, #0
}
 8005be2:	4618      	mov	r0, r3
 8005be4:	3708      	adds	r7, #8
 8005be6:	46bd      	mov	sp, r7
 8005be8:	bd80      	pop	{r7, pc}

08005bea <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005bea:	b580      	push	{r7, lr}
 8005bec:	b08c      	sub	sp, #48	@ 0x30
 8005bee:	af00      	add	r7, sp, #0
 8005bf0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005bf8:	b2db      	uxtb	r3, r3
 8005bfa:	2b22      	cmp	r3, #34	@ 0x22
 8005bfc:	f040 80ae 	bne.w	8005d5c <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	689b      	ldr	r3, [r3, #8]
 8005c04:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005c08:	d117      	bne.n	8005c3a <UART_Receive_IT+0x50>
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	691b      	ldr	r3, [r3, #16]
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d113      	bne.n	8005c3a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005c12:	2300      	movs	r3, #0
 8005c14:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c1a:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	685b      	ldr	r3, [r3, #4]
 8005c22:	b29b      	uxth	r3, r3
 8005c24:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c28:	b29a      	uxth	r2, r3
 8005c2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c2c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c32:	1c9a      	adds	r2, r3, #2
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	629a      	str	r2, [r3, #40]	@ 0x28
 8005c38:	e026      	b.n	8005c88 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c3e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8005c40:	2300      	movs	r3, #0
 8005c42:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	689b      	ldr	r3, [r3, #8]
 8005c48:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005c4c:	d007      	beq.n	8005c5e <UART_Receive_IT+0x74>
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	689b      	ldr	r3, [r3, #8]
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d10a      	bne.n	8005c6c <UART_Receive_IT+0x82>
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	691b      	ldr	r3, [r3, #16]
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d106      	bne.n	8005c6c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	685b      	ldr	r3, [r3, #4]
 8005c64:	b2da      	uxtb	r2, r3
 8005c66:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005c68:	701a      	strb	r2, [r3, #0]
 8005c6a:	e008      	b.n	8005c7e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	685b      	ldr	r3, [r3, #4]
 8005c72:	b2db      	uxtb	r3, r3
 8005c74:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005c78:	b2da      	uxtb	r2, r3
 8005c7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005c7c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c82:	1c5a      	adds	r2, r3, #1
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005c8c:	b29b      	uxth	r3, r3
 8005c8e:	3b01      	subs	r3, #1
 8005c90:	b29b      	uxth	r3, r3
 8005c92:	687a      	ldr	r2, [r7, #4]
 8005c94:	4619      	mov	r1, r3
 8005c96:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d15d      	bne.n	8005d58 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	68da      	ldr	r2, [r3, #12]
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	f022 0220 	bic.w	r2, r2, #32
 8005caa:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	68da      	ldr	r2, [r3, #12]
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005cba:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	695a      	ldr	r2, [r3, #20]
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	f022 0201 	bic.w	r2, r2, #1
 8005cca:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	2220      	movs	r2, #32
 8005cd0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	2200      	movs	r2, #0
 8005cd8:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005cde:	2b01      	cmp	r3, #1
 8005ce0:	d135      	bne.n	8005d4e <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	2200      	movs	r2, #0
 8005ce6:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	330c      	adds	r3, #12
 8005cee:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cf0:	697b      	ldr	r3, [r7, #20]
 8005cf2:	e853 3f00 	ldrex	r3, [r3]
 8005cf6:	613b      	str	r3, [r7, #16]
   return(result);
 8005cf8:	693b      	ldr	r3, [r7, #16]
 8005cfa:	f023 0310 	bic.w	r3, r3, #16
 8005cfe:	627b      	str	r3, [r7, #36]	@ 0x24
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	330c      	adds	r3, #12
 8005d06:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005d08:	623a      	str	r2, [r7, #32]
 8005d0a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d0c:	69f9      	ldr	r1, [r7, #28]
 8005d0e:	6a3a      	ldr	r2, [r7, #32]
 8005d10:	e841 2300 	strex	r3, r2, [r1]
 8005d14:	61bb      	str	r3, [r7, #24]
   return(result);
 8005d16:	69bb      	ldr	r3, [r7, #24]
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d1e5      	bne.n	8005ce8 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	f003 0310 	and.w	r3, r3, #16
 8005d26:	2b10      	cmp	r3, #16
 8005d28:	d10a      	bne.n	8005d40 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005d2a:	2300      	movs	r3, #0
 8005d2c:	60fb      	str	r3, [r7, #12]
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	60fb      	str	r3, [r7, #12]
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	685b      	ldr	r3, [r3, #4]
 8005d3c:	60fb      	str	r3, [r7, #12]
 8005d3e:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005d44:	4619      	mov	r1, r3
 8005d46:	6878      	ldr	r0, [r7, #4]
 8005d48:	f7ff fe67 	bl	8005a1a <HAL_UARTEx_RxEventCallback>
 8005d4c:	e002      	b.n	8005d54 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005d4e:	6878      	ldr	r0, [r7, #4]
 8005d50:	f7ff fe51 	bl	80059f6 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005d54:	2300      	movs	r3, #0
 8005d56:	e002      	b.n	8005d5e <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8005d58:	2300      	movs	r3, #0
 8005d5a:	e000      	b.n	8005d5e <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8005d5c:	2302      	movs	r3, #2
  }
}
 8005d5e:	4618      	mov	r0, r3
 8005d60:	3730      	adds	r7, #48	@ 0x30
 8005d62:	46bd      	mov	sp, r7
 8005d64:	bd80      	pop	{r7, pc}
	...

08005d68 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005d68:	b580      	push	{r7, lr}
 8005d6a:	b084      	sub	sp, #16
 8005d6c:	af00      	add	r7, sp, #0
 8005d6e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	691b      	ldr	r3, [r3, #16]
 8005d76:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	68da      	ldr	r2, [r3, #12]
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	430a      	orrs	r2, r1
 8005d84:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	689a      	ldr	r2, [r3, #8]
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	691b      	ldr	r3, [r3, #16]
 8005d8e:	431a      	orrs	r2, r3
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	695b      	ldr	r3, [r3, #20]
 8005d94:	4313      	orrs	r3, r2
 8005d96:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	68db      	ldr	r3, [r3, #12]
 8005d9e:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8005da2:	f023 030c 	bic.w	r3, r3, #12
 8005da6:	687a      	ldr	r2, [r7, #4]
 8005da8:	6812      	ldr	r2, [r2, #0]
 8005daa:	68b9      	ldr	r1, [r7, #8]
 8005dac:	430b      	orrs	r3, r1
 8005dae:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	695b      	ldr	r3, [r3, #20]
 8005db6:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	699a      	ldr	r2, [r3, #24]
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	430a      	orrs	r2, r1
 8005dc4:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	4a2c      	ldr	r2, [pc, #176]	@ (8005e7c <UART_SetConfig+0x114>)
 8005dcc:	4293      	cmp	r3, r2
 8005dce:	d103      	bne.n	8005dd8 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8005dd0:	f7fd fefc 	bl	8003bcc <HAL_RCC_GetPCLK2Freq>
 8005dd4:	60f8      	str	r0, [r7, #12]
 8005dd6:	e002      	b.n	8005dde <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8005dd8:	f7fd fee4 	bl	8003ba4 <HAL_RCC_GetPCLK1Freq>
 8005ddc:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005dde:	68fa      	ldr	r2, [r7, #12]
 8005de0:	4613      	mov	r3, r2
 8005de2:	009b      	lsls	r3, r3, #2
 8005de4:	4413      	add	r3, r2
 8005de6:	009a      	lsls	r2, r3, #2
 8005de8:	441a      	add	r2, r3
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	685b      	ldr	r3, [r3, #4]
 8005dee:	009b      	lsls	r3, r3, #2
 8005df0:	fbb2 f3f3 	udiv	r3, r2, r3
 8005df4:	4a22      	ldr	r2, [pc, #136]	@ (8005e80 <UART_SetConfig+0x118>)
 8005df6:	fba2 2303 	umull	r2, r3, r2, r3
 8005dfa:	095b      	lsrs	r3, r3, #5
 8005dfc:	0119      	lsls	r1, r3, #4
 8005dfe:	68fa      	ldr	r2, [r7, #12]
 8005e00:	4613      	mov	r3, r2
 8005e02:	009b      	lsls	r3, r3, #2
 8005e04:	4413      	add	r3, r2
 8005e06:	009a      	lsls	r2, r3, #2
 8005e08:	441a      	add	r2, r3
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	685b      	ldr	r3, [r3, #4]
 8005e0e:	009b      	lsls	r3, r3, #2
 8005e10:	fbb2 f2f3 	udiv	r2, r2, r3
 8005e14:	4b1a      	ldr	r3, [pc, #104]	@ (8005e80 <UART_SetConfig+0x118>)
 8005e16:	fba3 0302 	umull	r0, r3, r3, r2
 8005e1a:	095b      	lsrs	r3, r3, #5
 8005e1c:	2064      	movs	r0, #100	@ 0x64
 8005e1e:	fb00 f303 	mul.w	r3, r0, r3
 8005e22:	1ad3      	subs	r3, r2, r3
 8005e24:	011b      	lsls	r3, r3, #4
 8005e26:	3332      	adds	r3, #50	@ 0x32
 8005e28:	4a15      	ldr	r2, [pc, #84]	@ (8005e80 <UART_SetConfig+0x118>)
 8005e2a:	fba2 2303 	umull	r2, r3, r2, r3
 8005e2e:	095b      	lsrs	r3, r3, #5
 8005e30:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005e34:	4419      	add	r1, r3
 8005e36:	68fa      	ldr	r2, [r7, #12]
 8005e38:	4613      	mov	r3, r2
 8005e3a:	009b      	lsls	r3, r3, #2
 8005e3c:	4413      	add	r3, r2
 8005e3e:	009a      	lsls	r2, r3, #2
 8005e40:	441a      	add	r2, r3
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	685b      	ldr	r3, [r3, #4]
 8005e46:	009b      	lsls	r3, r3, #2
 8005e48:	fbb2 f2f3 	udiv	r2, r2, r3
 8005e4c:	4b0c      	ldr	r3, [pc, #48]	@ (8005e80 <UART_SetConfig+0x118>)
 8005e4e:	fba3 0302 	umull	r0, r3, r3, r2
 8005e52:	095b      	lsrs	r3, r3, #5
 8005e54:	2064      	movs	r0, #100	@ 0x64
 8005e56:	fb00 f303 	mul.w	r3, r0, r3
 8005e5a:	1ad3      	subs	r3, r2, r3
 8005e5c:	011b      	lsls	r3, r3, #4
 8005e5e:	3332      	adds	r3, #50	@ 0x32
 8005e60:	4a07      	ldr	r2, [pc, #28]	@ (8005e80 <UART_SetConfig+0x118>)
 8005e62:	fba2 2303 	umull	r2, r3, r2, r3
 8005e66:	095b      	lsrs	r3, r3, #5
 8005e68:	f003 020f 	and.w	r2, r3, #15
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	440a      	add	r2, r1
 8005e72:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8005e74:	bf00      	nop
 8005e76:	3710      	adds	r7, #16
 8005e78:	46bd      	mov	sp, r7
 8005e7a:	bd80      	pop	{r7, pc}
 8005e7c:	40013800 	.word	0x40013800
 8005e80:	51eb851f 	.word	0x51eb851f

08005e84 <memset>:
 8005e84:	4603      	mov	r3, r0
 8005e86:	4402      	add	r2, r0
 8005e88:	4293      	cmp	r3, r2
 8005e8a:	d100      	bne.n	8005e8e <memset+0xa>
 8005e8c:	4770      	bx	lr
 8005e8e:	f803 1b01 	strb.w	r1, [r3], #1
 8005e92:	e7f9      	b.n	8005e88 <memset+0x4>

08005e94 <__libc_init_array>:
 8005e94:	b570      	push	{r4, r5, r6, lr}
 8005e96:	2600      	movs	r6, #0
 8005e98:	4d0c      	ldr	r5, [pc, #48]	@ (8005ecc <__libc_init_array+0x38>)
 8005e9a:	4c0d      	ldr	r4, [pc, #52]	@ (8005ed0 <__libc_init_array+0x3c>)
 8005e9c:	1b64      	subs	r4, r4, r5
 8005e9e:	10a4      	asrs	r4, r4, #2
 8005ea0:	42a6      	cmp	r6, r4
 8005ea2:	d109      	bne.n	8005eb8 <__libc_init_array+0x24>
 8005ea4:	f000 f81a 	bl	8005edc <_init>
 8005ea8:	2600      	movs	r6, #0
 8005eaa:	4d0a      	ldr	r5, [pc, #40]	@ (8005ed4 <__libc_init_array+0x40>)
 8005eac:	4c0a      	ldr	r4, [pc, #40]	@ (8005ed8 <__libc_init_array+0x44>)
 8005eae:	1b64      	subs	r4, r4, r5
 8005eb0:	10a4      	asrs	r4, r4, #2
 8005eb2:	42a6      	cmp	r6, r4
 8005eb4:	d105      	bne.n	8005ec2 <__libc_init_array+0x2e>
 8005eb6:	bd70      	pop	{r4, r5, r6, pc}
 8005eb8:	f855 3b04 	ldr.w	r3, [r5], #4
 8005ebc:	4798      	blx	r3
 8005ebe:	3601      	adds	r6, #1
 8005ec0:	e7ee      	b.n	8005ea0 <__libc_init_array+0xc>
 8005ec2:	f855 3b04 	ldr.w	r3, [r5], #4
 8005ec6:	4798      	blx	r3
 8005ec8:	3601      	adds	r6, #1
 8005eca:	e7f2      	b.n	8005eb2 <__libc_init_array+0x1e>
 8005ecc:	08005f3c 	.word	0x08005f3c
 8005ed0:	08005f3c 	.word	0x08005f3c
 8005ed4:	08005f3c 	.word	0x08005f3c
 8005ed8:	08005f40 	.word	0x08005f40

08005edc <_init>:
 8005edc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ede:	bf00      	nop
 8005ee0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005ee2:	bc08      	pop	{r3}
 8005ee4:	469e      	mov	lr, r3
 8005ee6:	4770      	bx	lr

08005ee8 <_fini>:
 8005ee8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005eea:	bf00      	nop
 8005eec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005eee:	bc08      	pop	{r3}
 8005ef0:	469e      	mov	lr, r3
 8005ef2:	4770      	bx	lr
