
BKIT_robotics_v2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009dcc  080001e4  080001e4  000011e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001e8  08009fb0  08009fb0  0000afb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a198  0800a198  0000c030  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800a198  0800a198  0000b198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a1a0  0800a1a0  0000c030  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a1a0  0800a1a0  0000b1a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800a1a4  0800a1a4  0000b1a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000030  20000000  0800a1a8  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000460  20000030  0800a1d8  0000c030  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000490  0800a1d8  0000c490  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000c030  2**0
                  CONTENTS, READONLY
 12 .debug_info   000198a8  00000000  00000000  0000c059  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004e60  00000000  00000000  00025901  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000016a8  00000000  00000000  0002a768  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000119c  00000000  00000000  0002be10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001e629  00000000  00000000  0002cfac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00020794  00000000  00000000  0004b5d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a3ec3  00000000  00000000  0006bd69  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0010fc2c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005b3c  00000000  00000000  0010fc70  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000089  00000000  00000000  001157ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	@ (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	@ (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	20000030 	.word	0x20000030
 8000200:	00000000 	.word	0x00000000
 8000204:	08009f98 	.word	0x08009f98

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	@ (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	@ (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	@ (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	20000034 	.word	0x20000034
 8000220:	08009f98 	.word	0x08009f98

08000224 <strlen>:
 8000224:	4603      	mov	r3, r0
 8000226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022a:	2a00      	cmp	r2, #0
 800022c:	d1fb      	bne.n	8000226 <strlen+0x2>
 800022e:	1a18      	subs	r0, r3, r0
 8000230:	3801      	subs	r0, #1
 8000232:	4770      	bx	lr

08000234 <__aeabi_drsub>:
 8000234:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000238:	e002      	b.n	8000240 <__adddf3>
 800023a:	bf00      	nop

0800023c <__aeabi_dsub>:
 800023c:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000240 <__adddf3>:
 8000240:	b530      	push	{r4, r5, lr}
 8000242:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000246:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800024a:	ea94 0f05 	teq	r4, r5
 800024e:	bf08      	it	eq
 8000250:	ea90 0f02 	teqeq	r0, r2
 8000254:	bf1f      	itttt	ne
 8000256:	ea54 0c00 	orrsne.w	ip, r4, r0
 800025a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800025e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000262:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000266:	f000 80e2 	beq.w	800042e <__adddf3+0x1ee>
 800026a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800026e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000272:	bfb8      	it	lt
 8000274:	426d      	neglt	r5, r5
 8000276:	dd0c      	ble.n	8000292 <__adddf3+0x52>
 8000278:	442c      	add	r4, r5
 800027a:	ea80 0202 	eor.w	r2, r0, r2
 800027e:	ea81 0303 	eor.w	r3, r1, r3
 8000282:	ea82 0000 	eor.w	r0, r2, r0
 8000286:	ea83 0101 	eor.w	r1, r3, r1
 800028a:	ea80 0202 	eor.w	r2, r0, r2
 800028e:	ea81 0303 	eor.w	r3, r1, r3
 8000292:	2d36      	cmp	r5, #54	@ 0x36
 8000294:	bf88      	it	hi
 8000296:	bd30      	pophi	{r4, r5, pc}
 8000298:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800029c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002a0:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002a4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002a8:	d002      	beq.n	80002b0 <__adddf3+0x70>
 80002aa:	4240      	negs	r0, r0
 80002ac:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002b0:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80002b4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002b8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002bc:	d002      	beq.n	80002c4 <__adddf3+0x84>
 80002be:	4252      	negs	r2, r2
 80002c0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c4:	ea94 0f05 	teq	r4, r5
 80002c8:	f000 80a7 	beq.w	800041a <__adddf3+0x1da>
 80002cc:	f1a4 0401 	sub.w	r4, r4, #1
 80002d0:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d4:	db0d      	blt.n	80002f2 <__adddf3+0xb2>
 80002d6:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002da:	fa22 f205 	lsr.w	r2, r2, r5
 80002de:	1880      	adds	r0, r0, r2
 80002e0:	f141 0100 	adc.w	r1, r1, #0
 80002e4:	fa03 f20e 	lsl.w	r2, r3, lr
 80002e8:	1880      	adds	r0, r0, r2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	4159      	adcs	r1, r3
 80002f0:	e00e      	b.n	8000310 <__adddf3+0xd0>
 80002f2:	f1a5 0520 	sub.w	r5, r5, #32
 80002f6:	f10e 0e20 	add.w	lr, lr, #32
 80002fa:	2a01      	cmp	r2, #1
 80002fc:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000300:	bf28      	it	cs
 8000302:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000306:	fa43 f305 	asr.w	r3, r3, r5
 800030a:	18c0      	adds	r0, r0, r3
 800030c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000310:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000314:	d507      	bpl.n	8000326 <__adddf3+0xe6>
 8000316:	f04f 0e00 	mov.w	lr, #0
 800031a:	f1dc 0c00 	rsbs	ip, ip, #0
 800031e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000322:	eb6e 0101 	sbc.w	r1, lr, r1
 8000326:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800032a:	d31b      	bcc.n	8000364 <__adddf3+0x124>
 800032c:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000330:	d30c      	bcc.n	800034c <__adddf3+0x10c>
 8000332:	0849      	lsrs	r1, r1, #1
 8000334:	ea5f 0030 	movs.w	r0, r0, rrx
 8000338:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800033c:	f104 0401 	add.w	r4, r4, #1
 8000340:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000344:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000348:	f080 809a 	bcs.w	8000480 <__adddf3+0x240>
 800034c:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000350:	bf08      	it	eq
 8000352:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000356:	f150 0000 	adcs.w	r0, r0, #0
 800035a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800035e:	ea41 0105 	orr.w	r1, r1, r5
 8000362:	bd30      	pop	{r4, r5, pc}
 8000364:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000368:	4140      	adcs	r0, r0
 800036a:	eb41 0101 	adc.w	r1, r1, r1
 800036e:	3c01      	subs	r4, #1
 8000370:	bf28      	it	cs
 8000372:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000376:	d2e9      	bcs.n	800034c <__adddf3+0x10c>
 8000378:	f091 0f00 	teq	r1, #0
 800037c:	bf04      	itt	eq
 800037e:	4601      	moveq	r1, r0
 8000380:	2000      	moveq	r0, #0
 8000382:	fab1 f381 	clz	r3, r1
 8000386:	bf08      	it	eq
 8000388:	3320      	addeq	r3, #32
 800038a:	f1a3 030b 	sub.w	r3, r3, #11
 800038e:	f1b3 0220 	subs.w	r2, r3, #32
 8000392:	da0c      	bge.n	80003ae <__adddf3+0x16e>
 8000394:	320c      	adds	r2, #12
 8000396:	dd08      	ble.n	80003aa <__adddf3+0x16a>
 8000398:	f102 0c14 	add.w	ip, r2, #20
 800039c:	f1c2 020c 	rsb	r2, r2, #12
 80003a0:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a4:	fa21 f102 	lsr.w	r1, r1, r2
 80003a8:	e00c      	b.n	80003c4 <__adddf3+0x184>
 80003aa:	f102 0214 	add.w	r2, r2, #20
 80003ae:	bfd8      	it	le
 80003b0:	f1c2 0c20 	rsble	ip, r2, #32
 80003b4:	fa01 f102 	lsl.w	r1, r1, r2
 80003b8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003bc:	bfdc      	itt	le
 80003be:	ea41 010c 	orrle.w	r1, r1, ip
 80003c2:	4090      	lslle	r0, r2
 80003c4:	1ae4      	subs	r4, r4, r3
 80003c6:	bfa2      	ittt	ge
 80003c8:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003cc:	4329      	orrge	r1, r5
 80003ce:	bd30      	popge	{r4, r5, pc}
 80003d0:	ea6f 0404 	mvn.w	r4, r4
 80003d4:	3c1f      	subs	r4, #31
 80003d6:	da1c      	bge.n	8000412 <__adddf3+0x1d2>
 80003d8:	340c      	adds	r4, #12
 80003da:	dc0e      	bgt.n	80003fa <__adddf3+0x1ba>
 80003dc:	f104 0414 	add.w	r4, r4, #20
 80003e0:	f1c4 0220 	rsb	r2, r4, #32
 80003e4:	fa20 f004 	lsr.w	r0, r0, r4
 80003e8:	fa01 f302 	lsl.w	r3, r1, r2
 80003ec:	ea40 0003 	orr.w	r0, r0, r3
 80003f0:	fa21 f304 	lsr.w	r3, r1, r4
 80003f4:	ea45 0103 	orr.w	r1, r5, r3
 80003f8:	bd30      	pop	{r4, r5, pc}
 80003fa:	f1c4 040c 	rsb	r4, r4, #12
 80003fe:	f1c4 0220 	rsb	r2, r4, #32
 8000402:	fa20 f002 	lsr.w	r0, r0, r2
 8000406:	fa01 f304 	lsl.w	r3, r1, r4
 800040a:	ea40 0003 	orr.w	r0, r0, r3
 800040e:	4629      	mov	r1, r5
 8000410:	bd30      	pop	{r4, r5, pc}
 8000412:	fa21 f004 	lsr.w	r0, r1, r4
 8000416:	4629      	mov	r1, r5
 8000418:	bd30      	pop	{r4, r5, pc}
 800041a:	f094 0f00 	teq	r4, #0
 800041e:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000422:	bf06      	itte	eq
 8000424:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000428:	3401      	addeq	r4, #1
 800042a:	3d01      	subne	r5, #1
 800042c:	e74e      	b.n	80002cc <__adddf3+0x8c>
 800042e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000432:	bf18      	it	ne
 8000434:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000438:	d029      	beq.n	800048e <__adddf3+0x24e>
 800043a:	ea94 0f05 	teq	r4, r5
 800043e:	bf08      	it	eq
 8000440:	ea90 0f02 	teqeq	r0, r2
 8000444:	d005      	beq.n	8000452 <__adddf3+0x212>
 8000446:	ea54 0c00 	orrs.w	ip, r4, r0
 800044a:	bf04      	itt	eq
 800044c:	4619      	moveq	r1, r3
 800044e:	4610      	moveq	r0, r2
 8000450:	bd30      	pop	{r4, r5, pc}
 8000452:	ea91 0f03 	teq	r1, r3
 8000456:	bf1e      	ittt	ne
 8000458:	2100      	movne	r1, #0
 800045a:	2000      	movne	r0, #0
 800045c:	bd30      	popne	{r4, r5, pc}
 800045e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000462:	d105      	bne.n	8000470 <__adddf3+0x230>
 8000464:	0040      	lsls	r0, r0, #1
 8000466:	4149      	adcs	r1, r1
 8000468:	bf28      	it	cs
 800046a:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800046e:	bd30      	pop	{r4, r5, pc}
 8000470:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000474:	bf3c      	itt	cc
 8000476:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800047a:	bd30      	popcc	{r4, r5, pc}
 800047c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000480:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000484:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000488:	f04f 0000 	mov.w	r0, #0
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000492:	bf1a      	itte	ne
 8000494:	4619      	movne	r1, r3
 8000496:	4610      	movne	r0, r2
 8000498:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800049c:	bf1c      	itt	ne
 800049e:	460b      	movne	r3, r1
 80004a0:	4602      	movne	r2, r0
 80004a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004a6:	bf06      	itte	eq
 80004a8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004ac:	ea91 0f03 	teqeq	r1, r3
 80004b0:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	bf00      	nop

080004b8 <__aeabi_ui2d>:
 80004b8:	f090 0f00 	teq	r0, #0
 80004bc:	bf04      	itt	eq
 80004be:	2100      	moveq	r1, #0
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004c8:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004cc:	f04f 0500 	mov.w	r5, #0
 80004d0:	f04f 0100 	mov.w	r1, #0
 80004d4:	e750      	b.n	8000378 <__adddf3+0x138>
 80004d6:	bf00      	nop

080004d8 <__aeabi_i2d>:
 80004d8:	f090 0f00 	teq	r0, #0
 80004dc:	bf04      	itt	eq
 80004de:	2100      	moveq	r1, #0
 80004e0:	4770      	bxeq	lr
 80004e2:	b530      	push	{r4, r5, lr}
 80004e4:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004e8:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004ec:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004f0:	bf48      	it	mi
 80004f2:	4240      	negmi	r0, r0
 80004f4:	f04f 0100 	mov.w	r1, #0
 80004f8:	e73e      	b.n	8000378 <__adddf3+0x138>
 80004fa:	bf00      	nop

080004fc <__aeabi_f2d>:
 80004fc:	0042      	lsls	r2, r0, #1
 80004fe:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000502:	ea4f 0131 	mov.w	r1, r1, rrx
 8000506:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800050a:	bf1f      	itttt	ne
 800050c:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000510:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000514:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000518:	4770      	bxne	lr
 800051a:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800051e:	bf08      	it	eq
 8000520:	4770      	bxeq	lr
 8000522:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000526:	bf04      	itt	eq
 8000528:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000534:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000538:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800053c:	e71c      	b.n	8000378 <__adddf3+0x138>
 800053e:	bf00      	nop

08000540 <__aeabi_ul2d>:
 8000540:	ea50 0201 	orrs.w	r2, r0, r1
 8000544:	bf08      	it	eq
 8000546:	4770      	bxeq	lr
 8000548:	b530      	push	{r4, r5, lr}
 800054a:	f04f 0500 	mov.w	r5, #0
 800054e:	e00a      	b.n	8000566 <__aeabi_l2d+0x16>

08000550 <__aeabi_l2d>:
 8000550:	ea50 0201 	orrs.w	r2, r0, r1
 8000554:	bf08      	it	eq
 8000556:	4770      	bxeq	lr
 8000558:	b530      	push	{r4, r5, lr}
 800055a:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800055e:	d502      	bpl.n	8000566 <__aeabi_l2d+0x16>
 8000560:	4240      	negs	r0, r0
 8000562:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000566:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800056a:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800056e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000572:	f43f aed8 	beq.w	8000326 <__adddf3+0xe6>
 8000576:	f04f 0203 	mov.w	r2, #3
 800057a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800057e:	bf18      	it	ne
 8000580:	3203      	addne	r2, #3
 8000582:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000586:	bf18      	it	ne
 8000588:	3203      	addne	r2, #3
 800058a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800058e:	f1c2 0320 	rsb	r3, r2, #32
 8000592:	fa00 fc03 	lsl.w	ip, r0, r3
 8000596:	fa20 f002 	lsr.w	r0, r0, r2
 800059a:	fa01 fe03 	lsl.w	lr, r1, r3
 800059e:	ea40 000e 	orr.w	r0, r0, lr
 80005a2:	fa21 f102 	lsr.w	r1, r1, r2
 80005a6:	4414      	add	r4, r2
 80005a8:	e6bd      	b.n	8000326 <__adddf3+0xe6>
 80005aa:	bf00      	nop

080005ac <__aeabi_d2iz>:
 80005ac:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80005b0:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 80005b4:	d215      	bcs.n	80005e2 <__aeabi_d2iz+0x36>
 80005b6:	d511      	bpl.n	80005dc <__aeabi_d2iz+0x30>
 80005b8:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 80005bc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80005c0:	d912      	bls.n	80005e8 <__aeabi_d2iz+0x3c>
 80005c2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80005c6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80005ca:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80005ce:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80005d2:	fa23 f002 	lsr.w	r0, r3, r2
 80005d6:	bf18      	it	ne
 80005d8:	4240      	negne	r0, r0
 80005da:	4770      	bx	lr
 80005dc:	f04f 0000 	mov.w	r0, #0
 80005e0:	4770      	bx	lr
 80005e2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80005e6:	d105      	bne.n	80005f4 <__aeabi_d2iz+0x48>
 80005e8:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 80005ec:	bf08      	it	eq
 80005ee:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 80005f2:	4770      	bx	lr
 80005f4:	f04f 0000 	mov.w	r0, #0
 80005f8:	4770      	bx	lr
 80005fa:	bf00      	nop

080005fc <__aeabi_frsub>:
 80005fc:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000600:	e002      	b.n	8000608 <__addsf3>
 8000602:	bf00      	nop

08000604 <__aeabi_fsub>:
 8000604:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000608 <__addsf3>:
 8000608:	0042      	lsls	r2, r0, #1
 800060a:	bf1f      	itttt	ne
 800060c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000610:	ea92 0f03 	teqne	r2, r3
 8000614:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000618:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800061c:	d06a      	beq.n	80006f4 <__addsf3+0xec>
 800061e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000622:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000626:	bfc1      	itttt	gt
 8000628:	18d2      	addgt	r2, r2, r3
 800062a:	4041      	eorgt	r1, r0
 800062c:	4048      	eorgt	r0, r1
 800062e:	4041      	eorgt	r1, r0
 8000630:	bfb8      	it	lt
 8000632:	425b      	neglt	r3, r3
 8000634:	2b19      	cmp	r3, #25
 8000636:	bf88      	it	hi
 8000638:	4770      	bxhi	lr
 800063a:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 800063e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000642:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000646:	bf18      	it	ne
 8000648:	4240      	negne	r0, r0
 800064a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800064e:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000652:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000656:	bf18      	it	ne
 8000658:	4249      	negne	r1, r1
 800065a:	ea92 0f03 	teq	r2, r3
 800065e:	d03f      	beq.n	80006e0 <__addsf3+0xd8>
 8000660:	f1a2 0201 	sub.w	r2, r2, #1
 8000664:	fa41 fc03 	asr.w	ip, r1, r3
 8000668:	eb10 000c 	adds.w	r0, r0, ip
 800066c:	f1c3 0320 	rsb	r3, r3, #32
 8000670:	fa01 f103 	lsl.w	r1, r1, r3
 8000674:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000678:	d502      	bpl.n	8000680 <__addsf3+0x78>
 800067a:	4249      	negs	r1, r1
 800067c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000680:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000684:	d313      	bcc.n	80006ae <__addsf3+0xa6>
 8000686:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 800068a:	d306      	bcc.n	800069a <__addsf3+0x92>
 800068c:	0840      	lsrs	r0, r0, #1
 800068e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000692:	f102 0201 	add.w	r2, r2, #1
 8000696:	2afe      	cmp	r2, #254	@ 0xfe
 8000698:	d251      	bcs.n	800073e <__addsf3+0x136>
 800069a:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 800069e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80006a2:	bf08      	it	eq
 80006a4:	f020 0001 	biceq.w	r0, r0, #1
 80006a8:	ea40 0003 	orr.w	r0, r0, r3
 80006ac:	4770      	bx	lr
 80006ae:	0049      	lsls	r1, r1, #1
 80006b0:	eb40 0000 	adc.w	r0, r0, r0
 80006b4:	3a01      	subs	r2, #1
 80006b6:	bf28      	it	cs
 80006b8:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 80006bc:	d2ed      	bcs.n	800069a <__addsf3+0x92>
 80006be:	fab0 fc80 	clz	ip, r0
 80006c2:	f1ac 0c08 	sub.w	ip, ip, #8
 80006c6:	ebb2 020c 	subs.w	r2, r2, ip
 80006ca:	fa00 f00c 	lsl.w	r0, r0, ip
 80006ce:	bfaa      	itet	ge
 80006d0:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 80006d4:	4252      	neglt	r2, r2
 80006d6:	4318      	orrge	r0, r3
 80006d8:	bfbc      	itt	lt
 80006da:	40d0      	lsrlt	r0, r2
 80006dc:	4318      	orrlt	r0, r3
 80006de:	4770      	bx	lr
 80006e0:	f092 0f00 	teq	r2, #0
 80006e4:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 80006e8:	bf06      	itte	eq
 80006ea:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 80006ee:	3201      	addeq	r2, #1
 80006f0:	3b01      	subne	r3, #1
 80006f2:	e7b5      	b.n	8000660 <__addsf3+0x58>
 80006f4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80006f8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80006fc:	bf18      	it	ne
 80006fe:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000702:	d021      	beq.n	8000748 <__addsf3+0x140>
 8000704:	ea92 0f03 	teq	r2, r3
 8000708:	d004      	beq.n	8000714 <__addsf3+0x10c>
 800070a:	f092 0f00 	teq	r2, #0
 800070e:	bf08      	it	eq
 8000710:	4608      	moveq	r0, r1
 8000712:	4770      	bx	lr
 8000714:	ea90 0f01 	teq	r0, r1
 8000718:	bf1c      	itt	ne
 800071a:	2000      	movne	r0, #0
 800071c:	4770      	bxne	lr
 800071e:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000722:	d104      	bne.n	800072e <__addsf3+0x126>
 8000724:	0040      	lsls	r0, r0, #1
 8000726:	bf28      	it	cs
 8000728:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 800072c:	4770      	bx	lr
 800072e:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000732:	bf3c      	itt	cc
 8000734:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000738:	4770      	bxcc	lr
 800073a:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 800073e:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000742:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000746:	4770      	bx	lr
 8000748:	ea7f 6222 	mvns.w	r2, r2, asr #24
 800074c:	bf16      	itet	ne
 800074e:	4608      	movne	r0, r1
 8000750:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000754:	4601      	movne	r1, r0
 8000756:	0242      	lsls	r2, r0, #9
 8000758:	bf06      	itte	eq
 800075a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 800075e:	ea90 0f01 	teqeq	r0, r1
 8000762:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000766:	4770      	bx	lr

08000768 <__aeabi_ui2f>:
 8000768:	f04f 0300 	mov.w	r3, #0
 800076c:	e004      	b.n	8000778 <__aeabi_i2f+0x8>
 800076e:	bf00      	nop

08000770 <__aeabi_i2f>:
 8000770:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000774:	bf48      	it	mi
 8000776:	4240      	negmi	r0, r0
 8000778:	ea5f 0c00 	movs.w	ip, r0
 800077c:	bf08      	it	eq
 800077e:	4770      	bxeq	lr
 8000780:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000784:	4601      	mov	r1, r0
 8000786:	f04f 0000 	mov.w	r0, #0
 800078a:	e01c      	b.n	80007c6 <__aeabi_l2f+0x2a>

0800078c <__aeabi_ul2f>:
 800078c:	ea50 0201 	orrs.w	r2, r0, r1
 8000790:	bf08      	it	eq
 8000792:	4770      	bxeq	lr
 8000794:	f04f 0300 	mov.w	r3, #0
 8000798:	e00a      	b.n	80007b0 <__aeabi_l2f+0x14>
 800079a:	bf00      	nop

0800079c <__aeabi_l2f>:
 800079c:	ea50 0201 	orrs.w	r2, r0, r1
 80007a0:	bf08      	it	eq
 80007a2:	4770      	bxeq	lr
 80007a4:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 80007a8:	d502      	bpl.n	80007b0 <__aeabi_l2f+0x14>
 80007aa:	4240      	negs	r0, r0
 80007ac:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80007b0:	ea5f 0c01 	movs.w	ip, r1
 80007b4:	bf02      	ittt	eq
 80007b6:	4684      	moveq	ip, r0
 80007b8:	4601      	moveq	r1, r0
 80007ba:	2000      	moveq	r0, #0
 80007bc:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 80007c0:	bf08      	it	eq
 80007c2:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 80007c6:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 80007ca:	fabc f28c 	clz	r2, ip
 80007ce:	3a08      	subs	r2, #8
 80007d0:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 80007d4:	db10      	blt.n	80007f8 <__aeabi_l2f+0x5c>
 80007d6:	fa01 fc02 	lsl.w	ip, r1, r2
 80007da:	4463      	add	r3, ip
 80007dc:	fa00 fc02 	lsl.w	ip, r0, r2
 80007e0:	f1c2 0220 	rsb	r2, r2, #32
 80007e4:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80007e8:	fa20 f202 	lsr.w	r2, r0, r2
 80007ec:	eb43 0002 	adc.w	r0, r3, r2
 80007f0:	bf08      	it	eq
 80007f2:	f020 0001 	biceq.w	r0, r0, #1
 80007f6:	4770      	bx	lr
 80007f8:	f102 0220 	add.w	r2, r2, #32
 80007fc:	fa01 fc02 	lsl.w	ip, r1, r2
 8000800:	f1c2 0220 	rsb	r2, r2, #32
 8000804:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000808:	fa21 f202 	lsr.w	r2, r1, r2
 800080c:	eb43 0002 	adc.w	r0, r3, r2
 8000810:	bf08      	it	eq
 8000812:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000816:	4770      	bx	lr

08000818 <__aeabi_fmul>:
 8000818:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800081c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000820:	bf1e      	ittt	ne
 8000822:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000826:	ea92 0f0c 	teqne	r2, ip
 800082a:	ea93 0f0c 	teqne	r3, ip
 800082e:	d06f      	beq.n	8000910 <__aeabi_fmul+0xf8>
 8000830:	441a      	add	r2, r3
 8000832:	ea80 0c01 	eor.w	ip, r0, r1
 8000836:	0240      	lsls	r0, r0, #9
 8000838:	bf18      	it	ne
 800083a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 800083e:	d01e      	beq.n	800087e <__aeabi_fmul+0x66>
 8000840:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000844:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000848:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 800084c:	fba0 3101 	umull	r3, r1, r0, r1
 8000850:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000854:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000858:	bf3e      	ittt	cc
 800085a:	0049      	lslcc	r1, r1, #1
 800085c:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000860:	005b      	lslcc	r3, r3, #1
 8000862:	ea40 0001 	orr.w	r0, r0, r1
 8000866:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 800086a:	2afd      	cmp	r2, #253	@ 0xfd
 800086c:	d81d      	bhi.n	80008aa <__aeabi_fmul+0x92>
 800086e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000872:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000876:	bf08      	it	eq
 8000878:	f020 0001 	biceq.w	r0, r0, #1
 800087c:	4770      	bx	lr
 800087e:	f090 0f00 	teq	r0, #0
 8000882:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000886:	bf08      	it	eq
 8000888:	0249      	lsleq	r1, r1, #9
 800088a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 800088e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000892:	3a7f      	subs	r2, #127	@ 0x7f
 8000894:	bfc2      	ittt	gt
 8000896:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 800089a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 800089e:	4770      	bxgt	lr
 80008a0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80008a4:	f04f 0300 	mov.w	r3, #0
 80008a8:	3a01      	subs	r2, #1
 80008aa:	dc5d      	bgt.n	8000968 <__aeabi_fmul+0x150>
 80008ac:	f112 0f19 	cmn.w	r2, #25
 80008b0:	bfdc      	itt	le
 80008b2:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 80008b6:	4770      	bxle	lr
 80008b8:	f1c2 0200 	rsb	r2, r2, #0
 80008bc:	0041      	lsls	r1, r0, #1
 80008be:	fa21 f102 	lsr.w	r1, r1, r2
 80008c2:	f1c2 0220 	rsb	r2, r2, #32
 80008c6:	fa00 fc02 	lsl.w	ip, r0, r2
 80008ca:	ea5f 0031 	movs.w	r0, r1, rrx
 80008ce:	f140 0000 	adc.w	r0, r0, #0
 80008d2:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 80008d6:	bf08      	it	eq
 80008d8:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80008dc:	4770      	bx	lr
 80008de:	f092 0f00 	teq	r2, #0
 80008e2:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 80008e6:	bf02      	ittt	eq
 80008e8:	0040      	lsleq	r0, r0, #1
 80008ea:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 80008ee:	3a01      	subeq	r2, #1
 80008f0:	d0f9      	beq.n	80008e6 <__aeabi_fmul+0xce>
 80008f2:	ea40 000c 	orr.w	r0, r0, ip
 80008f6:	f093 0f00 	teq	r3, #0
 80008fa:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 80008fe:	bf02      	ittt	eq
 8000900:	0049      	lsleq	r1, r1, #1
 8000902:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000906:	3b01      	subeq	r3, #1
 8000908:	d0f9      	beq.n	80008fe <__aeabi_fmul+0xe6>
 800090a:	ea41 010c 	orr.w	r1, r1, ip
 800090e:	e78f      	b.n	8000830 <__aeabi_fmul+0x18>
 8000910:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000914:	ea92 0f0c 	teq	r2, ip
 8000918:	bf18      	it	ne
 800091a:	ea93 0f0c 	teqne	r3, ip
 800091e:	d00a      	beq.n	8000936 <__aeabi_fmul+0x11e>
 8000920:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000924:	bf18      	it	ne
 8000926:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 800092a:	d1d8      	bne.n	80008de <__aeabi_fmul+0xc6>
 800092c:	ea80 0001 	eor.w	r0, r0, r1
 8000930:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000934:	4770      	bx	lr
 8000936:	f090 0f00 	teq	r0, #0
 800093a:	bf17      	itett	ne
 800093c:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000940:	4608      	moveq	r0, r1
 8000942:	f091 0f00 	teqne	r1, #0
 8000946:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 800094a:	d014      	beq.n	8000976 <__aeabi_fmul+0x15e>
 800094c:	ea92 0f0c 	teq	r2, ip
 8000950:	d101      	bne.n	8000956 <__aeabi_fmul+0x13e>
 8000952:	0242      	lsls	r2, r0, #9
 8000954:	d10f      	bne.n	8000976 <__aeabi_fmul+0x15e>
 8000956:	ea93 0f0c 	teq	r3, ip
 800095a:	d103      	bne.n	8000964 <__aeabi_fmul+0x14c>
 800095c:	024b      	lsls	r3, r1, #9
 800095e:	bf18      	it	ne
 8000960:	4608      	movne	r0, r1
 8000962:	d108      	bne.n	8000976 <__aeabi_fmul+0x15e>
 8000964:	ea80 0001 	eor.w	r0, r0, r1
 8000968:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 800096c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000970:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000974:	4770      	bx	lr
 8000976:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 800097a:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 800097e:	4770      	bx	lr

08000980 <__aeabi_fdiv>:
 8000980:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000984:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000988:	bf1e      	ittt	ne
 800098a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800098e:	ea92 0f0c 	teqne	r2, ip
 8000992:	ea93 0f0c 	teqne	r3, ip
 8000996:	d069      	beq.n	8000a6c <__aeabi_fdiv+0xec>
 8000998:	eba2 0203 	sub.w	r2, r2, r3
 800099c:	ea80 0c01 	eor.w	ip, r0, r1
 80009a0:	0249      	lsls	r1, r1, #9
 80009a2:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80009a6:	d037      	beq.n	8000a18 <__aeabi_fdiv+0x98>
 80009a8:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 80009ac:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 80009b0:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 80009b4:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 80009b8:	428b      	cmp	r3, r1
 80009ba:	bf38      	it	cc
 80009bc:	005b      	lslcc	r3, r3, #1
 80009be:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 80009c2:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 80009c6:	428b      	cmp	r3, r1
 80009c8:	bf24      	itt	cs
 80009ca:	1a5b      	subcs	r3, r3, r1
 80009cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80009d0:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 80009d4:	bf24      	itt	cs
 80009d6:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 80009da:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80009de:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 80009e2:	bf24      	itt	cs
 80009e4:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 80009e8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80009ec:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 80009f0:	bf24      	itt	cs
 80009f2:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 80009f6:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80009fa:	011b      	lsls	r3, r3, #4
 80009fc:	bf18      	it	ne
 80009fe:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000a02:	d1e0      	bne.n	80009c6 <__aeabi_fdiv+0x46>
 8000a04:	2afd      	cmp	r2, #253	@ 0xfd
 8000a06:	f63f af50 	bhi.w	80008aa <__aeabi_fmul+0x92>
 8000a0a:	428b      	cmp	r3, r1
 8000a0c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000a10:	bf08      	it	eq
 8000a12:	f020 0001 	biceq.w	r0, r0, #1
 8000a16:	4770      	bx	lr
 8000a18:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000a1c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000a20:	327f      	adds	r2, #127	@ 0x7f
 8000a22:	bfc2      	ittt	gt
 8000a24:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000a28:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000a2c:	4770      	bxgt	lr
 8000a2e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000a32:	f04f 0300 	mov.w	r3, #0
 8000a36:	3a01      	subs	r2, #1
 8000a38:	e737      	b.n	80008aa <__aeabi_fmul+0x92>
 8000a3a:	f092 0f00 	teq	r2, #0
 8000a3e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000a42:	bf02      	ittt	eq
 8000a44:	0040      	lsleq	r0, r0, #1
 8000a46:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000a4a:	3a01      	subeq	r2, #1
 8000a4c:	d0f9      	beq.n	8000a42 <__aeabi_fdiv+0xc2>
 8000a4e:	ea40 000c 	orr.w	r0, r0, ip
 8000a52:	f093 0f00 	teq	r3, #0
 8000a56:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000a5a:	bf02      	ittt	eq
 8000a5c:	0049      	lsleq	r1, r1, #1
 8000a5e:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000a62:	3b01      	subeq	r3, #1
 8000a64:	d0f9      	beq.n	8000a5a <__aeabi_fdiv+0xda>
 8000a66:	ea41 010c 	orr.w	r1, r1, ip
 8000a6a:	e795      	b.n	8000998 <__aeabi_fdiv+0x18>
 8000a6c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000a70:	ea92 0f0c 	teq	r2, ip
 8000a74:	d108      	bne.n	8000a88 <__aeabi_fdiv+0x108>
 8000a76:	0242      	lsls	r2, r0, #9
 8000a78:	f47f af7d 	bne.w	8000976 <__aeabi_fmul+0x15e>
 8000a7c:	ea93 0f0c 	teq	r3, ip
 8000a80:	f47f af70 	bne.w	8000964 <__aeabi_fmul+0x14c>
 8000a84:	4608      	mov	r0, r1
 8000a86:	e776      	b.n	8000976 <__aeabi_fmul+0x15e>
 8000a88:	ea93 0f0c 	teq	r3, ip
 8000a8c:	d104      	bne.n	8000a98 <__aeabi_fdiv+0x118>
 8000a8e:	024b      	lsls	r3, r1, #9
 8000a90:	f43f af4c 	beq.w	800092c <__aeabi_fmul+0x114>
 8000a94:	4608      	mov	r0, r1
 8000a96:	e76e      	b.n	8000976 <__aeabi_fmul+0x15e>
 8000a98:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000a9c:	bf18      	it	ne
 8000a9e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000aa2:	d1ca      	bne.n	8000a3a <__aeabi_fdiv+0xba>
 8000aa4:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8000aa8:	f47f af5c 	bne.w	8000964 <__aeabi_fmul+0x14c>
 8000aac:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000ab0:	f47f af3c 	bne.w	800092c <__aeabi_fmul+0x114>
 8000ab4:	e75f      	b.n	8000976 <__aeabi_fmul+0x15e>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_f2iz>:
 8000ab8:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000abc:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8000ac0:	d30f      	bcc.n	8000ae2 <__aeabi_f2iz+0x2a>
 8000ac2:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8000ac6:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000aca:	d90d      	bls.n	8000ae8 <__aeabi_f2iz+0x30>
 8000acc:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000ad0:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000ad4:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000ad8:	fa23 f002 	lsr.w	r0, r3, r2
 8000adc:	bf18      	it	ne
 8000ade:	4240      	negne	r0, r0
 8000ae0:	4770      	bx	lr
 8000ae2:	f04f 0000 	mov.w	r0, #0
 8000ae6:	4770      	bx	lr
 8000ae8:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8000aec:	d101      	bne.n	8000af2 <__aeabi_f2iz+0x3a>
 8000aee:	0242      	lsls	r2, r0, #9
 8000af0:	d105      	bne.n	8000afe <__aeabi_f2iz+0x46>
 8000af2:	f010 4000 	ands.w	r0, r0, #2147483648	@ 0x80000000
 8000af6:	bf08      	it	eq
 8000af8:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000afc:	4770      	bx	lr
 8000afe:	f04f 0000 	mov.w	r0, #0
 8000b02:	4770      	bx	lr

08000b04 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b084      	sub	sp, #16
 8000b08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000b0a:	1d3b      	adds	r3, r7, #4
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	601a      	str	r2, [r3, #0]
 8000b10:	605a      	str	r2, [r3, #4]
 8000b12:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000b14:	4b4a      	ldr	r3, [pc, #296]	@ (8000c40 <MX_ADC1_Init+0x13c>)
 8000b16:	4a4b      	ldr	r2, [pc, #300]	@ (8000c44 <MX_ADC1_Init+0x140>)
 8000b18:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000b1a:	4b49      	ldr	r3, [pc, #292]	@ (8000c40 <MX_ADC1_Init+0x13c>)
 8000b1c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000b20:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000b22:	4b47      	ldr	r3, [pc, #284]	@ (8000c40 <MX_ADC1_Init+0x13c>)
 8000b24:	2200      	movs	r2, #0
 8000b26:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000b28:	4b45      	ldr	r3, [pc, #276]	@ (8000c40 <MX_ADC1_Init+0x13c>)
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000b2e:	4b44      	ldr	r3, [pc, #272]	@ (8000c40 <MX_ADC1_Init+0x13c>)
 8000b30:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 8000b34:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000b36:	4b42      	ldr	r3, [pc, #264]	@ (8000c40 <MX_ADC1_Init+0x13c>)
 8000b38:	2200      	movs	r2, #0
 8000b3a:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 8;
 8000b3c:	4b40      	ldr	r3, [pc, #256]	@ (8000c40 <MX_ADC1_Init+0x13c>)
 8000b3e:	2208      	movs	r2, #8
 8000b40:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000b42:	483f      	ldr	r0, [pc, #252]	@ (8000c40 <MX_ADC1_Init+0x13c>)
 8000b44:	f003 fc42 	bl	80043cc <HAL_ADC_Init>
 8000b48:	4603      	mov	r3, r0
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d001      	beq.n	8000b52 <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 8000b4e:	f000 fff2 	bl	8001b36 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000b52:	2308      	movs	r3, #8
 8000b54:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000b56:	2301      	movs	r3, #1
 8000b58:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES_5;
 8000b5a:	2303      	movs	r3, #3
 8000b5c:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b5e:	1d3b      	adds	r3, r7, #4
 8000b60:	4619      	mov	r1, r3
 8000b62:	4837      	ldr	r0, [pc, #220]	@ (8000c40 <MX_ADC1_Init+0x13c>)
 8000b64:	f003 fe16 	bl	8004794 <HAL_ADC_ConfigChannel>
 8000b68:	4603      	mov	r3, r0
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	d001      	beq.n	8000b72 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000b6e:	f000 ffe2 	bl	8001b36 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000b72:	2309      	movs	r3, #9
 8000b74:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000b76:	2302      	movs	r3, #2
 8000b78:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b7a:	1d3b      	adds	r3, r7, #4
 8000b7c:	4619      	mov	r1, r3
 8000b7e:	4830      	ldr	r0, [pc, #192]	@ (8000c40 <MX_ADC1_Init+0x13c>)
 8000b80:	f003 fe08 	bl	8004794 <HAL_ADC_ConfigChannel>
 8000b84:	4603      	mov	r3, r0
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	d001      	beq.n	8000b8e <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 8000b8a:	f000 ffd4 	bl	8001b36 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000b8e:	230a      	movs	r3, #10
 8000b90:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000b92:	2303      	movs	r3, #3
 8000b94:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b96:	1d3b      	adds	r3, r7, #4
 8000b98:	4619      	mov	r1, r3
 8000b9a:	4829      	ldr	r0, [pc, #164]	@ (8000c40 <MX_ADC1_Init+0x13c>)
 8000b9c:	f003 fdfa 	bl	8004794 <HAL_ADC_ConfigChannel>
 8000ba0:	4603      	mov	r3, r0
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d001      	beq.n	8000baa <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 8000ba6:	f000 ffc6 	bl	8001b36 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8000baa:	230b      	movs	r3, #11
 8000bac:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8000bae:	2304      	movs	r3, #4
 8000bb0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000bb2:	1d3b      	adds	r3, r7, #4
 8000bb4:	4619      	mov	r1, r3
 8000bb6:	4822      	ldr	r0, [pc, #136]	@ (8000c40 <MX_ADC1_Init+0x13c>)
 8000bb8:	f003 fdec 	bl	8004794 <HAL_ADC_ConfigChannel>
 8000bbc:	4603      	mov	r3, r0
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d001      	beq.n	8000bc6 <MX_ADC1_Init+0xc2>
  {
    Error_Handler();
 8000bc2:	f000 ffb8 	bl	8001b36 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8000bc6:	230c      	movs	r3, #12
 8000bc8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8000bca:	2305      	movs	r3, #5
 8000bcc:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000bce:	1d3b      	adds	r3, r7, #4
 8000bd0:	4619      	mov	r1, r3
 8000bd2:	481b      	ldr	r0, [pc, #108]	@ (8000c40 <MX_ADC1_Init+0x13c>)
 8000bd4:	f003 fdde 	bl	8004794 <HAL_ADC_ConfigChannel>
 8000bd8:	4603      	mov	r3, r0
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d001      	beq.n	8000be2 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 8000bde:	f000 ffaa 	bl	8001b36 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8000be2:	230d      	movs	r3, #13
 8000be4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 8000be6:	2306      	movs	r3, #6
 8000be8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000bea:	1d3b      	adds	r3, r7, #4
 8000bec:	4619      	mov	r1, r3
 8000bee:	4814      	ldr	r0, [pc, #80]	@ (8000c40 <MX_ADC1_Init+0x13c>)
 8000bf0:	f003 fdd0 	bl	8004794 <HAL_ADC_ConfigChannel>
 8000bf4:	4603      	mov	r3, r0
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	d001      	beq.n	8000bfe <MX_ADC1_Init+0xfa>
  {
    Error_Handler();
 8000bfa:	f000 ff9c 	bl	8001b36 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8000bfe:	230e      	movs	r3, #14
 8000c00:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 8000c02:	2307      	movs	r3, #7
 8000c04:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000c06:	1d3b      	adds	r3, r7, #4
 8000c08:	4619      	mov	r1, r3
 8000c0a:	480d      	ldr	r0, [pc, #52]	@ (8000c40 <MX_ADC1_Init+0x13c>)
 8000c0c:	f003 fdc2 	bl	8004794 <HAL_ADC_ConfigChannel>
 8000c10:	4603      	mov	r3, r0
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d001      	beq.n	8000c1a <MX_ADC1_Init+0x116>
  {
    Error_Handler();
 8000c16:	f000 ff8e 	bl	8001b36 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8000c1a:	230f      	movs	r3, #15
 8000c1c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_8;
 8000c1e:	2308      	movs	r3, #8
 8000c20:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000c22:	1d3b      	adds	r3, r7, #4
 8000c24:	4619      	mov	r1, r3
 8000c26:	4806      	ldr	r0, [pc, #24]	@ (8000c40 <MX_ADC1_Init+0x13c>)
 8000c28:	f003 fdb4 	bl	8004794 <HAL_ADC_ConfigChannel>
 8000c2c:	4603      	mov	r3, r0
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d001      	beq.n	8000c36 <MX_ADC1_Init+0x132>
  {
    Error_Handler();
 8000c32:	f000 ff80 	bl	8001b36 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000c36:	bf00      	nop
 8000c38:	3710      	adds	r7, #16
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	bd80      	pop	{r7, pc}
 8000c3e:	bf00      	nop
 8000c40:	2000004c 	.word	0x2000004c
 8000c44:	40012400 	.word	0x40012400

08000c48 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b08a      	sub	sp, #40	@ 0x28
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c50:	f107 0318 	add.w	r3, r7, #24
 8000c54:	2200      	movs	r2, #0
 8000c56:	601a      	str	r2, [r3, #0]
 8000c58:	605a      	str	r2, [r3, #4]
 8000c5a:	609a      	str	r2, [r3, #8]
 8000c5c:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC1)
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	681b      	ldr	r3, [r3, #0]
 8000c62:	4a33      	ldr	r2, [pc, #204]	@ (8000d30 <HAL_ADC_MspInit+0xe8>)
 8000c64:	4293      	cmp	r3, r2
 8000c66:	d15f      	bne.n	8000d28 <HAL_ADC_MspInit+0xe0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000c68:	4b32      	ldr	r3, [pc, #200]	@ (8000d34 <HAL_ADC_MspInit+0xec>)
 8000c6a:	699b      	ldr	r3, [r3, #24]
 8000c6c:	4a31      	ldr	r2, [pc, #196]	@ (8000d34 <HAL_ADC_MspInit+0xec>)
 8000c6e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000c72:	6193      	str	r3, [r2, #24]
 8000c74:	4b2f      	ldr	r3, [pc, #188]	@ (8000d34 <HAL_ADC_MspInit+0xec>)
 8000c76:	699b      	ldr	r3, [r3, #24]
 8000c78:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000c7c:	617b      	str	r3, [r7, #20]
 8000c7e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c80:	4b2c      	ldr	r3, [pc, #176]	@ (8000d34 <HAL_ADC_MspInit+0xec>)
 8000c82:	699b      	ldr	r3, [r3, #24]
 8000c84:	4a2b      	ldr	r2, [pc, #172]	@ (8000d34 <HAL_ADC_MspInit+0xec>)
 8000c86:	f043 0310 	orr.w	r3, r3, #16
 8000c8a:	6193      	str	r3, [r2, #24]
 8000c8c:	4b29      	ldr	r3, [pc, #164]	@ (8000d34 <HAL_ADC_MspInit+0xec>)
 8000c8e:	699b      	ldr	r3, [r3, #24]
 8000c90:	f003 0310 	and.w	r3, r3, #16
 8000c94:	613b      	str	r3, [r7, #16]
 8000c96:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c98:	4b26      	ldr	r3, [pc, #152]	@ (8000d34 <HAL_ADC_MspInit+0xec>)
 8000c9a:	699b      	ldr	r3, [r3, #24]
 8000c9c:	4a25      	ldr	r2, [pc, #148]	@ (8000d34 <HAL_ADC_MspInit+0xec>)
 8000c9e:	f043 0308 	orr.w	r3, r3, #8
 8000ca2:	6193      	str	r3, [r2, #24]
 8000ca4:	4b23      	ldr	r3, [pc, #140]	@ (8000d34 <HAL_ADC_MspInit+0xec>)
 8000ca6:	699b      	ldr	r3, [r3, #24]
 8000ca8:	f003 0308 	and.w	r3, r3, #8
 8000cac:	60fb      	str	r3, [r7, #12]
 8000cae:	68fb      	ldr	r3, [r7, #12]
    PC4     ------> ADC1_IN14
    PC5     ------> ADC1_IN15
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000cb0:	233f      	movs	r3, #63	@ 0x3f
 8000cb2:	61bb      	str	r3, [r7, #24]
                          |GPIO_PIN_4|GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000cb4:	2303      	movs	r3, #3
 8000cb6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000cb8:	f107 0318 	add.w	r3, r7, #24
 8000cbc:	4619      	mov	r1, r3
 8000cbe:	481e      	ldr	r0, [pc, #120]	@ (8000d38 <HAL_ADC_MspInit+0xf0>)
 8000cc0:	f004 fcf4 	bl	80056ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000cc4:	2303      	movs	r3, #3
 8000cc6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000cc8:	2303      	movs	r3, #3
 8000cca:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ccc:	f107 0318 	add.w	r3, r7, #24
 8000cd0:	4619      	mov	r1, r3
 8000cd2:	481a      	ldr	r0, [pc, #104]	@ (8000d3c <HAL_ADC_MspInit+0xf4>)
 8000cd4:	f004 fcea 	bl	80056ac <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000cd8:	4b19      	ldr	r3, [pc, #100]	@ (8000d40 <HAL_ADC_MspInit+0xf8>)
 8000cda:	4a1a      	ldr	r2, [pc, #104]	@ (8000d44 <HAL_ADC_MspInit+0xfc>)
 8000cdc:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000cde:	4b18      	ldr	r3, [pc, #96]	@ (8000d40 <HAL_ADC_MspInit+0xf8>)
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000ce4:	4b16      	ldr	r3, [pc, #88]	@ (8000d40 <HAL_ADC_MspInit+0xf8>)
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000cea:	4b15      	ldr	r3, [pc, #84]	@ (8000d40 <HAL_ADC_MspInit+0xf8>)
 8000cec:	2280      	movs	r2, #128	@ 0x80
 8000cee:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000cf0:	4b13      	ldr	r3, [pc, #76]	@ (8000d40 <HAL_ADC_MspInit+0xf8>)
 8000cf2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000cf6:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000cf8:	4b11      	ldr	r3, [pc, #68]	@ (8000d40 <HAL_ADC_MspInit+0xf8>)
 8000cfa:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000cfe:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8000d00:	4b0f      	ldr	r3, [pc, #60]	@ (8000d40 <HAL_ADC_MspInit+0xf8>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000d06:	4b0e      	ldr	r3, [pc, #56]	@ (8000d40 <HAL_ADC_MspInit+0xf8>)
 8000d08:	2200      	movs	r2, #0
 8000d0a:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000d0c:	480c      	ldr	r0, [pc, #48]	@ (8000d40 <HAL_ADC_MspInit+0xf8>)
 8000d0e:	f004 f849 	bl	8004da4 <HAL_DMA_Init>
 8000d12:	4603      	mov	r3, r0
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d001      	beq.n	8000d1c <HAL_ADC_MspInit+0xd4>
    {
      Error_Handler();
 8000d18:	f000 ff0d 	bl	8001b36 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	4a08      	ldr	r2, [pc, #32]	@ (8000d40 <HAL_ADC_MspInit+0xf8>)
 8000d20:	621a      	str	r2, [r3, #32]
 8000d22:	4a07      	ldr	r2, [pc, #28]	@ (8000d40 <HAL_ADC_MspInit+0xf8>)
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	6253      	str	r3, [r2, #36]	@ 0x24

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000d28:	bf00      	nop
 8000d2a:	3728      	adds	r7, #40	@ 0x28
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	bd80      	pop	{r7, pc}
 8000d30:	40012400 	.word	0x40012400
 8000d34:	40021000 	.word	0x40021000
 8000d38:	40011000 	.word	0x40011000
 8000d3c:	40010c00 	.word	0x40010c00
 8000d40:	2000007c 	.word	0x2000007c
 8000d44:	40020008 	.word	0x40020008

08000d48 <initButton>:
	/**
	 * @brief  	Init matrix button
	 * @note  	Call once at the beginning
	 */
	enum StatusCode initButton()
	{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	af00      	add	r7, sp, #0
		HAL_GPIO_WritePin(INPUT_LOAD_GPIO_Port, INPUT_LOAD_Pin, 1);
 8000d4c:	2201      	movs	r2, #1
 8000d4e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000d52:	480e      	ldr	r0, [pc, #56]	@ (8000d8c <initButton+0x44>)
 8000d54:	f004 fe55 	bl	8005a02 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(INPUT_LOAD_GPIO_Port, INPUT_LOAD_Pin, 0);
 8000d58:	2200      	movs	r2, #0
 8000d5a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000d5e:	480b      	ldr	r0, [pc, #44]	@ (8000d8c <initButton+0x44>)
 8000d60:	f004 fe4f 	bl	8005a02 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(INPUT_LOAD_GPIO_Port, INPUT_LOAD_Pin, 1);
 8000d64:	2201      	movs	r2, #1
 8000d66:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000d6a:	4808      	ldr	r0, [pc, #32]	@ (8000d8c <initButton+0x44>)
 8000d6c:	f004 fe49 	bl	8005a02 <HAL_GPIO_WritePin>

		if (HAL_SPI_Receive(&hspi1, (void *)&button_buffer, 1, 10) == HAL_OK)
 8000d70:	230a      	movs	r3, #10
 8000d72:	2201      	movs	r2, #1
 8000d74:	4906      	ldr	r1, [pc, #24]	@ (8000d90 <initButton+0x48>)
 8000d76:	4807      	ldr	r0, [pc, #28]	@ (8000d94 <initButton+0x4c>)
 8000d78:	f006 fc26 	bl	80075c8 <HAL_SPI_Receive>
 8000d7c:	4603      	mov	r3, r0
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d101      	bne.n	8000d86 <initButton+0x3e>
		{
			return STATUS_OK;
 8000d82:	2301      	movs	r3, #1
 8000d84:	e000      	b.n	8000d88 <initButton+0x40>
		}
		return STATUS_ERROR;
 8000d86:	2300      	movs	r3, #0
	}
 8000d88:	4618      	mov	r0, r3
 8000d8a:	bd80      	pop	{r7, pc}
 8000d8c:	40010800 	.word	0x40010800
 8000d90:	200000c4 	.word	0x200000c4
 8000d94:	20000228 	.word	0x20000228

08000d98 <scanButton>:
	/**
	 * @brief  	Scan matrix button
	 * @note  	Call every 50ms (in interrupt or timer) to update button state
	 */
	enum StatusCode scanButton()
	{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b082      	sub	sp, #8
 8000d9c:	af00      	add	r7, sp, #0
		HAL_GPIO_WritePin(INPUT_LOAD_GPIO_Port, INPUT_LOAD_Pin, 0);
 8000d9e:	2200      	movs	r2, #0
 8000da0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000da4:	481b      	ldr	r0, [pc, #108]	@ (8000e14 <scanButton+0x7c>)
 8000da6:	f004 fe2c 	bl	8005a02 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(INPUT_LOAD_GPIO_Port, INPUT_LOAD_Pin, 1);
 8000daa:	2201      	movs	r2, #1
 8000dac:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000db0:	4818      	ldr	r0, [pc, #96]	@ (8000e14 <scanButton+0x7c>)
 8000db2:	f004 fe26 	bl	8005a02 <HAL_GPIO_WritePin>

		if (HAL_SPI_Receive(&hspi1, (void *)&button_buffer, 1, 10) != HAL_OK)
 8000db6:	230a      	movs	r3, #10
 8000db8:	2201      	movs	r2, #1
 8000dba:	4917      	ldr	r1, [pc, #92]	@ (8000e18 <scanButton+0x80>)
 8000dbc:	4817      	ldr	r0, [pc, #92]	@ (8000e1c <scanButton+0x84>)
 8000dbe:	f006 fc03 	bl	80075c8 <HAL_SPI_Receive>
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	d001      	beq.n	8000dcc <scanButton+0x34>
		{
			return STATUS_ERROR;
 8000dc8:	2300      	movs	r3, #0
 8000dca:	e01f      	b.n	8000e0c <scanButton+0x74>
		}

		for (uint8_t i = 0; i < NUMBER_OF_BUTTON; ++i)
 8000dcc:	2300      	movs	r3, #0
 8000dce:	71fb      	strb	r3, [r7, #7]
 8000dd0:	e018      	b.n	8000e04 <scanButton+0x6c>
		{
			if (button_buffer & (0b00000001 << i))
 8000dd2:	4b11      	ldr	r3, [pc, #68]	@ (8000e18 <scanButton+0x80>)
 8000dd4:	781b      	ldrb	r3, [r3, #0]
 8000dd6:	461a      	mov	r2, r3
 8000dd8:	79fb      	ldrb	r3, [r7, #7]
 8000dda:	fa42 f303 	asr.w	r3, r2, r3
 8000dde:	f003 0301 	and.w	r3, r3, #1
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d004      	beq.n	8000df0 <scanButton+0x58>
			{
				button_counter[i] = 0;
 8000de6:	79fb      	ldrb	r3, [r7, #7]
 8000de8:	4a0d      	ldr	r2, [pc, #52]	@ (8000e20 <scanButton+0x88>)
 8000dea:	2100      	movs	r1, #0
 8000dec:	54d1      	strb	r1, [r2, r3]
 8000dee:	e006      	b.n	8000dfe <scanButton+0x66>
			}
			else
				++button_counter[i];
 8000df0:	79fb      	ldrb	r3, [r7, #7]
 8000df2:	4a0b      	ldr	r2, [pc, #44]	@ (8000e20 <scanButton+0x88>)
 8000df4:	5cd2      	ldrb	r2, [r2, r3]
 8000df6:	3201      	adds	r2, #1
 8000df8:	b2d1      	uxtb	r1, r2
 8000dfa:	4a09      	ldr	r2, [pc, #36]	@ (8000e20 <scanButton+0x88>)
 8000dfc:	54d1      	strb	r1, [r2, r3]
		for (uint8_t i = 0; i < NUMBER_OF_BUTTON; ++i)
 8000dfe:	79fb      	ldrb	r3, [r7, #7]
 8000e00:	3301      	adds	r3, #1
 8000e02:	71fb      	strb	r3, [r7, #7]
 8000e04:	79fb      	ldrb	r3, [r7, #7]
 8000e06:	2b03      	cmp	r3, #3
 8000e08:	d9e3      	bls.n	8000dd2 <scanButton+0x3a>
		}

		return STATUS_OK;
 8000e0a:	2301      	movs	r3, #1
	}
 8000e0c:	4618      	mov	r0, r3
 8000e0e:	3708      	adds	r7, #8
 8000e10:	46bd      	mov	sp, r7
 8000e12:	bd80      	pop	{r7, pc}
 8000e14:	40010800 	.word	0x40010800
 8000e18:	200000c4 	.word	0x200000c4
 8000e1c:	20000228 	.word	0x20000228
 8000e20:	200000c0 	.word	0x200000c0

08000e24 <isButtonPressed>:
	 * @brief  	Check if button is pressed and handle button hold
	 * @param  	button_id: button id
	 * @retval 	1: pressed or hold every 2s, 0: not pressed
	 */
	uint8_t isButtonPressed(const enum Button button_id)
	{
 8000e24:	b480      	push	{r7}
 8000e26:	b083      	sub	sp, #12
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	4603      	mov	r3, r0
 8000e2c:	71fb      	strb	r3, [r7, #7]
		if (button_counter[button_id] > BUTTON_HOLD_THRESHOLD)
 8000e2e:	79fb      	ldrb	r3, [r7, #7]
 8000e30:	4a0a      	ldr	r2, [pc, #40]	@ (8000e5c <isButtonPressed+0x38>)
 8000e32:	5cd3      	ldrb	r3, [r2, r3]
 8000e34:	2b28      	cmp	r3, #40	@ 0x28
 8000e36:	d903      	bls.n	8000e40 <isButtonPressed+0x1c>
		{
			button_counter[button_id] = 1;
 8000e38:	79fb      	ldrb	r3, [r7, #7]
 8000e3a:	4a08      	ldr	r2, [pc, #32]	@ (8000e5c <isButtonPressed+0x38>)
 8000e3c:	2101      	movs	r1, #1
 8000e3e:	54d1      	strb	r1, [r2, r3]
		}

		if (button_counter[button_id] == 1)
 8000e40:	79fb      	ldrb	r3, [r7, #7]
 8000e42:	4a06      	ldr	r2, [pc, #24]	@ (8000e5c <isButtonPressed+0x38>)
 8000e44:	5cd3      	ldrb	r3, [r2, r3]
 8000e46:	2b01      	cmp	r3, #1
 8000e48:	d101      	bne.n	8000e4e <isButtonPressed+0x2a>
		{
			return 1;
 8000e4a:	2301      	movs	r3, #1
 8000e4c:	e000      	b.n	8000e50 <isButtonPressed+0x2c>
		}
		return 0;
 8000e4e:	2300      	movs	r3, #0
	}
 8000e50:	4618      	mov	r0, r3
 8000e52:	370c      	adds	r7, #12
 8000e54:	46bd      	mov	sp, r7
 8000e56:	bc80      	pop	{r7}
 8000e58:	4770      	bx	lr
 8000e5a:	bf00      	nop
 8000e5c:	200000c0 	.word	0x200000c0

08000e60 <initBuzzer>:
	/**
	 *@brief Initializes the buzzer by starting the PWM signal.
	 *@return STATUS_OK if successful, STATUS_ERROR otherwise.
	 */
	enum StatusCode initBuzzer()
	{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b082      	sub	sp, #8
 8000e64:	af00      	add	r7, sp, #0
		for (uint8_t attempt = 0; attempt < MAX_RETRY_COUNT; ++attempt)
 8000e66:	2300      	movs	r3, #0
 8000e68:	71fb      	strb	r3, [r7, #7]
 8000e6a:	e00e      	b.n	8000e8a <initBuzzer+0x2a>
		{
			if (HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_1) == HAL_OK)
 8000e6c:	2100      	movs	r1, #0
 8000e6e:	480b      	ldr	r0, [pc, #44]	@ (8000e9c <initBuzzer+0x3c>)
 8000e70:	f007 f876 	bl	8007f60 <HAL_TIM_PWM_Start>
 8000e74:	4603      	mov	r3, r0
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d101      	bne.n	8000e7e <initBuzzer+0x1e>
			{
				return STATUS_OK;
 8000e7a:	2301      	movs	r3, #1
 8000e7c:	e009      	b.n	8000e92 <initBuzzer+0x32>
			}
			HAL_Delay(50);
 8000e7e:	2032      	movs	r0, #50	@ 0x32
 8000e80:	f003 fa80 	bl	8004384 <HAL_Delay>
		for (uint8_t attempt = 0; attempt < MAX_RETRY_COUNT; ++attempt)
 8000e84:	79fb      	ldrb	r3, [r7, #7]
 8000e86:	3301      	adds	r3, #1
 8000e88:	71fb      	strb	r3, [r7, #7]
 8000e8a:	79fb      	ldrb	r3, [r7, #7]
 8000e8c:	2b02      	cmp	r3, #2
 8000e8e:	d9ed      	bls.n	8000e6c <initBuzzer+0xc>
		}

		return STATUS_ERROR;
 8000e90:	2300      	movs	r3, #0
	}
 8000e92:	4618      	mov	r0, r3
 8000e94:	3708      	adds	r7, #8
 8000e96:	46bd      	mov	sp, r7
 8000e98:	bd80      	pop	{r7, pc}
 8000e9a:	bf00      	nop
 8000e9c:	20000368 	.word	0x20000368

08000ea0 <setFreqBuzzer>:
	/**
	 * @brief Sets the frequency of the buzzer.
	 *
	 */
	void setFreqBuzzer(const uint32_t frequency)
	{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b084      	sub	sp, #16
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	6078      	str	r0, [r7, #4]
		if (frequency <= 0)
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d104      	bne.n	8000eb8 <setFreqBuzzer+0x18>
		{
			// Nếu tần số bằng 0, dừng buzzer
			HAL_TIM_PWM_Stop(&htim5, TIM_CHANNEL_1);
 8000eae:	2100      	movs	r1, #0
 8000eb0:	4820      	ldr	r0, [pc, #128]	@ (8000f34 <setFreqBuzzer+0x94>)
 8000eb2:	f007 f90f 	bl	80080d4 <HAL_TIM_PWM_Stop>
			return;
 8000eb6:	e03a      	b.n	8000f2e <setFreqBuzzer+0x8e>
		}

		uint32_t prescaler = 1;
 8000eb8:	2301      	movs	r3, #1
 8000eba:	60fb      	str	r3, [r7, #12]
		uint32_t period = (TIMER_CLOCK_HZ / prescaler / frequency) - 1;
 8000ebc:	4a1e      	ldr	r2, [pc, #120]	@ (8000f38 <setFreqBuzzer+0x98>)
 8000ebe:	68fb      	ldr	r3, [r7, #12]
 8000ec0:	fbb2 f2f3 	udiv	r2, r2, r3
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000eca:	3b01      	subs	r3, #1
 8000ecc:	60bb      	str	r3, [r7, #8]

		while (period > MAX_TIMER_COUNT && prescaler < MAX_TIMER_COUNT)
 8000ece:	e00b      	b.n	8000ee8 <setFreqBuzzer+0x48>
		{
			++prescaler;
 8000ed0:	68fb      	ldr	r3, [r7, #12]
 8000ed2:	3301      	adds	r3, #1
 8000ed4:	60fb      	str	r3, [r7, #12]
			period = (TIMER_CLOCK_HZ / prescaler / frequency) - 1;
 8000ed6:	4a18      	ldr	r2, [pc, #96]	@ (8000f38 <setFreqBuzzer+0x98>)
 8000ed8:	68fb      	ldr	r3, [r7, #12]
 8000eda:	fbb2 f2f3 	udiv	r2, r2, r3
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ee4:	3b01      	subs	r3, #1
 8000ee6:	60bb      	str	r3, [r7, #8]
		while (period > MAX_TIMER_COUNT && prescaler < MAX_TIMER_COUNT)
 8000ee8:	68bb      	ldr	r3, [r7, #8]
 8000eea:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000eee:	d304      	bcc.n	8000efa <setFreqBuzzer+0x5a>
 8000ef0:	68fb      	ldr	r3, [r7, #12]
 8000ef2:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8000ef6:	4293      	cmp	r3, r2
 8000ef8:	d9ea      	bls.n	8000ed0 <setFreqBuzzer+0x30>
		}

		if (period > MAX_TIMER_COUNT)
 8000efa:	68bb      	ldr	r3, [r7, #8]
 8000efc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000f00:	d214      	bcs.n	8000f2c <setFreqBuzzer+0x8c>
		{
			// If timer capacity is still exceeded, do nothing
			return;
		}

		__HAL_TIM_SET_PRESCALER(&htim5, prescaler);
 8000f02:	4b0c      	ldr	r3, [pc, #48]	@ (8000f34 <setFreqBuzzer+0x94>)
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	68fa      	ldr	r2, [r7, #12]
 8000f08:	629a      	str	r2, [r3, #40]	@ 0x28
		__HAL_TIM_SET_AUTORELOAD(&htim5, period);
 8000f0a:	4b0a      	ldr	r3, [pc, #40]	@ (8000f34 <setFreqBuzzer+0x94>)
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	68ba      	ldr	r2, [r7, #8]
 8000f10:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000f12:	4a08      	ldr	r2, [pc, #32]	@ (8000f34 <setFreqBuzzer+0x94>)
 8000f14:	68bb      	ldr	r3, [r7, #8]
 8000f16:	60d3      	str	r3, [r2, #12]
		__HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_1, period / 2);
 8000f18:	4b06      	ldr	r3, [pc, #24]	@ (8000f34 <setFreqBuzzer+0x94>)
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	68ba      	ldr	r2, [r7, #8]
 8000f1e:	0852      	lsrs	r2, r2, #1
 8000f20:	635a      	str	r2, [r3, #52]	@ 0x34

		HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_1);
 8000f22:	2100      	movs	r1, #0
 8000f24:	4803      	ldr	r0, [pc, #12]	@ (8000f34 <setFreqBuzzer+0x94>)
 8000f26:	f007 f81b 	bl	8007f60 <HAL_TIM_PWM_Start>
 8000f2a:	e000      	b.n	8000f2e <setFreqBuzzer+0x8e>
			return;
 8000f2c:	bf00      	nop
	}
 8000f2e:	3710      	adds	r7, #16
 8000f30:	46bd      	mov	sp, r7
 8000f32:	bd80      	pop	{r7, pc}
 8000f34:	20000368 	.word	0x20000368
 8000f38:	044aa200 	.word	0x044aa200

08000f3c <stopBuzzer>:

	void stopBuzzer()
	{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	af00      	add	r7, sp, #0
		HAL_TIM_PWM_Stop(&htim5, TIM_CHANNEL_1);
 8000f40:	2100      	movs	r1, #0
 8000f42:	4802      	ldr	r0, [pc, #8]	@ (8000f4c <stopBuzzer+0x10>)
 8000f44:	f007 f8c6 	bl	80080d4 <HAL_TIM_PWM_Stop>
	}
 8000f48:	bf00      	nop
 8000f4a:	bd80      	pop	{r7, pc}
 8000f4c:	20000368 	.word	0x20000368

08000f50 <initDisplay>:
                                    0x1f, 0x01, 0x09}; // 0->9
    uint16_t display_index = 0;
    uint8_t spi_buffer = 0xff;

    enum StatusCode initDisplay()
    {
 8000f50:	b580      	push	{r7, lr}
 8000f52:	af00      	add	r7, sp, #0
        HAL_GPIO_WritePin(LED_LATCH_GPIO_Port, LED_LATCH_Pin, 1);
 8000f54:	2201      	movs	r2, #1
 8000f56:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000f5a:	4811      	ldr	r0, [pc, #68]	@ (8000fa0 <initDisplay+0x50>)
 8000f5c:	f004 fd51 	bl	8005a02 <HAL_GPIO_WritePin>

        HAL_GPIO_WritePin(LED_LATCH_GPIO_Port, LED_LATCH_Pin, 0);
 8000f60:	2200      	movs	r2, #0
 8000f62:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000f66:	480e      	ldr	r0, [pc, #56]	@ (8000fa0 <initDisplay+0x50>)
 8000f68:	f004 fd4b 	bl	8005a02 <HAL_GPIO_WritePin>
        if (HAL_SPI_Transmit(&hspi1, (void *)&spi_buffer, 1, 1) != HAL_OK)
 8000f6c:	2301      	movs	r3, #1
 8000f6e:	2201      	movs	r2, #1
 8000f70:	490c      	ldr	r1, [pc, #48]	@ (8000fa4 <initDisplay+0x54>)
 8000f72:	480d      	ldr	r0, [pc, #52]	@ (8000fa8 <initDisplay+0x58>)
 8000f74:	f006 f9e4 	bl	8007340 <HAL_SPI_Transmit>
 8000f78:	4603      	mov	r3, r0
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d007      	beq.n	8000f8e <initDisplay+0x3e>
        {
            HAL_GPIO_WritePin(LED_LATCH_GPIO_Port, LED_LATCH_Pin, 1);
 8000f7e:	2201      	movs	r2, #1
 8000f80:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000f84:	4806      	ldr	r0, [pc, #24]	@ (8000fa0 <initDisplay+0x50>)
 8000f86:	f004 fd3c 	bl	8005a02 <HAL_GPIO_WritePin>
            return STATUS_ERROR;
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	e006      	b.n	8000f9c <initDisplay+0x4c>
        }
        HAL_GPIO_WritePin(LED_LATCH_GPIO_Port, LED_LATCH_Pin, 1);
 8000f8e:	2201      	movs	r2, #1
 8000f90:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000f94:	4802      	ldr	r0, [pc, #8]	@ (8000fa0 <initDisplay+0x50>)
 8000f96:	f004 fd34 	bl	8005a02 <HAL_GPIO_WritePin>
        return STATUS_OK;
 8000f9a:	2301      	movs	r3, #1
    }
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	bd80      	pop	{r7, pc}
 8000fa0:	40011000 	.word	0x40011000
 8000fa4:	2000000a 	.word	0x2000000a
 8000fa8:	20000228 	.word	0x20000228

08000fac <displayScan>:
    /**
     * @brief Display scan function
     * @note This function should be called in a timer interrupt
     */
    void displayScan()
    {
 8000fac:	b580      	push	{r7, lr}
 8000fae:	af00      	add	r7, sp, #0
        spi_buffer = display_buffer[display_index];
 8000fb0:	4b37      	ldr	r3, [pc, #220]	@ (8001090 <displayScan+0xe4>)
 8000fb2:	881b      	ldrh	r3, [r3, #0]
 8000fb4:	461a      	mov	r2, r3
 8000fb6:	4b37      	ldr	r3, [pc, #220]	@ (8001094 <displayScan+0xe8>)
 8000fb8:	5c9a      	ldrb	r2, [r3, r2]
 8000fba:	4b37      	ldr	r3, [pc, #220]	@ (8001098 <displayScan+0xec>)
 8000fbc:	701a      	strb	r2, [r3, #0]
        switch (display_index)
 8000fbe:	4b34      	ldr	r3, [pc, #208]	@ (8001090 <displayScan+0xe4>)
 8000fc0:	881b      	ldrh	r3, [r3, #0]
 8000fc2:	2b02      	cmp	r3, #2
 8000fc4:	d02c      	beq.n	8001020 <displayScan+0x74>
 8000fc6:	2b02      	cmp	r3, #2
 8000fc8:	dc3d      	bgt.n	8001046 <displayScan+0x9a>
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d002      	beq.n	8000fd4 <displayScan+0x28>
 8000fce:	2b01      	cmp	r3, #1
 8000fd0:	d013      	beq.n	8000ffa <displayScan+0x4e>
            HAL_GPIO_WritePin(LED7_EN1_GPIO_Port, LED7_EN1_Pin, 1);
            HAL_GPIO_WritePin(LED7_EN2_GPIO_Port, LED7_EN2_Pin, 1);
            HAL_GPIO_WritePin(LED_EN_GPIO_Port, LED_EN_Pin, 0);
            break;
        default:
            break;
 8000fd2:	e038      	b.n	8001046 <displayScan+0x9a>
            HAL_GPIO_WritePin(LED7_EN1_GPIO_Port, LED7_EN1_Pin, 1);
 8000fd4:	2201      	movs	r2, #1
 8000fd6:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000fda:	4830      	ldr	r0, [pc, #192]	@ (800109c <displayScan+0xf0>)
 8000fdc:	f004 fd11 	bl	8005a02 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(LED7_EN2_GPIO_Port, LED7_EN2_Pin, 0);
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000fe6:	482d      	ldr	r0, [pc, #180]	@ (800109c <displayScan+0xf0>)
 8000fe8:	f004 fd0b 	bl	8005a02 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(LED_EN_GPIO_Port, LED_EN_Pin, 1);
 8000fec:	2201      	movs	r2, #1
 8000fee:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000ff2:	482a      	ldr	r0, [pc, #168]	@ (800109c <displayScan+0xf0>)
 8000ff4:	f004 fd05 	bl	8005a02 <HAL_GPIO_WritePin>
            break;
 8000ff8:	e026      	b.n	8001048 <displayScan+0x9c>
            HAL_GPIO_WritePin(LED7_EN1_GPIO_Port, LED7_EN1_Pin, 0);
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001000:	4826      	ldr	r0, [pc, #152]	@ (800109c <displayScan+0xf0>)
 8001002:	f004 fcfe 	bl	8005a02 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(LED7_EN2_GPIO_Port, LED7_EN2_Pin, 1);
 8001006:	2201      	movs	r2, #1
 8001008:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800100c:	4823      	ldr	r0, [pc, #140]	@ (800109c <displayScan+0xf0>)
 800100e:	f004 fcf8 	bl	8005a02 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(LED_EN_GPIO_Port, LED_EN_Pin, 1);
 8001012:	2201      	movs	r2, #1
 8001014:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001018:	4820      	ldr	r0, [pc, #128]	@ (800109c <displayScan+0xf0>)
 800101a:	f004 fcf2 	bl	8005a02 <HAL_GPIO_WritePin>
            break;
 800101e:	e013      	b.n	8001048 <displayScan+0x9c>
            HAL_GPIO_WritePin(LED7_EN1_GPIO_Port, LED7_EN1_Pin, 1);
 8001020:	2201      	movs	r2, #1
 8001022:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001026:	481d      	ldr	r0, [pc, #116]	@ (800109c <displayScan+0xf0>)
 8001028:	f004 fceb 	bl	8005a02 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(LED7_EN2_GPIO_Port, LED7_EN2_Pin, 1);
 800102c:	2201      	movs	r2, #1
 800102e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001032:	481a      	ldr	r0, [pc, #104]	@ (800109c <displayScan+0xf0>)
 8001034:	f004 fce5 	bl	8005a02 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(LED_EN_GPIO_Port, LED_EN_Pin, 0);
 8001038:	2200      	movs	r2, #0
 800103a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800103e:	4817      	ldr	r0, [pc, #92]	@ (800109c <displayScan+0xf0>)
 8001040:	f004 fcdf 	bl	8005a02 <HAL_GPIO_WritePin>
            break;
 8001044:	e000      	b.n	8001048 <displayScan+0x9c>
            break;
 8001046:	bf00      	nop
        }

        display_index = (display_index + 1) % 3;
 8001048:	4b11      	ldr	r3, [pc, #68]	@ (8001090 <displayScan+0xe4>)
 800104a:	881b      	ldrh	r3, [r3, #0]
 800104c:	1c5a      	adds	r2, r3, #1
 800104e:	4b14      	ldr	r3, [pc, #80]	@ (80010a0 <displayScan+0xf4>)
 8001050:	fb83 3102 	smull	r3, r1, r3, r2
 8001054:	17d3      	asrs	r3, r2, #31
 8001056:	1ac9      	subs	r1, r1, r3
 8001058:	460b      	mov	r3, r1
 800105a:	005b      	lsls	r3, r3, #1
 800105c:	440b      	add	r3, r1
 800105e:	1ad1      	subs	r1, r2, r3
 8001060:	b28a      	uxth	r2, r1
 8001062:	4b0b      	ldr	r3, [pc, #44]	@ (8001090 <displayScan+0xe4>)
 8001064:	801a      	strh	r2, [r3, #0]

        HAL_GPIO_WritePin(LED_LATCH_GPIO_Port, LED_LATCH_Pin, 0);
 8001066:	2200      	movs	r2, #0
 8001068:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800106c:	480d      	ldr	r0, [pc, #52]	@ (80010a4 <displayScan+0xf8>)
 800106e:	f004 fcc8 	bl	8005a02 <HAL_GPIO_WritePin>
        HAL_SPI_Transmit(&hspi1, (void *)&spi_buffer, 1, 1);
 8001072:	2301      	movs	r3, #1
 8001074:	2201      	movs	r2, #1
 8001076:	4908      	ldr	r1, [pc, #32]	@ (8001098 <displayScan+0xec>)
 8001078:	480b      	ldr	r0, [pc, #44]	@ (80010a8 <displayScan+0xfc>)
 800107a:	f006 f961 	bl	8007340 <HAL_SPI_Transmit>
        HAL_GPIO_WritePin(LED_LATCH_GPIO_Port, LED_LATCH_Pin, 1);
 800107e:	2201      	movs	r2, #1
 8001080:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001084:	4807      	ldr	r0, [pc, #28]	@ (80010a4 <displayScan+0xf8>)
 8001086:	f004 fcbc 	bl	8005a02 <HAL_GPIO_WritePin>
    }
 800108a:	bf00      	nop
 800108c:	bd80      	pop	{r7, pc}
 800108e:	bf00      	nop
 8001090:	200000cc 	.word	0x200000cc
 8001094:	200000c8 	.word	0x200000c8
 8001098:	2000000a 	.word	0x2000000a
 800109c:	40010800 	.word	0x40010800
 80010a0:	55555556 	.word	0x55555556
 80010a4:	40011000 	.word	0x40011000
 80010a8:	20000228 	.word	0x20000228

080010ac <displayLed7Seg>:
     * @param number Number to display
     * @return None
     * @note display_buffer[1] is the left digit, display_buffer[0] is the right digit
     */
    void displayLed7Seg(const uint8_t number)
    {
 80010ac:	b480      	push	{r7}
 80010ae:	b083      	sub	sp, #12
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	4603      	mov	r3, r0
 80010b4:	71fb      	strb	r3, [r7, #7]
        display_buffer[1] = display_7seg_map[number / 10];
 80010b6:	79fb      	ldrb	r3, [r7, #7]
 80010b8:	4a0f      	ldr	r2, [pc, #60]	@ (80010f8 <displayLed7Seg+0x4c>)
 80010ba:	fba2 2303 	umull	r2, r3, r2, r3
 80010be:	08db      	lsrs	r3, r3, #3
 80010c0:	b2db      	uxtb	r3, r3
 80010c2:	461a      	mov	r2, r3
 80010c4:	4b0d      	ldr	r3, [pc, #52]	@ (80010fc <displayLed7Seg+0x50>)
 80010c6:	5c9a      	ldrb	r2, [r3, r2]
 80010c8:	4b0d      	ldr	r3, [pc, #52]	@ (8001100 <displayLed7Seg+0x54>)
 80010ca:	705a      	strb	r2, [r3, #1]
        display_buffer[0] = display_7seg_map[number % 10];
 80010cc:	79fa      	ldrb	r2, [r7, #7]
 80010ce:	4b0a      	ldr	r3, [pc, #40]	@ (80010f8 <displayLed7Seg+0x4c>)
 80010d0:	fba3 1302 	umull	r1, r3, r3, r2
 80010d4:	08d9      	lsrs	r1, r3, #3
 80010d6:	460b      	mov	r3, r1
 80010d8:	009b      	lsls	r3, r3, #2
 80010da:	440b      	add	r3, r1
 80010dc:	005b      	lsls	r3, r3, #1
 80010de:	1ad3      	subs	r3, r2, r3
 80010e0:	b2db      	uxtb	r3, r3
 80010e2:	461a      	mov	r2, r3
 80010e4:	4b05      	ldr	r3, [pc, #20]	@ (80010fc <displayLed7Seg+0x50>)
 80010e6:	5c9a      	ldrb	r2, [r3, r2]
 80010e8:	4b05      	ldr	r3, [pc, #20]	@ (8001100 <displayLed7Seg+0x54>)
 80010ea:	701a      	strb	r2, [r3, #0]
    }
 80010ec:	bf00      	nop
 80010ee:	370c      	adds	r7, #12
 80010f0:	46bd      	mov	sp, r7
 80010f2:	bc80      	pop	{r7}
 80010f4:	4770      	bx	lr
 80010f6:	bf00      	nop
 80010f8:	cccccccd 	.word	0xcccccccd
 80010fc:	20000000 	.word	0x20000000
 8001100:	200000c8 	.word	0x200000c8

08001104 <mirrorByte>:

    uint8_t mirrorByte(uint8_t data_byte)
    {
 8001104:	b480      	push	{r7}
 8001106:	b083      	sub	sp, #12
 8001108:	af00      	add	r7, sp, #0
 800110a:	4603      	mov	r3, r0
 800110c:	71fb      	strb	r3, [r7, #7]
        data_byte = (data_byte & 0xF0) >> 4 | (data_byte & 0x0F) << 4;
 800110e:	79fb      	ldrb	r3, [r7, #7]
 8001110:	091b      	lsrs	r3, r3, #4
 8001112:	b2db      	uxtb	r3, r3
 8001114:	b25a      	sxtb	r2, r3
 8001116:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800111a:	011b      	lsls	r3, r3, #4
 800111c:	b25b      	sxtb	r3, r3
 800111e:	4313      	orrs	r3, r2
 8001120:	b25b      	sxtb	r3, r3
 8001122:	71fb      	strb	r3, [r7, #7]
        data_byte = (data_byte & 0xCC) >> 2 | (data_byte & 0x33) << 2;
 8001124:	79fb      	ldrb	r3, [r7, #7]
 8001126:	109b      	asrs	r3, r3, #2
 8001128:	b25b      	sxtb	r3, r3
 800112a:	f003 0333 	and.w	r3, r3, #51	@ 0x33
 800112e:	b25a      	sxtb	r2, r3
 8001130:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001134:	009b      	lsls	r3, r3, #2
 8001136:	b25b      	sxtb	r3, r3
 8001138:	f023 0333 	bic.w	r3, r3, #51	@ 0x33
 800113c:	b25b      	sxtb	r3, r3
 800113e:	4313      	orrs	r3, r2
 8001140:	b25b      	sxtb	r3, r3
 8001142:	71fb      	strb	r3, [r7, #7]
        data_byte = (data_byte & 0xAA) >> 1 | (data_byte & 0x55) << 1;
 8001144:	79fb      	ldrb	r3, [r7, #7]
 8001146:	105b      	asrs	r3, r3, #1
 8001148:	b25b      	sxtb	r3, r3
 800114a:	f003 0355 	and.w	r3, r3, #85	@ 0x55
 800114e:	b25a      	sxtb	r2, r3
 8001150:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001154:	005b      	lsls	r3, r3, #1
 8001156:	b25b      	sxtb	r3, r3
 8001158:	f023 0355 	bic.w	r3, r3, #85	@ 0x55
 800115c:	b25b      	sxtb	r3, r3
 800115e:	4313      	orrs	r3, r2
 8001160:	b25b      	sxtb	r3, r3
 8001162:	71fb      	strb	r3, [r7, #7]
        return data_byte;
 8001164:	79fb      	ldrb	r3, [r7, #7]
    }
 8001166:	4618      	mov	r0, r3
 8001168:	370c      	adds	r7, #12
 800116a:	46bd      	mov	sp, r7
 800116c:	bc80      	pop	{r7}
 800116e:	4770      	bx	lr

08001170 <displayLeds>:
     * @param data_byte Data byte to display
     * @note because the LEDs are connected in reverse order,
     * we need to mirror the byte and then reverse the bits of the byte
     */
    void displayLeds(const uint8_t data_byte)
    {
 8001170:	b580      	push	{r7, lr}
 8001172:	b082      	sub	sp, #8
 8001174:	af00      	add	r7, sp, #0
 8001176:	4603      	mov	r3, r0
 8001178:	71fb      	strb	r3, [r7, #7]
        display_buffer[2] = ~mirrorByte(data_byte);
 800117a:	79fb      	ldrb	r3, [r7, #7]
 800117c:	4618      	mov	r0, r3
 800117e:	f7ff ffc1 	bl	8001104 <mirrorByte>
 8001182:	4603      	mov	r3, r0
 8001184:	43db      	mvns	r3, r3
 8001186:	b2da      	uxtb	r2, r3
 8001188:	4b02      	ldr	r3, [pc, #8]	@ (8001194 <displayLeds+0x24>)
 800118a:	709a      	strb	r2, [r3, #2]
    }
 800118c:	bf00      	nop
 800118e:	3708      	adds	r7, #8
 8001190:	46bd      	mov	sp, r7
 8001192:	bd80      	pop	{r7, pc}
 8001194:	200000c8 	.word	0x200000c8

08001198 <toggleLedDebug>:

    void toggleLedDebug()
    {
 8001198:	b580      	push	{r7, lr}
 800119a:	af00      	add	r7, sp, #0
        HAL_GPIO_TogglePin(LED_DEBUG_GPIO_Port, LED_DEBUG_Pin);
 800119c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80011a0:	4802      	ldr	r0, [pc, #8]	@ (80011ac <toggleLedDebug+0x14>)
 80011a2:	f004 fc46 	bl	8005a32 <HAL_GPIO_TogglePin>
    }
 80011a6:	bf00      	nop
 80011a8:	bd80      	pop	{r7, pc}
 80011aa:	bf00      	nop
 80011ac:	40011000 	.word	0x40011000

080011b0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b082      	sub	sp, #8
 80011b4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80011b6:	4b0c      	ldr	r3, [pc, #48]	@ (80011e8 <MX_DMA_Init+0x38>)
 80011b8:	695b      	ldr	r3, [r3, #20]
 80011ba:	4a0b      	ldr	r2, [pc, #44]	@ (80011e8 <MX_DMA_Init+0x38>)
 80011bc:	f043 0301 	orr.w	r3, r3, #1
 80011c0:	6153      	str	r3, [r2, #20]
 80011c2:	4b09      	ldr	r3, [pc, #36]	@ (80011e8 <MX_DMA_Init+0x38>)
 80011c4:	695b      	ldr	r3, [r3, #20]
 80011c6:	f003 0301 	and.w	r3, r3, #1
 80011ca:	607b      	str	r3, [r7, #4]
 80011cc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80011ce:	2200      	movs	r2, #0
 80011d0:	2100      	movs	r1, #0
 80011d2:	200b      	movs	r0, #11
 80011d4:	f003 fdaf 	bl	8004d36 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80011d8:	200b      	movs	r0, #11
 80011da:	f003 fdc8 	bl	8004d6e <HAL_NVIC_EnableIRQ>

}
 80011de:	bf00      	nop
 80011e0:	3708      	adds	r7, #8
 80011e2:	46bd      	mov	sp, r7
 80011e4:	bd80      	pop	{r7, pc}
 80011e6:	bf00      	nop
 80011e8:	40021000 	.word	0x40021000

080011ec <scanEncoder>:

    /**
     * @brief This function should be called in interupt
     */
    void scanEncoder()
    {
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b082      	sub	sp, #8
 80011f0:	af00      	add	r7, sp, #0
        for (uint8_t i = 0; i < NUMBER_OF_ENCODER; ++i)
 80011f2:	2300      	movs	r3, #0
 80011f4:	71fb      	strb	r3, [r7, #7]
 80011f6:	e03f      	b.n	8001278 <scanEncoder+0x8c>
        {
            switch (HAL_GPIO_ReadPin(ENCODER_A_PORT[i], ENCODER_A_PIN[i]))
 80011f8:	79fb      	ldrb	r3, [r7, #7]
 80011fa:	4a23      	ldr	r2, [pc, #140]	@ (8001288 <scanEncoder+0x9c>)
 80011fc:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001200:	79fb      	ldrb	r3, [r7, #7]
 8001202:	4922      	ldr	r1, [pc, #136]	@ (800128c <scanEncoder+0xa0>)
 8001204:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001208:	4619      	mov	r1, r3
 800120a:	4610      	mov	r0, r2
 800120c:	f004 fbe2 	bl	80059d4 <HAL_GPIO_ReadPin>
 8001210:	4603      	mov	r3, r0
 8001212:	2b00      	cmp	r3, #0
 8001214:	d020      	beq.n	8001258 <scanEncoder+0x6c>
 8001216:	2b01      	cmp	r3, #1
 8001218:	d12b      	bne.n	8001272 <scanEncoder+0x86>
            {
            case GPIO_PIN_SET:
            {
                if (encoder_pin_a_state[i] == GPIO_PIN_RESET)
 800121a:	79fb      	ldrb	r3, [r7, #7]
 800121c:	4a1c      	ldr	r2, [pc, #112]	@ (8001290 <scanEncoder+0xa4>)
 800121e:	5cd3      	ldrb	r3, [r2, r3]
 8001220:	2b00      	cmp	r3, #0
 8001222:	d123      	bne.n	800126c <scanEncoder+0x80>
                {
                    encoder_pin_a_state[i] = GPIO_PIN_SET;
 8001224:	79fb      	ldrb	r3, [r7, #7]
 8001226:	4a1a      	ldr	r2, [pc, #104]	@ (8001290 <scanEncoder+0xa4>)
 8001228:	2101      	movs	r1, #1
 800122a:	54d1      	strb	r1, [r2, r3]

                    if (encoder_pulse_count[i] < 0xFFFFFFFF)
 800122c:	79fb      	ldrb	r3, [r7, #7]
 800122e:	4a19      	ldr	r2, [pc, #100]	@ (8001294 <scanEncoder+0xa8>)
 8001230:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001234:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001238:	d008      	beq.n	800124c <scanEncoder+0x60>
                    {
                        ++encoder_pulse_count[i];
 800123a:	79fb      	ldrb	r3, [r7, #7]
 800123c:	4a15      	ldr	r2, [pc, #84]	@ (8001294 <scanEncoder+0xa8>)
 800123e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001242:	3201      	adds	r2, #1
 8001244:	4913      	ldr	r1, [pc, #76]	@ (8001294 <scanEncoder+0xa8>)
 8001246:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                    else
                    {
                        encoder_pulse_count[i] = 0;
                    }
                }
                break;
 800124a:	e00f      	b.n	800126c <scanEncoder+0x80>
                        encoder_pulse_count[i] = 0;
 800124c:	79fb      	ldrb	r3, [r7, #7]
 800124e:	4a11      	ldr	r2, [pc, #68]	@ (8001294 <scanEncoder+0xa8>)
 8001250:	2100      	movs	r1, #0
 8001252:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                break;
 8001256:	e009      	b.n	800126c <scanEncoder+0x80>
            }
            case GPIO_PIN_RESET:
            {
                if (encoder_pin_a_state[i] == GPIO_PIN_SET)
 8001258:	79fb      	ldrb	r3, [r7, #7]
 800125a:	4a0d      	ldr	r2, [pc, #52]	@ (8001290 <scanEncoder+0xa4>)
 800125c:	5cd3      	ldrb	r3, [r2, r3]
 800125e:	2b01      	cmp	r3, #1
 8001260:	d106      	bne.n	8001270 <scanEncoder+0x84>
                {
                    encoder_pin_a_state[i] = GPIO_PIN_RESET;
 8001262:	79fb      	ldrb	r3, [r7, #7]
 8001264:	4a0a      	ldr	r2, [pc, #40]	@ (8001290 <scanEncoder+0xa4>)
 8001266:	2100      	movs	r1, #0
 8001268:	54d1      	strb	r1, [r2, r3]
                }
                break;
 800126a:	e001      	b.n	8001270 <scanEncoder+0x84>
                break;
 800126c:	bf00      	nop
 800126e:	e000      	b.n	8001272 <scanEncoder+0x86>
                break;
 8001270:	bf00      	nop
        for (uint8_t i = 0; i < NUMBER_OF_ENCODER; ++i)
 8001272:	79fb      	ldrb	r3, [r7, #7]
 8001274:	3301      	adds	r3, #1
 8001276:	71fb      	strb	r3, [r7, #7]
 8001278:	79fb      	ldrb	r3, [r7, #7]
 800127a:	2b03      	cmp	r3, #3
 800127c:	d9bc      	bls.n	80011f8 <scanEncoder+0xc>
            }
            }
        }
    }
 800127e:	bf00      	nop
 8001280:	bf00      	nop
 8001282:	3708      	adds	r7, #8
 8001284:	46bd      	mov	sp, r7
 8001286:	bd80      	pop	{r7, pc}
 8001288:	2000000c 	.word	0x2000000c
 800128c:	2000001c 	.word	0x2000001c
 8001290:	200000e0 	.word	0x200000e0
 8001294:	200000d0 	.word	0x200000d0

08001298 <getPulseCount>:

    uint32_t getPulseCount(const enum Encoder encoder_id)
    {
 8001298:	b480      	push	{r7}
 800129a:	b083      	sub	sp, #12
 800129c:	af00      	add	r7, sp, #0
 800129e:	4603      	mov	r3, r0
 80012a0:	71fb      	strb	r3, [r7, #7]
        return encoder_pulse_count[encoder_id];
 80012a2:	79fb      	ldrb	r3, [r7, #7]
 80012a4:	4a03      	ldr	r2, [pc, #12]	@ (80012b4 <getPulseCount+0x1c>)
 80012a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    }
 80012aa:	4618      	mov	r0, r3
 80012ac:	370c      	adds	r7, #12
 80012ae:	46bd      	mov	sp, r7
 80012b0:	bc80      	pop	{r7}
 80012b2:	4770      	bx	lr
 80012b4:	200000d0 	.word	0x200000d0

080012b8 <getDeltaEncoder>:

    uint32_t getDeltaEncoder(const enum Encoder encoder_id)
    {
 80012b8:	b480      	push	{r7}
 80012ba:	b085      	sub	sp, #20
 80012bc:	af00      	add	r7, sp, #0
 80012be:	4603      	mov	r3, r0
 80012c0:	71fb      	strb	r3, [r7, #7]
        static uint32_t prev_encoder_pulse_count[NUMBER_OF_ENCODER] = {0};

        uint32_t delta_encoder = encoder_pulse_count[encoder_id] - prev_encoder_pulse_count[encoder_id];
 80012c2:	79fb      	ldrb	r3, [r7, #7]
 80012c4:	4a0b      	ldr	r2, [pc, #44]	@ (80012f4 <getDeltaEncoder+0x3c>)
 80012c6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80012ca:	79fb      	ldrb	r3, [r7, #7]
 80012cc:	490a      	ldr	r1, [pc, #40]	@ (80012f8 <getDeltaEncoder+0x40>)
 80012ce:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80012d2:	1ad3      	subs	r3, r2, r3
 80012d4:	60fb      	str	r3, [r7, #12]

        prev_encoder_pulse_count[encoder_id] = encoder_pulse_count[encoder_id];
 80012d6:	79fa      	ldrb	r2, [r7, #7]
 80012d8:	79fb      	ldrb	r3, [r7, #7]
 80012da:	4906      	ldr	r1, [pc, #24]	@ (80012f4 <getDeltaEncoder+0x3c>)
 80012dc:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80012e0:	4905      	ldr	r1, [pc, #20]	@ (80012f8 <getDeltaEncoder+0x40>)
 80012e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        return delta_encoder;
 80012e6:	68fb      	ldr	r3, [r7, #12]
    }
 80012e8:	4618      	mov	r0, r3
 80012ea:	3714      	adds	r7, #20
 80012ec:	46bd      	mov	sp, r7
 80012ee:	bc80      	pop	{r7}
 80012f0:	4770      	bx	lr
 80012f2:	bf00      	nop
 80012f4:	200000d0 	.word	0x200000d0
 80012f8:	200000e4 	.word	0x200000e4

080012fc <initGamepad>:
     * @brief check if module bluetooth receiver is working
     * @retval STATUS_ERROR if initializing connection fail
     * @retval STATUS_OK if connecting successfully
     */
    enum StatusCode initGamepad()
    {
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b082      	sub	sp, #8
 8001300:	af00      	add	r7, sp, #0
        for (uint8_t attempt = 0; attempt < MAX_RETRY_COUNT; ++attempt)
 8001302:	2300      	movs	r3, #0
 8001304:	71fb      	strb	r3, [r7, #7]
 8001306:	e010      	b.n	800132a <initGamepad+0x2e>
        {
            if (HAL_I2C_IsDeviceReady(&hi2c2, GAMEPAD_I2C_ADDRESS, 3, 50) == HAL_OK)
 8001308:	2332      	movs	r3, #50	@ 0x32
 800130a:	2203      	movs	r2, #3
 800130c:	21aa      	movs	r1, #170	@ 0xaa
 800130e:	480b      	ldr	r0, [pc, #44]	@ (800133c <initGamepad+0x40>)
 8001310:	f004 ff58 	bl	80061c4 <HAL_I2C_IsDeviceReady>
 8001314:	4603      	mov	r3, r0
 8001316:	2b00      	cmp	r3, #0
 8001318:	d101      	bne.n	800131e <initGamepad+0x22>
            {
                return STATUS_OK;
 800131a:	2301      	movs	r3, #1
 800131c:	e009      	b.n	8001332 <initGamepad+0x36>
            }

            HAL_Delay(50);
 800131e:	2032      	movs	r0, #50	@ 0x32
 8001320:	f003 f830 	bl	8004384 <HAL_Delay>
        for (uint8_t attempt = 0; attempt < MAX_RETRY_COUNT; ++attempt)
 8001324:	79fb      	ldrb	r3, [r7, #7]
 8001326:	3301      	adds	r3, #1
 8001328:	71fb      	strb	r3, [r7, #7]
 800132a:	79fb      	ldrb	r3, [r7, #7]
 800132c:	2b02      	cmp	r3, #2
 800132e:	d9eb      	bls.n	8001308 <initGamepad+0xc>
        }
        return STATUS_ERROR;
 8001330:	2300      	movs	r3, #0
    }
 8001332:	4618      	mov	r0, r3
 8001334:	3708      	adds	r7, #8
 8001336:	46bd      	mov	sp, r7
 8001338:	bd80      	pop	{r7, pc}
 800133a:	bf00      	nop
 800133c:	20000114 	.word	0x20000114

08001340 <readGamepadData>:
     * @brief Read gamepad data
     * @retval STATUS_OK or STATUS_ERROR
     * @note This function is intergrated into get info function, you dont have to use it
     */
    enum StatusCode readGamepadData()
    {
 8001340:	b580      	push	{r7, lr}
 8001342:	b082      	sub	sp, #8
 8001344:	af02      	add	r7, sp, #8
        if (HAL_I2C_Master_Receive(&hi2c2, GAMEPAD_I2C_ADDRESS, gamepad_data, GAMEPAD_DATA_LEN, HAL_MAX_DELAY) == HAL_OK)
 8001346:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800134a:	9300      	str	r3, [sp, #0]
 800134c:	231e      	movs	r3, #30
 800134e:	4a07      	ldr	r2, [pc, #28]	@ (800136c <readGamepadData+0x2c>)
 8001350:	21aa      	movs	r1, #170	@ 0xaa
 8001352:	4807      	ldr	r0, [pc, #28]	@ (8001370 <readGamepadData+0x30>)
 8001354:	f004 fcca 	bl	8005cec <HAL_I2C_Master_Receive>
 8001358:	4603      	mov	r3, r0
 800135a:	2b00      	cmp	r3, #0
 800135c:	d101      	bne.n	8001362 <readGamepadData+0x22>
        {
            return STATUS_OK;
 800135e:	2301      	movs	r3, #1
 8001360:	e000      	b.n	8001364 <readGamepadData+0x24>
        }
        else
        {
            return STATUS_ERROR;
 8001362:	2300      	movs	r3, #0
        }
    }
 8001364:	4618      	mov	r0, r3
 8001366:	46bd      	mov	sp, r7
 8001368:	bd80      	pop	{r7, pc}
 800136a:	bf00      	nop
 800136c:	200000f4 	.word	0x200000f4
 8001370:	20000114 	.word	0x20000114

08001374 <isGamepadButtonPressed>:
     * @param gamepad_button_id type GamepadButtons. indicate button you want to know whether it's pressed or not
     * @retval 0 if it's NOT pressed
     * @retval 1 if it IS pressed
     */
    uint8_t isGamepadButtonPressed(enum GamepadButtons gamepad_button_id)
    {
 8001374:	b480      	push	{r7}
 8001376:	b083      	sub	sp, #12
 8001378:	af00      	add	r7, sp, #0
 800137a:	4603      	mov	r3, r0
 800137c:	71fb      	strb	r3, [r7, #7]
        switch (gamepad_button_id)
 800137e:	79fb      	ldrb	r3, [r7, #7]
 8001380:	2b0e      	cmp	r3, #14
 8001382:	f200 8099 	bhi.w	80014b8 <isGamepadButtonPressed+0x144>
 8001386:	a201      	add	r2, pc, #4	@ (adr r2, 800138c <isGamepadButtonPressed+0x18>)
 8001388:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800138c:	080013c9 	.word	0x080013c9
 8001390:	080013d9 	.word	0x080013d9
 8001394:	080013e9 	.word	0x080013e9
 8001398:	080013f9 	.word	0x080013f9
 800139c:	08001409 	.word	0x08001409
 80013a0:	08001419 	.word	0x08001419
 80013a4:	08001429 	.word	0x08001429
 80013a8:	08001439 	.word	0x08001439
 80013ac:	08001449 	.word	0x08001449
 80013b0:	08001459 	.word	0x08001459
 80013b4:	08001469 	.word	0x08001469
 80013b8:	08001479 	.word	0x08001479
 80013bc:	08001499 	.word	0x08001499
 80013c0:	080014a9 	.word	0x080014a9
 80013c4:	08001489 	.word	0x08001489
        {
        case BUTTON_UP:
        {
            return (gamepad_data[1] == 0x01);
 80013c8:	4b3e      	ldr	r3, [pc, #248]	@ (80014c4 <isGamepadButtonPressed+0x150>)
 80013ca:	785b      	ldrb	r3, [r3, #1]
 80013cc:	2b01      	cmp	r3, #1
 80013ce:	bf0c      	ite	eq
 80013d0:	2301      	moveq	r3, #1
 80013d2:	2300      	movne	r3, #0
 80013d4:	b2db      	uxtb	r3, r3
 80013d6:	e070      	b.n	80014ba <isGamepadButtonPressed+0x146>
            break;
        }
        case BUTTON_DOWN:
        {
            return (gamepad_data[1] == 0x02);
 80013d8:	4b3a      	ldr	r3, [pc, #232]	@ (80014c4 <isGamepadButtonPressed+0x150>)
 80013da:	785b      	ldrb	r3, [r3, #1]
 80013dc:	2b02      	cmp	r3, #2
 80013de:	bf0c      	ite	eq
 80013e0:	2301      	moveq	r3, #1
 80013e2:	2300      	movne	r3, #0
 80013e4:	b2db      	uxtb	r3, r3
 80013e6:	e068      	b.n	80014ba <isGamepadButtonPressed+0x146>
            break;
        }
        case BUTTON_RIGHT:
        {
            return (gamepad_data[1] == 0x04);
 80013e8:	4b36      	ldr	r3, [pc, #216]	@ (80014c4 <isGamepadButtonPressed+0x150>)
 80013ea:	785b      	ldrb	r3, [r3, #1]
 80013ec:	2b04      	cmp	r3, #4
 80013ee:	bf0c      	ite	eq
 80013f0:	2301      	moveq	r3, #1
 80013f2:	2300      	movne	r3, #0
 80013f4:	b2db      	uxtb	r3, r3
 80013f6:	e060      	b.n	80014ba <isGamepadButtonPressed+0x146>
            break;
        }
        case BUTTON_LEFT:
        {
            return (gamepad_data[1] == 0x08);
 80013f8:	4b32      	ldr	r3, [pc, #200]	@ (80014c4 <isGamepadButtonPressed+0x150>)
 80013fa:	785b      	ldrb	r3, [r3, #1]
 80013fc:	2b08      	cmp	r3, #8
 80013fe:	bf0c      	ite	eq
 8001400:	2301      	moveq	r3, #1
 8001402:	2300      	movne	r3, #0
 8001404:	b2db      	uxtb	r3, r3
 8001406:	e058      	b.n	80014ba <isGamepadButtonPressed+0x146>
            break;
        }

        case BUTTON_CROSS:
        {
            return (gamepad_data[27] == 0x01);
 8001408:	4b2e      	ldr	r3, [pc, #184]	@ (80014c4 <isGamepadButtonPressed+0x150>)
 800140a:	7edb      	ldrb	r3, [r3, #27]
 800140c:	2b01      	cmp	r3, #1
 800140e:	bf0c      	ite	eq
 8001410:	2301      	moveq	r3, #1
 8001412:	2300      	movne	r3, #0
 8001414:	b2db      	uxtb	r3, r3
 8001416:	e050      	b.n	80014ba <isGamepadButtonPressed+0x146>
            break;
        }
        case BUTTON_CIRCLE:
        {
            return (gamepad_data[27] == 0x02);
 8001418:	4b2a      	ldr	r3, [pc, #168]	@ (80014c4 <isGamepadButtonPressed+0x150>)
 800141a:	7edb      	ldrb	r3, [r3, #27]
 800141c:	2b02      	cmp	r3, #2
 800141e:	bf0c      	ite	eq
 8001420:	2301      	moveq	r3, #1
 8001422:	2300      	movne	r3, #0
 8001424:	b2db      	uxtb	r3, r3
 8001426:	e048      	b.n	80014ba <isGamepadButtonPressed+0x146>
            break;
        }
        case BUTTON_SQUARE:
        {
            return (gamepad_data[27] == 0x04);
 8001428:	4b26      	ldr	r3, [pc, #152]	@ (80014c4 <isGamepadButtonPressed+0x150>)
 800142a:	7edb      	ldrb	r3, [r3, #27]
 800142c:	2b04      	cmp	r3, #4
 800142e:	bf0c      	ite	eq
 8001430:	2301      	moveq	r3, #1
 8001432:	2300      	movne	r3, #0
 8001434:	b2db      	uxtb	r3, r3
 8001436:	e040      	b.n	80014ba <isGamepadButtonPressed+0x146>
            break;
        }
        case BUTTON_TRIANGLE:
        {
            return (gamepad_data[27] == 0x08);
 8001438:	4b22      	ldr	r3, [pc, #136]	@ (80014c4 <isGamepadButtonPressed+0x150>)
 800143a:	7edb      	ldrb	r3, [r3, #27]
 800143c:	2b08      	cmp	r3, #8
 800143e:	bf0c      	ite	eq
 8001440:	2301      	moveq	r3, #1
 8001442:	2300      	movne	r3, #0
 8001444:	b2db      	uxtb	r3, r3
 8001446:	e038      	b.n	80014ba <isGamepadButtonPressed+0x146>
            break;
        }

        case BUTTON_L1:
        {
            return (gamepad_data[27] == 0x10);
 8001448:	4b1e      	ldr	r3, [pc, #120]	@ (80014c4 <isGamepadButtonPressed+0x150>)
 800144a:	7edb      	ldrb	r3, [r3, #27]
 800144c:	2b10      	cmp	r3, #16
 800144e:	bf0c      	ite	eq
 8001450:	2301      	moveq	r3, #1
 8001452:	2300      	movne	r3, #0
 8001454:	b2db      	uxtb	r3, r3
 8001456:	e030      	b.n	80014ba <isGamepadButtonPressed+0x146>
            break;
        }
        case BUTTON_L2:
        {
            return (gamepad_data[27] == 0x40);
 8001458:	4b1a      	ldr	r3, [pc, #104]	@ (80014c4 <isGamepadButtonPressed+0x150>)
 800145a:	7edb      	ldrb	r3, [r3, #27]
 800145c:	2b40      	cmp	r3, #64	@ 0x40
 800145e:	bf0c      	ite	eq
 8001460:	2301      	moveq	r3, #1
 8001462:	2300      	movne	r3, #0
 8001464:	b2db      	uxtb	r3, r3
 8001466:	e028      	b.n	80014ba <isGamepadButtonPressed+0x146>
            break;
        }

        case BUTTON_R1:
        {
            return (gamepad_data[27] == 0x20);
 8001468:	4b16      	ldr	r3, [pc, #88]	@ (80014c4 <isGamepadButtonPressed+0x150>)
 800146a:	7edb      	ldrb	r3, [r3, #27]
 800146c:	2b20      	cmp	r3, #32
 800146e:	bf0c      	ite	eq
 8001470:	2301      	moveq	r3, #1
 8001472:	2300      	movne	r3, #0
 8001474:	b2db      	uxtb	r3, r3
 8001476:	e020      	b.n	80014ba <isGamepadButtonPressed+0x146>
            break;
        }
        case BUTTON_R2:
        {
            return (gamepad_data[27] == 0x80);
 8001478:	4b12      	ldr	r3, [pc, #72]	@ (80014c4 <isGamepadButtonPressed+0x150>)
 800147a:	7edb      	ldrb	r3, [r3, #27]
 800147c:	2b80      	cmp	r3, #128	@ 0x80
 800147e:	bf0c      	ite	eq
 8001480:	2301      	moveq	r3, #1
 8001482:	2300      	movne	r3, #0
 8001484:	b2db      	uxtb	r3, r3
 8001486:	e018      	b.n	80014ba <isGamepadButtonPressed+0x146>
            break;
        }

        case BUTTON_MAIN:
        {
            return (gamepad_data[29] == 0x01);
 8001488:	4b0e      	ldr	r3, [pc, #56]	@ (80014c4 <isGamepadButtonPressed+0x150>)
 800148a:	7f5b      	ldrb	r3, [r3, #29]
 800148c:	2b01      	cmp	r3, #1
 800148e:	bf0c      	ite	eq
 8001490:	2301      	moveq	r3, #1
 8001492:	2300      	movne	r3, #0
 8001494:	b2db      	uxtb	r3, r3
 8001496:	e010      	b.n	80014ba <isGamepadButtonPressed+0x146>
            break;
        }
        case BUTTON_SHARE:
        {
            return (gamepad_data[29] == 0x02);
 8001498:	4b0a      	ldr	r3, [pc, #40]	@ (80014c4 <isGamepadButtonPressed+0x150>)
 800149a:	7f5b      	ldrb	r3, [r3, #29]
 800149c:	2b02      	cmp	r3, #2
 800149e:	bf0c      	ite	eq
 80014a0:	2301      	moveq	r3, #1
 80014a2:	2300      	movne	r3, #0
 80014a4:	b2db      	uxtb	r3, r3
 80014a6:	e008      	b.n	80014ba <isGamepadButtonPressed+0x146>
            break;
        }
        case BUTTON_OPTIONS:
        {
            return (gamepad_data[29] == 0x04);
 80014a8:	4b06      	ldr	r3, [pc, #24]	@ (80014c4 <isGamepadButtonPressed+0x150>)
 80014aa:	7f5b      	ldrb	r3, [r3, #29]
 80014ac:	2b04      	cmp	r3, #4
 80014ae:	bf0c      	ite	eq
 80014b0:	2301      	moveq	r3, #1
 80014b2:	2300      	movne	r3, #0
 80014b4:	b2db      	uxtb	r3, r3
 80014b6:	e000      	b.n	80014ba <isGamepadButtonPressed+0x146>
            break;
        }

        default:
        {
            return 0;
 80014b8:	2300      	movs	r3, #0
            break;
        }
        }
    }
 80014ba:	4618      	mov	r0, r3
 80014bc:	370c      	adds	r7, #12
 80014be:	46bd      	mov	sp, r7
 80014c0:	bc80      	pop	{r7}
 80014c2:	4770      	bx	lr
 80014c4:	200000f4 	.word	0x200000f4

080014c8 <getGamepadData>:
    /**
     * @note This function should be used for debugging only.
     * @return An 8 bits array signal from reciver module
     */
    const uint8_t *getGamepadData()
    {
 80014c8:	b480      	push	{r7}
 80014ca:	af00      	add	r7, sp, #0
        return gamepad_data;
 80014cc:	4b02      	ldr	r3, [pc, #8]	@ (80014d8 <getGamepadData+0x10>)
    }
 80014ce:	4618      	mov	r0, r3
 80014d0:	46bd      	mov	sp, r7
 80014d2:	bc80      	pop	{r7}
 80014d4:	4770      	bx	lr
 80014d6:	bf00      	nop
 80014d8:	200000f4 	.word	0x200000f4

080014dc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	b088      	sub	sp, #32
 80014e0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014e2:	f107 0310 	add.w	r3, r7, #16
 80014e6:	2200      	movs	r2, #0
 80014e8:	601a      	str	r2, [r3, #0]
 80014ea:	605a      	str	r2, [r3, #4]
 80014ec:	609a      	str	r2, [r3, #8]
 80014ee:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80014f0:	4b4b      	ldr	r3, [pc, #300]	@ (8001620 <MX_GPIO_Init+0x144>)
 80014f2:	699b      	ldr	r3, [r3, #24]
 80014f4:	4a4a      	ldr	r2, [pc, #296]	@ (8001620 <MX_GPIO_Init+0x144>)
 80014f6:	f043 0310 	orr.w	r3, r3, #16
 80014fa:	6193      	str	r3, [r2, #24]
 80014fc:	4b48      	ldr	r3, [pc, #288]	@ (8001620 <MX_GPIO_Init+0x144>)
 80014fe:	699b      	ldr	r3, [r3, #24]
 8001500:	f003 0310 	and.w	r3, r3, #16
 8001504:	60fb      	str	r3, [r7, #12]
 8001506:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001508:	4b45      	ldr	r3, [pc, #276]	@ (8001620 <MX_GPIO_Init+0x144>)
 800150a:	699b      	ldr	r3, [r3, #24]
 800150c:	4a44      	ldr	r2, [pc, #272]	@ (8001620 <MX_GPIO_Init+0x144>)
 800150e:	f043 0320 	orr.w	r3, r3, #32
 8001512:	6193      	str	r3, [r2, #24]
 8001514:	4b42      	ldr	r3, [pc, #264]	@ (8001620 <MX_GPIO_Init+0x144>)
 8001516:	699b      	ldr	r3, [r3, #24]
 8001518:	f003 0320 	and.w	r3, r3, #32
 800151c:	60bb      	str	r3, [r7, #8]
 800151e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001520:	4b3f      	ldr	r3, [pc, #252]	@ (8001620 <MX_GPIO_Init+0x144>)
 8001522:	699b      	ldr	r3, [r3, #24]
 8001524:	4a3e      	ldr	r2, [pc, #248]	@ (8001620 <MX_GPIO_Init+0x144>)
 8001526:	f043 0304 	orr.w	r3, r3, #4
 800152a:	6193      	str	r3, [r2, #24]
 800152c:	4b3c      	ldr	r3, [pc, #240]	@ (8001620 <MX_GPIO_Init+0x144>)
 800152e:	699b      	ldr	r3, [r3, #24]
 8001530:	f003 0304 	and.w	r3, r3, #4
 8001534:	607b      	str	r3, [r7, #4]
 8001536:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001538:	4b39      	ldr	r3, [pc, #228]	@ (8001620 <MX_GPIO_Init+0x144>)
 800153a:	699b      	ldr	r3, [r3, #24]
 800153c:	4a38      	ldr	r2, [pc, #224]	@ (8001620 <MX_GPIO_Init+0x144>)
 800153e:	f043 0308 	orr.w	r3, r3, #8
 8001542:	6193      	str	r3, [r2, #24]
 8001544:	4b36      	ldr	r3, [pc, #216]	@ (8001620 <MX_GPIO_Init+0x144>)
 8001546:	699b      	ldr	r3, [r3, #24]
 8001548:	f003 0308 	and.w	r3, r3, #8
 800154c:	603b      	str	r3, [r7, #0]
 800154e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, M1_DIR_Pin|M2_DIR_Pin|LED_DEBUG_Pin|LED_LATCH_Pin, GPIO_PIN_RESET);
 8001550:	2200      	movs	r2, #0
 8001552:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 8001556:	4833      	ldr	r0, [pc, #204]	@ (8001624 <MX_GPIO_Init+0x148>)
 8001558:	f004 fa53 	bl	8005a02 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, M4_DIR_Pin|LED_EN_Pin|LED7_EN2_Pin|LED7_EN1_Pin
 800155c:	2200      	movs	r2, #0
 800155e:	f649 1102 	movw	r1, #39170	@ 0x9902
 8001562:	4831      	ldr	r0, [pc, #196]	@ (8001628 <MX_GPIO_Init+0x14c>)
 8001564:	f004 fa4d 	bl	8005a02 <HAL_GPIO_WritePin>
                          |INPUT_LOAD_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, M3_DIR_Pin|SM_DIR_Pin, GPIO_PIN_RESET);
 8001568:	2200      	movs	r2, #0
 800156a:	2124      	movs	r1, #36	@ 0x24
 800156c:	482f      	ldr	r0, [pc, #188]	@ (800162c <MX_GPIO_Init+0x150>)
 800156e:	f004 fa48 	bl	8005a02 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : M1_DIR_Pin M2_DIR_Pin LED_DEBUG_Pin LED_LATCH_Pin */
  GPIO_InitStruct.Pin = M1_DIR_Pin|M2_DIR_Pin|LED_DEBUG_Pin|LED_LATCH_Pin;
 8001572:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 8001576:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001578:	2301      	movs	r3, #1
 800157a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800157c:	2300      	movs	r3, #0
 800157e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001580:	2302      	movs	r3, #2
 8001582:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001584:	f107 0310 	add.w	r3, r7, #16
 8001588:	4619      	mov	r1, r3
 800158a:	4826      	ldr	r0, [pc, #152]	@ (8001624 <MX_GPIO_Init+0x148>)
 800158c:	f004 f88e 	bl	80056ac <HAL_GPIO_Init>

  /*Configure GPIO pins : M4_DIR_Pin LED_EN_Pin LED7_EN2_Pin LED7_EN1_Pin
                           INPUT_LOAD_Pin */
  GPIO_InitStruct.Pin = M4_DIR_Pin|LED_EN_Pin|LED7_EN2_Pin|LED7_EN1_Pin
 8001590:	f649 1302 	movw	r3, #39170	@ 0x9902
 8001594:	613b      	str	r3, [r7, #16]
                          |INPUT_LOAD_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001596:	2301      	movs	r3, #1
 8001598:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800159a:	2300      	movs	r3, #0
 800159c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800159e:	2302      	movs	r3, #2
 80015a0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015a2:	f107 0310 	add.w	r3, r7, #16
 80015a6:	4619      	mov	r1, r3
 80015a8:	481f      	ldr	r0, [pc, #124]	@ (8001628 <MX_GPIO_Init+0x14c>)
 80015aa:	f004 f87f 	bl	80056ac <HAL_GPIO_Init>

  /*Configure GPIO pins : M3_DIR_Pin SM_DIR_Pin */
  GPIO_InitStruct.Pin = M3_DIR_Pin|SM_DIR_Pin;
 80015ae:	2324      	movs	r3, #36	@ 0x24
 80015b0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015b2:	2301      	movs	r3, #1
 80015b4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015b6:	2300      	movs	r3, #0
 80015b8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015ba:	2302      	movs	r3, #2
 80015bc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015be:	f107 0310 	add.w	r3, r7, #16
 80015c2:	4619      	mov	r1, r3
 80015c4:	4819      	ldr	r0, [pc, #100]	@ (800162c <MX_GPIO_Init+0x150>)
 80015c6:	f004 f871 	bl	80056ac <HAL_GPIO_Init>

  /*Configure GPIO pins : ENCODER3_B_Pin ENCODER3_A_Pin ENCODER4_B_Pin ENCODER4_A_Pin
                           SM_FAULT_Pin ENCODER1_A_Pin */
  GPIO_InitStruct.Pin = ENCODER3_B_Pin|ENCODER3_A_Pin|ENCODER4_B_Pin|ENCODER4_A_Pin
 80015ca:	f24f 2308 	movw	r3, #61960	@ 0xf208
 80015ce:	613b      	str	r3, [r7, #16]
                          |SM_FAULT_Pin|ENCODER1_A_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015d0:	2300      	movs	r3, #0
 80015d2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015d4:	2300      	movs	r3, #0
 80015d6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015d8:	f107 0310 	add.w	r3, r7, #16
 80015dc:	4619      	mov	r1, r3
 80015de:	4813      	ldr	r0, [pc, #76]	@ (800162c <MX_GPIO_Init+0x150>)
 80015e0:	f004 f864 	bl	80056ac <HAL_GPIO_Init>

  /*Configure GPIO pins : ENCODER2_A_Pin ENCODER2_B_Pin */
  GPIO_InitStruct.Pin = ENCODER2_A_Pin|ENCODER2_B_Pin;
 80015e4:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80015e8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015ea:	2300      	movs	r3, #0
 80015ec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ee:	2300      	movs	r3, #0
 80015f0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015f2:	f107 0310 	add.w	r3, r7, #16
 80015f6:	4619      	mov	r1, r3
 80015f8:	480a      	ldr	r0, [pc, #40]	@ (8001624 <MX_GPIO_Init+0x148>)
 80015fa:	f004 f857 	bl	80056ac <HAL_GPIO_Init>

  /*Configure GPIO pin : ENCODER1_B_Pin */
  GPIO_InitStruct.Pin = ENCODER1_B_Pin;
 80015fe:	2304      	movs	r3, #4
 8001600:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001602:	2300      	movs	r3, #0
 8001604:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001606:	2300      	movs	r3, #0
 8001608:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(ENCODER1_B_GPIO_Port, &GPIO_InitStruct);
 800160a:	f107 0310 	add.w	r3, r7, #16
 800160e:	4619      	mov	r1, r3
 8001610:	4807      	ldr	r0, [pc, #28]	@ (8001630 <MX_GPIO_Init+0x154>)
 8001612:	f004 f84b 	bl	80056ac <HAL_GPIO_Init>

}
 8001616:	bf00      	nop
 8001618:	3720      	adds	r7, #32
 800161a:	46bd      	mov	sp, r7
 800161c:	bd80      	pop	{r7, pc}
 800161e:	bf00      	nop
 8001620:	40021000 	.word	0x40021000
 8001624:	40011000 	.word	0x40011000
 8001628:	40010800 	.word	0x40010800
 800162c:	40010c00 	.word	0x40010c00
 8001630:	40011400 	.word	0x40011400

08001634 <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001638:	4b12      	ldr	r3, [pc, #72]	@ (8001684 <MX_I2C2_Init+0x50>)
 800163a:	4a13      	ldr	r2, [pc, #76]	@ (8001688 <MX_I2C2_Init+0x54>)
 800163c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 800163e:	4b11      	ldr	r3, [pc, #68]	@ (8001684 <MX_I2C2_Init+0x50>)
 8001640:	4a12      	ldr	r2, [pc, #72]	@ (800168c <MX_I2C2_Init+0x58>)
 8001642:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001644:	4b0f      	ldr	r3, [pc, #60]	@ (8001684 <MX_I2C2_Init+0x50>)
 8001646:	2200      	movs	r2, #0
 8001648:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 800164a:	4b0e      	ldr	r3, [pc, #56]	@ (8001684 <MX_I2C2_Init+0x50>)
 800164c:	2200      	movs	r2, #0
 800164e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001650:	4b0c      	ldr	r3, [pc, #48]	@ (8001684 <MX_I2C2_Init+0x50>)
 8001652:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001656:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001658:	4b0a      	ldr	r3, [pc, #40]	@ (8001684 <MX_I2C2_Init+0x50>)
 800165a:	2200      	movs	r2, #0
 800165c:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 800165e:	4b09      	ldr	r3, [pc, #36]	@ (8001684 <MX_I2C2_Init+0x50>)
 8001660:	2200      	movs	r2, #0
 8001662:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001664:	4b07      	ldr	r3, [pc, #28]	@ (8001684 <MX_I2C2_Init+0x50>)
 8001666:	2200      	movs	r2, #0
 8001668:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800166a:	4b06      	ldr	r3, [pc, #24]	@ (8001684 <MX_I2C2_Init+0x50>)
 800166c:	2200      	movs	r2, #0
 800166e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001670:	4804      	ldr	r0, [pc, #16]	@ (8001684 <MX_I2C2_Init+0x50>)
 8001672:	f004 f9f7 	bl	8005a64 <HAL_I2C_Init>
 8001676:	4603      	mov	r3, r0
 8001678:	2b00      	cmp	r3, #0
 800167a:	d001      	beq.n	8001680 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 800167c:	f000 fa5b 	bl	8001b36 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001680:	bf00      	nop
 8001682:	bd80      	pop	{r7, pc}
 8001684:	20000114 	.word	0x20000114
 8001688:	40005800 	.word	0x40005800
 800168c:	000186a0 	.word	0x000186a0

08001690 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	b088      	sub	sp, #32
 8001694:	af00      	add	r7, sp, #0
 8001696:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001698:	f107 0310 	add.w	r3, r7, #16
 800169c:	2200      	movs	r2, #0
 800169e:	601a      	str	r2, [r3, #0]
 80016a0:	605a      	str	r2, [r3, #4]
 80016a2:	609a      	str	r2, [r3, #8]
 80016a4:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C2)
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	4a16      	ldr	r2, [pc, #88]	@ (8001704 <HAL_I2C_MspInit+0x74>)
 80016ac:	4293      	cmp	r3, r2
 80016ae:	d124      	bne.n	80016fa <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016b0:	4b15      	ldr	r3, [pc, #84]	@ (8001708 <HAL_I2C_MspInit+0x78>)
 80016b2:	699b      	ldr	r3, [r3, #24]
 80016b4:	4a14      	ldr	r2, [pc, #80]	@ (8001708 <HAL_I2C_MspInit+0x78>)
 80016b6:	f043 0308 	orr.w	r3, r3, #8
 80016ba:	6193      	str	r3, [r2, #24]
 80016bc:	4b12      	ldr	r3, [pc, #72]	@ (8001708 <HAL_I2C_MspInit+0x78>)
 80016be:	699b      	ldr	r3, [r3, #24]
 80016c0:	f003 0308 	and.w	r3, r3, #8
 80016c4:	60fb      	str	r3, [r7, #12]
 80016c6:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80016c8:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80016cc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80016ce:	2312      	movs	r3, #18
 80016d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80016d2:	2303      	movs	r3, #3
 80016d4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016d6:	f107 0310 	add.w	r3, r7, #16
 80016da:	4619      	mov	r1, r3
 80016dc:	480b      	ldr	r0, [pc, #44]	@ (800170c <HAL_I2C_MspInit+0x7c>)
 80016de:	f003 ffe5 	bl	80056ac <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80016e2:	4b09      	ldr	r3, [pc, #36]	@ (8001708 <HAL_I2C_MspInit+0x78>)
 80016e4:	69db      	ldr	r3, [r3, #28]
 80016e6:	4a08      	ldr	r2, [pc, #32]	@ (8001708 <HAL_I2C_MspInit+0x78>)
 80016e8:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80016ec:	61d3      	str	r3, [r2, #28]
 80016ee:	4b06      	ldr	r3, [pc, #24]	@ (8001708 <HAL_I2C_MspInit+0x78>)
 80016f0:	69db      	ldr	r3, [r3, #28]
 80016f2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80016f6:	60bb      	str	r3, [r7, #8]
 80016f8:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 80016fa:	bf00      	nop
 80016fc:	3720      	adds	r7, #32
 80016fe:	46bd      	mov	sp, r7
 8001700:	bd80      	pop	{r7, pc}
 8001702:	bf00      	nop
 8001704:	40005800 	.word	0x40005800
 8001708:	40021000 	.word	0x40021000
 800170c:	40010c00 	.word	0x40010c00

08001710 <calibSensor>:
	 * @brief Sensor calibration function
	 * @note This function should be called once to calibrate the sensors
	 * @note This function should be called when the sensors are in black square
	 */
	enum StatusCode calibSensor()
	{
 8001710:	b580      	push	{r7, lr}
 8001712:	b082      	sub	sp, #8
 8001714:	af00      	add	r7, sp, #0
		for (uint8_t attempt = 0; attempt < MAX_RETRY_COUNT; ++attempt)
 8001716:	2300      	movs	r3, #0
 8001718:	71fb      	strb	r3, [r7, #7]
 800171a:	e00f      	b.n	800173c <calibSensor+0x2c>
		{
			if (HAL_ADC_Start_DMA(&hadc1, (void *)sensor_calib, 8) == HAL_OK)
 800171c:	2208      	movs	r2, #8
 800171e:	490b      	ldr	r1, [pc, #44]	@ (800174c <calibSensor+0x3c>)
 8001720:	480b      	ldr	r0, [pc, #44]	@ (8001750 <calibSensor+0x40>)
 8001722:	f002 ff3d 	bl	80045a0 <HAL_ADC_Start_DMA>
 8001726:	4603      	mov	r3, r0
 8001728:	2b00      	cmp	r3, #0
 800172a:	d101      	bne.n	8001730 <calibSensor+0x20>
			{
				return STATUS_OK;
 800172c:	2301      	movs	r3, #1
 800172e:	e009      	b.n	8001744 <calibSensor+0x34>
			}
			HAL_Delay(50);
 8001730:	2032      	movs	r0, #50	@ 0x32
 8001732:	f002 fe27 	bl	8004384 <HAL_Delay>
		for (uint8_t attempt = 0; attempt < MAX_RETRY_COUNT; ++attempt)
 8001736:	79fb      	ldrb	r3, [r7, #7]
 8001738:	3301      	adds	r3, #1
 800173a:	71fb      	strb	r3, [r7, #7]
 800173c:	79fb      	ldrb	r3, [r7, #7]
 800173e:	2b02      	cmp	r3, #2
 8001740:	d9ec      	bls.n	800171c <calibSensor+0xc>
		}
		return STATUS_ERROR;
 8001742:	2300      	movs	r3, #0
	}
 8001744:	4618      	mov	r0, r3
 8001746:	3708      	adds	r7, #8
 8001748:	46bd      	mov	sp, r7
 800174a:	bd80      	pop	{r7, pc}
 800174c:	20000168 	.word	0x20000168
 8001750:	2000004c 	.word	0x2000004c

08001754 <sensorScan>:

	void sensorScan()
	{
 8001754:	b580      	push	{r7, lr}
 8001756:	b082      	sub	sp, #8
 8001758:	af00      	add	r7, sp, #0
		HAL_ADC_Start_DMA(&hadc1, (void *)sensor_buffer, 8); // ADC conversion to sensor_buffer
 800175a:	2208      	movs	r2, #8
 800175c:	499c      	ldr	r1, [pc, #624]	@ (80019d0 <sensorScan+0x27c>)
 800175e:	489d      	ldr	r0, [pc, #628]	@ (80019d4 <sensorScan+0x280>)
 8001760:	f002 ff1e 	bl	80045a0 <HAL_ADC_Start_DMA>

		sensor_states = 0b00000000; // clear the sensor_states variable
 8001764:	4b9c      	ldr	r3, [pc, #624]	@ (80019d8 <sensorScan+0x284>)
 8001766:	2200      	movs	r2, #0
 8001768:	701a      	strb	r2, [r3, #0]

		for (int i = 0; i < 8; i++)
 800176a:	2300      	movs	r3, #0
 800176c:	607b      	str	r3, [r7, #4]
 800176e:	e02a      	b.n	80017c6 <sensorScan+0x72>
		{
			// Check if the sensor value is out of threshold
			if ((sensor_buffer[i] < (sensor_calib[i] - BW_THRESHOLD)) || (sensor_buffer[i] > (sensor_calib[i] + BW_THRESHOLD)))
 8001770:	4a97      	ldr	r2, [pc, #604]	@ (80019d0 <sensorScan+0x27c>)
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001778:	4619      	mov	r1, r3
 800177a:	4a98      	ldr	r2, [pc, #608]	@ (80019dc <sensorScan+0x288>)
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001782:	3bc8      	subs	r3, #200	@ 0xc8
 8001784:	4299      	cmp	r1, r3
 8001786:	db0b      	blt.n	80017a0 <sensorScan+0x4c>
 8001788:	4a91      	ldr	r2, [pc, #580]	@ (80019d0 <sensorScan+0x27c>)
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001790:	4619      	mov	r1, r3
 8001792:	4a92      	ldr	r2, [pc, #584]	@ (80019dc <sensorScan+0x288>)
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800179a:	33c8      	adds	r3, #200	@ 0xc8
 800179c:	4299      	cmp	r1, r3
 800179e:	dd0f      	ble.n	80017c0 <sensorScan+0x6c>
			{
				sensor_states |= (0b10000000 >> sensor_map[i]);
 80017a0:	4a8f      	ldr	r2, [pc, #572]	@ (80019e0 <sensorScan+0x28c>)
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80017a8:	461a      	mov	r2, r3
 80017aa:	2380      	movs	r3, #128	@ 0x80
 80017ac:	4113      	asrs	r3, r2
 80017ae:	b25a      	sxtb	r2, r3
 80017b0:	4b89      	ldr	r3, [pc, #548]	@ (80019d8 <sensorScan+0x284>)
 80017b2:	781b      	ldrb	r3, [r3, #0]
 80017b4:	b25b      	sxtb	r3, r3
 80017b6:	4313      	orrs	r3, r2
 80017b8:	b25b      	sxtb	r3, r3
 80017ba:	b2da      	uxtb	r2, r3
 80017bc:	4b86      	ldr	r3, [pc, #536]	@ (80019d8 <sensorScan+0x284>)
 80017be:	701a      	strb	r2, [r3, #0]
		for (int i = 0; i < 8; i++)
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	3301      	adds	r3, #1
 80017c4:	607b      	str	r3, [r7, #4]
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	2b07      	cmp	r3, #7
 80017ca:	ddd1      	ble.n	8001770 <sensorScan+0x1c>
			}
		}

		// Infrared obstacle sensors processing
		switch (sensor_states & 0b10000001)
 80017cc:	4b82      	ldr	r3, [pc, #520]	@ (80019d8 <sensorScan+0x284>)
 80017ce:	781b      	ldrb	r3, [r3, #0]
 80017d0:	f003 0381 	and.w	r3, r3, #129	@ 0x81
 80017d4:	2b81      	cmp	r3, #129	@ 0x81
 80017d6:	d016      	beq.n	8001806 <sensorScan+0xb2>
 80017d8:	2b81      	cmp	r3, #129	@ 0x81
 80017da:	dc18      	bgt.n	800180e <sensorScan+0xba>
 80017dc:	2b80      	cmp	r3, #128	@ 0x80
 80017de:	d00a      	beq.n	80017f6 <sensorScan+0xa2>
 80017e0:	2b80      	cmp	r3, #128	@ 0x80
 80017e2:	dc14      	bgt.n	800180e <sensorScan+0xba>
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d002      	beq.n	80017ee <sensorScan+0x9a>
 80017e8:	2b01      	cmp	r3, #1
 80017ea:	d008      	beq.n	80017fe <sensorScan+0xaa>
 80017ec:	e00f      	b.n	800180e <sensorScan+0xba>
		{
		case 0b00000000:
		{
			obstacle_status = OBSTACLE_NONE;
 80017ee:	4b7d      	ldr	r3, [pc, #500]	@ (80019e4 <sensorScan+0x290>)
 80017f0:	2200      	movs	r2, #0
 80017f2:	701a      	strb	r2, [r3, #0]
			break;
 80017f4:	e00f      	b.n	8001816 <sensorScan+0xc2>
		}
		case 0b10000000:
		{
			obstacle_status = OBSTACLE_LEFT;
 80017f6:	4b7b      	ldr	r3, [pc, #492]	@ (80019e4 <sensorScan+0x290>)
 80017f8:	2201      	movs	r2, #1
 80017fa:	701a      	strb	r2, [r3, #0]
			break;
 80017fc:	e00b      	b.n	8001816 <sensorScan+0xc2>
		}
		case 0b00000001:
		{
			obstacle_status = OBSTACLE_RIGHT;
 80017fe:	4b79      	ldr	r3, [pc, #484]	@ (80019e4 <sensorScan+0x290>)
 8001800:	2202      	movs	r2, #2
 8001802:	701a      	strb	r2, [r3, #0]
			break;
 8001804:	e007      	b.n	8001816 <sensorScan+0xc2>
		}
		case 0b10000001:
		{
			obstacle_status = OBSTACLE_FRONT;
 8001806:	4b77      	ldr	r3, [pc, #476]	@ (80019e4 <sensorScan+0x290>)
 8001808:	2203      	movs	r2, #3
 800180a:	701a      	strb	r2, [r3, #0]
			break;
 800180c:	e003      	b.n	8001816 <sensorScan+0xc2>
		}
		default:
		{
			obstacle_status = OBSTACLE_NONE;
 800180e:	4b75      	ldr	r3, [pc, #468]	@ (80019e4 <sensorScan+0x290>)
 8001810:	2200      	movs	r2, #0
 8001812:	701a      	strb	r2, [r3, #0]
			break;
 8001814:	bf00      	nop
		}
		}

		// Line sensors processing
		switch (sensor_states & 0b01111110)
 8001816:	4b70      	ldr	r3, [pc, #448]	@ (80019d8 <sensorScan+0x284>)
 8001818:	781b      	ldrb	r3, [r3, #0]
 800181a:	f003 037e 	and.w	r3, r3, #126	@ 0x7e
 800181e:	2b7e      	cmp	r3, #126	@ 0x7e
 8001820:	f000 809b 	beq.w	800195a <sensorScan+0x206>
 8001824:	2b7e      	cmp	r3, #126	@ 0x7e
 8001826:	f300 80cb 	bgt.w	80019c0 <sensorScan+0x26c>
 800182a:	2b70      	cmp	r3, #112	@ 0x70
 800182c:	f000 80c0 	beq.w	80019b0 <sensorScan+0x25c>
 8001830:	2b70      	cmp	r3, #112	@ 0x70
 8001832:	f300 80c5 	bgt.w	80019c0 <sensorScan+0x26c>
 8001836:	2b40      	cmp	r3, #64	@ 0x40
 8001838:	f300 808c 	bgt.w	8001954 <sensorScan+0x200>
 800183c:	2b00      	cmp	r3, #0
 800183e:	f2c0 80bf 	blt.w	80019c0 <sensorScan+0x26c>
 8001842:	2b40      	cmp	r3, #64	@ 0x40
 8001844:	f200 80bc 	bhi.w	80019c0 <sensorScan+0x26c>
 8001848:	a201      	add	r2, pc, #4	@ (adr r2, 8001850 <sensorScan+0xfc>)
 800184a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800184e:	bf00      	nop
 8001850:	08001963 	.word	0x08001963
 8001854:	080019c1 	.word	0x080019c1
 8001858:	08001991 	.word	0x08001991
 800185c:	080019c1 	.word	0x080019c1
 8001860:	080019c1 	.word	0x080019c1
 8001864:	080019c1 	.word	0x080019c1
 8001868:	08001981 	.word	0x08001981
 800186c:	080019c1 	.word	0x080019c1
 8001870:	080019c1 	.word	0x080019c1
 8001874:	080019c1 	.word	0x080019c1
 8001878:	080019c1 	.word	0x080019c1
 800187c:	080019c1 	.word	0x080019c1
 8001880:	08001973 	.word	0x08001973
 8001884:	080019c1 	.word	0x080019c1
 8001888:	08001989 	.word	0x08001989
 800188c:	080019c1 	.word	0x080019c1
 8001890:	080019c1 	.word	0x080019c1
 8001894:	080019c1 	.word	0x080019c1
 8001898:	080019c1 	.word	0x080019c1
 800189c:	080019c1 	.word	0x080019c1
 80018a0:	080019c1 	.word	0x080019c1
 80018a4:	080019c1 	.word	0x080019c1
 80018a8:	080019c1 	.word	0x080019c1
 80018ac:	080019c1 	.word	0x080019c1
 80018b0:	0800196b 	.word	0x0800196b
 80018b4:	080019c1 	.word	0x080019c1
 80018b8:	080019c1 	.word	0x080019c1
 80018bc:	080019c1 	.word	0x080019c1
 80018c0:	0800197b 	.word	0x0800197b
 80018c4:	080019c1 	.word	0x080019c1
 80018c8:	080019c1 	.word	0x080019c1
 80018cc:	080019c1 	.word	0x080019c1
 80018d0:	080019c1 	.word	0x080019c1
 80018d4:	080019c1 	.word	0x080019c1
 80018d8:	080019c1 	.word	0x080019c1
 80018dc:	080019c1 	.word	0x080019c1
 80018e0:	080019c1 	.word	0x080019c1
 80018e4:	080019c1 	.word	0x080019c1
 80018e8:	080019c1 	.word	0x080019c1
 80018ec:	080019c1 	.word	0x080019c1
 80018f0:	080019c1 	.word	0x080019c1
 80018f4:	080019c1 	.word	0x080019c1
 80018f8:	080019c1 	.word	0x080019c1
 80018fc:	080019c1 	.word	0x080019c1
 8001900:	080019c1 	.word	0x080019c1
 8001904:	080019c1 	.word	0x080019c1
 8001908:	080019c1 	.word	0x080019c1
 800190c:	080019c1 	.word	0x080019c1
 8001910:	08001999 	.word	0x08001999
 8001914:	080019c1 	.word	0x080019c1
 8001918:	080019c1 	.word	0x080019c1
 800191c:	080019c1 	.word	0x080019c1
 8001920:	080019c1 	.word	0x080019c1
 8001924:	080019c1 	.word	0x080019c1
 8001928:	080019c1 	.word	0x080019c1
 800192c:	080019c1 	.word	0x080019c1
 8001930:	080019a1 	.word	0x080019a1
 8001934:	080019c1 	.word	0x080019c1
 8001938:	080019c1 	.word	0x080019c1
 800193c:	080019c1 	.word	0x080019c1
 8001940:	080019c1 	.word	0x080019c1
 8001944:	080019c1 	.word	0x080019c1
 8001948:	080019c1 	.word	0x080019c1
 800194c:	080019c1 	.word	0x080019c1
 8001950:	080019b9 	.word	0x080019b9
 8001954:	2b60      	cmp	r3, #96	@ 0x60
 8001956:	d027      	beq.n	80019a8 <sensorScan+0x254>
 8001958:	e032      	b.n	80019c0 <sensorScan+0x26c>
		{
		case 0b01111110:
		{
			line_status = LINE_CROSS;
 800195a:	4b23      	ldr	r3, [pc, #140]	@ (80019e8 <sensorScan+0x294>)
 800195c:	2201      	movs	r2, #1
 800195e:	701a      	strb	r2, [r3, #0]
			break;
 8001960:	e032      	b.n	80019c8 <sensorScan+0x274>
		}
		case 0b00000000:
		{
			line_status = LINE_END;
 8001962:	4b21      	ldr	r3, [pc, #132]	@ (80019e8 <sensorScan+0x294>)
 8001964:	2200      	movs	r2, #0
 8001966:	701a      	strb	r2, [r3, #0]
			break;
 8001968:	e02e      	b.n	80019c8 <sensorScan+0x274>
		}
		case 0b00011000:
		{
			line_status = LINE_CENTER;
 800196a:	4b1f      	ldr	r3, [pc, #124]	@ (80019e8 <sensorScan+0x294>)
 800196c:	2202      	movs	r2, #2
 800196e:	701a      	strb	r2, [r3, #0]
			break;
 8001970:	e02a      	b.n	80019c8 <sensorScan+0x274>
		}

		case 0b00001100:
		{
			line_status = LINE_RIGHT1;
 8001972:	4b1d      	ldr	r3, [pc, #116]	@ (80019e8 <sensorScan+0x294>)
 8001974:	2203      	movs	r2, #3
 8001976:	701a      	strb	r2, [r3, #0]
			break;
 8001978:	e026      	b.n	80019c8 <sensorScan+0x274>
		}
		case 0b00011100:
		{
			line_status = LINE_RIGHT1;
 800197a:	4b1b      	ldr	r3, [pc, #108]	@ (80019e8 <sensorScan+0x294>)
 800197c:	2203      	movs	r2, #3
 800197e:	701a      	strb	r2, [r3, #0]
		}

		case 0b00000110:
		{
			line_status = LINE_RIGHT2;
 8001980:	4b19      	ldr	r3, [pc, #100]	@ (80019e8 <sensorScan+0x294>)
 8001982:	2204      	movs	r2, #4
 8001984:	701a      	strb	r2, [r3, #0]
			break;
 8001986:	e01f      	b.n	80019c8 <sensorScan+0x274>
		}
		case 0b00001110:
		{
			line_status = LINE_RIGHT2;
 8001988:	4b17      	ldr	r3, [pc, #92]	@ (80019e8 <sensorScan+0x294>)
 800198a:	2204      	movs	r2, #4
 800198c:	701a      	strb	r2, [r3, #0]
			break;
 800198e:	e01b      	b.n	80019c8 <sensorScan+0x274>
		}

		case 0b00000010:
		{
			line_status = LINE_RIGHT3;
 8001990:	4b15      	ldr	r3, [pc, #84]	@ (80019e8 <sensorScan+0x294>)
 8001992:	2205      	movs	r2, #5
 8001994:	701a      	strb	r2, [r3, #0]
			break;
 8001996:	e017      	b.n	80019c8 <sensorScan+0x274>
		}

		case 0b00110000:
		{
			line_status = LINE_LEFT1;
 8001998:	4b13      	ldr	r3, [pc, #76]	@ (80019e8 <sensorScan+0x294>)
 800199a:	2206      	movs	r2, #6
 800199c:	701a      	strb	r2, [r3, #0]
			break;
 800199e:	e013      	b.n	80019c8 <sensorScan+0x274>
		}
		case 0b00111000:
		{
			line_status = LINE_LEFT1;
 80019a0:	4b11      	ldr	r3, [pc, #68]	@ (80019e8 <sensorScan+0x294>)
 80019a2:	2206      	movs	r2, #6
 80019a4:	701a      	strb	r2, [r3, #0]
			break;
 80019a6:	e00f      	b.n	80019c8 <sensorScan+0x274>
		}

		case 0b01100000:
		{
			line_status = LINE_LEFT2;
 80019a8:	4b0f      	ldr	r3, [pc, #60]	@ (80019e8 <sensorScan+0x294>)
 80019aa:	2207      	movs	r2, #7
 80019ac:	701a      	strb	r2, [r3, #0]
			break;
 80019ae:	e00b      	b.n	80019c8 <sensorScan+0x274>
		}
		case 0b01110000:
		{
			line_status = LINE_LEFT2;
 80019b0:	4b0d      	ldr	r3, [pc, #52]	@ (80019e8 <sensorScan+0x294>)
 80019b2:	2207      	movs	r2, #7
 80019b4:	701a      	strb	r2, [r3, #0]
			break;
 80019b6:	e007      	b.n	80019c8 <sensorScan+0x274>
		}
		case 0b01000000:
		{
			line_status = LINE_LEFT3;
 80019b8:	4b0b      	ldr	r3, [pc, #44]	@ (80019e8 <sensorScan+0x294>)
 80019ba:	2208      	movs	r2, #8
 80019bc:	701a      	strb	r2, [r3, #0]
			break;
 80019be:	e003      	b.n	80019c8 <sensorScan+0x274>
		}
		default:
		{
			line_status = LINE_ERROR;
 80019c0:	4b09      	ldr	r3, [pc, #36]	@ (80019e8 <sensorScan+0x294>)
 80019c2:	2209      	movs	r2, #9
 80019c4:	701a      	strb	r2, [r3, #0]
			break;
 80019c6:	bf00      	nop
		}
		}
	}
 80019c8:	bf00      	nop
 80019ca:	3708      	adds	r7, #8
 80019cc:	46bd      	mov	sp, r7
 80019ce:	bd80      	pop	{r7, pc}
 80019d0:	20000178 	.word	0x20000178
 80019d4:	2000004c 	.word	0x2000004c
 80019d8:	20000188 	.word	0x20000188
 80019dc:	20000168 	.word	0x20000168
 80019e0:	0800a140 	.word	0x0800a140
 80019e4:	2000018a 	.word	0x2000018a
 80019e8:	20000189 	.word	0x20000189

080019ec <getSensorState>:

	/**
	 * @brief These function should be used to debug line sensor
	 */
	uint8_t getSensorState()
	{
 80019ec:	b480      	push	{r7}
 80019ee:	af00      	add	r7, sp, #0
		return sensor_states;
 80019f0:	4b02      	ldr	r3, [pc, #8]	@ (80019fc <getSensorState+0x10>)
 80019f2:	781b      	ldrb	r3, [r3, #0]
	}
 80019f4:	4618      	mov	r0, r3
 80019f6:	46bd      	mov	sp, r7
 80019f8:	bc80      	pop	{r7}
 80019fa:	4770      	bx	lr
 80019fc:	20000188 	.word	0x20000188

08001a00 <getSensorCalibValue>:
	const uint16_t *getSensorCalibValue()
	{
 8001a00:	b480      	push	{r7}
 8001a02:	af00      	add	r7, sp, #0
		return sensor_calib;
 8001a04:	4b02      	ldr	r3, [pc, #8]	@ (8001a10 <getSensorCalibValue+0x10>)
	}
 8001a06:	4618      	mov	r0, r3
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	bc80      	pop	{r7}
 8001a0c:	4770      	bx	lr
 8001a0e:	bf00      	nop
 8001a10:	20000168 	.word	0x20000168

08001a14 <getSensorValue>:
	const uint16_t *getSensorValue()
	{
 8001a14:	b480      	push	{r7}
 8001a16:	af00      	add	r7, sp, #0
		return sensor_buffer;
 8001a18:	4b02      	ldr	r3, [pc, #8]	@ (8001a24 <getSensorValue+0x10>)
	}
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	bc80      	pop	{r7}
 8001a20:	4770      	bx	lr
 8001a22:	bf00      	nop
 8001a24:	20000178 	.word	0x20000178

08001a28 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001a2c:	f002 fc48 	bl	80042c0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001a30:	f000 f824 	bl	8001a7c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001a34:	f7ff fd52 	bl	80014dc <MX_GPIO_Init>
  MX_DMA_Init();
 8001a38:	f7ff fbba 	bl	80011b0 <MX_DMA_Init>
  MX_TIM4_Init();
 8001a3c:	f001 fede 	bl	80037fc <MX_TIM4_Init>
  MX_TIM2_Init();
 8001a40:	f001 fe1a 	bl	8003678 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001a44:	f001 fe64 	bl	8003710 <MX_TIM3_Init>
  MX_TIM8_Init();
 8001a48:	f001 ffdc 	bl	8003a04 <MX_TIM8_Init>
  MX_USART1_UART_Init();
 8001a4c:	f002 faae 	bl	8003fac <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8001a50:	f002 fad6 	bl	8004000 <MX_USART2_UART_Init>
  MX_TIM5_Init();
 8001a54:	f001 ff60 	bl	8003918 <MX_TIM5_Init>
  MX_SPI1_Init();
 8001a58:	f001 fbd4 	bl	8003204 <MX_SPI1_Init>
  MX_ADC1_Init();
 8001a5c:	f7ff f852 	bl	8000b04 <MX_ADC1_Init>
  MX_I2C2_Init();
 8001a60:	f7ff fde8 	bl	8001634 <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */

  displayLed7Seg((uint8_t)getModeId());
 8001a64:	f000 fcf2 	bl	800244c <getModeId>
 8001a68:	4603      	mov	r3, r0
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	f7ff fb1e 	bl	80010ac <displayLed7Seg>
  (void)setupRobot();
 8001a70:	f000 fd18 	bl	80024a4 <setupRobot>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    (void)processRobot();
 8001a74:	f000 fde8 	bl	8002648 <processRobot>
 8001a78:	bf00      	nop
 8001a7a:	e7fb      	b.n	8001a74 <main+0x4c>

08001a7c <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b096      	sub	sp, #88	@ 0x58
 8001a80:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001a82:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001a86:	2228      	movs	r2, #40	@ 0x28
 8001a88:	2100      	movs	r1, #0
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	f008 fa12 	bl	8009eb4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001a90:	f107 031c 	add.w	r3, r7, #28
 8001a94:	2200      	movs	r2, #0
 8001a96:	601a      	str	r2, [r3, #0]
 8001a98:	605a      	str	r2, [r3, #4]
 8001a9a:	609a      	str	r2, [r3, #8]
 8001a9c:	60da      	str	r2, [r3, #12]
 8001a9e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001aa0:	1d3b      	adds	r3, r7, #4
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	601a      	str	r2, [r3, #0]
 8001aa6:	605a      	str	r2, [r3, #4]
 8001aa8:	609a      	str	r2, [r3, #8]
 8001aaa:	60da      	str	r2, [r3, #12]
 8001aac:	611a      	str	r2, [r3, #16]
 8001aae:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
   * in the RCC_OscInitTypeDef structure.
   */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001ab0:	2301      	movs	r3, #1
 8001ab2:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001ab4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001ab8:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001aba:	2300      	movs	r3, #0
 8001abc:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001abe:	2301      	movs	r3, #1
 8001ac0:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001ac2:	2302      	movs	r3, #2
 8001ac4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001ac6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001aca:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001acc:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8001ad0:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001ad2:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	f004 fee8 	bl	80068ac <HAL_RCC_OscConfig>
 8001adc:	4603      	mov	r3, r0
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d001      	beq.n	8001ae6 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8001ae2:	f000 f828 	bl	8001b36 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
   */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001ae6:	230f      	movs	r3, #15
 8001ae8:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001aea:	2302      	movs	r3, #2
 8001aec:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001aee:	2300      	movs	r3, #0
 8001af0:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001af2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001af6:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001af8:	2300      	movs	r3, #0
 8001afa:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001afc:	f107 031c 	add.w	r3, r7, #28
 8001b00:	2102      	movs	r1, #2
 8001b02:	4618      	mov	r0, r3
 8001b04:	f005 f954 	bl	8006db0 <HAL_RCC_ClockConfig>
 8001b08:	4603      	mov	r3, r0
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d001      	beq.n	8001b12 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8001b0e:	f000 f812 	bl	8001b36 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001b12:	2302      	movs	r3, #2
 8001b14:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8001b16:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001b1a:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001b1c:	1d3b      	adds	r3, r7, #4
 8001b1e:	4618      	mov	r0, r3
 8001b20:	f005 fad4 	bl	80070cc <HAL_RCCEx_PeriphCLKConfig>
 8001b24:	4603      	mov	r3, r0
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d001      	beq.n	8001b2e <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8001b2a:	f000 f804 	bl	8001b36 <Error_Handler>
  }
}
 8001b2e:	bf00      	nop
 8001b30:	3758      	adds	r7, #88	@ 0x58
 8001b32:	46bd      	mov	sp, r7
 8001b34:	bd80      	pop	{r7, pc}

08001b36 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8001b36:	b480      	push	{r7}
 8001b38:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b3a:	b672      	cpsid	i
}
 8001b3c:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001b3e:	bf00      	nop
 8001b40:	e7fd      	b.n	8001b3e <Error_Handler+0x8>
	...

08001b44 <initModuleMKE>:

    volatile uint8_t sw_gamepad_data[SW_GAMEPAD_DATA_LEN] = {0};
    UART_HandleTypeDef *module_mke_huart = NULL;

    enum StatusCode initModuleMKE(UART_HandleTypeDef *huart)
    {
 8001b44:	b580      	push	{r7, lr}
 8001b46:	b082      	sub	sp, #8
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]
        module_mke_huart = huart;
 8001b4c:	4a06      	ldr	r2, [pc, #24]	@ (8001b68 <initModuleMKE+0x24>)
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	6013      	str	r3, [r2, #0]

        return initUartReceiveIT(module_mke_huart);
 8001b52:	4b05      	ldr	r3, [pc, #20]	@ (8001b68 <initModuleMKE+0x24>)
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	4618      	mov	r0, r3
 8001b58:	f002 f936 	bl	8003dc8 <initUartReceiveIT>
 8001b5c:	4603      	mov	r3, r0
    }
 8001b5e:	4618      	mov	r0, r3
 8001b60:	3708      	adds	r7, #8
 8001b62:	46bd      	mov	sp, r7
 8001b64:	bd80      	pop	{r7, pc}
 8001b66:	bf00      	nop
 8001b68:	20000194 	.word	0x20000194

08001b6c <readSWGamepadData>:

    /**
     * @note This function is intergrated into get info function, you dont have to use it
     */
    enum StatusCode readSWGamepadData()
    {
 8001b6c:	b598      	push	{r3, r4, r7, lr}
 8001b6e:	af00      	add	r7, sp, #0
        static volatile uint8_t data_index = 0;

        if (module_mke_huart == &huart1)
 8001b70:	4b23      	ldr	r3, [pc, #140]	@ (8001c00 <readSWGamepadData+0x94>)
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	4a23      	ldr	r2, [pc, #140]	@ (8001c04 <readSWGamepadData+0x98>)
 8001b76:	4293      	cmp	r3, r2
 8001b78:	d11b      	bne.n	8001bb2 <readSWGamepadData+0x46>
        {
            if (getBufferUart1() == 0xFF || data_index >= SW_GAMEPAD_DATA_LEN)
 8001b7a:	f002 f9d1 	bl	8003f20 <getBufferUart1>
 8001b7e:	4603      	mov	r3, r0
 8001b80:	2bff      	cmp	r3, #255	@ 0xff
 8001b82:	d004      	beq.n	8001b8e <readSWGamepadData+0x22>
 8001b84:	4b20      	ldr	r3, [pc, #128]	@ (8001c08 <readSWGamepadData+0x9c>)
 8001b86:	781b      	ldrb	r3, [r3, #0]
 8001b88:	b2db      	uxtb	r3, r3
 8001b8a:	2b07      	cmp	r3, #7
 8001b8c:	d902      	bls.n	8001b94 <readSWGamepadData+0x28>
            {
                data_index = 0;
 8001b8e:	4b1e      	ldr	r3, [pc, #120]	@ (8001c08 <readSWGamepadData+0x9c>)
 8001b90:	2200      	movs	r2, #0
 8001b92:	701a      	strb	r2, [r3, #0]
            }

            sw_gamepad_data[data_index++] = getBufferUart1();
 8001b94:	4b1c      	ldr	r3, [pc, #112]	@ (8001c08 <readSWGamepadData+0x9c>)
 8001b96:	781b      	ldrb	r3, [r3, #0]
 8001b98:	b2db      	uxtb	r3, r3
 8001b9a:	1c5a      	adds	r2, r3, #1
 8001b9c:	b2d1      	uxtb	r1, r2
 8001b9e:	4a1a      	ldr	r2, [pc, #104]	@ (8001c08 <readSWGamepadData+0x9c>)
 8001ba0:	7011      	strb	r1, [r2, #0]
 8001ba2:	461c      	mov	r4, r3
 8001ba4:	f002 f9bc 	bl	8003f20 <getBufferUart1>
 8001ba8:	4603      	mov	r3, r0
 8001baa:	461a      	mov	r2, r3
 8001bac:	4b17      	ldr	r3, [pc, #92]	@ (8001c0c <readSWGamepadData+0xa0>)
 8001bae:	551a      	strb	r2, [r3, r4]
 8001bb0:	e022      	b.n	8001bf8 <readSWGamepadData+0x8c>
        }
        else if (module_mke_huart == &huart2 || data_index >= SW_GAMEPAD_DATA_LEN)
 8001bb2:	4b13      	ldr	r3, [pc, #76]	@ (8001c00 <readSWGamepadData+0x94>)
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	4a16      	ldr	r2, [pc, #88]	@ (8001c10 <readSWGamepadData+0xa4>)
 8001bb8:	4293      	cmp	r3, r2
 8001bba:	d004      	beq.n	8001bc6 <readSWGamepadData+0x5a>
 8001bbc:	4b12      	ldr	r3, [pc, #72]	@ (8001c08 <readSWGamepadData+0x9c>)
 8001bbe:	781b      	ldrb	r3, [r3, #0]
 8001bc0:	b2db      	uxtb	r3, r3
 8001bc2:	2b07      	cmp	r3, #7
 8001bc4:	d916      	bls.n	8001bf4 <readSWGamepadData+0x88>
        {
            if (getBufferUart1() == 0xFF)
 8001bc6:	f002 f9ab 	bl	8003f20 <getBufferUart1>
 8001bca:	4603      	mov	r3, r0
 8001bcc:	2bff      	cmp	r3, #255	@ 0xff
 8001bce:	d102      	bne.n	8001bd6 <readSWGamepadData+0x6a>
            {
                data_index = 0;
 8001bd0:	4b0d      	ldr	r3, [pc, #52]	@ (8001c08 <readSWGamepadData+0x9c>)
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	701a      	strb	r2, [r3, #0]
            }

            sw_gamepad_data[data_index++] = getBufferUart2();
 8001bd6:	4b0c      	ldr	r3, [pc, #48]	@ (8001c08 <readSWGamepadData+0x9c>)
 8001bd8:	781b      	ldrb	r3, [r3, #0]
 8001bda:	b2db      	uxtb	r3, r3
 8001bdc:	1c5a      	adds	r2, r3, #1
 8001bde:	b2d1      	uxtb	r1, r2
 8001be0:	4a09      	ldr	r2, [pc, #36]	@ (8001c08 <readSWGamepadData+0x9c>)
 8001be2:	7011      	strb	r1, [r2, #0]
 8001be4:	461c      	mov	r4, r3
 8001be6:	f002 f9a5 	bl	8003f34 <getBufferUart2>
 8001bea:	4603      	mov	r3, r0
 8001bec:	461a      	mov	r2, r3
 8001bee:	4b07      	ldr	r3, [pc, #28]	@ (8001c0c <readSWGamepadData+0xa0>)
 8001bf0:	551a      	strb	r2, [r3, r4]
 8001bf2:	e001      	b.n	8001bf8 <readSWGamepadData+0x8c>
        }
        else
        {
            return STATUS_ERROR;
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	e000      	b.n	8001bfa <readSWGamepadData+0x8e>
        }
        return STATUS_OK;
 8001bf8:	2301      	movs	r3, #1
    }
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	bd98      	pop	{r3, r4, r7, pc}
 8001bfe:	bf00      	nop
 8001c00:	20000194 	.word	0x20000194
 8001c04:	200003fc 	.word	0x200003fc
 8001c08:	20000198 	.word	0x20000198
 8001c0c:	2000018c 	.word	0x2000018c
 8001c10:	20000444 	.word	0x20000444

08001c14 <isSWGamepadButtonPressed>:
     * @note Uart flag should be corresponding to Uart you initialze.
     * @retval 0 if it's NOT pressed
     * @retval 1 if it IS pressed
     */
    uint8_t isSWGamepadButtonPressed(enum SoftwareGamepadButtons sw_gamepad_button_id)
    {
 8001c14:	b480      	push	{r7}
 8001c16:	b083      	sub	sp, #12
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	4603      	mov	r3, r0
 8001c1c:	71fb      	strb	r3, [r7, #7]
        switch (sw_gamepad_button_id)
 8001c1e:	79fb      	ldrb	r3, [r7, #7]
 8001c20:	2b09      	cmp	r3, #9
 8001c22:	d871      	bhi.n	8001d08 <isSWGamepadButtonPressed+0xf4>
 8001c24:	a201      	add	r2, pc, #4	@ (adr r2, 8001c2c <isSWGamepadButtonPressed+0x18>)
 8001c26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c2a:	bf00      	nop
 8001c2c:	08001c55 	.word	0x08001c55
 8001c30:	08001c67 	.word	0x08001c67
 8001c34:	08001c79 	.word	0x08001c79
 8001c38:	08001c8b 	.word	0x08001c8b
 8001c3c:	08001cc1 	.word	0x08001cc1
 8001c40:	08001caf 	.word	0x08001caf
 8001c44:	08001cd3 	.word	0x08001cd3
 8001c48:	08001c9d 	.word	0x08001c9d
 8001c4c:	08001ce5 	.word	0x08001ce5
 8001c50:	08001cf7 	.word	0x08001cf7
        {
        case SW_BUTTON_UP:
        {
            return (sw_gamepad_data[6] == 0x01);
 8001c54:	4b2f      	ldr	r3, [pc, #188]	@ (8001d14 <isSWGamepadButtonPressed+0x100>)
 8001c56:	799b      	ldrb	r3, [r3, #6]
 8001c58:	b2db      	uxtb	r3, r3
 8001c5a:	2b01      	cmp	r3, #1
 8001c5c:	bf0c      	ite	eq
 8001c5e:	2301      	moveq	r3, #1
 8001c60:	2300      	movne	r3, #0
 8001c62:	b2db      	uxtb	r3, r3
 8001c64:	e051      	b.n	8001d0a <isSWGamepadButtonPressed+0xf6>
            break;
        }
        case SW_BUTTON_DOWN:
        {
            return (sw_gamepad_data[6] == 0x02);
 8001c66:	4b2b      	ldr	r3, [pc, #172]	@ (8001d14 <isSWGamepadButtonPressed+0x100>)
 8001c68:	799b      	ldrb	r3, [r3, #6]
 8001c6a:	b2db      	uxtb	r3, r3
 8001c6c:	2b02      	cmp	r3, #2
 8001c6e:	bf0c      	ite	eq
 8001c70:	2301      	moveq	r3, #1
 8001c72:	2300      	movne	r3, #0
 8001c74:	b2db      	uxtb	r3, r3
 8001c76:	e048      	b.n	8001d0a <isSWGamepadButtonPressed+0xf6>
            break;
        }
        case SW_BUTTON_LEFT:
        {
            return (sw_gamepad_data[6] == 0x04);
 8001c78:	4b26      	ldr	r3, [pc, #152]	@ (8001d14 <isSWGamepadButtonPressed+0x100>)
 8001c7a:	799b      	ldrb	r3, [r3, #6]
 8001c7c:	b2db      	uxtb	r3, r3
 8001c7e:	2b04      	cmp	r3, #4
 8001c80:	bf0c      	ite	eq
 8001c82:	2301      	moveq	r3, #1
 8001c84:	2300      	movne	r3, #0
 8001c86:	b2db      	uxtb	r3, r3
 8001c88:	e03f      	b.n	8001d0a <isSWGamepadButtonPressed+0xf6>
            break;
        }
        case SW_BUTTON_RIGHT:
        {
            return (sw_gamepad_data[6] == 0x08);
 8001c8a:	4b22      	ldr	r3, [pc, #136]	@ (8001d14 <isSWGamepadButtonPressed+0x100>)
 8001c8c:	799b      	ldrb	r3, [r3, #6]
 8001c8e:	b2db      	uxtb	r3, r3
 8001c90:	2b08      	cmp	r3, #8
 8001c92:	bf0c      	ite	eq
 8001c94:	2301      	moveq	r3, #1
 8001c96:	2300      	movne	r3, #0
 8001c98:	b2db      	uxtb	r3, r3
 8001c9a:	e036      	b.n	8001d0a <isSWGamepadButtonPressed+0xf6>
            break;
        }

        case SW_BUTTON_TRIANGLE:
        {
            return (sw_gamepad_data[5] == 0x04);
 8001c9c:	4b1d      	ldr	r3, [pc, #116]	@ (8001d14 <isSWGamepadButtonPressed+0x100>)
 8001c9e:	795b      	ldrb	r3, [r3, #5]
 8001ca0:	b2db      	uxtb	r3, r3
 8001ca2:	2b04      	cmp	r3, #4
 8001ca4:	bf0c      	ite	eq
 8001ca6:	2301      	moveq	r3, #1
 8001ca8:	2300      	movne	r3, #0
 8001caa:	b2db      	uxtb	r3, r3
 8001cac:	e02d      	b.n	8001d0a <isSWGamepadButtonPressed+0xf6>
            break;
        }
        case SW_BUTTON_CIRCLE:
        {
            return (sw_gamepad_data[5] == 0x08);
 8001cae:	4b19      	ldr	r3, [pc, #100]	@ (8001d14 <isSWGamepadButtonPressed+0x100>)
 8001cb0:	795b      	ldrb	r3, [r3, #5]
 8001cb2:	b2db      	uxtb	r3, r3
 8001cb4:	2b08      	cmp	r3, #8
 8001cb6:	bf0c      	ite	eq
 8001cb8:	2301      	moveq	r3, #1
 8001cba:	2300      	movne	r3, #0
 8001cbc:	b2db      	uxtb	r3, r3
 8001cbe:	e024      	b.n	8001d0a <isSWGamepadButtonPressed+0xf6>
            break;
        }
        case SW_BUTTON_CROSS:
        {
            return (sw_gamepad_data[5] == 0x10);
 8001cc0:	4b14      	ldr	r3, [pc, #80]	@ (8001d14 <isSWGamepadButtonPressed+0x100>)
 8001cc2:	795b      	ldrb	r3, [r3, #5]
 8001cc4:	b2db      	uxtb	r3, r3
 8001cc6:	2b10      	cmp	r3, #16
 8001cc8:	bf0c      	ite	eq
 8001cca:	2301      	moveq	r3, #1
 8001ccc:	2300      	movne	r3, #0
 8001cce:	b2db      	uxtb	r3, r3
 8001cd0:	e01b      	b.n	8001d0a <isSWGamepadButtonPressed+0xf6>
            break;
        }
        case SW_BUTTON_SQUARE:
        {
            return (sw_gamepad_data[5] == 0x20);
 8001cd2:	4b10      	ldr	r3, [pc, #64]	@ (8001d14 <isSWGamepadButtonPressed+0x100>)
 8001cd4:	795b      	ldrb	r3, [r3, #5]
 8001cd6:	b2db      	uxtb	r3, r3
 8001cd8:	2b20      	cmp	r3, #32
 8001cda:	bf0c      	ite	eq
 8001cdc:	2301      	moveq	r3, #1
 8001cde:	2300      	movne	r3, #0
 8001ce0:	b2db      	uxtb	r3, r3
 8001ce2:	e012      	b.n	8001d0a <isSWGamepadButtonPressed+0xf6>
            break;
        }

        case SW_BUTTON_START:
        {
            return (sw_gamepad_data[5] == 0x01);
 8001ce4:	4b0b      	ldr	r3, [pc, #44]	@ (8001d14 <isSWGamepadButtonPressed+0x100>)
 8001ce6:	795b      	ldrb	r3, [r3, #5]
 8001ce8:	b2db      	uxtb	r3, r3
 8001cea:	2b01      	cmp	r3, #1
 8001cec:	bf0c      	ite	eq
 8001cee:	2301      	moveq	r3, #1
 8001cf0:	2300      	movne	r3, #0
 8001cf2:	b2db      	uxtb	r3, r3
 8001cf4:	e009      	b.n	8001d0a <isSWGamepadButtonPressed+0xf6>
            break;
        }
        case SW_BUTTON_SELECT:
        {
            return (sw_gamepad_data[5] == 0x02);
 8001cf6:	4b07      	ldr	r3, [pc, #28]	@ (8001d14 <isSWGamepadButtonPressed+0x100>)
 8001cf8:	795b      	ldrb	r3, [r3, #5]
 8001cfa:	b2db      	uxtb	r3, r3
 8001cfc:	2b02      	cmp	r3, #2
 8001cfe:	bf0c      	ite	eq
 8001d00:	2301      	moveq	r3, #1
 8001d02:	2300      	movne	r3, #0
 8001d04:	b2db      	uxtb	r3, r3
 8001d06:	e000      	b.n	8001d0a <isSWGamepadButtonPressed+0xf6>
            break;
        }
        default:
        {
            return 0;
 8001d08:	2300      	movs	r3, #0
            break;
        }
        }
    }
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	370c      	adds	r7, #12
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	bc80      	pop	{r7}
 8001d12:	4770      	bx	lr
 8001d14:	2000018c 	.word	0x2000018c

08001d18 <initMotor>:
#endif /* __cplusplus */

	const uint32_t motor_channel[NUMBER_OF_MOTORS] = {TIM_CHANNEL_4, TIM_CHANNEL_3, TIM_CHANNEL_1, TIM_CHANNEL_2};

	enum StatusCode initMotor(const enum Motor motor_id)
	{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	b084      	sub	sp, #16
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	4603      	mov	r3, r0
 8001d20:	71fb      	strb	r3, [r7, #7]
		for (uint8_t attempt = 0; attempt < MAX_RETRY_COUNT; ++attempt)
 8001d22:	2300      	movs	r3, #0
 8001d24:	73fb      	strb	r3, [r7, #15]
 8001d26:	e012      	b.n	8001d4e <initMotor+0x36>
		{
			if (HAL_TIM_PWM_Start(&htim8, motor_channel[motor_id]) == HAL_OK)
 8001d28:	79fb      	ldrb	r3, [r7, #7]
 8001d2a:	4a0d      	ldr	r2, [pc, #52]	@ (8001d60 <initMotor+0x48>)
 8001d2c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d30:	4619      	mov	r1, r3
 8001d32:	480c      	ldr	r0, [pc, #48]	@ (8001d64 <initMotor+0x4c>)
 8001d34:	f006 f914 	bl	8007f60 <HAL_TIM_PWM_Start>
 8001d38:	4603      	mov	r3, r0
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d101      	bne.n	8001d42 <initMotor+0x2a>
			{
				return STATUS_OK;
 8001d3e:	2301      	movs	r3, #1
 8001d40:	e009      	b.n	8001d56 <initMotor+0x3e>
			}
			HAL_Delay(50);
 8001d42:	2032      	movs	r0, #50	@ 0x32
 8001d44:	f002 fb1e 	bl	8004384 <HAL_Delay>
		for (uint8_t attempt = 0; attempt < MAX_RETRY_COUNT; ++attempt)
 8001d48:	7bfb      	ldrb	r3, [r7, #15]
 8001d4a:	3301      	adds	r3, #1
 8001d4c:	73fb      	strb	r3, [r7, #15]
 8001d4e:	7bfb      	ldrb	r3, [r7, #15]
 8001d50:	2b02      	cmp	r3, #2
 8001d52:	d9e9      	bls.n	8001d28 <initMotor+0x10>
		}
		return STATUS_ERROR;
 8001d54:	2300      	movs	r3, #0
	}
 8001d56:	4618      	mov	r0, r3
 8001d58:	3710      	adds	r7, #16
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	bd80      	pop	{r7, pc}
 8001d5e:	bf00      	nop
 8001d60:	0800a150 	.word	0x0800a150
 8001d64:	200003b0 	.word	0x200003b0

08001d68 <setSpeed>:

	void setSpeed(const enum Motor motor_id, uint8_t duty_cycle)
	{
 8001d68:	b480      	push	{r7}
 8001d6a:	b083      	sub	sp, #12
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	4603      	mov	r3, r0
 8001d70:	460a      	mov	r2, r1
 8001d72:	71fb      	strb	r3, [r7, #7]
 8001d74:	4613      	mov	r3, r2
 8001d76:	71bb      	strb	r3, [r7, #6]
		if (duty_cycle > 100)
 8001d78:	79bb      	ldrb	r3, [r7, #6]
 8001d7a:	2b64      	cmp	r3, #100	@ 0x64
 8001d7c:	d901      	bls.n	8001d82 <setSpeed+0x1a>
		{
			duty_cycle = 100;
 8001d7e:	2364      	movs	r3, #100	@ 0x64
 8001d80:	71bb      	strb	r3, [r7, #6]
		else if (duty_cycle < 0)
		{
			duty_cycle = 0;
		}

		__HAL_TIM_SET_COMPARE(&htim8, motor_channel[motor_id], duty_cycle);
 8001d82:	79fb      	ldrb	r3, [r7, #7]
 8001d84:	4a14      	ldr	r2, [pc, #80]	@ (8001dd8 <setSpeed+0x70>)
 8001d86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d104      	bne.n	8001d98 <setSpeed+0x30>
 8001d8e:	4b13      	ldr	r3, [pc, #76]	@ (8001ddc <setSpeed+0x74>)
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	79ba      	ldrb	r2, [r7, #6]
 8001d94:	635a      	str	r2, [r3, #52]	@ 0x34
	}
 8001d96:	e019      	b.n	8001dcc <setSpeed+0x64>
		__HAL_TIM_SET_COMPARE(&htim8, motor_channel[motor_id], duty_cycle);
 8001d98:	79fb      	ldrb	r3, [r7, #7]
 8001d9a:	4a0f      	ldr	r2, [pc, #60]	@ (8001dd8 <setSpeed+0x70>)
 8001d9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001da0:	2b04      	cmp	r3, #4
 8001da2:	d104      	bne.n	8001dae <setSpeed+0x46>
 8001da4:	4b0d      	ldr	r3, [pc, #52]	@ (8001ddc <setSpeed+0x74>)
 8001da6:	681a      	ldr	r2, [r3, #0]
 8001da8:	79bb      	ldrb	r3, [r7, #6]
 8001daa:	6393      	str	r3, [r2, #56]	@ 0x38
	}
 8001dac:	e00e      	b.n	8001dcc <setSpeed+0x64>
		__HAL_TIM_SET_COMPARE(&htim8, motor_channel[motor_id], duty_cycle);
 8001dae:	79fb      	ldrb	r3, [r7, #7]
 8001db0:	4a09      	ldr	r2, [pc, #36]	@ (8001dd8 <setSpeed+0x70>)
 8001db2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001db6:	2b08      	cmp	r3, #8
 8001db8:	d104      	bne.n	8001dc4 <setSpeed+0x5c>
 8001dba:	4b08      	ldr	r3, [pc, #32]	@ (8001ddc <setSpeed+0x74>)
 8001dbc:	681a      	ldr	r2, [r3, #0]
 8001dbe:	79bb      	ldrb	r3, [r7, #6]
 8001dc0:	63d3      	str	r3, [r2, #60]	@ 0x3c
	}
 8001dc2:	e003      	b.n	8001dcc <setSpeed+0x64>
		__HAL_TIM_SET_COMPARE(&htim8, motor_channel[motor_id], duty_cycle);
 8001dc4:	4b05      	ldr	r3, [pc, #20]	@ (8001ddc <setSpeed+0x74>)
 8001dc6:	681a      	ldr	r2, [r3, #0]
 8001dc8:	79bb      	ldrb	r3, [r7, #6]
 8001dca:	6413      	str	r3, [r2, #64]	@ 0x40
	}
 8001dcc:	bf00      	nop
 8001dce:	370c      	adds	r7, #12
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	bc80      	pop	{r7}
 8001dd4:	4770      	bx	lr
 8001dd6:	bf00      	nop
 8001dd8:	0800a150 	.word	0x0800a150
 8001ddc:	200003b0 	.word	0x200003b0

08001de0 <motor1Rotates>:
	 * @param	speed: -100 to 100
	 * @note	positive duty_cycle: move forward
	 * 			negative duty_cycle: move backward
	 */
	void motor1Rotates(const int speed)
	{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b082      	sub	sp, #8
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
		if (speed >= 0)
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	db0b      	blt.n	8001e06 <motor1Rotates+0x26>
		{
			HAL_GPIO_WritePin(M1_DIR_GPIO_Port, M1_DIR_Pin, UP);
 8001dee:	2201      	movs	r2, #1
 8001df0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001df4:	480e      	ldr	r0, [pc, #56]	@ (8001e30 <motor1Rotates+0x50>)
 8001df6:	f003 fe04 	bl	8005a02 <HAL_GPIO_WritePin>
			setSpeed(MOTOR_1, speed);
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	b2db      	uxtb	r3, r3
 8001dfe:	4619      	mov	r1, r3
 8001e00:	2000      	movs	r0, #0
 8001e02:	f7ff ffb1 	bl	8001d68 <setSpeed>
		}
		if (speed < 0)
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	da0d      	bge.n	8001e28 <motor1Rotates+0x48>
		{
			HAL_GPIO_WritePin(M1_DIR_GPIO_Port, M1_DIR_Pin, DOWN);
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001e12:	4807      	ldr	r0, [pc, #28]	@ (8001e30 <motor1Rotates+0x50>)
 8001e14:	f003 fdf5 	bl	8005a02 <HAL_GPIO_WritePin>
			setSpeed(MOTOR_1, -speed);
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	b2db      	uxtb	r3, r3
 8001e1c:	425b      	negs	r3, r3
 8001e1e:	b2db      	uxtb	r3, r3
 8001e20:	4619      	mov	r1, r3
 8001e22:	2000      	movs	r0, #0
 8001e24:	f7ff ffa0 	bl	8001d68 <setSpeed>
		}
	}
 8001e28:	bf00      	nop
 8001e2a:	3708      	adds	r7, #8
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	bd80      	pop	{r7, pc}
 8001e30:	40011000 	.word	0x40011000

08001e34 <motor2Rotates>:

	void motor2Rotates(const int speed)
	{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b082      	sub	sp, #8
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
		if (speed >= 0)
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	db0b      	blt.n	8001e5a <motor2Rotates+0x26>
		{
			HAL_GPIO_WritePin(M2_DIR_GPIO_Port, M2_DIR_Pin, UP);
 8001e42:	2201      	movs	r2, #1
 8001e44:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001e48:	480e      	ldr	r0, [pc, #56]	@ (8001e84 <motor2Rotates+0x50>)
 8001e4a:	f003 fdda 	bl	8005a02 <HAL_GPIO_WritePin>
			setSpeed(MOTOR_2, speed);
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	b2db      	uxtb	r3, r3
 8001e52:	4619      	mov	r1, r3
 8001e54:	2001      	movs	r0, #1
 8001e56:	f7ff ff87 	bl	8001d68 <setSpeed>
		}
		if (speed < 0)
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	da0d      	bge.n	8001e7c <motor2Rotates+0x48>
		{
			HAL_GPIO_WritePin(M2_DIR_GPIO_Port, M2_DIR_Pin, DOWN);
 8001e60:	2200      	movs	r2, #0
 8001e62:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001e66:	4807      	ldr	r0, [pc, #28]	@ (8001e84 <motor2Rotates+0x50>)
 8001e68:	f003 fdcb 	bl	8005a02 <HAL_GPIO_WritePin>
			setSpeed(MOTOR_2, -speed);
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	b2db      	uxtb	r3, r3
 8001e70:	425b      	negs	r3, r3
 8001e72:	b2db      	uxtb	r3, r3
 8001e74:	4619      	mov	r1, r3
 8001e76:	2001      	movs	r0, #1
 8001e78:	f7ff ff76 	bl	8001d68 <setSpeed>
		}
	}
 8001e7c:	bf00      	nop
 8001e7e:	3708      	adds	r7, #8
 8001e80:	46bd      	mov	sp, r7
 8001e82:	bd80      	pop	{r7, pc}
 8001e84:	40011000 	.word	0x40011000

08001e88 <motor3Rotates>:

	void motor3Rotates(const int speed)
	{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	b082      	sub	sp, #8
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	6078      	str	r0, [r7, #4]
		if (speed >= 0)
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	db0a      	blt.n	8001eac <motor3Rotates+0x24>
		{
			HAL_GPIO_WritePin(M3_DIR_GPIO_Port, M3_DIR_Pin, UP);
 8001e96:	2201      	movs	r2, #1
 8001e98:	2104      	movs	r1, #4
 8001e9a:	480e      	ldr	r0, [pc, #56]	@ (8001ed4 <motor3Rotates+0x4c>)
 8001e9c:	f003 fdb1 	bl	8005a02 <HAL_GPIO_WritePin>
			setSpeed(MOTOR_3, speed);
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	b2db      	uxtb	r3, r3
 8001ea4:	4619      	mov	r1, r3
 8001ea6:	2002      	movs	r0, #2
 8001ea8:	f7ff ff5e 	bl	8001d68 <setSpeed>
		}
		if (speed < 0)
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	da0c      	bge.n	8001ecc <motor3Rotates+0x44>
		{
			HAL_GPIO_WritePin(M3_DIR_GPIO_Port, M3_DIR_Pin, DOWN);
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	2104      	movs	r1, #4
 8001eb6:	4807      	ldr	r0, [pc, #28]	@ (8001ed4 <motor3Rotates+0x4c>)
 8001eb8:	f003 fda3 	bl	8005a02 <HAL_GPIO_WritePin>
			setSpeed(MOTOR_3, -speed);
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	b2db      	uxtb	r3, r3
 8001ec0:	425b      	negs	r3, r3
 8001ec2:	b2db      	uxtb	r3, r3
 8001ec4:	4619      	mov	r1, r3
 8001ec6:	2002      	movs	r0, #2
 8001ec8:	f7ff ff4e 	bl	8001d68 <setSpeed>
		}
	}
 8001ecc:	bf00      	nop
 8001ece:	3708      	adds	r7, #8
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	bd80      	pop	{r7, pc}
 8001ed4:	40010c00 	.word	0x40010c00

08001ed8 <motor4Rotates>:

	void motor4Rotates(const int speed)
	{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	b082      	sub	sp, #8
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]
		if (speed >= 0)
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	db0a      	blt.n	8001efc <motor4Rotates+0x24>
		{
			HAL_GPIO_WritePin(M4_DIR_GPIO_Port, M4_DIR_Pin, UP);
 8001ee6:	2201      	movs	r2, #1
 8001ee8:	2102      	movs	r1, #2
 8001eea:	480e      	ldr	r0, [pc, #56]	@ (8001f24 <motor4Rotates+0x4c>)
 8001eec:	f003 fd89 	bl	8005a02 <HAL_GPIO_WritePin>
			setSpeed(MOTOR_4, speed);
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	b2db      	uxtb	r3, r3
 8001ef4:	4619      	mov	r1, r3
 8001ef6:	2003      	movs	r0, #3
 8001ef8:	f7ff ff36 	bl	8001d68 <setSpeed>
		}
		if (speed < 0)
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	da0c      	bge.n	8001f1c <motor4Rotates+0x44>
		{
			HAL_GPIO_WritePin(M4_DIR_GPIO_Port, M4_DIR_Pin, DOWN);
 8001f02:	2200      	movs	r2, #0
 8001f04:	2102      	movs	r1, #2
 8001f06:	4807      	ldr	r0, [pc, #28]	@ (8001f24 <motor4Rotates+0x4c>)
 8001f08:	f003 fd7b 	bl	8005a02 <HAL_GPIO_WritePin>
			setSpeed(MOTOR_4, -speed);
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	b2db      	uxtb	r3, r3
 8001f10:	425b      	negs	r3, r3
 8001f12:	b2db      	uxtb	r3, r3
 8001f14:	4619      	mov	r1, r3
 8001f16:	2003      	movs	r0, #3
 8001f18:	f7ff ff26 	bl	8001d68 <setSpeed>
		}
	}
 8001f1c:	bf00      	nop
 8001f1e:	3708      	adds	r7, #8
 8001f20:	46bd      	mov	sp, r7
 8001f22:	bd80      	pop	{r7, pc}
 8001f24:	40010800 	.word	0x40010800

08001f28 <motorStop>:

	void motorStop()
	{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	af00      	add	r7, sp, #0
		motor1Rotates(0);
 8001f2c:	2000      	movs	r0, #0
 8001f2e:	f7ff ff57 	bl	8001de0 <motor1Rotates>
		motor2Rotates(0);
 8001f32:	2000      	movs	r0, #0
 8001f34:	f7ff ff7e 	bl	8001e34 <motor2Rotates>
		motor3Rotates(0);
 8001f38:	2000      	movs	r0, #0
 8001f3a:	f7ff ffa5 	bl	8001e88 <motor3Rotates>
		motor4Rotates(0);
 8001f3e:	2000      	movs	r0, #0
 8001f40:	f7ff ffca 	bl	8001ed8 <motor4Rotates>
	}
 8001f44:	bf00      	nop
 8001f46:	bd80      	pop	{r7, pc}

08001f48 <moveForward>:
	//         left		  ---+----     right		↻: rotateRight
	//           backLeft    |  backRight
	//                  backwards

	void moveForward(const int speed)
	{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	b082      	sub	sp, #8
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
		motor1Rotates(speed);
 8001f50:	6878      	ldr	r0, [r7, #4]
 8001f52:	f7ff ff45 	bl	8001de0 <motor1Rotates>
		motor2Rotates(speed);
 8001f56:	6878      	ldr	r0, [r7, #4]
 8001f58:	f7ff ff6c 	bl	8001e34 <motor2Rotates>
		motor3Rotates(speed);
 8001f5c:	6878      	ldr	r0, [r7, #4]
 8001f5e:	f7ff ff93 	bl	8001e88 <motor3Rotates>
		motor4Rotates(speed);
 8001f62:	6878      	ldr	r0, [r7, #4]
 8001f64:	f7ff ffb8 	bl	8001ed8 <motor4Rotates>
	}
 8001f68:	bf00      	nop
 8001f6a:	3708      	adds	r7, #8
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	bd80      	pop	{r7, pc}

08001f70 <moveBackward>:
	void moveBackward(const int speed)
	{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	b082      	sub	sp, #8
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	6078      	str	r0, [r7, #4]
		motor1Rotates(-speed);
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	425b      	negs	r3, r3
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	f7ff ff2f 	bl	8001de0 <motor1Rotates>
		motor2Rotates(-speed);
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	425b      	negs	r3, r3
 8001f86:	4618      	mov	r0, r3
 8001f88:	f7ff ff54 	bl	8001e34 <motor2Rotates>
		motor3Rotates(-speed);
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	425b      	negs	r3, r3
 8001f90:	4618      	mov	r0, r3
 8001f92:	f7ff ff79 	bl	8001e88 <motor3Rotates>
		motor4Rotates(-speed);
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	425b      	negs	r3, r3
 8001f9a:	4618      	mov	r0, r3
 8001f9c:	f7ff ff9c 	bl	8001ed8 <motor4Rotates>
	}
 8001fa0:	bf00      	nop
 8001fa2:	3708      	adds	r7, #8
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	bd80      	pop	{r7, pc}

08001fa8 <moveLeft>:
	void moveLeft(const int speed)
	{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	b082      	sub	sp, #8
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]
		motor1Rotates(-speed);
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	425b      	negs	r3, r3
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	f7ff ff13 	bl	8001de0 <motor1Rotates>
		motor2Rotates(speed);
 8001fba:	6878      	ldr	r0, [r7, #4]
 8001fbc:	f7ff ff3a 	bl	8001e34 <motor2Rotates>
		motor3Rotates(speed);
 8001fc0:	6878      	ldr	r0, [r7, #4]
 8001fc2:	f7ff ff61 	bl	8001e88 <motor3Rotates>
		motor4Rotates(-speed);
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	425b      	negs	r3, r3
 8001fca:	4618      	mov	r0, r3
 8001fcc:	f7ff ff84 	bl	8001ed8 <motor4Rotates>
	}
 8001fd0:	bf00      	nop
 8001fd2:	3708      	adds	r7, #8
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	bd80      	pop	{r7, pc}

08001fd8 <moveRight>:
	void moveRight(const int speed)
	{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b082      	sub	sp, #8
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
		motor1Rotates(speed);
 8001fe0:	6878      	ldr	r0, [r7, #4]
 8001fe2:	f7ff fefd 	bl	8001de0 <motor1Rotates>
		motor2Rotates(-speed);
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	425b      	negs	r3, r3
 8001fea:	4618      	mov	r0, r3
 8001fec:	f7ff ff22 	bl	8001e34 <motor2Rotates>
		motor3Rotates(-speed);
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	425b      	negs	r3, r3
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	f7ff ff47 	bl	8001e88 <motor3Rotates>
		motor4Rotates(speed);
 8001ffa:	6878      	ldr	r0, [r7, #4]
 8001ffc:	f7ff ff6c 	bl	8001ed8 <motor4Rotates>
	}
 8002000:	bf00      	nop
 8002002:	3708      	adds	r7, #8
 8002004:	46bd      	mov	sp, r7
 8002006:	bd80      	pop	{r7, pc}

08002008 <moveFrontLeft>:

	void moveFrontLeft(const int speed)
	{
 8002008:	b580      	push	{r7, lr}
 800200a:	b082      	sub	sp, #8
 800200c:	af00      	add	r7, sp, #0
 800200e:	6078      	str	r0, [r7, #4]
		motor1Rotates(0);
 8002010:	2000      	movs	r0, #0
 8002012:	f7ff fee5 	bl	8001de0 <motor1Rotates>
		motor2Rotates(speed);
 8002016:	6878      	ldr	r0, [r7, #4]
 8002018:	f7ff ff0c 	bl	8001e34 <motor2Rotates>
		motor3Rotates(speed);
 800201c:	6878      	ldr	r0, [r7, #4]
 800201e:	f7ff ff33 	bl	8001e88 <motor3Rotates>
		motor4Rotates(0);
 8002022:	2000      	movs	r0, #0
 8002024:	f7ff ff58 	bl	8001ed8 <motor4Rotates>
	}
 8002028:	bf00      	nop
 800202a:	3708      	adds	r7, #8
 800202c:	46bd      	mov	sp, r7
 800202e:	bd80      	pop	{r7, pc}

08002030 <moveFrontRight>:
	void moveFrontRight(const int speed)
	{
 8002030:	b580      	push	{r7, lr}
 8002032:	b082      	sub	sp, #8
 8002034:	af00      	add	r7, sp, #0
 8002036:	6078      	str	r0, [r7, #4]
		motor1Rotates(speed);
 8002038:	6878      	ldr	r0, [r7, #4]
 800203a:	f7ff fed1 	bl	8001de0 <motor1Rotates>
		motor2Rotates(0);
 800203e:	2000      	movs	r0, #0
 8002040:	f7ff fef8 	bl	8001e34 <motor2Rotates>
		motor3Rotates(0);
 8002044:	2000      	movs	r0, #0
 8002046:	f7ff ff1f 	bl	8001e88 <motor3Rotates>
		motor4Rotates(speed);
 800204a:	6878      	ldr	r0, [r7, #4]
 800204c:	f7ff ff44 	bl	8001ed8 <motor4Rotates>
	}
 8002050:	bf00      	nop
 8002052:	3708      	adds	r7, #8
 8002054:	46bd      	mov	sp, r7
 8002056:	bd80      	pop	{r7, pc}

08002058 <moveBackLeft>:
	void moveBackLeft(const int speed)
	{
 8002058:	b580      	push	{r7, lr}
 800205a:	b082      	sub	sp, #8
 800205c:	af00      	add	r7, sp, #0
 800205e:	6078      	str	r0, [r7, #4]
		motor1Rotates(-speed);
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	425b      	negs	r3, r3
 8002064:	4618      	mov	r0, r3
 8002066:	f7ff febb 	bl	8001de0 <motor1Rotates>
		motor2Rotates(0);
 800206a:	2000      	movs	r0, #0
 800206c:	f7ff fee2 	bl	8001e34 <motor2Rotates>
		motor3Rotates(0);
 8002070:	2000      	movs	r0, #0
 8002072:	f7ff ff09 	bl	8001e88 <motor3Rotates>
		motor4Rotates(-speed);
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	425b      	negs	r3, r3
 800207a:	4618      	mov	r0, r3
 800207c:	f7ff ff2c 	bl	8001ed8 <motor4Rotates>
	}
 8002080:	bf00      	nop
 8002082:	3708      	adds	r7, #8
 8002084:	46bd      	mov	sp, r7
 8002086:	bd80      	pop	{r7, pc}

08002088 <moveBackRight>:
	void moveBackRight(const int speed)
	{
 8002088:	b580      	push	{r7, lr}
 800208a:	b082      	sub	sp, #8
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]
		motor1Rotates(0);
 8002090:	2000      	movs	r0, #0
 8002092:	f7ff fea5 	bl	8001de0 <motor1Rotates>
		motor2Rotates(-speed);
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	425b      	negs	r3, r3
 800209a:	4618      	mov	r0, r3
 800209c:	f7ff feca 	bl	8001e34 <motor2Rotates>
		motor3Rotates(-speed);
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	425b      	negs	r3, r3
 80020a4:	4618      	mov	r0, r3
 80020a6:	f7ff feef 	bl	8001e88 <motor3Rotates>
		motor4Rotates(0);
 80020aa:	2000      	movs	r0, #0
 80020ac:	f7ff ff14 	bl	8001ed8 <motor4Rotates>
	}
 80020b0:	bf00      	nop
 80020b2:	3708      	adds	r7, #8
 80020b4:	46bd      	mov	sp, r7
 80020b6:	bd80      	pop	{r7, pc}

080020b8 <rotateLeft>:

	void rotateLeft(const int speed)
	{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	b082      	sub	sp, #8
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]
		motor1Rotates(-speed);
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	425b      	negs	r3, r3
 80020c4:	4618      	mov	r0, r3
 80020c6:	f7ff fe8b 	bl	8001de0 <motor1Rotates>
		motor2Rotates(-speed);
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	425b      	negs	r3, r3
 80020ce:	4618      	mov	r0, r3
 80020d0:	f7ff feb0 	bl	8001e34 <motor2Rotates>
		motor3Rotates(speed);
 80020d4:	6878      	ldr	r0, [r7, #4]
 80020d6:	f7ff fed7 	bl	8001e88 <motor3Rotates>
		motor4Rotates(speed);
 80020da:	6878      	ldr	r0, [r7, #4]
 80020dc:	f7ff fefc 	bl	8001ed8 <motor4Rotates>
	}
 80020e0:	bf00      	nop
 80020e2:	3708      	adds	r7, #8
 80020e4:	46bd      	mov	sp, r7
 80020e6:	bd80      	pop	{r7, pc}

080020e8 <rotateRight>:
	void rotateRight(const int speed)
	{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	b082      	sub	sp, #8
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	6078      	str	r0, [r7, #4]
		motor1Rotates(speed);
 80020f0:	6878      	ldr	r0, [r7, #4]
 80020f2:	f7ff fe75 	bl	8001de0 <motor1Rotates>
		motor2Rotates(speed);
 80020f6:	6878      	ldr	r0, [r7, #4]
 80020f8:	f7ff fe9c 	bl	8001e34 <motor2Rotates>
		motor3Rotates(-speed);
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	425b      	negs	r3, r3
 8002100:	4618      	mov	r0, r3
 8002102:	f7ff fec1 	bl	8001e88 <motor3Rotates>
		motor4Rotates(-speed);
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	425b      	negs	r3, r3
 800210a:	4618      	mov	r0, r3
 800210c:	f7ff fee4 	bl	8001ed8 <motor4Rotates>
	}
 8002110:	bf00      	nop
 8002112:	3708      	adds	r7, #8
 8002114:	46bd      	mov	sp, r7
 8002116:	bd80      	pop	{r7, pc}

08002118 <moveDirection>:

	void moveDirection(const enum Direction direction, const int speed)
	{
 8002118:	b580      	push	{r7, lr}
 800211a:	b082      	sub	sp, #8
 800211c:	af00      	add	r7, sp, #0
 800211e:	4603      	mov	r3, r0
 8002120:	6039      	str	r1, [r7, #0]
 8002122:	71fb      	strb	r3, [r7, #7]
		switch (direction)
 8002124:	79fb      	ldrb	r3, [r7, #7]
 8002126:	2b09      	cmp	r3, #9
 8002128:	d83e      	bhi.n	80021a8 <moveDirection+0x90>
 800212a:	a201      	add	r2, pc, #4	@ (adr r2, 8002130 <moveDirection+0x18>)
 800212c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002130:	08002159 	.word	0x08002159
 8002134:	08002161 	.word	0x08002161
 8002138:	08002169 	.word	0x08002169
 800213c:	08002171 	.word	0x08002171
 8002140:	08002179 	.word	0x08002179
 8002144:	08002181 	.word	0x08002181
 8002148:	08002189 	.word	0x08002189
 800214c:	08002191 	.word	0x08002191
 8002150:	08002199 	.word	0x08002199
 8002154:	080021a1 	.word	0x080021a1
		{
		case FORWARD:
		{
			moveForward(speed);
 8002158:	6838      	ldr	r0, [r7, #0]
 800215a:	f7ff fef5 	bl	8001f48 <moveForward>
			break;
 800215e:	e023      	b.n	80021a8 <moveDirection+0x90>
		}
		case BACKWARD:
		{
			moveBackward(speed);
 8002160:	6838      	ldr	r0, [r7, #0]
 8002162:	f7ff ff05 	bl	8001f70 <moveBackward>
			break;
 8002166:	e01f      	b.n	80021a8 <moveDirection+0x90>
		}
		case LEFT:
		{
			moveLeft(speed);
 8002168:	6838      	ldr	r0, [r7, #0]
 800216a:	f7ff ff1d 	bl	8001fa8 <moveLeft>
			break;
 800216e:	e01b      	b.n	80021a8 <moveDirection+0x90>
		}
		case RIGHT:
		{
			moveRight(speed);
 8002170:	6838      	ldr	r0, [r7, #0]
 8002172:	f7ff ff31 	bl	8001fd8 <moveRight>
			break;
 8002176:	e017      	b.n	80021a8 <moveDirection+0x90>
		}
		case FRONT_LEFT:
		{
			moveFrontLeft(speed);
 8002178:	6838      	ldr	r0, [r7, #0]
 800217a:	f7ff ff45 	bl	8002008 <moveFrontLeft>
			break;
 800217e:	e013      	b.n	80021a8 <moveDirection+0x90>
		}
		case FRONT_RIGHT:
		{
			moveFrontRight(speed);
 8002180:	6838      	ldr	r0, [r7, #0]
 8002182:	f7ff ff55 	bl	8002030 <moveFrontRight>
			break;
 8002186:	e00f      	b.n	80021a8 <moveDirection+0x90>
		}
		case BACK_LEFT:
		{
			moveBackLeft(speed);
 8002188:	6838      	ldr	r0, [r7, #0]
 800218a:	f7ff ff65 	bl	8002058 <moveBackLeft>
			break;
 800218e:	e00b      	b.n	80021a8 <moveDirection+0x90>
		}
		case BACK_RIGHT:
		{
			moveBackRight(speed);
 8002190:	6838      	ldr	r0, [r7, #0]
 8002192:	f7ff ff79 	bl	8002088 <moveBackRight>
			break;
 8002196:	e007      	b.n	80021a8 <moveDirection+0x90>
		}
		case ROTATE_LEFT:
		{
			rotateLeft(speed);
 8002198:	6838      	ldr	r0, [r7, #0]
 800219a:	f7ff ff8d 	bl	80020b8 <rotateLeft>
			break;
 800219e:	e003      	b.n	80021a8 <moveDirection+0x90>
		}
		case ROTATE_RIGHT:
		{
			rotateRight(speed);
 80021a0:	6838      	ldr	r0, [r7, #0]
 80021a2:	f7ff ffa1 	bl	80020e8 <rotateRight>
			break;
 80021a6:	bf00      	nop
		}
		}
	}
 80021a8:	bf00      	nop
 80021aa:	3708      	adds	r7, #8
 80021ac:	46bd      	mov	sp, r7
 80021ae:	bd80      	pop	{r7, pc}

080021b0 <initPIDMotor>:
#endif /* __cplusplus */

    struct PID pid_motors[NUMBER_OF_ENCODER] = {0};

    void initPIDMotor(const enum Encoder encoder_id, const float Kp, const float Ki, const float Kd, const uint16_t sample_time_ms)
    {
 80021b0:	b480      	push	{r7}
 80021b2:	b085      	sub	sp, #20
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	60b9      	str	r1, [r7, #8]
 80021b8:	607a      	str	r2, [r7, #4]
 80021ba:	603b      	str	r3, [r7, #0]
 80021bc:	4603      	mov	r3, r0
 80021be:	73fb      	strb	r3, [r7, #15]
        pid_motors[encoder_id].Kp = Kp;
 80021c0:	7bfb      	ldrb	r3, [r7, #15]
 80021c2:	4a22      	ldr	r2, [pc, #136]	@ (800224c <initPIDMotor+0x9c>)
 80021c4:	015b      	lsls	r3, r3, #5
 80021c6:	4413      	add	r3, r2
 80021c8:	68ba      	ldr	r2, [r7, #8]
 80021ca:	601a      	str	r2, [r3, #0]
        pid_motors[encoder_id].Ki = Ki;
 80021cc:	7bfb      	ldrb	r3, [r7, #15]
 80021ce:	4a1f      	ldr	r2, [pc, #124]	@ (800224c <initPIDMotor+0x9c>)
 80021d0:	015b      	lsls	r3, r3, #5
 80021d2:	4413      	add	r3, r2
 80021d4:	3304      	adds	r3, #4
 80021d6:	687a      	ldr	r2, [r7, #4]
 80021d8:	601a      	str	r2, [r3, #0]
        pid_motors[encoder_id].Kd = Kd;
 80021da:	7bfb      	ldrb	r3, [r7, #15]
 80021dc:	4a1b      	ldr	r2, [pc, #108]	@ (800224c <initPIDMotor+0x9c>)
 80021de:	015b      	lsls	r3, r3, #5
 80021e0:	4413      	add	r3, r2
 80021e2:	3308      	adds	r3, #8
 80021e4:	683a      	ldr	r2, [r7, #0]
 80021e6:	601a      	str	r2, [r3, #0]
        pid_motors[encoder_id].Kd = Kd;
 80021e8:	7bfb      	ldrb	r3, [r7, #15]
 80021ea:	4a18      	ldr	r2, [pc, #96]	@ (800224c <initPIDMotor+0x9c>)
 80021ec:	015b      	lsls	r3, r3, #5
 80021ee:	4413      	add	r3, r2
 80021f0:	3308      	adds	r3, #8
 80021f2:	683a      	ldr	r2, [r7, #0]
 80021f4:	601a      	str	r2, [r3, #0]

        pid_motors[encoder_id].set_speed = 0;
 80021f6:	7bfb      	ldrb	r3, [r7, #15]
 80021f8:	4a14      	ldr	r2, [pc, #80]	@ (800224c <initPIDMotor+0x9c>)
 80021fa:	015b      	lsls	r3, r3, #5
 80021fc:	4413      	add	r3, r2
 80021fe:	330c      	adds	r3, #12
 8002200:	2200      	movs	r2, #0
 8002202:	601a      	str	r2, [r3, #0]

        pid_motors[encoder_id].integral = 0;
 8002204:	7bfb      	ldrb	r3, [r7, #15]
 8002206:	4a11      	ldr	r2, [pc, #68]	@ (800224c <initPIDMotor+0x9c>)
 8002208:	015b      	lsls	r3, r3, #5
 800220a:	4413      	add	r3, r2
 800220c:	3310      	adds	r3, #16
 800220e:	f04f 0200 	mov.w	r2, #0
 8002212:	601a      	str	r2, [r3, #0]
        pid_motors[encoder_id].derivative = 0;
 8002214:	7bfb      	ldrb	r3, [r7, #15]
 8002216:	4a0d      	ldr	r2, [pc, #52]	@ (800224c <initPIDMotor+0x9c>)
 8002218:	015b      	lsls	r3, r3, #5
 800221a:	4413      	add	r3, r2
 800221c:	3314      	adds	r3, #20
 800221e:	f04f 0200 	mov.w	r2, #0
 8002222:	601a      	str	r2, [r3, #0]

        pid_motors[encoder_id].previous_error = 0;
 8002224:	7bfb      	ldrb	r3, [r7, #15]
 8002226:	4a09      	ldr	r2, [pc, #36]	@ (800224c <initPIDMotor+0x9c>)
 8002228:	015b      	lsls	r3, r3, #5
 800222a:	4413      	add	r3, r2
 800222c:	3318      	adds	r3, #24
 800222e:	2200      	movs	r2, #0
 8002230:	601a      	str	r2, [r3, #0]
        pid_motors[encoder_id].sample_time = sample_time_ms;
 8002232:	7bfb      	ldrb	r3, [r7, #15]
 8002234:	4a05      	ldr	r2, [pc, #20]	@ (800224c <initPIDMotor+0x9c>)
 8002236:	015b      	lsls	r3, r3, #5
 8002238:	4413      	add	r3, r2
 800223a:	331c      	adds	r3, #28
 800223c:	8b3a      	ldrh	r2, [r7, #24]
 800223e:	801a      	strh	r2, [r3, #0]
    }
 8002240:	bf00      	nop
 8002242:	3714      	adds	r7, #20
 8002244:	46bd      	mov	sp, r7
 8002246:	bc80      	pop	{r7}
 8002248:	4770      	bx	lr
 800224a:	bf00      	nop
 800224c:	2000019c 	.word	0x2000019c

08002250 <setSpeedPIDMotor>:

    void setSpeedPIDMotor(const enum Encoder encoder_id, int speed_pulse_per_sec)
    {
 8002250:	b590      	push	{r4, r7, lr}
 8002252:	b083      	sub	sp, #12
 8002254:	af00      	add	r7, sp, #0
 8002256:	4603      	mov	r3, r0
 8002258:	6039      	str	r1, [r7, #0]
 800225a:	71fb      	strb	r3, [r7, #7]
        if (speed_pulse_per_sec > (MAX_REVOLUTIONS_PER_SEC * PULSE_PER_REVOLUTION))
 800225c:	683b      	ldr	r3, [r7, #0]
 800225e:	f5b3 7fea 	cmp.w	r3, #468	@ 0x1d4
 8002262:	dd03      	ble.n	800226c <setSpeedPIDMotor+0x1c>
        {
            speed_pulse_per_sec = (MAX_REVOLUTIONS_PER_SEC * PULSE_PER_REVOLUTION);
 8002264:	f44f 73ea 	mov.w	r3, #468	@ 0x1d4
 8002268:	603b      	str	r3, [r7, #0]
 800226a:	e005      	b.n	8002278 <setSpeedPIDMotor+0x28>
        }
        else if (speed_pulse_per_sec < -(MAX_REVOLUTIONS_PER_SEC * PULSE_PER_REVOLUTION))
 800226c:	683b      	ldr	r3, [r7, #0]
 800226e:	f513 7fea 	cmn.w	r3, #468	@ 0x1d4
 8002272:	da01      	bge.n	8002278 <setSpeedPIDMotor+0x28>
        {
            speed_pulse_per_sec = -(MAX_REVOLUTIONS_PER_SEC * PULSE_PER_REVOLUTION);
 8002274:	4b13      	ldr	r3, [pc, #76]	@ (80022c4 <setSpeedPIDMotor+0x74>)
 8002276:	603b      	str	r3, [r7, #0]
        }

        pid_motors[encoder_id].set_speed = speed_pulse_per_sec * (pid_motors[encoder_id].sample_time * 0.001f);
 8002278:	6838      	ldr	r0, [r7, #0]
 800227a:	f7fe fa79 	bl	8000770 <__aeabi_i2f>
 800227e:	4604      	mov	r4, r0
 8002280:	79fb      	ldrb	r3, [r7, #7]
 8002282:	4a11      	ldr	r2, [pc, #68]	@ (80022c8 <setSpeedPIDMotor+0x78>)
 8002284:	015b      	lsls	r3, r3, #5
 8002286:	4413      	add	r3, r2
 8002288:	331c      	adds	r3, #28
 800228a:	881b      	ldrh	r3, [r3, #0]
 800228c:	4618      	mov	r0, r3
 800228e:	f7fe fa6f 	bl	8000770 <__aeabi_i2f>
 8002292:	4603      	mov	r3, r0
 8002294:	490d      	ldr	r1, [pc, #52]	@ (80022cc <setSpeedPIDMotor+0x7c>)
 8002296:	4618      	mov	r0, r3
 8002298:	f7fe fabe 	bl	8000818 <__aeabi_fmul>
 800229c:	4603      	mov	r3, r0
 800229e:	4619      	mov	r1, r3
 80022a0:	4620      	mov	r0, r4
 80022a2:	f7fe fab9 	bl	8000818 <__aeabi_fmul>
 80022a6:	4603      	mov	r3, r0
 80022a8:	79fc      	ldrb	r4, [r7, #7]
 80022aa:	4618      	mov	r0, r3
 80022ac:	f7fe fc04 	bl	8000ab8 <__aeabi_f2iz>
 80022b0:	4602      	mov	r2, r0
 80022b2:	4905      	ldr	r1, [pc, #20]	@ (80022c8 <setSpeedPIDMotor+0x78>)
 80022b4:	0163      	lsls	r3, r4, #5
 80022b6:	440b      	add	r3, r1
 80022b8:	330c      	adds	r3, #12
 80022ba:	601a      	str	r2, [r3, #0]
    }
 80022bc:	bf00      	nop
 80022be:	370c      	adds	r7, #12
 80022c0:	46bd      	mov	sp, r7
 80022c2:	bd90      	pop	{r4, r7, pc}
 80022c4:	fffffe2c 	.word	0xfffffe2c
 80022c8:	2000019c 	.word	0x2000019c
 80022cc:	3a83126f 	.word	0x3a83126f

080022d0 <computePIDMotor>:

    float computePIDMotor(const enum Encoder encoder_id)
    {
 80022d0:	b5b0      	push	{r4, r5, r7, lr}
 80022d2:	b086      	sub	sp, #24
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	4603      	mov	r3, r0
 80022d8:	71fb      	strb	r3, [r7, #7]
        // Lấy số xung từ encoder
        uint32_t pulse_count = getDeltaEncoder(encoder_id);
 80022da:	79fb      	ldrb	r3, [r7, #7]
 80022dc:	4618      	mov	r0, r3
 80022de:	f7fe ffeb 	bl	80012b8 <getDeltaEncoder>
 80022e2:	6178      	str	r0, [r7, #20]

        // Tính lỗi
        float error = (abs(pid_motors[encoder_id].set_speed) - abs(pulse_count)) * (pid_motors[encoder_id].set_speed / abs(pid_motors[encoder_id].set_speed));
 80022e4:	79fb      	ldrb	r3, [r7, #7]
 80022e6:	4a58      	ldr	r2, [pc, #352]	@ (8002448 <computePIDMotor+0x178>)
 80022e8:	015b      	lsls	r3, r3, #5
 80022ea:	4413      	add	r3, r2
 80022ec:	330c      	adds	r3, #12
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 80022f4:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 80022f8:	697b      	ldr	r3, [r7, #20]
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	bfb8      	it	lt
 80022fe:	425b      	neglt	r3, r3
 8002300:	1ad2      	subs	r2, r2, r3
 8002302:	79fb      	ldrb	r3, [r7, #7]
 8002304:	4950      	ldr	r1, [pc, #320]	@ (8002448 <computePIDMotor+0x178>)
 8002306:	015b      	lsls	r3, r3, #5
 8002308:	440b      	add	r3, r1
 800230a:	330c      	adds	r3, #12
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	2b00      	cmp	r3, #0
 8002310:	da02      	bge.n	8002318 <computePIDMotor+0x48>
 8002312:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002316:	e000      	b.n	800231a <computePIDMotor+0x4a>
 8002318:	2301      	movs	r3, #1
 800231a:	fb02 f303 	mul.w	r3, r2, r3
 800231e:	4618      	mov	r0, r3
 8002320:	f7fe fa26 	bl	8000770 <__aeabi_i2f>
 8002324:	4603      	mov	r3, r0
 8002326:	613b      	str	r3, [r7, #16]

        // Cập nhật tích phân
        pid_motors[encoder_id].integral += error * pid_motors[encoder_id].sample_time;
 8002328:	79fb      	ldrb	r3, [r7, #7]
 800232a:	4a47      	ldr	r2, [pc, #284]	@ (8002448 <computePIDMotor+0x178>)
 800232c:	015b      	lsls	r3, r3, #5
 800232e:	4413      	add	r3, r2
 8002330:	3310      	adds	r3, #16
 8002332:	681d      	ldr	r5, [r3, #0]
 8002334:	79fb      	ldrb	r3, [r7, #7]
 8002336:	4a44      	ldr	r2, [pc, #272]	@ (8002448 <computePIDMotor+0x178>)
 8002338:	015b      	lsls	r3, r3, #5
 800233a:	4413      	add	r3, r2
 800233c:	331c      	adds	r3, #28
 800233e:	881b      	ldrh	r3, [r3, #0]
 8002340:	4618      	mov	r0, r3
 8002342:	f7fe fa15 	bl	8000770 <__aeabi_i2f>
 8002346:	4603      	mov	r3, r0
 8002348:	6939      	ldr	r1, [r7, #16]
 800234a:	4618      	mov	r0, r3
 800234c:	f7fe fa64 	bl	8000818 <__aeabi_fmul>
 8002350:	4603      	mov	r3, r0
 8002352:	79fc      	ldrb	r4, [r7, #7]
 8002354:	4619      	mov	r1, r3
 8002356:	4628      	mov	r0, r5
 8002358:	f7fe f956 	bl	8000608 <__addsf3>
 800235c:	4603      	mov	r3, r0
 800235e:	4619      	mov	r1, r3
 8002360:	4a39      	ldr	r2, [pc, #228]	@ (8002448 <computePIDMotor+0x178>)
 8002362:	0163      	lsls	r3, r4, #5
 8002364:	4413      	add	r3, r2
 8002366:	3310      	adds	r3, #16
 8002368:	6019      	str	r1, [r3, #0]

        // Tính vi phân
        pid_motors[encoder_id].derivative = (error - pid_motors[encoder_id].previous_error) / pid_motors[encoder_id].sample_time;
 800236a:	79fb      	ldrb	r3, [r7, #7]
 800236c:	4a36      	ldr	r2, [pc, #216]	@ (8002448 <computePIDMotor+0x178>)
 800236e:	015b      	lsls	r3, r3, #5
 8002370:	4413      	add	r3, r2
 8002372:	3318      	adds	r3, #24
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	4618      	mov	r0, r3
 8002378:	f7fe f9fa 	bl	8000770 <__aeabi_i2f>
 800237c:	4603      	mov	r3, r0
 800237e:	4619      	mov	r1, r3
 8002380:	6938      	ldr	r0, [r7, #16]
 8002382:	f7fe f93f 	bl	8000604 <__aeabi_fsub>
 8002386:	4603      	mov	r3, r0
 8002388:	461d      	mov	r5, r3
 800238a:	79fb      	ldrb	r3, [r7, #7]
 800238c:	4a2e      	ldr	r2, [pc, #184]	@ (8002448 <computePIDMotor+0x178>)
 800238e:	015b      	lsls	r3, r3, #5
 8002390:	4413      	add	r3, r2
 8002392:	331c      	adds	r3, #28
 8002394:	881b      	ldrh	r3, [r3, #0]
 8002396:	4618      	mov	r0, r3
 8002398:	f7fe f9ea 	bl	8000770 <__aeabi_i2f>
 800239c:	4603      	mov	r3, r0
 800239e:	79fc      	ldrb	r4, [r7, #7]
 80023a0:	4619      	mov	r1, r3
 80023a2:	4628      	mov	r0, r5
 80023a4:	f7fe faec 	bl	8000980 <__aeabi_fdiv>
 80023a8:	4603      	mov	r3, r0
 80023aa:	4619      	mov	r1, r3
 80023ac:	4a26      	ldr	r2, [pc, #152]	@ (8002448 <computePIDMotor+0x178>)
 80023ae:	0163      	lsls	r3, r4, #5
 80023b0:	4413      	add	r3, r2
 80023b2:	3314      	adds	r3, #20
 80023b4:	6019      	str	r1, [r3, #0]

        float output = pid_motors[encoder_id].Kp * error + pid_motors[encoder_id].Ki * pid_motors[encoder_id].integral + pid_motors[encoder_id].Kd * pid_motors[encoder_id].derivative;
 80023b6:	79fb      	ldrb	r3, [r7, #7]
 80023b8:	4a23      	ldr	r2, [pc, #140]	@ (8002448 <computePIDMotor+0x178>)
 80023ba:	015b      	lsls	r3, r3, #5
 80023bc:	4413      	add	r3, r2
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	6939      	ldr	r1, [r7, #16]
 80023c2:	4618      	mov	r0, r3
 80023c4:	f7fe fa28 	bl	8000818 <__aeabi_fmul>
 80023c8:	4603      	mov	r3, r0
 80023ca:	461c      	mov	r4, r3
 80023cc:	79fb      	ldrb	r3, [r7, #7]
 80023ce:	4a1e      	ldr	r2, [pc, #120]	@ (8002448 <computePIDMotor+0x178>)
 80023d0:	015b      	lsls	r3, r3, #5
 80023d2:	4413      	add	r3, r2
 80023d4:	3304      	adds	r3, #4
 80023d6:	681a      	ldr	r2, [r3, #0]
 80023d8:	79fb      	ldrb	r3, [r7, #7]
 80023da:	491b      	ldr	r1, [pc, #108]	@ (8002448 <computePIDMotor+0x178>)
 80023dc:	015b      	lsls	r3, r3, #5
 80023de:	440b      	add	r3, r1
 80023e0:	3310      	adds	r3, #16
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	4619      	mov	r1, r3
 80023e6:	4610      	mov	r0, r2
 80023e8:	f7fe fa16 	bl	8000818 <__aeabi_fmul>
 80023ec:	4603      	mov	r3, r0
 80023ee:	4619      	mov	r1, r3
 80023f0:	4620      	mov	r0, r4
 80023f2:	f7fe f909 	bl	8000608 <__addsf3>
 80023f6:	4603      	mov	r3, r0
 80023f8:	461c      	mov	r4, r3
 80023fa:	79fb      	ldrb	r3, [r7, #7]
 80023fc:	4a12      	ldr	r2, [pc, #72]	@ (8002448 <computePIDMotor+0x178>)
 80023fe:	015b      	lsls	r3, r3, #5
 8002400:	4413      	add	r3, r2
 8002402:	3308      	adds	r3, #8
 8002404:	681a      	ldr	r2, [r3, #0]
 8002406:	79fb      	ldrb	r3, [r7, #7]
 8002408:	490f      	ldr	r1, [pc, #60]	@ (8002448 <computePIDMotor+0x178>)
 800240a:	015b      	lsls	r3, r3, #5
 800240c:	440b      	add	r3, r1
 800240e:	3314      	adds	r3, #20
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	4619      	mov	r1, r3
 8002414:	4610      	mov	r0, r2
 8002416:	f7fe f9ff 	bl	8000818 <__aeabi_fmul>
 800241a:	4603      	mov	r3, r0
 800241c:	4619      	mov	r1, r3
 800241e:	4620      	mov	r0, r4
 8002420:	f7fe f8f2 	bl	8000608 <__addsf3>
 8002424:	4603      	mov	r3, r0
 8002426:	60fb      	str	r3, [r7, #12]

        pid_motors[encoder_id].previous_error = error;
 8002428:	79fc      	ldrb	r4, [r7, #7]
 800242a:	6938      	ldr	r0, [r7, #16]
 800242c:	f7fe fb44 	bl	8000ab8 <__aeabi_f2iz>
 8002430:	4602      	mov	r2, r0
 8002432:	4905      	ldr	r1, [pc, #20]	@ (8002448 <computePIDMotor+0x178>)
 8002434:	0163      	lsls	r3, r4, #5
 8002436:	440b      	add	r3, r1
 8002438:	3318      	adds	r3, #24
 800243a:	601a      	str	r2, [r3, #0]

        return output;
 800243c:	68fb      	ldr	r3, [r7, #12]
    }
 800243e:	4618      	mov	r0, r3
 8002440:	3718      	adds	r7, #24
 8002442:	46bd      	mov	sp, r7
 8002444:	bdb0      	pop	{r4, r5, r7, pc}
 8002446:	bf00      	nop
 8002448:	2000019c 	.word	0x2000019c

0800244c <getModeId>:
#endif /* __cplusplus */

    enum Mode mode_id = MODE_IDLE;

    enum Mode getModeId()
    {
 800244c:	b598      	push	{r3, r4, r7, lr}
 800244e:	af00      	add	r7, sp, #0
        mode_id = (enum Mode)((getSwitchStatus(SWITCH_4) << 3) | (getSwitchStatus(SWITCH_3) << 2) | (getSwitchStatus(SWITCH_2) << 1) | getSwitchStatus(SWITCH_1));
 8002450:	2003      	movs	r0, #3
 8002452:	f001 f8c9 	bl	80035e8 <getSwitchStatus>
 8002456:	4603      	mov	r3, r0
 8002458:	b25b      	sxtb	r3, r3
 800245a:	00db      	lsls	r3, r3, #3
 800245c:	b25c      	sxtb	r4, r3
 800245e:	2002      	movs	r0, #2
 8002460:	f001 f8c2 	bl	80035e8 <getSwitchStatus>
 8002464:	4603      	mov	r3, r0
 8002466:	b25b      	sxtb	r3, r3
 8002468:	009b      	lsls	r3, r3, #2
 800246a:	b25b      	sxtb	r3, r3
 800246c:	4323      	orrs	r3, r4
 800246e:	b25c      	sxtb	r4, r3
 8002470:	2001      	movs	r0, #1
 8002472:	f001 f8b9 	bl	80035e8 <getSwitchStatus>
 8002476:	4603      	mov	r3, r0
 8002478:	b25b      	sxtb	r3, r3
 800247a:	005b      	lsls	r3, r3, #1
 800247c:	b25b      	sxtb	r3, r3
 800247e:	4323      	orrs	r3, r4
 8002480:	b25c      	sxtb	r4, r3
 8002482:	2000      	movs	r0, #0
 8002484:	f001 f8b0 	bl	80035e8 <getSwitchStatus>
 8002488:	4603      	mov	r3, r0
 800248a:	b25b      	sxtb	r3, r3
 800248c:	4323      	orrs	r3, r4
 800248e:	b25b      	sxtb	r3, r3
 8002490:	b2da      	uxtb	r2, r3
 8002492:	4b03      	ldr	r3, [pc, #12]	@ (80024a0 <getModeId+0x54>)
 8002494:	701a      	strb	r2, [r3, #0]

        return mode_id;
 8002496:	4b02      	ldr	r3, [pc, #8]	@ (80024a0 <getModeId+0x54>)
 8002498:	781b      	ldrb	r3, [r3, #0]
    }
 800249a:	4618      	mov	r0, r3
 800249c:	bd98      	pop	{r3, r4, r7, pc}
 800249e:	bf00      	nop
 80024a0:	2000021c 	.word	0x2000021c

080024a4 <setupRobot>:
        (void)initBuzzer();
        (void)initDisplay();
    }

    enum StatusCode setupRobot()
    {
 80024a4:	b580      	push	{r7, lr}
 80024a6:	b082      	sub	sp, #8
 80024a8:	af02      	add	r7, sp, #8
        switch (mode_id)
 80024aa:	4b59      	ldr	r3, [pc, #356]	@ (8002610 <setupRobot+0x16c>)
 80024ac:	781b      	ldrb	r3, [r3, #0]
 80024ae:	2b0b      	cmp	r3, #11
 80024b0:	f300 80a9 	bgt.w	8002606 <setupRobot+0x162>
 80024b4:	2b08      	cmp	r3, #8
 80024b6:	da09      	bge.n	80024cc <setupRobot+0x28>
 80024b8:	2b06      	cmp	r3, #6
 80024ba:	dc02      	bgt.n	80024c2 <setupRobot+0x1e>
 80024bc:	2b00      	cmp	r3, #0
 80024be:	da05      	bge.n	80024cc <setupRobot+0x28>
 80024c0:	e0a1      	b.n	8002606 <setupRobot+0x162>
 80024c2:	2b07      	cmp	r3, #7
 80024c4:	f040 809f 	bne.w	8002606 <setupRobot+0x162>
        {
        case MODE_TEST_STEP_MOTORS:
        {
            (void)calibStepMotor();
 80024c8:	f000 ff1c 	bl	8003304 <calibStepMotor>
        case MODE_TEST_MODULE_MKE:
        case MODE_TEST_FULL:
        {
            // Uart 2 COM will attached to USB ttl for debugging and connected with serial monitor for debugging.
            // Uart 1 COM will attached module bluetooth reciver MKE m15.
            uartTransmitString(&huart2, "Begin initialize process\r\n");
 80024cc:	4951      	ldr	r1, [pc, #324]	@ (8002614 <setupRobot+0x170>)
 80024ce:	4852      	ldr	r0, [pc, #328]	@ (8002618 <setupRobot+0x174>)
 80024d0:	f001 fcbc 	bl	8003e4c <uartTransmitString>

            if ((initServo(SERVO_1) != STATUS_OK) || (initServo(SERVO_2) != STATUS_OK) || (initServo(SERVO_3) != STATUS_OK))
 80024d4:	2000      	movs	r0, #0
 80024d6:	f000 fda7 	bl	8003028 <initServo>
 80024da:	4603      	mov	r3, r0
 80024dc:	2b01      	cmp	r3, #1
 80024de:	d10b      	bne.n	80024f8 <setupRobot+0x54>
 80024e0:	2001      	movs	r0, #1
 80024e2:	f000 fda1 	bl	8003028 <initServo>
 80024e6:	4603      	mov	r3, r0
 80024e8:	2b01      	cmp	r3, #1
 80024ea:	d105      	bne.n	80024f8 <setupRobot+0x54>
 80024ec:	2002      	movs	r0, #2
 80024ee:	f000 fd9b 	bl	8003028 <initServo>
 80024f2:	4603      	mov	r3, r0
 80024f4:	2b01      	cmp	r3, #1
 80024f6:	d003      	beq.n	8002500 <setupRobot+0x5c>
            {
                uartTransmitString(&huart2, "[ERR] Servo initialized fail\r\n");
 80024f8:	4948      	ldr	r1, [pc, #288]	@ (800261c <setupRobot+0x178>)
 80024fa:	4847      	ldr	r0, [pc, #284]	@ (8002618 <setupRobot+0x174>)
 80024fc:	f001 fca6 	bl	8003e4c <uartTransmitString>
            }

            if ((initMotor(MOTOR_1) != STATUS_OK) || (initMotor(MOTOR_2) != STATUS_OK) || (initMotor(MOTOR_3) != STATUS_OK) || (initMotor(MOTOR_4) != STATUS_OK))
 8002500:	2000      	movs	r0, #0
 8002502:	f7ff fc09 	bl	8001d18 <initMotor>
 8002506:	4603      	mov	r3, r0
 8002508:	2b01      	cmp	r3, #1
 800250a:	d111      	bne.n	8002530 <setupRobot+0x8c>
 800250c:	2001      	movs	r0, #1
 800250e:	f7ff fc03 	bl	8001d18 <initMotor>
 8002512:	4603      	mov	r3, r0
 8002514:	2b01      	cmp	r3, #1
 8002516:	d10b      	bne.n	8002530 <setupRobot+0x8c>
 8002518:	2002      	movs	r0, #2
 800251a:	f7ff fbfd 	bl	8001d18 <initMotor>
 800251e:	4603      	mov	r3, r0
 8002520:	2b01      	cmp	r3, #1
 8002522:	d105      	bne.n	8002530 <setupRobot+0x8c>
 8002524:	2003      	movs	r0, #3
 8002526:	f7ff fbf7 	bl	8001d18 <initMotor>
 800252a:	4603      	mov	r3, r0
 800252c:	2b01      	cmp	r3, #1
 800252e:	d003      	beq.n	8002538 <setupRobot+0x94>
            {
                uartTransmitString(&huart2, "[ERR] Motor initialized fail\r\n");
 8002530:	493b      	ldr	r1, [pc, #236]	@ (8002620 <setupRobot+0x17c>)
 8002532:	4839      	ldr	r0, [pc, #228]	@ (8002618 <setupRobot+0x174>)
 8002534:	f001 fc8a 	bl	8003e4c <uartTransmitString>
            }

            if (initGamepad() != STATUS_OK)
 8002538:	f7fe fee0 	bl	80012fc <initGamepad>
 800253c:	4603      	mov	r3, r0
 800253e:	2b01      	cmp	r3, #1
 8002540:	d003      	beq.n	800254a <setupRobot+0xa6>
            {
                uartTransmitString(&huart2, "[ERR] Gamepad initialized fail\r\n");
 8002542:	4938      	ldr	r1, [pc, #224]	@ (8002624 <setupRobot+0x180>)
 8002544:	4834      	ldr	r0, [pc, #208]	@ (8002618 <setupRobot+0x174>)
 8002546:	f001 fc81 	bl	8003e4c <uartTransmitString>
            }
            if (initModuleMKE(&huart1) != STATUS_OK)
 800254a:	4837      	ldr	r0, [pc, #220]	@ (8002628 <setupRobot+0x184>)
 800254c:	f7ff fafa 	bl	8001b44 <initModuleMKE>
 8002550:	4603      	mov	r3, r0
 8002552:	2b01      	cmp	r3, #1
 8002554:	d003      	beq.n	800255e <setupRobot+0xba>
            {
                uartTransmitString(&huart2, "[ERR] Module MKE m15 initialized fail\r\n");
 8002556:	4935      	ldr	r1, [pc, #212]	@ (800262c <setupRobot+0x188>)
 8002558:	482f      	ldr	r0, [pc, #188]	@ (8002618 <setupRobot+0x174>)
 800255a:	f001 fc77 	bl	8003e4c <uartTransmitString>
            }

            if (initTimer2() != STATUS_OK)
 800255e:	f000 fdd7 	bl	8003110 <initTimer2>
 8002562:	4603      	mov	r3, r0
 8002564:	2b01      	cmp	r3, #1
 8002566:	d003      	beq.n	8002570 <setupRobot+0xcc>
            {
                uartTransmitString(&huart2, "[ERR] Timer initialized fail\r\n");
 8002568:	4931      	ldr	r1, [pc, #196]	@ (8002630 <setupRobot+0x18c>)
 800256a:	482b      	ldr	r0, [pc, #172]	@ (8002618 <setupRobot+0x174>)
 800256c:	f001 fc6e 	bl	8003e4c <uartTransmitString>
            }

            if ((initButton() != STATUS_OK) || (initSwitch() != STATUS_OK))
 8002570:	f7fe fbea 	bl	8000d48 <initButton>
 8002574:	4603      	mov	r3, r0
 8002576:	2b01      	cmp	r3, #1
 8002578:	d104      	bne.n	8002584 <setupRobot+0xe0>
 800257a:	f001 f80d 	bl	8003598 <initSwitch>
 800257e:	4603      	mov	r3, r0
 8002580:	2b01      	cmp	r3, #1
 8002582:	d003      	beq.n	800258c <setupRobot+0xe8>
            {
                uartTransmitString(&huart2, "[ERR] Buttons & Switches initialized fail\r\n");
 8002584:	492b      	ldr	r1, [pc, #172]	@ (8002634 <setupRobot+0x190>)
 8002586:	4824      	ldr	r0, [pc, #144]	@ (8002618 <setupRobot+0x174>)
 8002588:	f001 fc60 	bl	8003e4c <uartTransmitString>
            }

            if ((initBuzzer() != STATUS_OK) || (initDisplay() != STATUS_OK))
 800258c:	f7fe fc68 	bl	8000e60 <initBuzzer>
 8002590:	4603      	mov	r3, r0
 8002592:	2b01      	cmp	r3, #1
 8002594:	d104      	bne.n	80025a0 <setupRobot+0xfc>
 8002596:	f7fe fcdb 	bl	8000f50 <initDisplay>
 800259a:	4603      	mov	r3, r0
 800259c:	2b01      	cmp	r3, #1
 800259e:	d003      	beq.n	80025a8 <setupRobot+0x104>
            {
                uartTransmitString(&huart2, "[ERR] Buzzer & Display initialized fail\r\n");
 80025a0:	4925      	ldr	r1, [pc, #148]	@ (8002638 <setupRobot+0x194>)
 80025a2:	481d      	ldr	r0, [pc, #116]	@ (8002618 <setupRobot+0x174>)
 80025a4:	f001 fc52 	bl	8003e4c <uartTransmitString>
            }

            initPIDMotor(ENCODER_1, 0.1, 0.1, 0.01, 50);
 80025a8:	2332      	movs	r3, #50	@ 0x32
 80025aa:	9300      	str	r3, [sp, #0]
 80025ac:	4b23      	ldr	r3, [pc, #140]	@ (800263c <setupRobot+0x198>)
 80025ae:	4a24      	ldr	r2, [pc, #144]	@ (8002640 <setupRobot+0x19c>)
 80025b0:	4923      	ldr	r1, [pc, #140]	@ (8002640 <setupRobot+0x19c>)
 80025b2:	2000      	movs	r0, #0
 80025b4:	f7ff fdfc 	bl	80021b0 <initPIDMotor>
            initPIDMotor(ENCODER_2, 0.1, 0.1, 0.01, 50);
 80025b8:	2332      	movs	r3, #50	@ 0x32
 80025ba:	9300      	str	r3, [sp, #0]
 80025bc:	4b1f      	ldr	r3, [pc, #124]	@ (800263c <setupRobot+0x198>)
 80025be:	4a20      	ldr	r2, [pc, #128]	@ (8002640 <setupRobot+0x19c>)
 80025c0:	491f      	ldr	r1, [pc, #124]	@ (8002640 <setupRobot+0x19c>)
 80025c2:	2001      	movs	r0, #1
 80025c4:	f7ff fdf4 	bl	80021b0 <initPIDMotor>
            initPIDMotor(ENCODER_3, 0.1, 0.1, 0.01, 50);
 80025c8:	2332      	movs	r3, #50	@ 0x32
 80025ca:	9300      	str	r3, [sp, #0]
 80025cc:	4b1b      	ldr	r3, [pc, #108]	@ (800263c <setupRobot+0x198>)
 80025ce:	4a1c      	ldr	r2, [pc, #112]	@ (8002640 <setupRobot+0x19c>)
 80025d0:	491b      	ldr	r1, [pc, #108]	@ (8002640 <setupRobot+0x19c>)
 80025d2:	2002      	movs	r0, #2
 80025d4:	f7ff fdec 	bl	80021b0 <initPIDMotor>
            initPIDMotor(ENCODER_4, 0.1, 0.1, 0.01, 50);
 80025d8:	2332      	movs	r3, #50	@ 0x32
 80025da:	9300      	str	r3, [sp, #0]
 80025dc:	4b17      	ldr	r3, [pc, #92]	@ (800263c <setupRobot+0x198>)
 80025de:	4a18      	ldr	r2, [pc, #96]	@ (8002640 <setupRobot+0x19c>)
 80025e0:	4917      	ldr	r1, [pc, #92]	@ (8002640 <setupRobot+0x19c>)
 80025e2:	2003      	movs	r0, #3
 80025e4:	f7ff fde4 	bl	80021b0 <initPIDMotor>

            uartTransmitString(&huart2, "\r\nFinished initialize process\r\n");
 80025e8:	4916      	ldr	r1, [pc, #88]	@ (8002644 <setupRobot+0x1a0>)
 80025ea:	480b      	ldr	r0, [pc, #44]	@ (8002618 <setupRobot+0x174>)
 80025ec:	f001 fc2e 	bl	8003e4c <uartTransmitString>

            sTimer2Set(500, 50);
 80025f0:	2132      	movs	r1, #50	@ 0x32
 80025f2:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80025f6:	f000 fda9 	bl	800314c <sTimer2Set>
            displayLeds(0b00000000);
 80025fa:	2000      	movs	r0, #0
 80025fc:	f7fe fdb8 	bl	8001170 <displayLeds>

            break;
 8002600:	bf00      	nop
        {
            return STATUS_ERROR;
            break;
        }
        }
        return STATUS_OK;
 8002602:	2301      	movs	r3, #1
 8002604:	e000      	b.n	8002608 <setupRobot+0x164>
            return STATUS_ERROR;
 8002606:	2300      	movs	r3, #0
    }
 8002608:	4618      	mov	r0, r3
 800260a:	46bd      	mov	sp, r7
 800260c:	bd80      	pop	{r7, pc}
 800260e:	bf00      	nop
 8002610:	2000021c 	.word	0x2000021c
 8002614:	08009fb0 	.word	0x08009fb0
 8002618:	20000444 	.word	0x20000444
 800261c:	08009fcc 	.word	0x08009fcc
 8002620:	08009fec 	.word	0x08009fec
 8002624:	0800a00c 	.word	0x0800a00c
 8002628:	200003fc 	.word	0x200003fc
 800262c:	0800a030 	.word	0x0800a030
 8002630:	0800a058 	.word	0x0800a058
 8002634:	0800a078 	.word	0x0800a078
 8002638:	0800a0a4 	.word	0x0800a0a4
 800263c:	3c23d70a 	.word	0x3c23d70a
 8002640:	3dcccccd 	.word	0x3dcccccd
 8002644:	0800a0d0 	.word	0x0800a0d0

08002648 <processRobot>:

    enum StatusCode processRobot()
    {
 8002648:	b590      	push	{r4, r7, lr}
 800264a:	b093      	sub	sp, #76	@ 0x4c
 800264c:	af00      	add	r7, sp, #0
        switch (mode_id)
 800264e:	4bbc      	ldr	r3, [pc, #752]	@ (8002940 <processRobot+0x2f8>)
 8002650:	781b      	ldrb	r3, [r3, #0]
 8002652:	2b0b      	cmp	r3, #11
 8002654:	f200 84c6 	bhi.w	8002fe4 <processRobot+0x99c>
 8002658:	a201      	add	r2, pc, #4	@ (adr r2, 8002660 <processRobot+0x18>)
 800265a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800265e:	bf00      	nop
 8002660:	08002691 	.word	0x08002691
 8002664:	080026a5 	.word	0x080026a5
 8002668:	080027df 	.word	0x080027df
 800266c:	0800284b 	.word	0x0800284b
 8002670:	080028b9 	.word	0x080028b9
 8002674:	080029db 	.word	0x080029db
 8002678:	08002b41 	.word	0x08002b41
 800267c:	08002c0f 	.word	0x08002c0f
 8002680:	08002c51 	.word	0x08002c51
 8002684:	08002d1b 	.word	0x08002d1b
 8002688:	08002e99 	.word	0x08002e99
 800268c:	08002fe9 	.word	0x08002fe9
        {
        case MODE_IDLE:
        {
            if (sTimer2GetFlag())
 8002690:	f000 fd78 	bl	8003184 <sTimer2GetFlag>
 8002694:	4603      	mov	r3, r0
 8002696:	2b00      	cmp	r3, #0
 8002698:	f000 84a8 	beq.w	8002fec <processRobot+0x9a4>
            {
                toggleLedDebug();
 800269c:	f7fe fd7c 	bl	8001198 <toggleLedDebug>
            }

            break;
 80026a0:	f000 bca4 	b.w	8002fec <processRobot+0x9a4>
        }

        case MODE_TEST_DEBUG_INDICATORS:
        {
            if (sTimer2GetFlag())
 80026a4:	f000 fd6e 	bl	8003184 <sTimer2GetFlag>
 80026a8:	4603      	mov	r3, r0
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	f000 84a0 	beq.w	8002ff0 <processRobot+0x9a8>
            {
                (void)scanButton();
 80026b0:	f7fe fb72 	bl	8000d98 <scanButton>

                static uint8_t byte_displayed = 0b00000000;

                if (isButtonPressed(BUTTON_1))
 80026b4:	2000      	movs	r0, #0
 80026b6:	f7fe fbb5 	bl	8000e24 <isButtonPressed>
 80026ba:	4603      	mov	r3, r0
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d014      	beq.n	80026ea <processRobot+0xa2>
                {
                    byte_displayed = (byte_displayed << 1) | 0b00000001;
 80026c0:	4ba0      	ldr	r3, [pc, #640]	@ (8002944 <processRobot+0x2fc>)
 80026c2:	781b      	ldrb	r3, [r3, #0]
 80026c4:	b25b      	sxtb	r3, r3
 80026c6:	005b      	lsls	r3, r3, #1
 80026c8:	b25b      	sxtb	r3, r3
 80026ca:	f043 0301 	orr.w	r3, r3, #1
 80026ce:	b25b      	sxtb	r3, r3
 80026d0:	b2da      	uxtb	r2, r3
 80026d2:	4b9c      	ldr	r3, [pc, #624]	@ (8002944 <processRobot+0x2fc>)
 80026d4:	701a      	strb	r2, [r3, #0]
                    displayLeds(byte_displayed);
 80026d6:	4b9b      	ldr	r3, [pc, #620]	@ (8002944 <processRobot+0x2fc>)
 80026d8:	781b      	ldrb	r3, [r3, #0]
 80026da:	4618      	mov	r0, r3
 80026dc:	f7fe fd48 	bl	8001170 <displayLeds>

                    (void)uartTransmitString(&huart2, "Button 1 Pressed\r\n");
 80026e0:	4999      	ldr	r1, [pc, #612]	@ (8002948 <processRobot+0x300>)
 80026e2:	489a      	ldr	r0, [pc, #616]	@ (800294c <processRobot+0x304>)
 80026e4:	f001 fbb2 	bl	8003e4c <uartTransmitString>
 80026e8:	e031      	b.n	800274e <processRobot+0x106>
                }
                else if (isButtonPressed(BUTTON_2))
 80026ea:	2001      	movs	r0, #1
 80026ec:	f7fe fb9a 	bl	8000e24 <isButtonPressed>
 80026f0:	4603      	mov	r3, r0
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d00f      	beq.n	8002716 <processRobot+0xce>
                {
                    byte_displayed = byte_displayed >> 1;
 80026f6:	4b93      	ldr	r3, [pc, #588]	@ (8002944 <processRobot+0x2fc>)
 80026f8:	781b      	ldrb	r3, [r3, #0]
 80026fa:	085b      	lsrs	r3, r3, #1
 80026fc:	b2da      	uxtb	r2, r3
 80026fe:	4b91      	ldr	r3, [pc, #580]	@ (8002944 <processRobot+0x2fc>)
 8002700:	701a      	strb	r2, [r3, #0]
                    displayLeds(byte_displayed);
 8002702:	4b90      	ldr	r3, [pc, #576]	@ (8002944 <processRobot+0x2fc>)
 8002704:	781b      	ldrb	r3, [r3, #0]
 8002706:	4618      	mov	r0, r3
 8002708:	f7fe fd32 	bl	8001170 <displayLeds>

                    (void)uartTransmitString(&huart2, "Button 2 Pressed\r\n");
 800270c:	4990      	ldr	r1, [pc, #576]	@ (8002950 <processRobot+0x308>)
 800270e:	488f      	ldr	r0, [pc, #572]	@ (800294c <processRobot+0x304>)
 8002710:	f001 fb9c 	bl	8003e4c <uartTransmitString>
 8002714:	e01b      	b.n	800274e <processRobot+0x106>
                }
                else if (isButtonPressed(BUTTON_3))
 8002716:	2002      	movs	r0, #2
 8002718:	f7fe fb84 	bl	8000e24 <isButtonPressed>
 800271c:	4603      	mov	r3, r0
 800271e:	2b00      	cmp	r3, #0
 8002720:	d009      	beq.n	8002736 <processRobot+0xee>
                {
                    setFreqBuzzer(byte_displayed);
 8002722:	4b88      	ldr	r3, [pc, #544]	@ (8002944 <processRobot+0x2fc>)
 8002724:	781b      	ldrb	r3, [r3, #0]
 8002726:	4618      	mov	r0, r3
 8002728:	f7fe fbba 	bl	8000ea0 <setFreqBuzzer>

                    (void)uartTransmitString(&huart2, "Button 3 Pressed\r\n");
 800272c:	4989      	ldr	r1, [pc, #548]	@ (8002954 <processRobot+0x30c>)
 800272e:	4887      	ldr	r0, [pc, #540]	@ (800294c <processRobot+0x304>)
 8002730:	f001 fb8c 	bl	8003e4c <uartTransmitString>
 8002734:	e00b      	b.n	800274e <processRobot+0x106>
                }
                else if (isButtonPressed(BUTTON_4))
 8002736:	2003      	movs	r0, #3
 8002738:	f7fe fb74 	bl	8000e24 <isButtonPressed>
 800273c:	4603      	mov	r3, r0
 800273e:	2b00      	cmp	r3, #0
 8002740:	d005      	beq.n	800274e <processRobot+0x106>
                {
                    stopBuzzer();
 8002742:	f7fe fbfb 	bl	8000f3c <stopBuzzer>

                    (void)uartTransmitString(&huart2, "Button 4 Pressed\r\n");
 8002746:	4984      	ldr	r1, [pc, #528]	@ (8002958 <processRobot+0x310>)
 8002748:	4880      	ldr	r0, [pc, #512]	@ (800294c <processRobot+0x304>)
 800274a:	f001 fb7f 	bl	8003e4c <uartTransmitString>
                }

                uint8_t period = ((getSwitchStatus(SWITCH_4) << 3) | (getSwitchStatus(SWITCH_3) << 2) | (getSwitchStatus(SWITCH_2) << 1) | getSwitchStatus(SWITCH_1));
 800274e:	2003      	movs	r0, #3
 8002750:	f000 ff4a 	bl	80035e8 <getSwitchStatus>
 8002754:	4603      	mov	r3, r0
 8002756:	b25b      	sxtb	r3, r3
 8002758:	00db      	lsls	r3, r3, #3
 800275a:	b25c      	sxtb	r4, r3
 800275c:	2002      	movs	r0, #2
 800275e:	f000 ff43 	bl	80035e8 <getSwitchStatus>
 8002762:	4603      	mov	r3, r0
 8002764:	b25b      	sxtb	r3, r3
 8002766:	009b      	lsls	r3, r3, #2
 8002768:	b25b      	sxtb	r3, r3
 800276a:	4323      	orrs	r3, r4
 800276c:	b25c      	sxtb	r4, r3
 800276e:	2001      	movs	r0, #1
 8002770:	f000 ff3a 	bl	80035e8 <getSwitchStatus>
 8002774:	4603      	mov	r3, r0
 8002776:	b25b      	sxtb	r3, r3
 8002778:	005b      	lsls	r3, r3, #1
 800277a:	b25b      	sxtb	r3, r3
 800277c:	4323      	orrs	r3, r4
 800277e:	b25c      	sxtb	r4, r3
 8002780:	2000      	movs	r0, #0
 8002782:	f000 ff31 	bl	80035e8 <getSwitchStatus>
 8002786:	4603      	mov	r3, r0
 8002788:	b25b      	sxtb	r3, r3
 800278a:	4323      	orrs	r3, r4
 800278c:	b25b      	sxtb	r3, r3
 800278e:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
                if (period == 0)
 8002792:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 8002796:	2b00      	cmp	r3, #0
 8002798:	d107      	bne.n	80027aa <processRobot+0x162>
                {
                    HAL_GPIO_WritePin(LED_DEBUG_GPIO_Port, LED7_EN1_Pin, GPIO_PIN_SET);
 800279a:	2201      	movs	r2, #1
 800279c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80027a0:	486e      	ldr	r0, [pc, #440]	@ (800295c <processRobot+0x314>)
 80027a2:	f003 f92e 	bl	8005a02 <HAL_GPIO_WritePin>
                    {
                        toggleLedDebug();
                    }
                }
            }
            break;
 80027a6:	f000 bc23 	b.w	8002ff0 <processRobot+0x9a8>
                    counter = (counter + 1) % (period * (20 / 2));
 80027aa:	4b6d      	ldr	r3, [pc, #436]	@ (8002960 <processRobot+0x318>)
 80027ac:	781b      	ldrb	r3, [r3, #0]
 80027ae:	1c5a      	adds	r2, r3, #1
 80027b0:	f897 1045 	ldrb.w	r1, [r7, #69]	@ 0x45
 80027b4:	460b      	mov	r3, r1
 80027b6:	009b      	lsls	r3, r3, #2
 80027b8:	440b      	add	r3, r1
 80027ba:	005b      	lsls	r3, r3, #1
 80027bc:	fb92 f1f3 	sdiv	r1, r2, r3
 80027c0:	fb01 f303 	mul.w	r3, r1, r3
 80027c4:	1ad3      	subs	r3, r2, r3
 80027c6:	b2da      	uxtb	r2, r3
 80027c8:	4b65      	ldr	r3, [pc, #404]	@ (8002960 <processRobot+0x318>)
 80027ca:	701a      	strb	r2, [r3, #0]
                    if (counter == 0)
 80027cc:	4b64      	ldr	r3, [pc, #400]	@ (8002960 <processRobot+0x318>)
 80027ce:	781b      	ldrb	r3, [r3, #0]
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	f040 840d 	bne.w	8002ff0 <processRobot+0x9a8>
                        toggleLedDebug();
 80027d6:	f7fe fcdf 	bl	8001198 <toggleLedDebug>
            break;
 80027da:	f000 bc09 	b.w	8002ff0 <processRobot+0x9a8>
        }

        case MODE_TEST_COMM:
        {
            if (getFlagUart1())
 80027de:	f001 fb8b 	bl	8003ef8 <getFlagUart1>
 80027e2:	4603      	mov	r3, r0
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d00d      	beq.n	8002804 <processRobot+0x1bc>
            {
                toggleLedDebug();
 80027e8:	f7fe fcd6 	bl	8001198 <toggleLedDebug>

                uint8_t transmit_data_buffer = getBufferUart1();
 80027ec:	f001 fb98 	bl	8003f20 <getBufferUart1>
 80027f0:	4603      	mov	r3, r0
 80027f2:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
                (void)uartTransmit8b(&huart2, &transmit_data_buffer, 1);
 80027f6:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 80027fa:	2201      	movs	r2, #1
 80027fc:	4619      	mov	r1, r3
 80027fe:	4853      	ldr	r0, [pc, #332]	@ (800294c <processRobot+0x304>)
 8002800:	f001 fb4e 	bl	8003ea0 <uartTransmit8b>
            }
            if (sTimer2GetFlag())
 8002804:	f000 fcbe 	bl	8003184 <sTimer2GetFlag>
 8002808:	4603      	mov	r3, r0
 800280a:	2b00      	cmp	r3, #0
 800280c:	f000 83f2 	beq.w	8002ff4 <processRobot+0x9ac>
            {
                toggleLedDebug();
 8002810:	f7fe fcc2 	bl	8001198 <toggleLedDebug>

                (void)scanButton();
 8002814:	f7fe fac0 	bl	8000d98 <scanButton>

                if (isButtonPressed(BUTTON_1))
 8002818:	2000      	movs	r0, #0
 800281a:	f7fe fb03 	bl	8000e24 <isButtonPressed>
 800281e:	4603      	mov	r3, r0
 8002820:	2b00      	cmp	r3, #0
 8002822:	f000 83e7 	beq.w	8002ff4 <processRobot+0x9ac>
                {
                    if (readGamepadData() == STATUS_OK)
 8002826:	f7fe fd8b 	bl	8001340 <readGamepadData>
 800282a:	4603      	mov	r3, r0
 800282c:	2b01      	cmp	r3, #1
 800282e:	d107      	bne.n	8002840 <processRobot+0x1f8>
                    {
                        (void)uartTransmit8b(&huart2, getGamepadData(), 30);
 8002830:	f7fe fe4a 	bl	80014c8 <getGamepadData>
 8002834:	4603      	mov	r3, r0
 8002836:	221e      	movs	r2, #30
 8002838:	4619      	mov	r1, r3
 800283a:	4844      	ldr	r0, [pc, #272]	@ (800294c <processRobot+0x304>)
 800283c:	f001 fb30 	bl	8003ea0 <uartTransmit8b>
                    }

                    (void)uartTransmitString(&huart2, "Button 1 Pressed\r\n");
 8002840:	4941      	ldr	r1, [pc, #260]	@ (8002948 <processRobot+0x300>)
 8002842:	4842      	ldr	r0, [pc, #264]	@ (800294c <processRobot+0x304>)
 8002844:	f001 fb02 	bl	8003e4c <uartTransmitString>
                }
            }
            break;
 8002848:	e3d4      	b.n	8002ff4 <processRobot+0x9ac>
        }

        case MODE_TEST_MOTORS:
        {
            if (sTimer2GetFlag())
 800284a:	f000 fc9b 	bl	8003184 <sTimer2GetFlag>
 800284e:	4603      	mov	r3, r0
 8002850:	2b00      	cmp	r3, #0
 8002852:	f000 83d1 	beq.w	8002ff8 <processRobot+0x9b0>
            {
                toggleLedDebug();
 8002856:	f7fe fc9f 	bl	8001198 <toggleLedDebug>

                (void)scanButton();
 800285a:	f7fe fa9d 	bl	8000d98 <scanButton>

                if (isButtonPressed(BUTTON_1))
 800285e:	2000      	movs	r0, #0
 8002860:	f7fe fae0 	bl	8000e24 <isButtonPressed>
 8002864:	4603      	mov	r3, r0
 8002866:	2b00      	cmp	r3, #0
 8002868:	d004      	beq.n	8002874 <processRobot+0x22c>
                {
                    moveDirection(FORWARD, 50);
 800286a:	2132      	movs	r1, #50	@ 0x32
 800286c:	2000      	movs	r0, #0
 800286e:	f7ff fc53 	bl	8002118 <moveDirection>
                else if (isButtonPressed(BUTTON_4))
                {
                    moveDirection(RIGHT, 50);
                }
            }
            break;
 8002872:	e3c1      	b.n	8002ff8 <processRobot+0x9b0>
                else if (isButtonPressed(BUTTON_2))
 8002874:	2001      	movs	r0, #1
 8002876:	f7fe fad5 	bl	8000e24 <isButtonPressed>
 800287a:	4603      	mov	r3, r0
 800287c:	2b00      	cmp	r3, #0
 800287e:	d004      	beq.n	800288a <processRobot+0x242>
                    moveDirection(BACKWARD, 50);
 8002880:	2132      	movs	r1, #50	@ 0x32
 8002882:	2001      	movs	r0, #1
 8002884:	f7ff fc48 	bl	8002118 <moveDirection>
            break;
 8002888:	e3b6      	b.n	8002ff8 <processRobot+0x9b0>
                else if (isButtonPressed(BUTTON_3))
 800288a:	2002      	movs	r0, #2
 800288c:	f7fe faca 	bl	8000e24 <isButtonPressed>
 8002890:	4603      	mov	r3, r0
 8002892:	2b00      	cmp	r3, #0
 8002894:	d004      	beq.n	80028a0 <processRobot+0x258>
                    moveDirection(LEFT, 50);
 8002896:	2132      	movs	r1, #50	@ 0x32
 8002898:	2002      	movs	r0, #2
 800289a:	f7ff fc3d 	bl	8002118 <moveDirection>
            break;
 800289e:	e3ab      	b.n	8002ff8 <processRobot+0x9b0>
                else if (isButtonPressed(BUTTON_4))
 80028a0:	2003      	movs	r0, #3
 80028a2:	f7fe fabf 	bl	8000e24 <isButtonPressed>
 80028a6:	4603      	mov	r3, r0
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	f000 83a5 	beq.w	8002ff8 <processRobot+0x9b0>
                    moveDirection(RIGHT, 50);
 80028ae:	2132      	movs	r1, #50	@ 0x32
 80028b0:	2003      	movs	r0, #3
 80028b2:	f7ff fc31 	bl	8002118 <moveDirection>
            break;
 80028b6:	e39f      	b.n	8002ff8 <processRobot+0x9b0>
        }

        case MODE_TEST_ENCODERS:
        {
            if (sTimer2GetFlag())
 80028b8:	f000 fc64 	bl	8003184 <sTimer2GetFlag>
 80028bc:	4603      	mov	r3, r0
 80028be:	2b00      	cmp	r3, #0
 80028c0:	f000 839c 	beq.w	8002ffc <processRobot+0x9b4>
            {
                toggleLedDebug();
 80028c4:	f7fe fc68 	bl	8001198 <toggleLedDebug>

                (void)scanButton();
 80028c8:	f7fe fa66 	bl	8000d98 <scanButton>

                if (isButtonPressed(BUTTON_1))
 80028cc:	2000      	movs	r0, #0
 80028ce:	f7fe faa9 	bl	8000e24 <isButtonPressed>
 80028d2:	4603      	mov	r3, r0
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d016      	beq.n	8002906 <processRobot+0x2be>
                {
                    uint32_t encoder_1_pulse = getPulseCount(ENCODER_1);
 80028d8:	2000      	movs	r0, #0
 80028da:	f7fe fcdd 	bl	8001298 <getPulseCount>
 80028de:	4603      	mov	r3, r0
 80028e0:	643b      	str	r3, [r7, #64]	@ 0x40
                    uint8_t transmit_buffer[4] = {0};
 80028e2:	2300      	movs	r3, #0
 80028e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
                    uint32_to_bytes(&encoder_1_pulse, transmit_buffer, 1);
 80028e6:	f107 013c 	add.w	r1, r7, #60	@ 0x3c
 80028ea:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80028ee:	2201      	movs	r2, #1
 80028f0:	4618      	mov	r0, r3
 80028f2:	f001 fc43 	bl	800417c <uint32_to_bytes>
                    uartTransmit8b(&huart2, transmit_buffer, 4);
 80028f6:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80028fa:	2204      	movs	r2, #4
 80028fc:	4619      	mov	r1, r3
 80028fe:	4813      	ldr	r0, [pc, #76]	@ (800294c <processRobot+0x304>)
 8002900:	f001 face 	bl	8003ea0 <uartTransmit8b>
                    uint8_t transmit_buffer[4] = {0};
                    uint32_to_bytes(&encoder_4_pulse, transmit_buffer, 1);
                    uartTransmit8b(&huart2, transmit_buffer, 4);
                }
            }
            break;
 8002904:	e37a      	b.n	8002ffc <processRobot+0x9b4>
                else if (isButtonPressed(BUTTON_2))
 8002906:	2001      	movs	r0, #1
 8002908:	f7fe fa8c 	bl	8000e24 <isButtonPressed>
 800290c:	4603      	mov	r3, r0
 800290e:	2b00      	cmp	r3, #0
 8002910:	d028      	beq.n	8002964 <processRobot+0x31c>
                    uint32_t encoder_2_pulse = getPulseCount(ENCODER_2);
 8002912:	2001      	movs	r0, #1
 8002914:	f7fe fcc0 	bl	8001298 <getPulseCount>
 8002918:	4603      	mov	r3, r0
 800291a:	63bb      	str	r3, [r7, #56]	@ 0x38
                    uint8_t transmit_buffer[4] = {0};
 800291c:	2300      	movs	r3, #0
 800291e:	637b      	str	r3, [r7, #52]	@ 0x34
                    uint32_to_bytes(&encoder_2_pulse, transmit_buffer, 1);
 8002920:	f107 0134 	add.w	r1, r7, #52	@ 0x34
 8002924:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8002928:	2201      	movs	r2, #1
 800292a:	4618      	mov	r0, r3
 800292c:	f001 fc26 	bl	800417c <uint32_to_bytes>
                    uartTransmit8b(&huart2, transmit_buffer, 4);
 8002930:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002934:	2204      	movs	r2, #4
 8002936:	4619      	mov	r1, r3
 8002938:	4804      	ldr	r0, [pc, #16]	@ (800294c <processRobot+0x304>)
 800293a:	f001 fab1 	bl	8003ea0 <uartTransmit8b>
            break;
 800293e:	e35d      	b.n	8002ffc <processRobot+0x9b4>
 8002940:	2000021c 	.word	0x2000021c
 8002944:	2000021d 	.word	0x2000021d
 8002948:	0800a0f0 	.word	0x0800a0f0
 800294c:	20000444 	.word	0x20000444
 8002950:	0800a104 	.word	0x0800a104
 8002954:	0800a118 	.word	0x0800a118
 8002958:	0800a12c 	.word	0x0800a12c
 800295c:	40011000 	.word	0x40011000
 8002960:	2000021e 	.word	0x2000021e
                else if (isButtonPressed(BUTTON_3))
 8002964:	2002      	movs	r0, #2
 8002966:	f7fe fa5d 	bl	8000e24 <isButtonPressed>
 800296a:	4603      	mov	r3, r0
 800296c:	2b00      	cmp	r3, #0
 800296e:	d016      	beq.n	800299e <processRobot+0x356>
                    uint32_t encoder_3_pulse = getPulseCount(ENCODER_3);
 8002970:	2002      	movs	r0, #2
 8002972:	f7fe fc91 	bl	8001298 <getPulseCount>
 8002976:	4603      	mov	r3, r0
 8002978:	633b      	str	r3, [r7, #48]	@ 0x30
                    uint8_t transmit_buffer[4] = {0};
 800297a:	2300      	movs	r3, #0
 800297c:	62fb      	str	r3, [r7, #44]	@ 0x2c
                    uint32_to_bytes(&encoder_3_pulse, transmit_buffer, 1);
 800297e:	f107 012c 	add.w	r1, r7, #44	@ 0x2c
 8002982:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8002986:	2201      	movs	r2, #1
 8002988:	4618      	mov	r0, r3
 800298a:	f001 fbf7 	bl	800417c <uint32_to_bytes>
                    uartTransmit8b(&huart2, transmit_buffer, 4);
 800298e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002992:	2204      	movs	r2, #4
 8002994:	4619      	mov	r1, r3
 8002996:	48ce      	ldr	r0, [pc, #824]	@ (8002cd0 <processRobot+0x688>)
 8002998:	f001 fa82 	bl	8003ea0 <uartTransmit8b>
            break;
 800299c:	e32e      	b.n	8002ffc <processRobot+0x9b4>
                else if (isButtonPressed(BUTTON_4))
 800299e:	2003      	movs	r0, #3
 80029a0:	f7fe fa40 	bl	8000e24 <isButtonPressed>
 80029a4:	4603      	mov	r3, r0
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	f000 8328 	beq.w	8002ffc <processRobot+0x9b4>
                    uint32_t encoder_4_pulse = getPulseCount(ENCODER_4);
 80029ac:	2003      	movs	r0, #3
 80029ae:	f7fe fc73 	bl	8001298 <getPulseCount>
 80029b2:	4603      	mov	r3, r0
 80029b4:	62bb      	str	r3, [r7, #40]	@ 0x28
                    uint8_t transmit_buffer[4] = {0};
 80029b6:	2300      	movs	r3, #0
 80029b8:	627b      	str	r3, [r7, #36]	@ 0x24
                    uint32_to_bytes(&encoder_4_pulse, transmit_buffer, 1);
 80029ba:	f107 0124 	add.w	r1, r7, #36	@ 0x24
 80029be:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80029c2:	2201      	movs	r2, #1
 80029c4:	4618      	mov	r0, r3
 80029c6:	f001 fbd9 	bl	800417c <uint32_to_bytes>
                    uartTransmit8b(&huart2, transmit_buffer, 4);
 80029ca:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80029ce:	2204      	movs	r2, #4
 80029d0:	4619      	mov	r1, r3
 80029d2:	48bf      	ldr	r0, [pc, #764]	@ (8002cd0 <processRobot+0x688>)
 80029d4:	f001 fa64 	bl	8003ea0 <uartTransmit8b>
            break;
 80029d8:	e310      	b.n	8002ffc <processRobot+0x9b4>
        }

        case MODE_TEST_PID:
        {
            if (sTimer2GetFlag())
 80029da:	f000 fbd3 	bl	8003184 <sTimer2GetFlag>
 80029de:	4603      	mov	r3, r0
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	f000 80ad 	beq.w	8002b40 <processRobot+0x4f8>
            {
                toggleLedDebug();
 80029e6:	f7fe fbd7 	bl	8001198 <toggleLedDebug>

                (void)scanButton();
 80029ea:	f7fe f9d5 	bl	8000d98 <scanButton>

                if (isButtonPressed(BUTTON_1))
 80029ee:	2000      	movs	r0, #0
 80029f0:	f7fe fa18 	bl	8000e24 <isButtonPressed>
 80029f4:	4603      	mov	r3, r0
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d010      	beq.n	8002a1c <processRobot+0x3d4>
                {
                    setSpeedPIDMotor(ENCODER_1, 234);
 80029fa:	21ea      	movs	r1, #234	@ 0xea
 80029fc:	2000      	movs	r0, #0
 80029fe:	f7ff fc27 	bl	8002250 <setSpeedPIDMotor>
                    setSpeedPIDMotor(ENCODER_2, 234);
 8002a02:	21ea      	movs	r1, #234	@ 0xea
 8002a04:	2001      	movs	r0, #1
 8002a06:	f7ff fc23 	bl	8002250 <setSpeedPIDMotor>
                    setSpeedPIDMotor(ENCODER_3, 234);
 8002a0a:	21ea      	movs	r1, #234	@ 0xea
 8002a0c:	2002      	movs	r0, #2
 8002a0e:	f7ff fc1f 	bl	8002250 <setSpeedPIDMotor>
                    setSpeedPIDMotor(ENCODER_4, 234);
 8002a12:	21ea      	movs	r1, #234	@ 0xea
 8002a14:	2003      	movs	r0, #3
 8002a16:	f7ff fc1b 	bl	8002250 <setSpeedPIDMotor>
 8002a1a:	e034      	b.n	8002a86 <processRobot+0x43e>
                }
                else if (isButtonPressed(BUTTON_2))
 8002a1c:	2001      	movs	r0, #1
 8002a1e:	f7fe fa01 	bl	8000e24 <isButtonPressed>
 8002a22:	4603      	mov	r3, r0
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d014      	beq.n	8002a52 <processRobot+0x40a>
                {
                    setSpeedPIDMotor(ENCODER_1, 468);
 8002a28:	f44f 71ea 	mov.w	r1, #468	@ 0x1d4
 8002a2c:	2000      	movs	r0, #0
 8002a2e:	f7ff fc0f 	bl	8002250 <setSpeedPIDMotor>
                    setSpeedPIDMotor(ENCODER_2, 468);
 8002a32:	f44f 71ea 	mov.w	r1, #468	@ 0x1d4
 8002a36:	2001      	movs	r0, #1
 8002a38:	f7ff fc0a 	bl	8002250 <setSpeedPIDMotor>
                    setSpeedPIDMotor(ENCODER_3, 468);
 8002a3c:	f44f 71ea 	mov.w	r1, #468	@ 0x1d4
 8002a40:	2002      	movs	r0, #2
 8002a42:	f7ff fc05 	bl	8002250 <setSpeedPIDMotor>
                    setSpeedPIDMotor(ENCODER_4, 468);
 8002a46:	f44f 71ea 	mov.w	r1, #468	@ 0x1d4
 8002a4a:	2003      	movs	r0, #3
 8002a4c:	f7ff fc00 	bl	8002250 <setSpeedPIDMotor>
 8002a50:	e019      	b.n	8002a86 <processRobot+0x43e>
                }
                else if (isButtonPressed(BUTTON_3))
 8002a52:	2002      	movs	r0, #2
 8002a54:	f7fe f9e6 	bl	8000e24 <isButtonPressed>
 8002a58:	4603      	mov	r3, r0
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d013      	beq.n	8002a86 <processRobot+0x43e>
                {
                    setSpeedPIDMotor(ENCODER_1, -234);
 8002a5e:	f06f 01e9 	mvn.w	r1, #233	@ 0xe9
 8002a62:	2000      	movs	r0, #0
 8002a64:	f7ff fbf4 	bl	8002250 <setSpeedPIDMotor>
                    setSpeedPIDMotor(ENCODER_2, -234);
 8002a68:	f06f 01e9 	mvn.w	r1, #233	@ 0xe9
 8002a6c:	2001      	movs	r0, #1
 8002a6e:	f7ff fbef 	bl	8002250 <setSpeedPIDMotor>
                    setSpeedPIDMotor(ENCODER_3, -234);
 8002a72:	f06f 01e9 	mvn.w	r1, #233	@ 0xe9
 8002a76:	2002      	movs	r0, #2
 8002a78:	f7ff fbea 	bl	8002250 <setSpeedPIDMotor>
                    setSpeedPIDMotor(ENCODER_4, -234);
 8002a7c:	f06f 01e9 	mvn.w	r1, #233	@ 0xe9
 8002a80:	2003      	movs	r0, #3
 8002a82:	f7ff fbe5 	bl	8002250 <setSpeedPIDMotor>
                }

                motor1Rotates(round(computePIDMotor(ENCODER_1)));
 8002a86:	2000      	movs	r0, #0
 8002a88:	f7ff fc22 	bl	80022d0 <computePIDMotor>
 8002a8c:	4603      	mov	r3, r0
 8002a8e:	4618      	mov	r0, r3
 8002a90:	f7fd fd34 	bl	80004fc <__aeabi_f2d>
 8002a94:	4602      	mov	r2, r0
 8002a96:	460b      	mov	r3, r1
 8002a98:	4610      	mov	r0, r2
 8002a9a:	4619      	mov	r1, r3
 8002a9c:	f007 fa36 	bl	8009f0c <round>
 8002aa0:	4602      	mov	r2, r0
 8002aa2:	460b      	mov	r3, r1
 8002aa4:	4610      	mov	r0, r2
 8002aa6:	4619      	mov	r1, r3
 8002aa8:	f7fd fd80 	bl	80005ac <__aeabi_d2iz>
 8002aac:	4603      	mov	r3, r0
 8002aae:	4618      	mov	r0, r3
 8002ab0:	f7ff f996 	bl	8001de0 <motor1Rotates>
                motor2Rotates(round(computePIDMotor(ENCODER_2)));
 8002ab4:	2001      	movs	r0, #1
 8002ab6:	f7ff fc0b 	bl	80022d0 <computePIDMotor>
 8002aba:	4603      	mov	r3, r0
 8002abc:	4618      	mov	r0, r3
 8002abe:	f7fd fd1d 	bl	80004fc <__aeabi_f2d>
 8002ac2:	4602      	mov	r2, r0
 8002ac4:	460b      	mov	r3, r1
 8002ac6:	4610      	mov	r0, r2
 8002ac8:	4619      	mov	r1, r3
 8002aca:	f007 fa1f 	bl	8009f0c <round>
 8002ace:	4602      	mov	r2, r0
 8002ad0:	460b      	mov	r3, r1
 8002ad2:	4610      	mov	r0, r2
 8002ad4:	4619      	mov	r1, r3
 8002ad6:	f7fd fd69 	bl	80005ac <__aeabi_d2iz>
 8002ada:	4603      	mov	r3, r0
 8002adc:	4618      	mov	r0, r3
 8002ade:	f7ff f9a9 	bl	8001e34 <motor2Rotates>
                motor3Rotates(round(computePIDMotor(ENCODER_3)));
 8002ae2:	2002      	movs	r0, #2
 8002ae4:	f7ff fbf4 	bl	80022d0 <computePIDMotor>
 8002ae8:	4603      	mov	r3, r0
 8002aea:	4618      	mov	r0, r3
 8002aec:	f7fd fd06 	bl	80004fc <__aeabi_f2d>
 8002af0:	4602      	mov	r2, r0
 8002af2:	460b      	mov	r3, r1
 8002af4:	4610      	mov	r0, r2
 8002af6:	4619      	mov	r1, r3
 8002af8:	f007 fa08 	bl	8009f0c <round>
 8002afc:	4602      	mov	r2, r0
 8002afe:	460b      	mov	r3, r1
 8002b00:	4610      	mov	r0, r2
 8002b02:	4619      	mov	r1, r3
 8002b04:	f7fd fd52 	bl	80005ac <__aeabi_d2iz>
 8002b08:	4603      	mov	r3, r0
 8002b0a:	4618      	mov	r0, r3
 8002b0c:	f7ff f9bc 	bl	8001e88 <motor3Rotates>
                motor4Rotates(round(computePIDMotor(ENCODER_4)));
 8002b10:	2003      	movs	r0, #3
 8002b12:	f7ff fbdd 	bl	80022d0 <computePIDMotor>
 8002b16:	4603      	mov	r3, r0
 8002b18:	4618      	mov	r0, r3
 8002b1a:	f7fd fcef 	bl	80004fc <__aeabi_f2d>
 8002b1e:	4602      	mov	r2, r0
 8002b20:	460b      	mov	r3, r1
 8002b22:	4610      	mov	r0, r2
 8002b24:	4619      	mov	r1, r3
 8002b26:	f007 f9f1 	bl	8009f0c <round>
 8002b2a:	4602      	mov	r2, r0
 8002b2c:	460b      	mov	r3, r1
 8002b2e:	4610      	mov	r0, r2
 8002b30:	4619      	mov	r1, r3
 8002b32:	f7fd fd3b 	bl	80005ac <__aeabi_d2iz>
 8002b36:	4603      	mov	r3, r0
 8002b38:	4618      	mov	r0, r3
 8002b3a:	f7ff f9cd 	bl	8001ed8 <motor4Rotates>
                break;
 8002b3e:	e26e      	b.n	800301e <processRobot+0x9d6>
            }
        }

        case MODE_TEST_SERVO_MOTORS:
        {
            if (sTimer2GetFlag())
 8002b40:	f000 fb20 	bl	8003184 <sTimer2GetFlag>
 8002b44:	4603      	mov	r3, r0
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	f000 825a 	beq.w	8003000 <processRobot+0x9b8>
            {
                toggleLedDebug();
 8002b4c:	f7fe fb24 	bl	8001198 <toggleLedDebug>

                (void)scanButton();
 8002b50:	f7fe f922 	bl	8000d98 <scanButton>

                if (isButtonPressed(BUTTON_1))
 8002b54:	2000      	movs	r0, #0
 8002b56:	f7fe f965 	bl	8000e24 <isButtonPressed>
 8002b5a:	4603      	mov	r3, r0
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d010      	beq.n	8002b82 <processRobot+0x53a>
                {
                    servoSetAngle(SERVO_1, 0);
 8002b60:	2100      	movs	r1, #0
 8002b62:	2000      	movs	r0, #0
 8002b64:	f000 fa88 	bl	8003078 <servoSetAngle>
                    servoSetAngle(SERVO_2, 0);
 8002b68:	2100      	movs	r1, #0
 8002b6a:	2001      	movs	r0, #1
 8002b6c:	f000 fa84 	bl	8003078 <servoSetAngle>
                    servoSetAngle(SERVO_3, 0);
 8002b70:	2100      	movs	r1, #0
 8002b72:	2002      	movs	r0, #2
 8002b74:	f000 fa80 	bl	8003078 <servoSetAngle>

                    (void)uartTransmitString(&huart2, "Button 1 Pressed\r\n");
 8002b78:	4956      	ldr	r1, [pc, #344]	@ (8002cd4 <processRobot+0x68c>)
 8002b7a:	4855      	ldr	r0, [pc, #340]	@ (8002cd0 <processRobot+0x688>)
 8002b7c:	f001 f966 	bl	8003e4c <uartTransmitString>
                    servoSetAngle(SERVO_3, 55);

                    (void)uartTransmitString(&huart2, "Button 4 Pressed\r\n");
                }
            }
            break;
 8002b80:	e23e      	b.n	8003000 <processRobot+0x9b8>
                else if (isButtonPressed(BUTTON_2))
 8002b82:	2001      	movs	r0, #1
 8002b84:	f7fe f94e 	bl	8000e24 <isButtonPressed>
 8002b88:	4603      	mov	r3, r0
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d010      	beq.n	8002bb0 <processRobot+0x568>
                    servoSetAngle(SERVO_1, 14);
 8002b8e:	210e      	movs	r1, #14
 8002b90:	2000      	movs	r0, #0
 8002b92:	f000 fa71 	bl	8003078 <servoSetAngle>
                    servoSetAngle(SERVO_2, 14);
 8002b96:	210e      	movs	r1, #14
 8002b98:	2001      	movs	r0, #1
 8002b9a:	f000 fa6d 	bl	8003078 <servoSetAngle>
                    servoSetAngle(SERVO_3, 14);
 8002b9e:	210e      	movs	r1, #14
 8002ba0:	2002      	movs	r0, #2
 8002ba2:	f000 fa69 	bl	8003078 <servoSetAngle>
                    (void)uartTransmitString(&huart2, "Button 2 Pressed\r\n");
 8002ba6:	494c      	ldr	r1, [pc, #304]	@ (8002cd8 <processRobot+0x690>)
 8002ba8:	4849      	ldr	r0, [pc, #292]	@ (8002cd0 <processRobot+0x688>)
 8002baa:	f001 f94f 	bl	8003e4c <uartTransmitString>
            break;
 8002bae:	e227      	b.n	8003000 <processRobot+0x9b8>
                else if (isButtonPressed(BUTTON_3))
 8002bb0:	2002      	movs	r0, #2
 8002bb2:	f7fe f937 	bl	8000e24 <isButtonPressed>
 8002bb6:	4603      	mov	r3, r0
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d010      	beq.n	8002bde <processRobot+0x596>
                    servoSetAngle(SERVO_1, 28);
 8002bbc:	211c      	movs	r1, #28
 8002bbe:	2000      	movs	r0, #0
 8002bc0:	f000 fa5a 	bl	8003078 <servoSetAngle>
                    servoSetAngle(SERVO_2, 28);
 8002bc4:	211c      	movs	r1, #28
 8002bc6:	2001      	movs	r0, #1
 8002bc8:	f000 fa56 	bl	8003078 <servoSetAngle>
                    servoSetAngle(SERVO_3, 28);
 8002bcc:	211c      	movs	r1, #28
 8002bce:	2002      	movs	r0, #2
 8002bd0:	f000 fa52 	bl	8003078 <servoSetAngle>
                    (void)uartTransmitString(&huart2, "Button 3 Pressed\r\n");
 8002bd4:	4941      	ldr	r1, [pc, #260]	@ (8002cdc <processRobot+0x694>)
 8002bd6:	483e      	ldr	r0, [pc, #248]	@ (8002cd0 <processRobot+0x688>)
 8002bd8:	f001 f938 	bl	8003e4c <uartTransmitString>
            break;
 8002bdc:	e210      	b.n	8003000 <processRobot+0x9b8>
                else if (isButtonPressed(BUTTON_4))
 8002bde:	2003      	movs	r0, #3
 8002be0:	f7fe f920 	bl	8000e24 <isButtonPressed>
 8002be4:	4603      	mov	r3, r0
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	f000 820a 	beq.w	8003000 <processRobot+0x9b8>
                    servoSetAngle(SERVO_1, 55);
 8002bec:	2137      	movs	r1, #55	@ 0x37
 8002bee:	2000      	movs	r0, #0
 8002bf0:	f000 fa42 	bl	8003078 <servoSetAngle>
                    servoSetAngle(SERVO_2, 55);
 8002bf4:	2137      	movs	r1, #55	@ 0x37
 8002bf6:	2001      	movs	r0, #1
 8002bf8:	f000 fa3e 	bl	8003078 <servoSetAngle>
                    servoSetAngle(SERVO_3, 55);
 8002bfc:	2137      	movs	r1, #55	@ 0x37
 8002bfe:	2002      	movs	r0, #2
 8002c00:	f000 fa3a 	bl	8003078 <servoSetAngle>
                    (void)uartTransmitString(&huart2, "Button 4 Pressed\r\n");
 8002c04:	4936      	ldr	r1, [pc, #216]	@ (8002ce0 <processRobot+0x698>)
 8002c06:	4832      	ldr	r0, [pc, #200]	@ (8002cd0 <processRobot+0x688>)
 8002c08:	f001 f920 	bl	8003e4c <uartTransmitString>
            break;
 8002c0c:	e1f8      	b.n	8003000 <processRobot+0x9b8>
        }

        case MODE_TEST_STEP_MOTORS:
        {
            if (sTimer2GetFlag())
 8002c0e:	f000 fab9 	bl	8003184 <sTimer2GetFlag>
 8002c12:	4603      	mov	r3, r0
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	f000 81f5 	beq.w	8003004 <processRobot+0x9bc>
            {
                toggleLedDebug();
 8002c1a:	f7fe fabd 	bl	8001198 <toggleLedDebug>

                (void)scanButton();
 8002c1e:	f7fe f8bb 	bl	8000d98 <scanButton>

                if (isButtonPressed(BUTTON_1))
 8002c22:	2000      	movs	r0, #0
 8002c24:	f7fe f8fe 	bl	8000e24 <isButtonPressed>
 8002c28:	4603      	mov	r3, r0
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d004      	beq.n	8002c38 <processRobot+0x5f0>
                {
                    stepMotorMove(UP, 1);
 8002c2e:	2101      	movs	r1, #1
 8002c30:	2001      	movs	r0, #1
 8002c32:	f000 fbb5 	bl	80033a0 <stepMotorMove>
                else if (isButtonPressed(BUTTON_2))
                {
                    stepMotorMove(DOWN, 1);
                }
            }
            break;
 8002c36:	e1e5      	b.n	8003004 <processRobot+0x9bc>
                else if (isButtonPressed(BUTTON_2))
 8002c38:	2001      	movs	r0, #1
 8002c3a:	f7fe f8f3 	bl	8000e24 <isButtonPressed>
 8002c3e:	4603      	mov	r3, r0
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	f000 81df 	beq.w	8003004 <processRobot+0x9bc>
                    stepMotorMove(DOWN, 1);
 8002c46:	2101      	movs	r1, #1
 8002c48:	2000      	movs	r0, #0
 8002c4a:	f000 fba9 	bl	80033a0 <stepMotorMove>
            break;
 8002c4e:	e1d9      	b.n	8003004 <processRobot+0x9bc>
        }

        case MODE_TEST_SENSORS:
        {
            if (sTimer2GetFlag())
 8002c50:	f000 fa98 	bl	8003184 <sTimer2GetFlag>
 8002c54:	4603      	mov	r3, r0
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	f000 81dc 	beq.w	8003014 <processRobot+0x9cc>
            {
                toggleLedDebug();
 8002c5c:	f7fe fa9c 	bl	8001198 <toggleLedDebug>

                (void)scanButton();
 8002c60:	f7fe f89a 	bl	8000d98 <scanButton>

                if (isButtonPressed(BUTTON_1))
 8002c64:	2000      	movs	r0, #0
 8002c66:	f7fe f8dd 	bl	8000e24 <isButtonPressed>
 8002c6a:	4603      	mov	r3, r0
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d002      	beq.n	8002c76 <processRobot+0x62e>
                {
                    (void)calibSensor();
 8002c70:	f7fe fd4e 	bl	8001710 <calibSensor>
                    uint8_t transmit_buffer[16] = {0};
                    uint16_to_bytes(getSensorValue(), transmit_buffer, 8);
                    (void)uartTransmit8b(&huart2, transmit_buffer, 16);
                }
            }
            break;
 8002c74:	e1ce      	b.n	8003014 <processRobot+0x9cc>
                else if (isButtonPressed(BUTTON_2))
 8002c76:	2001      	movs	r0, #1
 8002c78:	f7fe f8d4 	bl	8000e24 <isButtonPressed>
 8002c7c:	4603      	mov	r3, r0
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d008      	beq.n	8002c94 <processRobot+0x64c>
                    sensorScan();
 8002c82:	f7fe fd67 	bl	8001754 <sensorScan>
                    displayLeds(getSensorState());
 8002c86:	f7fe feb1 	bl	80019ec <getSensorState>
 8002c8a:	4603      	mov	r3, r0
 8002c8c:	4618      	mov	r0, r3
 8002c8e:	f7fe fa6f 	bl	8001170 <displayLeds>
            break;
 8002c92:	e1bf      	b.n	8003014 <processRobot+0x9cc>
                else if (isButtonPressed(BUTTON_3))
 8002c94:	2002      	movs	r0, #2
 8002c96:	f7fe f8c5 	bl	8000e24 <isButtonPressed>
 8002c9a:	4603      	mov	r3, r0
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d021      	beq.n	8002ce4 <processRobot+0x69c>
                    uint8_t transmit_buffer[16] = {0};
 8002ca0:	f107 0314 	add.w	r3, r7, #20
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	601a      	str	r2, [r3, #0]
 8002ca8:	605a      	str	r2, [r3, #4]
 8002caa:	609a      	str	r2, [r3, #8]
 8002cac:	60da      	str	r2, [r3, #12]
                    uint16_to_bytes(getSensorCalibValue(), transmit_buffer, 8);
 8002cae:	f7fe fea7 	bl	8001a00 <getSensorCalibValue>
 8002cb2:	f107 0314 	add.w	r3, r7, #20
 8002cb6:	2208      	movs	r2, #8
 8002cb8:	4619      	mov	r1, r3
 8002cba:	f001 faa9 	bl	8004210 <uint16_to_bytes>
                    (void)uartTransmit8b(&huart2, transmit_buffer, 16);
 8002cbe:	f107 0314 	add.w	r3, r7, #20
 8002cc2:	2210      	movs	r2, #16
 8002cc4:	4619      	mov	r1, r3
 8002cc6:	4802      	ldr	r0, [pc, #8]	@ (8002cd0 <processRobot+0x688>)
 8002cc8:	f001 f8ea 	bl	8003ea0 <uartTransmit8b>
            break;
 8002ccc:	e1a2      	b.n	8003014 <processRobot+0x9cc>
 8002cce:	bf00      	nop
 8002cd0:	20000444 	.word	0x20000444
 8002cd4:	0800a0f0 	.word	0x0800a0f0
 8002cd8:	0800a104 	.word	0x0800a104
 8002cdc:	0800a118 	.word	0x0800a118
 8002ce0:	0800a12c 	.word	0x0800a12c
                else if (isButtonPressed(BUTTON_4))
 8002ce4:	2003      	movs	r0, #3
 8002ce6:	f7fe f89d 	bl	8000e24 <isButtonPressed>
 8002cea:	4603      	mov	r3, r0
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	f000 8191 	beq.w	8003014 <processRobot+0x9cc>
                    uint8_t transmit_buffer[16] = {0};
 8002cf2:	1d3b      	adds	r3, r7, #4
 8002cf4:	2200      	movs	r2, #0
 8002cf6:	601a      	str	r2, [r3, #0]
 8002cf8:	605a      	str	r2, [r3, #4]
 8002cfa:	609a      	str	r2, [r3, #8]
 8002cfc:	60da      	str	r2, [r3, #12]
                    uint16_to_bytes(getSensorValue(), transmit_buffer, 8);
 8002cfe:	f7fe fe89 	bl	8001a14 <getSensorValue>
 8002d02:	1d3b      	adds	r3, r7, #4
 8002d04:	2208      	movs	r2, #8
 8002d06:	4619      	mov	r1, r3
 8002d08:	f001 fa82 	bl	8004210 <uint16_to_bytes>
                    (void)uartTransmit8b(&huart2, transmit_buffer, 16);
 8002d0c:	1d3b      	adds	r3, r7, #4
 8002d0e:	2210      	movs	r2, #16
 8002d10:	4619      	mov	r1, r3
 8002d12:	48bd      	ldr	r0, [pc, #756]	@ (8003008 <processRobot+0x9c0>)
 8002d14:	f001 f8c4 	bl	8003ea0 <uartTransmit8b>
            break;
 8002d18:	e17c      	b.n	8003014 <processRobot+0x9cc>
        }
        case MODE_TEST_GAMEPAD:
        {
            if (sTimer2GetFlag())
 8002d1a:	f000 fa33 	bl	8003184 <sTimer2GetFlag>
 8002d1e:	4603      	mov	r3, r0
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	f000 8179 	beq.w	8003018 <processRobot+0x9d0>
            {
                if (readGamepadData() == STATUS_OK)
 8002d26:	f7fe fb0b 	bl	8001340 <readGamepadData>
 8002d2a:	4603      	mov	r3, r0
 8002d2c:	2b01      	cmp	r3, #1
 8002d2e:	f040 8173 	bne.w	8003018 <processRobot+0x9d0>
                {
                    uint8_t speed = 50;
 8002d32:	2332      	movs	r3, #50	@ 0x32
 8002d34:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47

                    if (isGamepadButtonPressed(BUTTON_TRIANGLE))
 8002d38:	2007      	movs	r0, #7
 8002d3a:	f7fe fb1b 	bl	8001374 <isGamepadButtonPressed>
 8002d3e:	4603      	mov	r3, r0
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d004      	beq.n	8002d4e <processRobot+0x706>
                    {
                        speed *= 2;
 8002d44:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8002d48:	005b      	lsls	r3, r3, #1
 8002d4a:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
                    }

                    if (isGamepadButtonPressed(BUTTON_CROSS))
 8002d4e:	2004      	movs	r0, #4
 8002d50:	f7fe fb10 	bl	8001374 <isGamepadButtonPressed>
 8002d54:	4603      	mov	r3, r0
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d004      	beq.n	8002d64 <processRobot+0x71c>
                    {
                        speed /= 2;
 8002d5a:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8002d5e:	085b      	lsrs	r3, r3, #1
 8002d60:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
                    }

                    if (isGamepadButtonPressed(BUTTON_UP))
 8002d64:	2000      	movs	r0, #0
 8002d66:	f7fe fb05 	bl	8001374 <isGamepadButtonPressed>
 8002d6a:	4603      	mov	r3, r0
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d006      	beq.n	8002d7e <processRobot+0x736>
                    {
                        moveDirection(FORWARD, speed);
 8002d70:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8002d74:	4619      	mov	r1, r3
 8002d76:	2000      	movs	r0, #0
 8002d78:	f7ff f9ce 	bl	8002118 <moveDirection>
 8002d7c:	e042      	b.n	8002e04 <processRobot+0x7bc>
                    }
                    else if (isGamepadButtonPressed(BUTTON_DOWN))
 8002d7e:	2001      	movs	r0, #1
 8002d80:	f7fe faf8 	bl	8001374 <isGamepadButtonPressed>
 8002d84:	4603      	mov	r3, r0
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d006      	beq.n	8002d98 <processRobot+0x750>
                    {
                        moveDirection(BACKWARD, speed);
 8002d8a:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8002d8e:	4619      	mov	r1, r3
 8002d90:	2001      	movs	r0, #1
 8002d92:	f7ff f9c1 	bl	8002118 <moveDirection>
 8002d96:	e035      	b.n	8002e04 <processRobot+0x7bc>
                    }
                    else if (isGamepadButtonPressed(BUTTON_LEFT))
 8002d98:	2003      	movs	r0, #3
 8002d9a:	f7fe faeb 	bl	8001374 <isGamepadButtonPressed>
 8002d9e:	4603      	mov	r3, r0
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d006      	beq.n	8002db2 <processRobot+0x76a>
                    {
                        moveDirection(LEFT, speed);
 8002da4:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8002da8:	4619      	mov	r1, r3
 8002daa:	2002      	movs	r0, #2
 8002dac:	f7ff f9b4 	bl	8002118 <moveDirection>
 8002db0:	e028      	b.n	8002e04 <processRobot+0x7bc>
                    }
                    else if (isGamepadButtonPressed(BUTTON_RIGHT))
 8002db2:	2002      	movs	r0, #2
 8002db4:	f7fe fade 	bl	8001374 <isGamepadButtonPressed>
 8002db8:	4603      	mov	r3, r0
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d006      	beq.n	8002dcc <processRobot+0x784>
                    {
                        moveDirection(RIGHT, speed);
 8002dbe:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8002dc2:	4619      	mov	r1, r3
 8002dc4:	2003      	movs	r0, #3
 8002dc6:	f7ff f9a7 	bl	8002118 <moveDirection>
 8002dca:	e01b      	b.n	8002e04 <processRobot+0x7bc>
                    }
                    else if (isGamepadButtonPressed(BUTTON_SQUARE))
 8002dcc:	2006      	movs	r0, #6
 8002dce:	f7fe fad1 	bl	8001374 <isGamepadButtonPressed>
 8002dd2:	4603      	mov	r3, r0
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d006      	beq.n	8002de6 <processRobot+0x79e>
                    {
                        moveDirection(ROTATE_LEFT, speed);
 8002dd8:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8002ddc:	4619      	mov	r1, r3
 8002dde:	2008      	movs	r0, #8
 8002de0:	f7ff f99a 	bl	8002118 <moveDirection>
 8002de4:	e00e      	b.n	8002e04 <processRobot+0x7bc>
                    }
                    else if (isGamepadButtonPressed(BUTTON_CIRCLE))
 8002de6:	2005      	movs	r0, #5
 8002de8:	f7fe fac4 	bl	8001374 <isGamepadButtonPressed>
 8002dec:	4603      	mov	r3, r0
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d006      	beq.n	8002e00 <processRobot+0x7b8>
                    {
                        moveDirection(ROTATE_RIGHT, speed);
 8002df2:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8002df6:	4619      	mov	r1, r3
 8002df8:	2009      	movs	r0, #9
 8002dfa:	f7ff f98d 	bl	8002118 <moveDirection>
 8002dfe:	e001      	b.n	8002e04 <processRobot+0x7bc>
                    }
                    else
                    {
                        motorStop();
 8002e00:	f7ff f892 	bl	8001f28 <motorStop>
                    }

                    if (isGamepadButtonPressed(BUTTON_L1))
 8002e04:	2008      	movs	r0, #8
 8002e06:	f7fe fab5 	bl	8001374 <isGamepadButtonPressed>
 8002e0a:	4603      	mov	r3, r0
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d004      	beq.n	8002e1a <processRobot+0x7d2>
                    {
                        stepMotorMove(UP, 1);
 8002e10:	2101      	movs	r1, #1
 8002e12:	2001      	movs	r0, #1
 8002e14:	f000 fac4 	bl	80033a0 <stepMotorMove>
 8002e18:	e009      	b.n	8002e2e <processRobot+0x7e6>
                    }
                    else if (isGamepadButtonPressed(BUTTON_R1))
 8002e1a:	200a      	movs	r0, #10
 8002e1c:	f7fe faaa 	bl	8001374 <isGamepadButtonPressed>
 8002e20:	4603      	mov	r3, r0
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d003      	beq.n	8002e2e <processRobot+0x7e6>
                    {
                        stepMotorMove(DOWN, 1);
 8002e26:	2101      	movs	r1, #1
 8002e28:	2000      	movs	r0, #0
 8002e2a:	f000 fab9 	bl	80033a0 <stepMotorMove>
                    }

                    static uint8_t angle = 0;
                    if (isGamepadButtonPressed(BUTTON_L2))
 8002e2e:	2009      	movs	r0, #9
 8002e30:	f7fe faa0 	bl	8001374 <isGamepadButtonPressed>
 8002e34:	4603      	mov	r3, r0
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d013      	beq.n	8002e62 <processRobot+0x81a>
                    {
                        angle = (angle < 55) ? (angle + 1) : angle;
 8002e3a:	4b74      	ldr	r3, [pc, #464]	@ (800300c <processRobot+0x9c4>)
 8002e3c:	781b      	ldrb	r3, [r3, #0]
 8002e3e:	2b36      	cmp	r3, #54	@ 0x36
 8002e40:	d804      	bhi.n	8002e4c <processRobot+0x804>
 8002e42:	4b72      	ldr	r3, [pc, #456]	@ (800300c <processRobot+0x9c4>)
 8002e44:	781b      	ldrb	r3, [r3, #0]
 8002e46:	3301      	adds	r3, #1
 8002e48:	b2db      	uxtb	r3, r3
 8002e4a:	e001      	b.n	8002e50 <processRobot+0x808>
 8002e4c:	4b6f      	ldr	r3, [pc, #444]	@ (800300c <processRobot+0x9c4>)
 8002e4e:	781b      	ldrb	r3, [r3, #0]
 8002e50:	4a6e      	ldr	r2, [pc, #440]	@ (800300c <processRobot+0x9c4>)
 8002e52:	7013      	strb	r3, [r2, #0]

                        servoSetAngle(SERVO_3, angle);
 8002e54:	4b6d      	ldr	r3, [pc, #436]	@ (800300c <processRobot+0x9c4>)
 8002e56:	781b      	ldrb	r3, [r3, #0]
 8002e58:	4619      	mov	r1, r3
 8002e5a:	2002      	movs	r0, #2
 8002e5c:	f000 f90c 	bl	8003078 <servoSetAngle>

                        servoSetAngle(SERVO_3, angle);
                    }
                }
            }
            break;
 8002e60:	e0da      	b.n	8003018 <processRobot+0x9d0>
                    else if (isGamepadButtonPressed(BUTTON_R2))
 8002e62:	200b      	movs	r0, #11
 8002e64:	f7fe fa86 	bl	8001374 <isGamepadButtonPressed>
 8002e68:	4603      	mov	r3, r0
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	f000 80d4 	beq.w	8003018 <processRobot+0x9d0>
                        angle = (angle > 0) ? (angle - 1) : angle;
 8002e70:	4b66      	ldr	r3, [pc, #408]	@ (800300c <processRobot+0x9c4>)
 8002e72:	781b      	ldrb	r3, [r3, #0]
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d004      	beq.n	8002e82 <processRobot+0x83a>
 8002e78:	4b64      	ldr	r3, [pc, #400]	@ (800300c <processRobot+0x9c4>)
 8002e7a:	781b      	ldrb	r3, [r3, #0]
 8002e7c:	3b01      	subs	r3, #1
 8002e7e:	b2db      	uxtb	r3, r3
 8002e80:	e001      	b.n	8002e86 <processRobot+0x83e>
 8002e82:	4b62      	ldr	r3, [pc, #392]	@ (800300c <processRobot+0x9c4>)
 8002e84:	781b      	ldrb	r3, [r3, #0]
 8002e86:	4a61      	ldr	r2, [pc, #388]	@ (800300c <processRobot+0x9c4>)
 8002e88:	7013      	strb	r3, [r2, #0]
                        servoSetAngle(SERVO_3, angle);
 8002e8a:	4b60      	ldr	r3, [pc, #384]	@ (800300c <processRobot+0x9c4>)
 8002e8c:	781b      	ldrb	r3, [r3, #0]
 8002e8e:	4619      	mov	r1, r3
 8002e90:	2002      	movs	r0, #2
 8002e92:	f000 f8f1 	bl	8003078 <servoSetAngle>
            break;
 8002e96:	e0bf      	b.n	8003018 <processRobot+0x9d0>
        }
        case MODE_TEST_MODULE_MKE:
        {
            if (getFlagUart1())
 8002e98:	f001 f82e 	bl	8003ef8 <getFlagUart1>
 8002e9c:	4603      	mov	r3, r0
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d001      	beq.n	8002ea6 <processRobot+0x85e>
            {
                (void)readSWGamepadData();
 8002ea2:	f7fe fe63 	bl	8001b6c <readSWGamepadData>
            }
            if (sTimer2GetFlag())
 8002ea6:	f000 f96d 	bl	8003184 <sTimer2GetFlag>
 8002eaa:	4603      	mov	r3, r0
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	f000 80b5 	beq.w	800301c <processRobot+0x9d4>
            {
                uint8_t speed = 50;
 8002eb2:	2332      	movs	r3, #50	@ 0x32
 8002eb4:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46

                if (isSWGamepadButtonPressed(SW_BUTTON_START))
 8002eb8:	2008      	movs	r0, #8
 8002eba:	f7fe feab 	bl	8001c14 <isSWGamepadButtonPressed>
 8002ebe:	4603      	mov	r3, r0
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d005      	beq.n	8002ed0 <processRobot+0x888>
                {
                    speed *= 2;
 8002ec4:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8002ec8:	005b      	lsls	r3, r3, #1
 8002eca:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
 8002ece:	e00a      	b.n	8002ee6 <processRobot+0x89e>
                }
                else if (isSWGamepadButtonPressed(SW_BUTTON_SELECT))
 8002ed0:	2009      	movs	r0, #9
 8002ed2:	f7fe fe9f 	bl	8001c14 <isSWGamepadButtonPressed>
 8002ed6:	4603      	mov	r3, r0
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d004      	beq.n	8002ee6 <processRobot+0x89e>
                {
                    speed /= 2;
 8002edc:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8002ee0:	085b      	lsrs	r3, r3, #1
 8002ee2:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
                }

                if (isSWGamepadButtonPressed(SW_BUTTON_UP))
 8002ee6:	2000      	movs	r0, #0
 8002ee8:	f7fe fe94 	bl	8001c14 <isSWGamepadButtonPressed>
 8002eec:	4603      	mov	r3, r0
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d006      	beq.n	8002f00 <processRobot+0x8b8>
                {
                    moveDirection(FORWARD, speed);
 8002ef2:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8002ef6:	4619      	mov	r1, r3
 8002ef8:	2000      	movs	r0, #0
 8002efa:	f7ff f90d 	bl	8002118 <moveDirection>
 8002efe:	e028      	b.n	8002f52 <processRobot+0x90a>
                }
                else if (isSWGamepadButtonPressed(SW_BUTTON_DOWN))
 8002f00:	2001      	movs	r0, #1
 8002f02:	f7fe fe87 	bl	8001c14 <isSWGamepadButtonPressed>
 8002f06:	4603      	mov	r3, r0
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d006      	beq.n	8002f1a <processRobot+0x8d2>
                {
                    moveDirection(BACKWARD, speed);
 8002f0c:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8002f10:	4619      	mov	r1, r3
 8002f12:	2001      	movs	r0, #1
 8002f14:	f7ff f900 	bl	8002118 <moveDirection>
 8002f18:	e01b      	b.n	8002f52 <processRobot+0x90a>
                }
                else if (isSWGamepadButtonPressed(SW_BUTTON_LEFT))
 8002f1a:	2002      	movs	r0, #2
 8002f1c:	f7fe fe7a 	bl	8001c14 <isSWGamepadButtonPressed>
 8002f20:	4603      	mov	r3, r0
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d006      	beq.n	8002f34 <processRobot+0x8ec>
                {
                    moveDirection(LEFT, speed);
 8002f26:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8002f2a:	4619      	mov	r1, r3
 8002f2c:	2002      	movs	r0, #2
 8002f2e:	f7ff f8f3 	bl	8002118 <moveDirection>
 8002f32:	e00e      	b.n	8002f52 <processRobot+0x90a>
                }
                else if (isSWGamepadButtonPressed(SW_BUTTON_RIGHT))
 8002f34:	2003      	movs	r0, #3
 8002f36:	f7fe fe6d 	bl	8001c14 <isSWGamepadButtonPressed>
 8002f3a:	4603      	mov	r3, r0
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d006      	beq.n	8002f4e <processRobot+0x906>
                {
                    moveDirection(RIGHT, speed);
 8002f40:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8002f44:	4619      	mov	r1, r3
 8002f46:	2003      	movs	r0, #3
 8002f48:	f7ff f8e6 	bl	8002118 <moveDirection>
 8002f4c:	e001      	b.n	8002f52 <processRobot+0x90a>
                }
                else
                {
                    motorStop();
 8002f4e:	f7fe ffeb 	bl	8001f28 <motorStop>
                }

                if (isSWGamepadButtonPressed(SW_BUTTON_CROSS))
 8002f52:	2004      	movs	r0, #4
 8002f54:	f7fe fe5e 	bl	8001c14 <isSWGamepadButtonPressed>
 8002f58:	4603      	mov	r3, r0
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d004      	beq.n	8002f68 <processRobot+0x920>
                {
                    stepMotorMove(DOWN, 1);
 8002f5e:	2101      	movs	r1, #1
 8002f60:	2000      	movs	r0, #0
 8002f62:	f000 fa1d 	bl	80033a0 <stepMotorMove>
 8002f66:	e009      	b.n	8002f7c <processRobot+0x934>
                }
                else if (isSWGamepadButtonPressed(SW_BUTTON_TRIANGLE))
 8002f68:	2007      	movs	r0, #7
 8002f6a:	f7fe fe53 	bl	8001c14 <isSWGamepadButtonPressed>
 8002f6e:	4603      	mov	r3, r0
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d003      	beq.n	8002f7c <processRobot+0x934>
                {
                    stepMotorMove(UP, 1);
 8002f74:	2101      	movs	r1, #1
 8002f76:	2001      	movs	r0, #1
 8002f78:	f000 fa12 	bl	80033a0 <stepMotorMove>
                }

                static uint8_t angle = 0;
                if (isSWGamepadButtonPressed(SW_BUTTON_CIRCLE))
 8002f7c:	2005      	movs	r0, #5
 8002f7e:	f7fe fe49 	bl	8001c14 <isSWGamepadButtonPressed>
 8002f82:	4603      	mov	r3, r0
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d013      	beq.n	8002fb0 <processRobot+0x968>
                {
                    angle = (angle < 55) ? (angle + 1) : angle;
 8002f88:	4b21      	ldr	r3, [pc, #132]	@ (8003010 <processRobot+0x9c8>)
 8002f8a:	781b      	ldrb	r3, [r3, #0]
 8002f8c:	2b36      	cmp	r3, #54	@ 0x36
 8002f8e:	d804      	bhi.n	8002f9a <processRobot+0x952>
 8002f90:	4b1f      	ldr	r3, [pc, #124]	@ (8003010 <processRobot+0x9c8>)
 8002f92:	781b      	ldrb	r3, [r3, #0]
 8002f94:	3301      	adds	r3, #1
 8002f96:	b2db      	uxtb	r3, r3
 8002f98:	e001      	b.n	8002f9e <processRobot+0x956>
 8002f9a:	4b1d      	ldr	r3, [pc, #116]	@ (8003010 <processRobot+0x9c8>)
 8002f9c:	781b      	ldrb	r3, [r3, #0]
 8002f9e:	4a1c      	ldr	r2, [pc, #112]	@ (8003010 <processRobot+0x9c8>)
 8002fa0:	7013      	strb	r3, [r2, #0]

                    servoSetAngle(SERVO_3, angle);
 8002fa2:	4b1b      	ldr	r3, [pc, #108]	@ (8003010 <processRobot+0x9c8>)
 8002fa4:	781b      	ldrb	r3, [r3, #0]
 8002fa6:	4619      	mov	r1, r3
 8002fa8:	2002      	movs	r0, #2
 8002faa:	f000 f865 	bl	8003078 <servoSetAngle>

                    servoSetAngle(SERVO_3, angle);
                }
            }

            break;
 8002fae:	e035      	b.n	800301c <processRobot+0x9d4>
                else if (isSWGamepadButtonPressed(SW_BUTTON_SQUARE))
 8002fb0:	2006      	movs	r0, #6
 8002fb2:	f7fe fe2f 	bl	8001c14 <isSWGamepadButtonPressed>
 8002fb6:	4603      	mov	r3, r0
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d02f      	beq.n	800301c <processRobot+0x9d4>
                    angle = (angle > 0) ? (angle - 1) : angle;
 8002fbc:	4b14      	ldr	r3, [pc, #80]	@ (8003010 <processRobot+0x9c8>)
 8002fbe:	781b      	ldrb	r3, [r3, #0]
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d004      	beq.n	8002fce <processRobot+0x986>
 8002fc4:	4b12      	ldr	r3, [pc, #72]	@ (8003010 <processRobot+0x9c8>)
 8002fc6:	781b      	ldrb	r3, [r3, #0]
 8002fc8:	3b01      	subs	r3, #1
 8002fca:	b2db      	uxtb	r3, r3
 8002fcc:	e001      	b.n	8002fd2 <processRobot+0x98a>
 8002fce:	4b10      	ldr	r3, [pc, #64]	@ (8003010 <processRobot+0x9c8>)
 8002fd0:	781b      	ldrb	r3, [r3, #0]
 8002fd2:	4a0f      	ldr	r2, [pc, #60]	@ (8003010 <processRobot+0x9c8>)
 8002fd4:	7013      	strb	r3, [r2, #0]
                    servoSetAngle(SERVO_3, angle);
 8002fd6:	4b0e      	ldr	r3, [pc, #56]	@ (8003010 <processRobot+0x9c8>)
 8002fd8:	781b      	ldrb	r3, [r3, #0]
 8002fda:	4619      	mov	r1, r3
 8002fdc:	2002      	movs	r0, #2
 8002fde:	f000 f84b 	bl	8003078 <servoSetAngle>
            break;
 8002fe2:	e01b      	b.n	800301c <processRobot+0x9d4>
            break;
        }

        default:
        {
            return STATUS_ERROR;
 8002fe4:	2300      	movs	r3, #0
 8002fe6:	e01b      	b.n	8003020 <processRobot+0x9d8>
            break;
 8002fe8:	bf00      	nop
 8002fea:	e018      	b.n	800301e <processRobot+0x9d6>
            break;
 8002fec:	bf00      	nop
 8002fee:	e016      	b.n	800301e <processRobot+0x9d6>
            break;
 8002ff0:	bf00      	nop
 8002ff2:	e014      	b.n	800301e <processRobot+0x9d6>
            break;
 8002ff4:	bf00      	nop
 8002ff6:	e012      	b.n	800301e <processRobot+0x9d6>
            break;
 8002ff8:	bf00      	nop
 8002ffa:	e010      	b.n	800301e <processRobot+0x9d6>
            break;
 8002ffc:	bf00      	nop
 8002ffe:	e00e      	b.n	800301e <processRobot+0x9d6>
            break;
 8003000:	bf00      	nop
 8003002:	e00c      	b.n	800301e <processRobot+0x9d6>
            break;
 8003004:	bf00      	nop
 8003006:	e00a      	b.n	800301e <processRobot+0x9d6>
 8003008:	20000444 	.word	0x20000444
 800300c:	2000021f 	.word	0x2000021f
 8003010:	20000220 	.word	0x20000220
            break;
 8003014:	bf00      	nop
 8003016:	e002      	b.n	800301e <processRobot+0x9d6>
            break;
 8003018:	bf00      	nop
 800301a:	e000      	b.n	800301e <processRobot+0x9d6>
            break;
 800301c:	bf00      	nop
            break;
        }
        }
        return STATUS_OK;
 800301e:	2301      	movs	r3, #1
    }
 8003020:	4618      	mov	r0, r3
 8003022:	374c      	adds	r7, #76	@ 0x4c
 8003024:	46bd      	mov	sp, r7
 8003026:	bd90      	pop	{r4, r7, pc}

08003028 <initServo>:
	 * SERVO1: TIM_CHANNEL_3
	 * SERVO2: TIM_CHANNEL_2
	 * SERVO3: TIM_CHANNEL_1
	 */
	enum StatusCode initServo(const enum Servo servo_id)
	{
 8003028:	b580      	push	{r7, lr}
 800302a:	b084      	sub	sp, #16
 800302c:	af00      	add	r7, sp, #0
 800302e:	4603      	mov	r3, r0
 8003030:	71fb      	strb	r3, [r7, #7]
		for (uint8_t attempt = 0; attempt < MAX_RETRY_COUNT; ++attempt)
 8003032:	2300      	movs	r3, #0
 8003034:	73fb      	strb	r3, [r7, #15]
 8003036:	e012      	b.n	800305e <initServo+0x36>
		{
			if (HAL_TIM_PWM_Start(&htim4, servo_channel[servo_id]) == HAL_OK)
 8003038:	79fb      	ldrb	r3, [r7, #7]
 800303a:	4a0d      	ldr	r2, [pc, #52]	@ (8003070 <initServo+0x48>)
 800303c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003040:	4619      	mov	r1, r3
 8003042:	480c      	ldr	r0, [pc, #48]	@ (8003074 <initServo+0x4c>)
 8003044:	f004 ff8c 	bl	8007f60 <HAL_TIM_PWM_Start>
 8003048:	4603      	mov	r3, r0
 800304a:	2b00      	cmp	r3, #0
 800304c:	d101      	bne.n	8003052 <initServo+0x2a>
			{
				return STATUS_OK;
 800304e:	2301      	movs	r3, #1
 8003050:	e009      	b.n	8003066 <initServo+0x3e>
			}

			HAL_Delay(50);
 8003052:	2032      	movs	r0, #50	@ 0x32
 8003054:	f001 f996 	bl	8004384 <HAL_Delay>
		for (uint8_t attempt = 0; attempt < MAX_RETRY_COUNT; ++attempt)
 8003058:	7bfb      	ldrb	r3, [r7, #15]
 800305a:	3301      	adds	r3, #1
 800305c:	73fb      	strb	r3, [r7, #15]
 800305e:	7bfb      	ldrb	r3, [r7, #15]
 8003060:	2b02      	cmp	r3, #2
 8003062:	d9e9      	bls.n	8003038 <initServo+0x10>
		}
		return STATUS_ERROR;
 8003064:	2300      	movs	r3, #0
	}
 8003066:	4618      	mov	r0, r3
 8003068:	3710      	adds	r7, #16
 800306a:	46bd      	mov	sp, r7
 800306c:	bd80      	pop	{r7, pc}
 800306e:	bf00      	nop
 8003070:	0800a160 	.word	0x0800a160
 8003074:	20000320 	.word	0x20000320

08003078 <servoSetAngle>:
	 * SERVO1: TIM_CHANNEL_3
	 * SERVO2: TIM_CHANNEL_2
	 * SERVO3: TIM_CHANNEL_1
	 */
	void servoSetAngle(const enum Servo servo_id, uint8_t angle)
	{
 8003078:	b480      	push	{r7}
 800307a:	b085      	sub	sp, #20
 800307c:	af00      	add	r7, sp, #0
 800307e:	4603      	mov	r3, r0
 8003080:	460a      	mov	r2, r1
 8003082:	71fb      	strb	r3, [r7, #7]
 8003084:	4613      	mov	r3, r2
 8003086:	71bb      	strb	r3, [r7, #6]
		if (angle < 0)
		{
			angle = 0;
		}
		else if (angle > 55)
 8003088:	79bb      	ldrb	r3, [r7, #6]
 800308a:	2b37      	cmp	r3, #55	@ 0x37
 800308c:	d901      	bls.n	8003092 <servoSetAngle+0x1a>
		{
			angle = 55;
 800308e:	2337      	movs	r3, #55	@ 0x37
 8003090:	71bb      	strb	r3, [r7, #6]
		}

		uint16_t duty_cycle = (angle * 110) / 180 + 20;
 8003092:	79bb      	ldrb	r3, [r7, #6]
 8003094:	226e      	movs	r2, #110	@ 0x6e
 8003096:	fb02 f303 	mul.w	r3, r2, r3
 800309a:	4a1a      	ldr	r2, [pc, #104]	@ (8003104 <servoSetAngle+0x8c>)
 800309c:	fb82 1203 	smull	r1, r2, r2, r3
 80030a0:	441a      	add	r2, r3
 80030a2:	11d2      	asrs	r2, r2, #7
 80030a4:	17db      	asrs	r3, r3, #31
 80030a6:	1ad3      	subs	r3, r2, r3
 80030a8:	b29b      	uxth	r3, r3
 80030aa:	3314      	adds	r3, #20
 80030ac:	81fb      	strh	r3, [r7, #14]
		__HAL_TIM_SET_COMPARE(&htim4, servo_channel[servo_id], duty_cycle);
 80030ae:	79fb      	ldrb	r3, [r7, #7]
 80030b0:	4a15      	ldr	r2, [pc, #84]	@ (8003108 <servoSetAngle+0x90>)
 80030b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d104      	bne.n	80030c4 <servoSetAngle+0x4c>
 80030ba:	4b14      	ldr	r3, [pc, #80]	@ (800310c <servoSetAngle+0x94>)
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	89fa      	ldrh	r2, [r7, #14]
 80030c0:	635a      	str	r2, [r3, #52]	@ 0x34
	}
 80030c2:	e019      	b.n	80030f8 <servoSetAngle+0x80>
		__HAL_TIM_SET_COMPARE(&htim4, servo_channel[servo_id], duty_cycle);
 80030c4:	79fb      	ldrb	r3, [r7, #7]
 80030c6:	4a10      	ldr	r2, [pc, #64]	@ (8003108 <servoSetAngle+0x90>)
 80030c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80030cc:	2b04      	cmp	r3, #4
 80030ce:	d104      	bne.n	80030da <servoSetAngle+0x62>
 80030d0:	4b0e      	ldr	r3, [pc, #56]	@ (800310c <servoSetAngle+0x94>)
 80030d2:	681a      	ldr	r2, [r3, #0]
 80030d4:	89fb      	ldrh	r3, [r7, #14]
 80030d6:	6393      	str	r3, [r2, #56]	@ 0x38
	}
 80030d8:	e00e      	b.n	80030f8 <servoSetAngle+0x80>
		__HAL_TIM_SET_COMPARE(&htim4, servo_channel[servo_id], duty_cycle);
 80030da:	79fb      	ldrb	r3, [r7, #7]
 80030dc:	4a0a      	ldr	r2, [pc, #40]	@ (8003108 <servoSetAngle+0x90>)
 80030de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80030e2:	2b08      	cmp	r3, #8
 80030e4:	d104      	bne.n	80030f0 <servoSetAngle+0x78>
 80030e6:	4b09      	ldr	r3, [pc, #36]	@ (800310c <servoSetAngle+0x94>)
 80030e8:	681a      	ldr	r2, [r3, #0]
 80030ea:	89fb      	ldrh	r3, [r7, #14]
 80030ec:	63d3      	str	r3, [r2, #60]	@ 0x3c
	}
 80030ee:	e003      	b.n	80030f8 <servoSetAngle+0x80>
		__HAL_TIM_SET_COMPARE(&htim4, servo_channel[servo_id], duty_cycle);
 80030f0:	4b06      	ldr	r3, [pc, #24]	@ (800310c <servoSetAngle+0x94>)
 80030f2:	681a      	ldr	r2, [r3, #0]
 80030f4:	89fb      	ldrh	r3, [r7, #14]
 80030f6:	6413      	str	r3, [r2, #64]	@ 0x40
	}
 80030f8:	bf00      	nop
 80030fa:	3714      	adds	r7, #20
 80030fc:	46bd      	mov	sp, r7
 80030fe:	bc80      	pop	{r7}
 8003100:	4770      	bx	lr
 8003102:	bf00      	nop
 8003104:	b60b60b7 	.word	0xb60b60b7
 8003108:	0800a160 	.word	0x0800a160
 800310c:	20000320 	.word	0x20000320

08003110 <initTimer2>:

	/**
	 * @brief	init timer function
	 */
	enum StatusCode initTimer2()
	{
 8003110:	b580      	push	{r7, lr}
 8003112:	b082      	sub	sp, #8
 8003114:	af00      	add	r7, sp, #0
		for (uint8_t attempt = 0; attempt < MAX_RETRY_COUNT; ++attempt)
 8003116:	2300      	movs	r3, #0
 8003118:	71fb      	strb	r3, [r7, #7]
 800311a:	e00d      	b.n	8003138 <initTimer2+0x28>
		{
			if (HAL_TIM_Base_Start_IT(&htim2) == HAL_OK)
 800311c:	480a      	ldr	r0, [pc, #40]	@ (8003148 <initTimer2+0x38>)
 800311e:	f004 fe6f 	bl	8007e00 <HAL_TIM_Base_Start_IT>
 8003122:	4603      	mov	r3, r0
 8003124:	2b00      	cmp	r3, #0
 8003126:	d101      	bne.n	800312c <initTimer2+0x1c>
			{
				return STATUS_OK;
 8003128:	2301      	movs	r3, #1
 800312a:	e009      	b.n	8003140 <initTimer2+0x30>
			}

			HAL_Delay(50);
 800312c:	2032      	movs	r0, #50	@ 0x32
 800312e:	f001 f929 	bl	8004384 <HAL_Delay>
		for (uint8_t attempt = 0; attempt < MAX_RETRY_COUNT; ++attempt)
 8003132:	79fb      	ldrb	r3, [r7, #7]
 8003134:	3301      	adds	r3, #1
 8003136:	71fb      	strb	r3, [r7, #7]
 8003138:	79fb      	ldrb	r3, [r7, #7]
 800313a:	2b02      	cmp	r3, #2
 800313c:	d9ee      	bls.n	800311c <initTimer2+0xc>
		}
		return STATUS_ERROR;
 800313e:	2300      	movs	r3, #0
	}
 8003140:	4618      	mov	r0, r3
 8003142:	3708      	adds	r7, #8
 8003144:	46bd      	mov	sp, r7
 8003146:	bd80      	pop	{r7, pc}
 8003148:	20000290 	.word	0x20000290

0800314c <sTimer2Set>:
	 * @brief	set timer duration(ms)
	 * @param	delay(ms)
	 * @param	period(ms)
	 */
	void sTimer2Set(uint16_t delay, uint16_t period)
	{
 800314c:	b480      	push	{r7}
 800314e:	b083      	sub	sp, #12
 8003150:	af00      	add	r7, sp, #0
 8003152:	4603      	mov	r3, r0
 8003154:	460a      	mov	r2, r1
 8003156:	80fb      	strh	r3, [r7, #6]
 8003158:	4613      	mov	r3, r2
 800315a:	80bb      	strh	r3, [r7, #4]
		timer_2_mul = period / TIMER_2_CYCLES;
 800315c:	4a06      	ldr	r2, [pc, #24]	@ (8003178 <sTimer2Set+0x2c>)
 800315e:	88bb      	ldrh	r3, [r7, #4]
 8003160:	8013      	strh	r3, [r2, #0]
		timer_2_counter = delay / TIMER_2_CYCLES;
 8003162:	4a06      	ldr	r2, [pc, #24]	@ (800317c <sTimer2Set+0x30>)
 8003164:	88fb      	ldrh	r3, [r7, #6]
 8003166:	8013      	strh	r3, [r2, #0]
		timer_2_flag = 0;
 8003168:	4b05      	ldr	r3, [pc, #20]	@ (8003180 <sTimer2Set+0x34>)
 800316a:	2200      	movs	r2, #0
 800316c:	701a      	strb	r2, [r3, #0]
	}
 800316e:	bf00      	nop
 8003170:	370c      	adds	r7, #12
 8003172:	46bd      	mov	sp, r7
 8003174:	bc80      	pop	{r7}
 8003176:	4770      	bx	lr
 8003178:	20000224 	.word	0x20000224
 800317c:	20000222 	.word	0x20000222
 8003180:	20000221 	.word	0x20000221

08003184 <sTimer2GetFlag>:
	/**
	 * @brief	get flag timer fuction and auto reset flags and timer counter
	 * @return	timer flag
	 */
	uint8_t sTimer2GetFlag()
	{
 8003184:	b480      	push	{r7}
 8003186:	af00      	add	r7, sp, #0
		if (timer_2_flag)
 8003188:	4b08      	ldr	r3, [pc, #32]	@ (80031ac <sTimer2GetFlag+0x28>)
 800318a:	781b      	ldrb	r3, [r3, #0]
 800318c:	2b00      	cmp	r3, #0
 800318e:	d008      	beq.n	80031a2 <sTimer2GetFlag+0x1e>
		{
			timer_2_flag = 0;
 8003190:	4b06      	ldr	r3, [pc, #24]	@ (80031ac <sTimer2GetFlag+0x28>)
 8003192:	2200      	movs	r2, #0
 8003194:	701a      	strb	r2, [r3, #0]
			timer_2_counter = timer_2_mul;
 8003196:	4b06      	ldr	r3, [pc, #24]	@ (80031b0 <sTimer2GetFlag+0x2c>)
 8003198:	881a      	ldrh	r2, [r3, #0]
 800319a:	4b06      	ldr	r3, [pc, #24]	@ (80031b4 <sTimer2GetFlag+0x30>)
 800319c:	801a      	strh	r2, [r3, #0]
			return 1;
 800319e:	2301      	movs	r3, #1
 80031a0:	e000      	b.n	80031a4 <sTimer2GetFlag+0x20>
		}
		return 0;
 80031a2:	2300      	movs	r3, #0
	}
 80031a4:	4618      	mov	r0, r3
 80031a6:	46bd      	mov	sp, r7
 80031a8:	bc80      	pop	{r7}
 80031aa:	4770      	bx	lr
 80031ac:	20000221 	.word	0x20000221
 80031b0:	20000224 	.word	0x20000224
 80031b4:	20000222 	.word	0x20000222

080031b8 <HAL_TIM_PeriodElapsedCallback>:

	/**
	 * @brief	callback function call every 1ms
	 */
	void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
	{
 80031b8:	b580      	push	{r7, lr}
 80031ba:	b082      	sub	sp, #8
 80031bc:	af00      	add	r7, sp, #0
 80031be:	6078      	str	r0, [r7, #4]
		if (htim->Instance == TIM2)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80031c8:	d114      	bne.n	80031f4 <HAL_TIM_PeriodElapsedCallback+0x3c>
		{
			if (timer_2_counter > 0)
 80031ca:	4b0c      	ldr	r3, [pc, #48]	@ (80031fc <HAL_TIM_PeriodElapsedCallback+0x44>)
 80031cc:	881b      	ldrh	r3, [r3, #0]
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d005      	beq.n	80031de <HAL_TIM_PeriodElapsedCallback+0x26>
			{
				--timer_2_counter;
 80031d2:	4b0a      	ldr	r3, [pc, #40]	@ (80031fc <HAL_TIM_PeriodElapsedCallback+0x44>)
 80031d4:	881b      	ldrh	r3, [r3, #0]
 80031d6:	3b01      	subs	r3, #1
 80031d8:	b29a      	uxth	r2, r3
 80031da:	4b08      	ldr	r3, [pc, #32]	@ (80031fc <HAL_TIM_PeriodElapsedCallback+0x44>)
 80031dc:	801a      	strh	r2, [r3, #0]
			}
			if (timer_2_counter <= 0)
 80031de:	4b07      	ldr	r3, [pc, #28]	@ (80031fc <HAL_TIM_PeriodElapsedCallback+0x44>)
 80031e0:	881b      	ldrh	r3, [r3, #0]
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d102      	bne.n	80031ec <HAL_TIM_PeriodElapsedCallback+0x34>
			{
				timer_2_flag = 1;
 80031e6:	4b06      	ldr	r3, [pc, #24]	@ (8003200 <HAL_TIM_PeriodElapsedCallback+0x48>)
 80031e8:	2201      	movs	r2, #1
 80031ea:	701a      	strb	r2, [r3, #0]
			}

			displayScan();
 80031ec:	f7fd fede 	bl	8000fac <displayScan>
			scanEncoder();
 80031f0:	f7fd fffc 	bl	80011ec <scanEncoder>
		}
	}
 80031f4:	bf00      	nop
 80031f6:	3708      	adds	r7, #8
 80031f8:	46bd      	mov	sp, r7
 80031fa:	bd80      	pop	{r7, pc}
 80031fc:	20000222 	.word	0x20000222
 8003200:	20000221 	.word	0x20000221

08003204 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8003204:	b580      	push	{r7, lr}
 8003206:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8003208:	4b17      	ldr	r3, [pc, #92]	@ (8003268 <MX_SPI1_Init+0x64>)
 800320a:	4a18      	ldr	r2, [pc, #96]	@ (800326c <MX_SPI1_Init+0x68>)
 800320c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800320e:	4b16      	ldr	r3, [pc, #88]	@ (8003268 <MX_SPI1_Init+0x64>)
 8003210:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8003214:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8003216:	4b14      	ldr	r3, [pc, #80]	@ (8003268 <MX_SPI1_Init+0x64>)
 8003218:	2200      	movs	r2, #0
 800321a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800321c:	4b12      	ldr	r3, [pc, #72]	@ (8003268 <MX_SPI1_Init+0x64>)
 800321e:	2200      	movs	r2, #0
 8003220:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003222:	4b11      	ldr	r3, [pc, #68]	@ (8003268 <MX_SPI1_Init+0x64>)
 8003224:	2200      	movs	r2, #0
 8003226:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003228:	4b0f      	ldr	r3, [pc, #60]	@ (8003268 <MX_SPI1_Init+0x64>)
 800322a:	2200      	movs	r2, #0
 800322c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 800322e:	4b0e      	ldr	r3, [pc, #56]	@ (8003268 <MX_SPI1_Init+0x64>)
 8003230:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8003234:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8003236:	4b0c      	ldr	r3, [pc, #48]	@ (8003268 <MX_SPI1_Init+0x64>)
 8003238:	2208      	movs	r2, #8
 800323a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800323c:	4b0a      	ldr	r3, [pc, #40]	@ (8003268 <MX_SPI1_Init+0x64>)
 800323e:	2200      	movs	r2, #0
 8003240:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8003242:	4b09      	ldr	r3, [pc, #36]	@ (8003268 <MX_SPI1_Init+0x64>)
 8003244:	2200      	movs	r2, #0
 8003246:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003248:	4b07      	ldr	r3, [pc, #28]	@ (8003268 <MX_SPI1_Init+0x64>)
 800324a:	2200      	movs	r2, #0
 800324c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 800324e:	4b06      	ldr	r3, [pc, #24]	@ (8003268 <MX_SPI1_Init+0x64>)
 8003250:	220a      	movs	r2, #10
 8003252:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003254:	4804      	ldr	r0, [pc, #16]	@ (8003268 <MX_SPI1_Init+0x64>)
 8003256:	f003 ffef 	bl	8007238 <HAL_SPI_Init>
 800325a:	4603      	mov	r3, r0
 800325c:	2b00      	cmp	r3, #0
 800325e:	d001      	beq.n	8003264 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8003260:	f7fe fc69 	bl	8001b36 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8003264:	bf00      	nop
 8003266:	bd80      	pop	{r7, pc}
 8003268:	20000228 	.word	0x20000228
 800326c:	40013000 	.word	0x40013000

08003270 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8003270:	b580      	push	{r7, lr}
 8003272:	b088      	sub	sp, #32
 8003274:	af00      	add	r7, sp, #0
 8003276:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003278:	f107 0310 	add.w	r3, r7, #16
 800327c:	2200      	movs	r2, #0
 800327e:	601a      	str	r2, [r3, #0]
 8003280:	605a      	str	r2, [r3, #4]
 8003282:	609a      	str	r2, [r3, #8]
 8003284:	60da      	str	r2, [r3, #12]
  if(spiHandle->Instance==SPI1)
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	4a1b      	ldr	r2, [pc, #108]	@ (80032f8 <HAL_SPI_MspInit+0x88>)
 800328c:	4293      	cmp	r3, r2
 800328e:	d12f      	bne.n	80032f0 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003290:	4b1a      	ldr	r3, [pc, #104]	@ (80032fc <HAL_SPI_MspInit+0x8c>)
 8003292:	699b      	ldr	r3, [r3, #24]
 8003294:	4a19      	ldr	r2, [pc, #100]	@ (80032fc <HAL_SPI_MspInit+0x8c>)
 8003296:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800329a:	6193      	str	r3, [r2, #24]
 800329c:	4b17      	ldr	r3, [pc, #92]	@ (80032fc <HAL_SPI_MspInit+0x8c>)
 800329e:	699b      	ldr	r3, [r3, #24]
 80032a0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80032a4:	60fb      	str	r3, [r7, #12]
 80032a6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80032a8:	4b14      	ldr	r3, [pc, #80]	@ (80032fc <HAL_SPI_MspInit+0x8c>)
 80032aa:	699b      	ldr	r3, [r3, #24]
 80032ac:	4a13      	ldr	r2, [pc, #76]	@ (80032fc <HAL_SPI_MspInit+0x8c>)
 80032ae:	f043 0304 	orr.w	r3, r3, #4
 80032b2:	6193      	str	r3, [r2, #24]
 80032b4:	4b11      	ldr	r3, [pc, #68]	@ (80032fc <HAL_SPI_MspInit+0x8c>)
 80032b6:	699b      	ldr	r3, [r3, #24]
 80032b8:	f003 0304 	and.w	r3, r3, #4
 80032bc:	60bb      	str	r3, [r7, #8]
 80032be:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7;
 80032c0:	23b0      	movs	r3, #176	@ 0xb0
 80032c2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032c4:	2302      	movs	r3, #2
 80032c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80032c8:	2303      	movs	r3, #3
 80032ca:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80032cc:	f107 0310 	add.w	r3, r7, #16
 80032d0:	4619      	mov	r1, r3
 80032d2:	480b      	ldr	r0, [pc, #44]	@ (8003300 <HAL_SPI_MspInit+0x90>)
 80032d4:	f002 f9ea 	bl	80056ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80032d8:	2340      	movs	r3, #64	@ 0x40
 80032da:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80032dc:	2300      	movs	r3, #0
 80032de:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032e0:	2300      	movs	r3, #0
 80032e2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80032e4:	f107 0310 	add.w	r3, r7, #16
 80032e8:	4619      	mov	r1, r3
 80032ea:	4805      	ldr	r0, [pc, #20]	@ (8003300 <HAL_SPI_MspInit+0x90>)
 80032ec:	f002 f9de 	bl	80056ac <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80032f0:	bf00      	nop
 80032f2:	3720      	adds	r7, #32
 80032f4:	46bd      	mov	sp, r7
 80032f6:	bd80      	pop	{r7, pc}
 80032f8:	40013000 	.word	0x40013000
 80032fc:	40021000 	.word	0x40021000
 8003300:	40010800 	.word	0x40010800

08003304 <calibStepMotor>:

	/**
	 * @note This function should be called in setup and run once only!
	 */
	enum StatusCode calibStepMotor()
	{
 8003304:	b580      	push	{r7, lr}
 8003306:	af00      	add	r7, sp, #0
		sensorScan();
 8003308:	f7fe fa24 	bl	8001754 <sensorScan>

		if (getSensorValue()[0] > THRESHOLD_SENSORS && getSensorValue()[7] > THRESHOLD_SENSORS)
 800330c:	f7fe fb82 	bl	8001a14 <getSensorValue>
 8003310:	4603      	mov	r3, r0
 8003312:	881b      	ldrh	r3, [r3, #0]
 8003314:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8003318:	d926      	bls.n	8003368 <calibStepMotor+0x64>
 800331a:	f7fe fb7b 	bl	8001a14 <getSensorValue>
 800331e:	4603      	mov	r3, r0
 8003320:	330e      	adds	r3, #14
 8003322:	881b      	ldrh	r3, [r3, #0]
 8003324:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8003328:	d91e      	bls.n	8003368 <calibStepMotor+0x64>
		{
			while (getSensorValue()[0] > THRESHOLD_SENSORS && getSensorValue()[7] > THRESHOLD_SENSORS)
 800332a:	e009      	b.n	8003340 <calibStepMotor+0x3c>
			{
				stepMotorMove(DOWN, 1);
 800332c:	2101      	movs	r1, #1
 800332e:	2000      	movs	r0, #0
 8003330:	f000 f836 	bl	80033a0 <stepMotorMove>
				HAL_Delay(10000);
 8003334:	f242 7010 	movw	r0, #10000	@ 0x2710
 8003338:	f001 f824 	bl	8004384 <HAL_Delay>
				sensorScan();
 800333c:	f7fe fa0a 	bl	8001754 <sensorScan>
			while (getSensorValue()[0] > THRESHOLD_SENSORS && getSensorValue()[7] > THRESHOLD_SENSORS)
 8003340:	f7fe fb68 	bl	8001a14 <getSensorValue>
 8003344:	4603      	mov	r3, r0
 8003346:	881b      	ldrh	r3, [r3, #0]
 8003348:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 800334c:	d907      	bls.n	800335e <calibStepMotor+0x5a>
 800334e:	f7fe fb61 	bl	8001a14 <getSensorValue>
 8003352:	4603      	mov	r3, r0
 8003354:	330e      	adds	r3, #14
 8003356:	881b      	ldrh	r3, [r3, #0]
 8003358:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 800335c:	d8e6      	bhi.n	800332c <calibStepMotor+0x28>
			}

			stepMotorMove(DOWN, 1);
 800335e:	2101      	movs	r1, #1
 8003360:	2000      	movs	r0, #0
 8003362:	f000 f81d 	bl	80033a0 <stepMotorMove>
 8003366:	e012      	b.n	800338e <calibStepMotor+0x8a>
		}
		else if (getSensorValue()[0] > THRESHOLD_SENSORS || getSensorValue()[7] > THRESHOLD_SENSORS)
 8003368:	f7fe fb54 	bl	8001a14 <getSensorValue>
 800336c:	4603      	mov	r3, r0
 800336e:	881b      	ldrh	r3, [r3, #0]
 8003370:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8003374:	d807      	bhi.n	8003386 <calibStepMotor+0x82>
 8003376:	f7fe fb4d 	bl	8001a14 <getSensorValue>
 800337a:	4603      	mov	r3, r0
 800337c:	330e      	adds	r3, #14
 800337e:	881b      	ldrh	r3, [r3, #0]
 8003380:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8003384:	d903      	bls.n	800338e <calibStepMotor+0x8a>
		{
			stepMotorMove(DOWN, 1);
 8003386:	2101      	movs	r1, #1
 8003388:	2000      	movs	r0, #0
 800338a:	f000 f809 	bl	80033a0 <stepMotorMove>
		}

		current_revolution = 0;
 800338e:	4b03      	ldr	r3, [pc, #12]	@ (800339c <calibStepMotor+0x98>)
 8003390:	2200      	movs	r2, #0
 8003392:	701a      	strb	r2, [r3, #0]

		return STATUS_OK;
 8003394:	2301      	movs	r3, #1
	}
 8003396:	4618      	mov	r0, r3
 8003398:	bd80      	pop	{r7, pc}
 800339a:	bf00      	nop
 800339c:	20000284 	.word	0x20000284

080033a0 <stepMotorMove>:
	 * @param	: direction: DOWN or UP
	 * @param	: cycle: number of revolution 10 is safe enough
	 */

	enum StatusCode stepMotorMove(enum Step_Direction direction, uint16_t cycle)
	{
 80033a0:	b580      	push	{r7, lr}
 80033a2:	b082      	sub	sp, #8
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	4603      	mov	r3, r0
 80033a8:	460a      	mov	r2, r1
 80033aa:	71fb      	strb	r3, [r7, #7]
 80033ac:	4613      	mov	r3, r2
 80033ae:	80bb      	strh	r3, [r7, #4]
		if (cycle > (MAX_REVOLUTIONS - current_revolution))
 80033b0:	88ba      	ldrh	r2, [r7, #4]
 80033b2:	4b18      	ldr	r3, [pc, #96]	@ (8003414 <stepMotorMove+0x74>)
 80033b4:	781b      	ldrb	r3, [r3, #0]
 80033b6:	f1c3 030a 	rsb	r3, r3, #10
 80033ba:	429a      	cmp	r2, r3
 80033bc:	dd05      	ble.n	80033ca <stepMotorMove+0x2a>
		{
			cycle = MAX_REVOLUTIONS - current_revolution;
 80033be:	4b15      	ldr	r3, [pc, #84]	@ (8003414 <stepMotorMove+0x74>)
 80033c0:	781b      	ldrb	r3, [r3, #0]
 80033c2:	f1c3 030a 	rsb	r3, r3, #10
 80033c6:	80bb      	strh	r3, [r7, #4]
 80033c8:	e005      	b.n	80033d6 <stepMotorMove+0x36>
		}
		else if (current_revolution == 0)
 80033ca:	4b12      	ldr	r3, [pc, #72]	@ (8003414 <stepMotorMove+0x74>)
 80033cc:	781b      	ldrb	r3, [r3, #0]
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d101      	bne.n	80033d6 <stepMotorMove+0x36>
		{
			cycle = 0;
 80033d2:	2300      	movs	r3, #0
 80033d4:	80bb      	strh	r3, [r7, #4]
		}

		HAL_GPIO_WritePin(SM_DIR_GPIO_Port, SM_DIR_Pin, direction);
 80033d6:	79fb      	ldrb	r3, [r7, #7]
 80033d8:	461a      	mov	r2, r3
 80033da:	2120      	movs	r1, #32
 80033dc:	480e      	ldr	r0, [pc, #56]	@ (8003418 <stepMotorMove+0x78>)
 80033de:	f002 fb10 	bl	8005a02 <HAL_GPIO_WritePin>
		spr_counter = SPR * cycle;
 80033e2:	88bb      	ldrh	r3, [r7, #4]
 80033e4:	22c8      	movs	r2, #200	@ 0xc8
 80033e6:	fb02 f303 	mul.w	r3, r2, r3
 80033ea:	461a      	mov	r2, r3
 80033ec:	4b0b      	ldr	r3, [pc, #44]	@ (800341c <stepMotorMove+0x7c>)
 80033ee:	601a      	str	r2, [r3, #0]

		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, DUTY_CYCLE);
 80033f0:	4b0b      	ldr	r3, [pc, #44]	@ (8003420 <stepMotorMove+0x80>)
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	2232      	movs	r2, #50	@ 0x32
 80033f6:	635a      	str	r2, [r3, #52]	@ 0x34

		if (HAL_TIM_PWM_Start_IT(&htim3, TIM_CHANNEL_1) != HAL_OK)
 80033f8:	2100      	movs	r1, #0
 80033fa:	4809      	ldr	r0, [pc, #36]	@ (8003420 <stepMotorMove+0x80>)
 80033fc:	f004 feda 	bl	80081b4 <HAL_TIM_PWM_Start_IT>
 8003400:	4603      	mov	r3, r0
 8003402:	2b00      	cmp	r3, #0
 8003404:	d001      	beq.n	800340a <stepMotorMove+0x6a>
		{
			return STATUS_ERROR;
 8003406:	2300      	movs	r3, #0
 8003408:	e000      	b.n	800340c <stepMotorMove+0x6c>
		}
		return STATUS_OK;
 800340a:	2301      	movs	r3, #1
	}
 800340c:	4618      	mov	r0, r3
 800340e:	3708      	adds	r7, #8
 8003410:	46bd      	mov	sp, r7
 8003412:	bd80      	pop	{r7, pc}
 8003414:	20000284 	.word	0x20000284
 8003418:	40010c00 	.word	0x40010c00
 800341c:	20000280 	.word	0x20000280
 8003420:	200002d8 	.word	0x200002d8

08003424 <HAL_TIM_PWM_PulseFinishedCallback>:

	void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
	{
 8003424:	b580      	push	{r7, lr}
 8003426:	b082      	sub	sp, #8
 8003428:	af00      	add	r7, sp, #0
 800342a:	6078      	str	r0, [r7, #4]
		if (htim->Instance == TIM3)
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	4a09      	ldr	r2, [pc, #36]	@ (8003458 <HAL_TIM_PWM_PulseFinishedCallback+0x34>)
 8003432:	4293      	cmp	r3, r2
 8003434:	d10c      	bne.n	8003450 <HAL_TIM_PWM_PulseFinishedCallback+0x2c>
		{
			spr_counter--;
 8003436:	4b09      	ldr	r3, [pc, #36]	@ (800345c <HAL_TIM_PWM_PulseFinishedCallback+0x38>)
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	3b01      	subs	r3, #1
 800343c:	4a07      	ldr	r2, [pc, #28]	@ (800345c <HAL_TIM_PWM_PulseFinishedCallback+0x38>)
 800343e:	6013      	str	r3, [r2, #0]
			if (spr_counter <= 0)
 8003440:	4b06      	ldr	r3, [pc, #24]	@ (800345c <HAL_TIM_PWM_PulseFinishedCallback+0x38>)
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	2b00      	cmp	r3, #0
 8003446:	d103      	bne.n	8003450 <HAL_TIM_PWM_PulseFinishedCallback+0x2c>
				HAL_TIM_PWM_Stop_IT(&htim3, TIM_CHANNEL_1);
 8003448:	2100      	movs	r1, #0
 800344a:	4805      	ldr	r0, [pc, #20]	@ (8003460 <HAL_TIM_PWM_PulseFinishedCallback+0x3c>)
 800344c:	f004 ffba 	bl	80083c4 <HAL_TIM_PWM_Stop_IT>
		}
	}
 8003450:	bf00      	nop
 8003452:	3708      	adds	r7, #8
 8003454:	46bd      	mov	sp, r7
 8003456:	bd80      	pop	{r7, pc}
 8003458:	40000400 	.word	0x40000400
 800345c:	20000280 	.word	0x20000280
 8003460:	200002d8 	.word	0x200002d8

08003464 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003464:	b480      	push	{r7}
 8003466:	b085      	sub	sp, #20
 8003468:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800346a:	4b15      	ldr	r3, [pc, #84]	@ (80034c0 <HAL_MspInit+0x5c>)
 800346c:	699b      	ldr	r3, [r3, #24]
 800346e:	4a14      	ldr	r2, [pc, #80]	@ (80034c0 <HAL_MspInit+0x5c>)
 8003470:	f043 0301 	orr.w	r3, r3, #1
 8003474:	6193      	str	r3, [r2, #24]
 8003476:	4b12      	ldr	r3, [pc, #72]	@ (80034c0 <HAL_MspInit+0x5c>)
 8003478:	699b      	ldr	r3, [r3, #24]
 800347a:	f003 0301 	and.w	r3, r3, #1
 800347e:	60bb      	str	r3, [r7, #8]
 8003480:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003482:	4b0f      	ldr	r3, [pc, #60]	@ (80034c0 <HAL_MspInit+0x5c>)
 8003484:	69db      	ldr	r3, [r3, #28]
 8003486:	4a0e      	ldr	r2, [pc, #56]	@ (80034c0 <HAL_MspInit+0x5c>)
 8003488:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800348c:	61d3      	str	r3, [r2, #28]
 800348e:	4b0c      	ldr	r3, [pc, #48]	@ (80034c0 <HAL_MspInit+0x5c>)
 8003490:	69db      	ldr	r3, [r3, #28]
 8003492:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003496:	607b      	str	r3, [r7, #4]
 8003498:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800349a:	4b0a      	ldr	r3, [pc, #40]	@ (80034c4 <HAL_MspInit+0x60>)
 800349c:	685b      	ldr	r3, [r3, #4]
 800349e:	60fb      	str	r3, [r7, #12]
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80034a6:	60fb      	str	r3, [r7, #12]
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80034ae:	60fb      	str	r3, [r7, #12]
 80034b0:	4a04      	ldr	r2, [pc, #16]	@ (80034c4 <HAL_MspInit+0x60>)
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80034b6:	bf00      	nop
 80034b8:	3714      	adds	r7, #20
 80034ba:	46bd      	mov	sp, r7
 80034bc:	bc80      	pop	{r7}
 80034be:	4770      	bx	lr
 80034c0:	40021000 	.word	0x40021000
 80034c4:	40010000 	.word	0x40010000

080034c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80034c8:	b480      	push	{r7}
 80034ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80034cc:	bf00      	nop
 80034ce:	e7fd      	b.n	80034cc <NMI_Handler+0x4>

080034d0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80034d0:	b480      	push	{r7}
 80034d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80034d4:	bf00      	nop
 80034d6:	e7fd      	b.n	80034d4 <HardFault_Handler+0x4>

080034d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80034d8:	b480      	push	{r7}
 80034da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80034dc:	bf00      	nop
 80034de:	e7fd      	b.n	80034dc <MemManage_Handler+0x4>

080034e0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80034e0:	b480      	push	{r7}
 80034e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80034e4:	bf00      	nop
 80034e6:	e7fd      	b.n	80034e4 <BusFault_Handler+0x4>

080034e8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80034e8:	b480      	push	{r7}
 80034ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80034ec:	bf00      	nop
 80034ee:	e7fd      	b.n	80034ec <UsageFault_Handler+0x4>

080034f0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80034f0:	b480      	push	{r7}
 80034f2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80034f4:	bf00      	nop
 80034f6:	46bd      	mov	sp, r7
 80034f8:	bc80      	pop	{r7}
 80034fa:	4770      	bx	lr

080034fc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80034fc:	b480      	push	{r7}
 80034fe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003500:	bf00      	nop
 8003502:	46bd      	mov	sp, r7
 8003504:	bc80      	pop	{r7}
 8003506:	4770      	bx	lr

08003508 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003508:	b480      	push	{r7}
 800350a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800350c:	bf00      	nop
 800350e:	46bd      	mov	sp, r7
 8003510:	bc80      	pop	{r7}
 8003512:	4770      	bx	lr

08003514 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003514:	b580      	push	{r7, lr}
 8003516:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003518:	f000 ff18 	bl	800434c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800351c:	bf00      	nop
 800351e:	bd80      	pop	{r7, pc}

08003520 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8003520:	b580      	push	{r7, lr}
 8003522:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003524:	4802      	ldr	r0, [pc, #8]	@ (8003530 <DMA1_Channel1_IRQHandler+0x10>)
 8003526:	f001 fe57 	bl	80051d8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800352a:	bf00      	nop
 800352c:	bd80      	pop	{r7, pc}
 800352e:	bf00      	nop
 8003530:	2000007c 	.word	0x2000007c

08003534 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003534:	b580      	push	{r7, lr}
 8003536:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003538:	4802      	ldr	r0, [pc, #8]	@ (8003544 <TIM2_IRQHandler+0x10>)
 800353a:	f005 f801 	bl	8008540 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800353e:	bf00      	nop
 8003540:	bd80      	pop	{r7, pc}
 8003542:	bf00      	nop
 8003544:	20000290 	.word	0x20000290

08003548 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8003548:	b580      	push	{r7, lr}
 800354a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800354c:	4802      	ldr	r0, [pc, #8]	@ (8003558 <TIM3_IRQHandler+0x10>)
 800354e:	f004 fff7 	bl	8008540 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8003552:	bf00      	nop
 8003554:	bd80      	pop	{r7, pc}
 8003556:	bf00      	nop
 8003558:	200002d8 	.word	0x200002d8

0800355c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 800355c:	b580      	push	{r7, lr}
 800355e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8003560:	4802      	ldr	r0, [pc, #8]	@ (800356c <TIM4_IRQHandler+0x10>)
 8003562:	f004 ffed 	bl	8008540 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8003566:	bf00      	nop
 8003568:	bd80      	pop	{r7, pc}
 800356a:	bf00      	nop
 800356c:	20000320 	.word	0x20000320

08003570 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8003570:	b580      	push	{r7, lr}
 8003572:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003574:	4802      	ldr	r0, [pc, #8]	@ (8003580 <USART1_IRQHandler+0x10>)
 8003576:	f005 ff33 	bl	80093e0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800357a:	bf00      	nop
 800357c:	bd80      	pop	{r7, pc}
 800357e:	bf00      	nop
 8003580:	200003fc 	.word	0x200003fc

08003584 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8003584:	b580      	push	{r7, lr}
 8003586:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8003588:	4802      	ldr	r0, [pc, #8]	@ (8003594 <USART2_IRQHandler+0x10>)
 800358a:	f005 ff29 	bl	80093e0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800358e:	bf00      	nop
 8003590:	bd80      	pop	{r7, pc}
 8003592:	bf00      	nop
 8003594:	20000444 	.word	0x20000444

08003598 <initSwitch>:

    uint8_t switch_status[NUMBER_OF_SWITCH] = {0};
    uint8_t switch_buffer = 0b00000000;

    enum StatusCode initSwitch()
    {
 8003598:	b580      	push	{r7, lr}
 800359a:	af00      	add	r7, sp, #0
        HAL_GPIO_WritePin(INPUT_LOAD_GPIO_Port, INPUT_LOAD_Pin, 1);
 800359c:	2201      	movs	r2, #1
 800359e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80035a2:	480e      	ldr	r0, [pc, #56]	@ (80035dc <initSwitch+0x44>)
 80035a4:	f002 fa2d 	bl	8005a02 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(INPUT_LOAD_GPIO_Port, INPUT_LOAD_Pin, 0);
 80035a8:	2200      	movs	r2, #0
 80035aa:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80035ae:	480b      	ldr	r0, [pc, #44]	@ (80035dc <initSwitch+0x44>)
 80035b0:	f002 fa27 	bl	8005a02 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(INPUT_LOAD_GPIO_Port, INPUT_LOAD_Pin, 1);
 80035b4:	2201      	movs	r2, #1
 80035b6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80035ba:	4808      	ldr	r0, [pc, #32]	@ (80035dc <initSwitch+0x44>)
 80035bc:	f002 fa21 	bl	8005a02 <HAL_GPIO_WritePin>
        if (HAL_SPI_Receive(&hspi1, (void *)&switch_buffer, 1, 10) == HAL_OK)
 80035c0:	230a      	movs	r3, #10
 80035c2:	2201      	movs	r2, #1
 80035c4:	4906      	ldr	r1, [pc, #24]	@ (80035e0 <initSwitch+0x48>)
 80035c6:	4807      	ldr	r0, [pc, #28]	@ (80035e4 <initSwitch+0x4c>)
 80035c8:	f003 fffe 	bl	80075c8 <HAL_SPI_Receive>
 80035cc:	4603      	mov	r3, r0
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d101      	bne.n	80035d6 <initSwitch+0x3e>
        {
            return STATUS_OK;
 80035d2:	2301      	movs	r3, #1
 80035d4:	e000      	b.n	80035d8 <initSwitch+0x40>
        }
        return STATUS_ERROR;
 80035d6:	2300      	movs	r3, #0
    }
 80035d8:	4618      	mov	r0, r3
 80035da:	bd80      	pop	{r7, pc}
 80035dc:	40010800 	.word	0x40010800
 80035e0:	2000028c 	.word	0x2000028c
 80035e4:	20000228 	.word	0x20000228

080035e8 <getSwitchStatus>:
     * @param switch_id correspond to switch that needs to know status
     * @retval 0 if switch is OFF
     * @retval 1 if switch is OFF
     */
    uint8_t getSwitchStatus(const enum Switch switch_id)
    {
 80035e8:	b580      	push	{r7, lr}
 80035ea:	b084      	sub	sp, #16
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	4603      	mov	r3, r0
 80035f0:	71fb      	strb	r3, [r7, #7]
        HAL_GPIO_WritePin(INPUT_LOAD_GPIO_Port, INPUT_LOAD_Pin, 0);
 80035f2:	2200      	movs	r2, #0
 80035f4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80035f8:	4818      	ldr	r0, [pc, #96]	@ (800365c <getSwitchStatus+0x74>)
 80035fa:	f002 fa02 	bl	8005a02 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(INPUT_LOAD_GPIO_Port, INPUT_LOAD_Pin, 1);
 80035fe:	2201      	movs	r2, #1
 8003600:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003604:	4815      	ldr	r0, [pc, #84]	@ (800365c <getSwitchStatus+0x74>)
 8003606:	f002 f9fc 	bl	8005a02 <HAL_GPIO_WritePin>
        HAL_SPI_Receive(&hspi1, (void *)&switch_buffer, 1, 10);
 800360a:	230a      	movs	r3, #10
 800360c:	2201      	movs	r2, #1
 800360e:	4914      	ldr	r1, [pc, #80]	@ (8003660 <getSwitchStatus+0x78>)
 8003610:	4814      	ldr	r0, [pc, #80]	@ (8003664 <getSwitchStatus+0x7c>)
 8003612:	f003 ffd9 	bl	80075c8 <HAL_SPI_Receive>

        for (uint8_t i = 0; i < NUMBER_OF_SWITCH; ++i)
 8003616:	2300      	movs	r3, #0
 8003618:	73fb      	strb	r3, [r7, #15]
 800361a:	e015      	b.n	8003648 <getSwitchStatus+0x60>
        {
            if (switch_buffer & (0b00010000 << i))
 800361c:	4b10      	ldr	r3, [pc, #64]	@ (8003660 <getSwitchStatus+0x78>)
 800361e:	781b      	ldrb	r3, [r3, #0]
 8003620:	4619      	mov	r1, r3
 8003622:	7bfb      	ldrb	r3, [r7, #15]
 8003624:	2210      	movs	r2, #16
 8003626:	fa02 f303 	lsl.w	r3, r2, r3
 800362a:	400b      	ands	r3, r1
 800362c:	2b00      	cmp	r3, #0
 800362e:	d004      	beq.n	800363a <getSwitchStatus+0x52>
            {
                switch_status[i] = 0;
 8003630:	7bfb      	ldrb	r3, [r7, #15]
 8003632:	4a0d      	ldr	r2, [pc, #52]	@ (8003668 <getSwitchStatus+0x80>)
 8003634:	2100      	movs	r1, #0
 8003636:	54d1      	strb	r1, [r2, r3]
 8003638:	e003      	b.n	8003642 <getSwitchStatus+0x5a>
            }
            else
            {
                switch_status[i] = 1;
 800363a:	7bfb      	ldrb	r3, [r7, #15]
 800363c:	4a0a      	ldr	r2, [pc, #40]	@ (8003668 <getSwitchStatus+0x80>)
 800363e:	2101      	movs	r1, #1
 8003640:	54d1      	strb	r1, [r2, r3]
        for (uint8_t i = 0; i < NUMBER_OF_SWITCH; ++i)
 8003642:	7bfb      	ldrb	r3, [r7, #15]
 8003644:	3301      	adds	r3, #1
 8003646:	73fb      	strb	r3, [r7, #15]
 8003648:	7bfb      	ldrb	r3, [r7, #15]
 800364a:	2b03      	cmp	r3, #3
 800364c:	d9e6      	bls.n	800361c <getSwitchStatus+0x34>
            }
        }

        return switch_status[switch_id];
 800364e:	79fb      	ldrb	r3, [r7, #7]
 8003650:	4a05      	ldr	r2, [pc, #20]	@ (8003668 <getSwitchStatus+0x80>)
 8003652:	5cd3      	ldrb	r3, [r2, r3]
    }
 8003654:	4618      	mov	r0, r3
 8003656:	3710      	adds	r7, #16
 8003658:	46bd      	mov	sp, r7
 800365a:	bd80      	pop	{r7, pc}
 800365c:	40010800 	.word	0x40010800
 8003660:	2000028c 	.word	0x2000028c
 8003664:	20000228 	.word	0x20000228
 8003668:	20000288 	.word	0x20000288

0800366c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800366c:	b480      	push	{r7}
 800366e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003670:	bf00      	nop
 8003672:	46bd      	mov	sp, r7
 8003674:	bc80      	pop	{r7}
 8003676:	4770      	bx	lr

08003678 <MX_TIM2_Init>:
TIM_HandleTypeDef htim5;
TIM_HandleTypeDef htim8;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8003678:	b580      	push	{r7, lr}
 800367a:	b086      	sub	sp, #24
 800367c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800367e:	f107 0308 	add.w	r3, r7, #8
 8003682:	2200      	movs	r2, #0
 8003684:	601a      	str	r2, [r3, #0]
 8003686:	605a      	str	r2, [r3, #4]
 8003688:	609a      	str	r2, [r3, #8]
 800368a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800368c:	463b      	mov	r3, r7
 800368e:	2200      	movs	r2, #0
 8003690:	601a      	str	r2, [r3, #0]
 8003692:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8003694:	4b1d      	ldr	r3, [pc, #116]	@ (800370c <MX_TIM2_Init+0x94>)
 8003696:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800369a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 72-1;
 800369c:	4b1b      	ldr	r3, [pc, #108]	@ (800370c <MX_TIM2_Init+0x94>)
 800369e:	2247      	movs	r2, #71	@ 0x47
 80036a0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80036a2:	4b1a      	ldr	r3, [pc, #104]	@ (800370c <MX_TIM2_Init+0x94>)
 80036a4:	2200      	movs	r2, #0
 80036a6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 80036a8:	4b18      	ldr	r3, [pc, #96]	@ (800370c <MX_TIM2_Init+0x94>)
 80036aa:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80036ae:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80036b0:	4b16      	ldr	r3, [pc, #88]	@ (800370c <MX_TIM2_Init+0x94>)
 80036b2:	2200      	movs	r2, #0
 80036b4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80036b6:	4b15      	ldr	r3, [pc, #84]	@ (800370c <MX_TIM2_Init+0x94>)
 80036b8:	2200      	movs	r2, #0
 80036ba:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80036bc:	4813      	ldr	r0, [pc, #76]	@ (800370c <MX_TIM2_Init+0x94>)
 80036be:	f004 fb50 	bl	8007d62 <HAL_TIM_Base_Init>
 80036c2:	4603      	mov	r3, r0
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d001      	beq.n	80036cc <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80036c8:	f7fe fa35 	bl	8001b36 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80036cc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80036d0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80036d2:	f107 0308 	add.w	r3, r7, #8
 80036d6:	4619      	mov	r1, r3
 80036d8:	480c      	ldr	r0, [pc, #48]	@ (800370c <MX_TIM2_Init+0x94>)
 80036da:	f005 f8e3 	bl	80088a4 <HAL_TIM_ConfigClockSource>
 80036de:	4603      	mov	r3, r0
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d001      	beq.n	80036e8 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80036e4:	f7fe fa27 	bl	8001b36 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80036e8:	2300      	movs	r3, #0
 80036ea:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80036ec:	2300      	movs	r3, #0
 80036ee:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80036f0:	463b      	mov	r3, r7
 80036f2:	4619      	mov	r1, r3
 80036f4:	4805      	ldr	r0, [pc, #20]	@ (800370c <MX_TIM2_Init+0x94>)
 80036f6:	f005 fca3 	bl	8009040 <HAL_TIMEx_MasterConfigSynchronization>
 80036fa:	4603      	mov	r3, r0
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d001      	beq.n	8003704 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8003700:	f7fe fa19 	bl	8001b36 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8003704:	bf00      	nop
 8003706:	3718      	adds	r7, #24
 8003708:	46bd      	mov	sp, r7
 800370a:	bd80      	pop	{r7, pc}
 800370c:	20000290 	.word	0x20000290

08003710 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8003710:	b580      	push	{r7, lr}
 8003712:	b08e      	sub	sp, #56	@ 0x38
 8003714:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003716:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800371a:	2200      	movs	r2, #0
 800371c:	601a      	str	r2, [r3, #0]
 800371e:	605a      	str	r2, [r3, #4]
 8003720:	609a      	str	r2, [r3, #8]
 8003722:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003724:	f107 0320 	add.w	r3, r7, #32
 8003728:	2200      	movs	r2, #0
 800372a:	601a      	str	r2, [r3, #0]
 800372c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800372e:	1d3b      	adds	r3, r7, #4
 8003730:	2200      	movs	r2, #0
 8003732:	601a      	str	r2, [r3, #0]
 8003734:	605a      	str	r2, [r3, #4]
 8003736:	609a      	str	r2, [r3, #8]
 8003738:	60da      	str	r2, [r3, #12]
 800373a:	611a      	str	r2, [r3, #16]
 800373c:	615a      	str	r2, [r3, #20]
 800373e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8003740:	4b2c      	ldr	r3, [pc, #176]	@ (80037f4 <MX_TIM3_Init+0xe4>)
 8003742:	4a2d      	ldr	r2, [pc, #180]	@ (80037f8 <MX_TIM3_Init+0xe8>)
 8003744:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 720-1;
 8003746:	4b2b      	ldr	r3, [pc, #172]	@ (80037f4 <MX_TIM3_Init+0xe4>)
 8003748:	f240 22cf 	movw	r2, #719	@ 0x2cf
 800374c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800374e:	4b29      	ldr	r3, [pc, #164]	@ (80037f4 <MX_TIM3_Init+0xe4>)
 8003750:	2200      	movs	r2, #0
 8003752:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100-1;
 8003754:	4b27      	ldr	r3, [pc, #156]	@ (80037f4 <MX_TIM3_Init+0xe4>)
 8003756:	2263      	movs	r2, #99	@ 0x63
 8003758:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800375a:	4b26      	ldr	r3, [pc, #152]	@ (80037f4 <MX_TIM3_Init+0xe4>)
 800375c:	2200      	movs	r2, #0
 800375e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003760:	4b24      	ldr	r3, [pc, #144]	@ (80037f4 <MX_TIM3_Init+0xe4>)
 8003762:	2200      	movs	r2, #0
 8003764:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8003766:	4823      	ldr	r0, [pc, #140]	@ (80037f4 <MX_TIM3_Init+0xe4>)
 8003768:	f004 fafb 	bl	8007d62 <HAL_TIM_Base_Init>
 800376c:	4603      	mov	r3, r0
 800376e:	2b00      	cmp	r3, #0
 8003770:	d001      	beq.n	8003776 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8003772:	f7fe f9e0 	bl	8001b36 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003776:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800377a:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800377c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003780:	4619      	mov	r1, r3
 8003782:	481c      	ldr	r0, [pc, #112]	@ (80037f4 <MX_TIM3_Init+0xe4>)
 8003784:	f005 f88e 	bl	80088a4 <HAL_TIM_ConfigClockSource>
 8003788:	4603      	mov	r3, r0
 800378a:	2b00      	cmp	r3, #0
 800378c:	d001      	beq.n	8003792 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 800378e:	f7fe f9d2 	bl	8001b36 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8003792:	4818      	ldr	r0, [pc, #96]	@ (80037f4 <MX_TIM3_Init+0xe4>)
 8003794:	f004 fb94 	bl	8007ec0 <HAL_TIM_PWM_Init>
 8003798:	4603      	mov	r3, r0
 800379a:	2b00      	cmp	r3, #0
 800379c:	d001      	beq.n	80037a2 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 800379e:	f7fe f9ca 	bl	8001b36 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80037a2:	2300      	movs	r3, #0
 80037a4:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80037a6:	2300      	movs	r3, #0
 80037a8:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80037aa:	f107 0320 	add.w	r3, r7, #32
 80037ae:	4619      	mov	r1, r3
 80037b0:	4810      	ldr	r0, [pc, #64]	@ (80037f4 <MX_TIM3_Init+0xe4>)
 80037b2:	f005 fc45 	bl	8009040 <HAL_TIMEx_MasterConfigSynchronization>
 80037b6:	4603      	mov	r3, r0
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d001      	beq.n	80037c0 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 80037bc:	f7fe f9bb 	bl	8001b36 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80037c0:	2360      	movs	r3, #96	@ 0x60
 80037c2:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80037c4:	2300      	movs	r3, #0
 80037c6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80037c8:	2300      	movs	r3, #0
 80037ca:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80037cc:	2300      	movs	r3, #0
 80037ce:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80037d0:	1d3b      	adds	r3, r7, #4
 80037d2:	2200      	movs	r2, #0
 80037d4:	4619      	mov	r1, r3
 80037d6:	4807      	ldr	r0, [pc, #28]	@ (80037f4 <MX_TIM3_Init+0xe4>)
 80037d8:	f004 ffa2 	bl	8008720 <HAL_TIM_PWM_ConfigChannel>
 80037dc:	4603      	mov	r3, r0
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d001      	beq.n	80037e6 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 80037e2:	f7fe f9a8 	bl	8001b36 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80037e6:	4803      	ldr	r0, [pc, #12]	@ (80037f4 <MX_TIM3_Init+0xe4>)
 80037e8:	f000 fa42 	bl	8003c70 <HAL_TIM_MspPostInit>

}
 80037ec:	bf00      	nop
 80037ee:	3738      	adds	r7, #56	@ 0x38
 80037f0:	46bd      	mov	sp, r7
 80037f2:	bd80      	pop	{r7, pc}
 80037f4:	200002d8 	.word	0x200002d8
 80037f8:	40000400 	.word	0x40000400

080037fc <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 80037fc:	b580      	push	{r7, lr}
 80037fe:	b08e      	sub	sp, #56	@ 0x38
 8003800:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003802:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003806:	2200      	movs	r2, #0
 8003808:	601a      	str	r2, [r3, #0]
 800380a:	605a      	str	r2, [r3, #4]
 800380c:	609a      	str	r2, [r3, #8]
 800380e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003810:	f107 0320 	add.w	r3, r7, #32
 8003814:	2200      	movs	r2, #0
 8003816:	601a      	str	r2, [r3, #0]
 8003818:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800381a:	1d3b      	adds	r3, r7, #4
 800381c:	2200      	movs	r2, #0
 800381e:	601a      	str	r2, [r3, #0]
 8003820:	605a      	str	r2, [r3, #4]
 8003822:	609a      	str	r2, [r3, #8]
 8003824:	60da      	str	r2, [r3, #12]
 8003826:	611a      	str	r2, [r3, #16]
 8003828:	615a      	str	r2, [r3, #20]
 800382a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800382c:	4b38      	ldr	r3, [pc, #224]	@ (8003910 <MX_TIM4_Init+0x114>)
 800382e:	4a39      	ldr	r2, [pc, #228]	@ (8003914 <MX_TIM4_Init+0x118>)
 8003830:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 1440-1;
 8003832:	4b37      	ldr	r3, [pc, #220]	@ (8003910 <MX_TIM4_Init+0x114>)
 8003834:	f240 529f 	movw	r2, #1439	@ 0x59f
 8003838:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800383a:	4b35      	ldr	r3, [pc, #212]	@ (8003910 <MX_TIM4_Init+0x114>)
 800383c:	2200      	movs	r2, #0
 800383e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1000-1;
 8003840:	4b33      	ldr	r3, [pc, #204]	@ (8003910 <MX_TIM4_Init+0x114>)
 8003842:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8003846:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003848:	4b31      	ldr	r3, [pc, #196]	@ (8003910 <MX_TIM4_Init+0x114>)
 800384a:	2200      	movs	r2, #0
 800384c:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800384e:	4b30      	ldr	r3, [pc, #192]	@ (8003910 <MX_TIM4_Init+0x114>)
 8003850:	2200      	movs	r2, #0
 8003852:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8003854:	482e      	ldr	r0, [pc, #184]	@ (8003910 <MX_TIM4_Init+0x114>)
 8003856:	f004 fa84 	bl	8007d62 <HAL_TIM_Base_Init>
 800385a:	4603      	mov	r3, r0
 800385c:	2b00      	cmp	r3, #0
 800385e:	d001      	beq.n	8003864 <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 8003860:	f7fe f969 	bl	8001b36 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003864:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003868:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800386a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800386e:	4619      	mov	r1, r3
 8003870:	4827      	ldr	r0, [pc, #156]	@ (8003910 <MX_TIM4_Init+0x114>)
 8003872:	f005 f817 	bl	80088a4 <HAL_TIM_ConfigClockSource>
 8003876:	4603      	mov	r3, r0
 8003878:	2b00      	cmp	r3, #0
 800387a:	d001      	beq.n	8003880 <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 800387c:	f7fe f95b 	bl	8001b36 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8003880:	4823      	ldr	r0, [pc, #140]	@ (8003910 <MX_TIM4_Init+0x114>)
 8003882:	f004 fb1d 	bl	8007ec0 <HAL_TIM_PWM_Init>
 8003886:	4603      	mov	r3, r0
 8003888:	2b00      	cmp	r3, #0
 800388a:	d001      	beq.n	8003890 <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 800388c:	f7fe f953 	bl	8001b36 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003890:	2300      	movs	r3, #0
 8003892:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003894:	2300      	movs	r3, #0
 8003896:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8003898:	f107 0320 	add.w	r3, r7, #32
 800389c:	4619      	mov	r1, r3
 800389e:	481c      	ldr	r0, [pc, #112]	@ (8003910 <MX_TIM4_Init+0x114>)
 80038a0:	f005 fbce 	bl	8009040 <HAL_TIMEx_MasterConfigSynchronization>
 80038a4:	4603      	mov	r3, r0
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d001      	beq.n	80038ae <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 80038aa:	f7fe f944 	bl	8001b36 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80038ae:	2360      	movs	r3, #96	@ 0x60
 80038b0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80038b2:	2300      	movs	r3, #0
 80038b4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80038b6:	2300      	movs	r3, #0
 80038b8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80038ba:	2300      	movs	r3, #0
 80038bc:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80038be:	1d3b      	adds	r3, r7, #4
 80038c0:	2200      	movs	r2, #0
 80038c2:	4619      	mov	r1, r3
 80038c4:	4812      	ldr	r0, [pc, #72]	@ (8003910 <MX_TIM4_Init+0x114>)
 80038c6:	f004 ff2b 	bl	8008720 <HAL_TIM_PWM_ConfigChannel>
 80038ca:	4603      	mov	r3, r0
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d001      	beq.n	80038d4 <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 80038d0:	f7fe f931 	bl	8001b36 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80038d4:	1d3b      	adds	r3, r7, #4
 80038d6:	2204      	movs	r2, #4
 80038d8:	4619      	mov	r1, r3
 80038da:	480d      	ldr	r0, [pc, #52]	@ (8003910 <MX_TIM4_Init+0x114>)
 80038dc:	f004 ff20 	bl	8008720 <HAL_TIM_PWM_ConfigChannel>
 80038e0:	4603      	mov	r3, r0
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d001      	beq.n	80038ea <MX_TIM4_Init+0xee>
  {
    Error_Handler();
 80038e6:	f7fe f926 	bl	8001b36 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80038ea:	1d3b      	adds	r3, r7, #4
 80038ec:	2208      	movs	r2, #8
 80038ee:	4619      	mov	r1, r3
 80038f0:	4807      	ldr	r0, [pc, #28]	@ (8003910 <MX_TIM4_Init+0x114>)
 80038f2:	f004 ff15 	bl	8008720 <HAL_TIM_PWM_ConfigChannel>
 80038f6:	4603      	mov	r3, r0
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d001      	beq.n	8003900 <MX_TIM4_Init+0x104>
  {
    Error_Handler();
 80038fc:	f7fe f91b 	bl	8001b36 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8003900:	4803      	ldr	r0, [pc, #12]	@ (8003910 <MX_TIM4_Init+0x114>)
 8003902:	f000 f9b5 	bl	8003c70 <HAL_TIM_MspPostInit>

}
 8003906:	bf00      	nop
 8003908:	3738      	adds	r7, #56	@ 0x38
 800390a:	46bd      	mov	sp, r7
 800390c:	bd80      	pop	{r7, pc}
 800390e:	bf00      	nop
 8003910:	20000320 	.word	0x20000320
 8003914:	40000800 	.word	0x40000800

08003918 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8003918:	b580      	push	{r7, lr}
 800391a:	b08e      	sub	sp, #56	@ 0x38
 800391c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800391e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003922:	2200      	movs	r2, #0
 8003924:	601a      	str	r2, [r3, #0]
 8003926:	605a      	str	r2, [r3, #4]
 8003928:	609a      	str	r2, [r3, #8]
 800392a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800392c:	f107 0320 	add.w	r3, r7, #32
 8003930:	2200      	movs	r2, #0
 8003932:	601a      	str	r2, [r3, #0]
 8003934:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003936:	1d3b      	adds	r3, r7, #4
 8003938:	2200      	movs	r2, #0
 800393a:	601a      	str	r2, [r3, #0]
 800393c:	605a      	str	r2, [r3, #4]
 800393e:	609a      	str	r2, [r3, #8]
 8003940:	60da      	str	r2, [r3, #12]
 8003942:	611a      	str	r2, [r3, #16]
 8003944:	615a      	str	r2, [r3, #20]
 8003946:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8003948:	4b2c      	ldr	r3, [pc, #176]	@ (80039fc <MX_TIM5_Init+0xe4>)
 800394a:	4a2d      	ldr	r2, [pc, #180]	@ (8003a00 <MX_TIM5_Init+0xe8>)
 800394c:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 720-1;
 800394e:	4b2b      	ldr	r3, [pc, #172]	@ (80039fc <MX_TIM5_Init+0xe4>)
 8003950:	f240 22cf 	movw	r2, #719	@ 0x2cf
 8003954:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003956:	4b29      	ldr	r3, [pc, #164]	@ (80039fc <MX_TIM5_Init+0xe4>)
 8003958:	2200      	movs	r2, #0
 800395a:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 100-1;
 800395c:	4b27      	ldr	r3, [pc, #156]	@ (80039fc <MX_TIM5_Init+0xe4>)
 800395e:	2263      	movs	r2, #99	@ 0x63
 8003960:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003962:	4b26      	ldr	r3, [pc, #152]	@ (80039fc <MX_TIM5_Init+0xe4>)
 8003964:	2200      	movs	r2, #0
 8003966:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003968:	4b24      	ldr	r3, [pc, #144]	@ (80039fc <MX_TIM5_Init+0xe4>)
 800396a:	2200      	movs	r2, #0
 800396c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 800396e:	4823      	ldr	r0, [pc, #140]	@ (80039fc <MX_TIM5_Init+0xe4>)
 8003970:	f004 f9f7 	bl	8007d62 <HAL_TIM_Base_Init>
 8003974:	4603      	mov	r3, r0
 8003976:	2b00      	cmp	r3, #0
 8003978:	d001      	beq.n	800397e <MX_TIM5_Init+0x66>
  {
    Error_Handler();
 800397a:	f7fe f8dc 	bl	8001b36 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800397e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003982:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8003984:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003988:	4619      	mov	r1, r3
 800398a:	481c      	ldr	r0, [pc, #112]	@ (80039fc <MX_TIM5_Init+0xe4>)
 800398c:	f004 ff8a 	bl	80088a4 <HAL_TIM_ConfigClockSource>
 8003990:	4603      	mov	r3, r0
 8003992:	2b00      	cmp	r3, #0
 8003994:	d001      	beq.n	800399a <MX_TIM5_Init+0x82>
  {
    Error_Handler();
 8003996:	f7fe f8ce 	bl	8001b36 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 800399a:	4818      	ldr	r0, [pc, #96]	@ (80039fc <MX_TIM5_Init+0xe4>)
 800399c:	f004 fa90 	bl	8007ec0 <HAL_TIM_PWM_Init>
 80039a0:	4603      	mov	r3, r0
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d001      	beq.n	80039aa <MX_TIM5_Init+0x92>
  {
    Error_Handler();
 80039a6:	f7fe f8c6 	bl	8001b36 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80039aa:	2300      	movs	r3, #0
 80039ac:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80039ae:	2300      	movs	r3, #0
 80039b0:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80039b2:	f107 0320 	add.w	r3, r7, #32
 80039b6:	4619      	mov	r1, r3
 80039b8:	4810      	ldr	r0, [pc, #64]	@ (80039fc <MX_TIM5_Init+0xe4>)
 80039ba:	f005 fb41 	bl	8009040 <HAL_TIMEx_MasterConfigSynchronization>
 80039be:	4603      	mov	r3, r0
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d001      	beq.n	80039c8 <MX_TIM5_Init+0xb0>
  {
    Error_Handler();
 80039c4:	f7fe f8b7 	bl	8001b36 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80039c8:	2360      	movs	r3, #96	@ 0x60
 80039ca:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80039cc:	2300      	movs	r3, #0
 80039ce:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80039d0:	2300      	movs	r3, #0
 80039d2:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80039d4:	2300      	movs	r3, #0
 80039d6:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80039d8:	1d3b      	adds	r3, r7, #4
 80039da:	2200      	movs	r2, #0
 80039dc:	4619      	mov	r1, r3
 80039de:	4807      	ldr	r0, [pc, #28]	@ (80039fc <MX_TIM5_Init+0xe4>)
 80039e0:	f004 fe9e 	bl	8008720 <HAL_TIM_PWM_ConfigChannel>
 80039e4:	4603      	mov	r3, r0
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d001      	beq.n	80039ee <MX_TIM5_Init+0xd6>
  {
    Error_Handler();
 80039ea:	f7fe f8a4 	bl	8001b36 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 80039ee:	4803      	ldr	r0, [pc, #12]	@ (80039fc <MX_TIM5_Init+0xe4>)
 80039f0:	f000 f93e 	bl	8003c70 <HAL_TIM_MspPostInit>

}
 80039f4:	bf00      	nop
 80039f6:	3738      	adds	r7, #56	@ 0x38
 80039f8:	46bd      	mov	sp, r7
 80039fa:	bd80      	pop	{r7, pc}
 80039fc:	20000368 	.word	0x20000368
 8003a00:	40000c00 	.word	0x40000c00

08003a04 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8003a04:	b580      	push	{r7, lr}
 8003a06:	b092      	sub	sp, #72	@ 0x48
 8003a08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003a0a:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8003a0e:	2200      	movs	r2, #0
 8003a10:	601a      	str	r2, [r3, #0]
 8003a12:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003a14:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003a18:	2200      	movs	r2, #0
 8003a1a:	601a      	str	r2, [r3, #0]
 8003a1c:	605a      	str	r2, [r3, #4]
 8003a1e:	609a      	str	r2, [r3, #8]
 8003a20:	60da      	str	r2, [r3, #12]
 8003a22:	611a      	str	r2, [r3, #16]
 8003a24:	615a      	str	r2, [r3, #20]
 8003a26:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8003a28:	1d3b      	adds	r3, r7, #4
 8003a2a:	2220      	movs	r2, #32
 8003a2c:	2100      	movs	r1, #0
 8003a2e:	4618      	mov	r0, r3
 8003a30:	f006 fa40 	bl	8009eb4 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8003a34:	4b45      	ldr	r3, [pc, #276]	@ (8003b4c <MX_TIM8_Init+0x148>)
 8003a36:	4a46      	ldr	r2, [pc, #280]	@ (8003b50 <MX_TIM8_Init+0x14c>)
 8003a38:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 720-1;
 8003a3a:	4b44      	ldr	r3, [pc, #272]	@ (8003b4c <MX_TIM8_Init+0x148>)
 8003a3c:	f240 22cf 	movw	r2, #719	@ 0x2cf
 8003a40:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003a42:	4b42      	ldr	r3, [pc, #264]	@ (8003b4c <MX_TIM8_Init+0x148>)
 8003a44:	2200      	movs	r2, #0
 8003a46:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 100-1;
 8003a48:	4b40      	ldr	r3, [pc, #256]	@ (8003b4c <MX_TIM8_Init+0x148>)
 8003a4a:	2263      	movs	r2, #99	@ 0x63
 8003a4c:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003a4e:	4b3f      	ldr	r3, [pc, #252]	@ (8003b4c <MX_TIM8_Init+0x148>)
 8003a50:	2200      	movs	r2, #0
 8003a52:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8003a54:	4b3d      	ldr	r3, [pc, #244]	@ (8003b4c <MX_TIM8_Init+0x148>)
 8003a56:	2200      	movs	r2, #0
 8003a58:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003a5a:	4b3c      	ldr	r3, [pc, #240]	@ (8003b4c <MX_TIM8_Init+0x148>)
 8003a5c:	2200      	movs	r2, #0
 8003a5e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8003a60:	483a      	ldr	r0, [pc, #232]	@ (8003b4c <MX_TIM8_Init+0x148>)
 8003a62:	f004 fa2d 	bl	8007ec0 <HAL_TIM_PWM_Init>
 8003a66:	4603      	mov	r3, r0
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d001      	beq.n	8003a70 <MX_TIM8_Init+0x6c>
  {
    Error_Handler();
 8003a6c:	f7fe f863 	bl	8001b36 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003a70:	2300      	movs	r3, #0
 8003a72:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003a74:	2300      	movs	r3, #0
 8003a76:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8003a78:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8003a7c:	4619      	mov	r1, r3
 8003a7e:	4833      	ldr	r0, [pc, #204]	@ (8003b4c <MX_TIM8_Init+0x148>)
 8003a80:	f005 fade 	bl	8009040 <HAL_TIMEx_MasterConfigSynchronization>
 8003a84:	4603      	mov	r3, r0
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d001      	beq.n	8003a8e <MX_TIM8_Init+0x8a>
  {
    Error_Handler();
 8003a8a:	f7fe f854 	bl	8001b36 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003a8e:	2360      	movs	r3, #96	@ 0x60
 8003a90:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8003a92:	2300      	movs	r3, #0
 8003a94:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003a96:	2300      	movs	r3, #0
 8003a98:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8003a9a:	2300      	movs	r3, #0
 8003a9c:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003a9e:	2300      	movs	r3, #0
 8003aa0:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8003aa2:	2300      	movs	r3, #0
 8003aa4:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8003aa6:	2300      	movs	r3, #0
 8003aa8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003aaa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003aae:	2200      	movs	r2, #0
 8003ab0:	4619      	mov	r1, r3
 8003ab2:	4826      	ldr	r0, [pc, #152]	@ (8003b4c <MX_TIM8_Init+0x148>)
 8003ab4:	f004 fe34 	bl	8008720 <HAL_TIM_PWM_ConfigChannel>
 8003ab8:	4603      	mov	r3, r0
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d001      	beq.n	8003ac2 <MX_TIM8_Init+0xbe>
  {
    Error_Handler();
 8003abe:	f7fe f83a 	bl	8001b36 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003ac2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003ac6:	2204      	movs	r2, #4
 8003ac8:	4619      	mov	r1, r3
 8003aca:	4820      	ldr	r0, [pc, #128]	@ (8003b4c <MX_TIM8_Init+0x148>)
 8003acc:	f004 fe28 	bl	8008720 <HAL_TIM_PWM_ConfigChannel>
 8003ad0:	4603      	mov	r3, r0
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d001      	beq.n	8003ada <MX_TIM8_Init+0xd6>
  {
    Error_Handler();
 8003ad6:	f7fe f82e 	bl	8001b36 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8003ada:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003ade:	2208      	movs	r2, #8
 8003ae0:	4619      	mov	r1, r3
 8003ae2:	481a      	ldr	r0, [pc, #104]	@ (8003b4c <MX_TIM8_Init+0x148>)
 8003ae4:	f004 fe1c 	bl	8008720 <HAL_TIM_PWM_ConfigChannel>
 8003ae8:	4603      	mov	r3, r0
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d001      	beq.n	8003af2 <MX_TIM8_Init+0xee>
  {
    Error_Handler();
 8003aee:	f7fe f822 	bl	8001b36 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8003af2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003af6:	220c      	movs	r2, #12
 8003af8:	4619      	mov	r1, r3
 8003afa:	4814      	ldr	r0, [pc, #80]	@ (8003b4c <MX_TIM8_Init+0x148>)
 8003afc:	f004 fe10 	bl	8008720 <HAL_TIM_PWM_ConfigChannel>
 8003b00:	4603      	mov	r3, r0
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d001      	beq.n	8003b0a <MX_TIM8_Init+0x106>
  {
    Error_Handler();
 8003b06:	f7fe f816 	bl	8001b36 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8003b0a:	2300      	movs	r3, #0
 8003b0c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8003b0e:	2300      	movs	r3, #0
 8003b10:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8003b12:	2300      	movs	r3, #0
 8003b14:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8003b16:	2300      	movs	r3, #0
 8003b18:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8003b1a:	2300      	movs	r3, #0
 8003b1c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8003b1e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003b22:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8003b24:	2300      	movs	r3, #0
 8003b26:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8003b28:	1d3b      	adds	r3, r7, #4
 8003b2a:	4619      	mov	r1, r3
 8003b2c:	4807      	ldr	r0, [pc, #28]	@ (8003b4c <MX_TIM8_Init+0x148>)
 8003b2e:	f005 faf3 	bl	8009118 <HAL_TIMEx_ConfigBreakDeadTime>
 8003b32:	4603      	mov	r3, r0
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d001      	beq.n	8003b3c <MX_TIM8_Init+0x138>
  {
    Error_Handler();
 8003b38:	f7fd fffd 	bl	8001b36 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8003b3c:	4803      	ldr	r0, [pc, #12]	@ (8003b4c <MX_TIM8_Init+0x148>)
 8003b3e:	f000 f897 	bl	8003c70 <HAL_TIM_MspPostInit>

}
 8003b42:	bf00      	nop
 8003b44:	3748      	adds	r7, #72	@ 0x48
 8003b46:	46bd      	mov	sp, r7
 8003b48:	bd80      	pop	{r7, pc}
 8003b4a:	bf00      	nop
 8003b4c:	200003b0 	.word	0x200003b0
 8003b50:	40013400 	.word	0x40013400

08003b54 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8003b54:	b580      	push	{r7, lr}
 8003b56:	b086      	sub	sp, #24
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003b64:	d114      	bne.n	8003b90 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003b66:	4b2f      	ldr	r3, [pc, #188]	@ (8003c24 <HAL_TIM_Base_MspInit+0xd0>)
 8003b68:	69db      	ldr	r3, [r3, #28]
 8003b6a:	4a2e      	ldr	r2, [pc, #184]	@ (8003c24 <HAL_TIM_Base_MspInit+0xd0>)
 8003b6c:	f043 0301 	orr.w	r3, r3, #1
 8003b70:	61d3      	str	r3, [r2, #28]
 8003b72:	4b2c      	ldr	r3, [pc, #176]	@ (8003c24 <HAL_TIM_Base_MspInit+0xd0>)
 8003b74:	69db      	ldr	r3, [r3, #28]
 8003b76:	f003 0301 	and.w	r3, r3, #1
 8003b7a:	617b      	str	r3, [r7, #20]
 8003b7c:	697b      	ldr	r3, [r7, #20]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8003b7e:	2200      	movs	r2, #0
 8003b80:	2100      	movs	r1, #0
 8003b82:	201c      	movs	r0, #28
 8003b84:	f001 f8d7 	bl	8004d36 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8003b88:	201c      	movs	r0, #28
 8003b8a:	f001 f8f0 	bl	8004d6e <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM5_CLK_ENABLE();
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 8003b8e:	e044      	b.n	8003c1a <HAL_TIM_Base_MspInit+0xc6>
  else if(tim_baseHandle->Instance==TIM3)
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	4a24      	ldr	r2, [pc, #144]	@ (8003c28 <HAL_TIM_Base_MspInit+0xd4>)
 8003b96:	4293      	cmp	r3, r2
 8003b98:	d114      	bne.n	8003bc4 <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003b9a:	4b22      	ldr	r3, [pc, #136]	@ (8003c24 <HAL_TIM_Base_MspInit+0xd0>)
 8003b9c:	69db      	ldr	r3, [r3, #28]
 8003b9e:	4a21      	ldr	r2, [pc, #132]	@ (8003c24 <HAL_TIM_Base_MspInit+0xd0>)
 8003ba0:	f043 0302 	orr.w	r3, r3, #2
 8003ba4:	61d3      	str	r3, [r2, #28]
 8003ba6:	4b1f      	ldr	r3, [pc, #124]	@ (8003c24 <HAL_TIM_Base_MspInit+0xd0>)
 8003ba8:	69db      	ldr	r3, [r3, #28]
 8003baa:	f003 0302 	and.w	r3, r3, #2
 8003bae:	613b      	str	r3, [r7, #16]
 8003bb0:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8003bb2:	2200      	movs	r2, #0
 8003bb4:	2100      	movs	r1, #0
 8003bb6:	201d      	movs	r0, #29
 8003bb8:	f001 f8bd 	bl	8004d36 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8003bbc:	201d      	movs	r0, #29
 8003bbe:	f001 f8d6 	bl	8004d6e <HAL_NVIC_EnableIRQ>
}
 8003bc2:	e02a      	b.n	8003c1a <HAL_TIM_Base_MspInit+0xc6>
  else if(tim_baseHandle->Instance==TIM4)
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	4a18      	ldr	r2, [pc, #96]	@ (8003c2c <HAL_TIM_Base_MspInit+0xd8>)
 8003bca:	4293      	cmp	r3, r2
 8003bcc:	d114      	bne.n	8003bf8 <HAL_TIM_Base_MspInit+0xa4>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003bce:	4b15      	ldr	r3, [pc, #84]	@ (8003c24 <HAL_TIM_Base_MspInit+0xd0>)
 8003bd0:	69db      	ldr	r3, [r3, #28]
 8003bd2:	4a14      	ldr	r2, [pc, #80]	@ (8003c24 <HAL_TIM_Base_MspInit+0xd0>)
 8003bd4:	f043 0304 	orr.w	r3, r3, #4
 8003bd8:	61d3      	str	r3, [r2, #28]
 8003bda:	4b12      	ldr	r3, [pc, #72]	@ (8003c24 <HAL_TIM_Base_MspInit+0xd0>)
 8003bdc:	69db      	ldr	r3, [r3, #28]
 8003bde:	f003 0304 	and.w	r3, r3, #4
 8003be2:	60fb      	str	r3, [r7, #12]
 8003be4:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8003be6:	2200      	movs	r2, #0
 8003be8:	2100      	movs	r1, #0
 8003bea:	201e      	movs	r0, #30
 8003bec:	f001 f8a3 	bl	8004d36 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8003bf0:	201e      	movs	r0, #30
 8003bf2:	f001 f8bc 	bl	8004d6e <HAL_NVIC_EnableIRQ>
}
 8003bf6:	e010      	b.n	8003c1a <HAL_TIM_Base_MspInit+0xc6>
  else if(tim_baseHandle->Instance==TIM5)
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	4a0c      	ldr	r2, [pc, #48]	@ (8003c30 <HAL_TIM_Base_MspInit+0xdc>)
 8003bfe:	4293      	cmp	r3, r2
 8003c00:	d10b      	bne.n	8003c1a <HAL_TIM_Base_MspInit+0xc6>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8003c02:	4b08      	ldr	r3, [pc, #32]	@ (8003c24 <HAL_TIM_Base_MspInit+0xd0>)
 8003c04:	69db      	ldr	r3, [r3, #28]
 8003c06:	4a07      	ldr	r2, [pc, #28]	@ (8003c24 <HAL_TIM_Base_MspInit+0xd0>)
 8003c08:	f043 0308 	orr.w	r3, r3, #8
 8003c0c:	61d3      	str	r3, [r2, #28]
 8003c0e:	4b05      	ldr	r3, [pc, #20]	@ (8003c24 <HAL_TIM_Base_MspInit+0xd0>)
 8003c10:	69db      	ldr	r3, [r3, #28]
 8003c12:	f003 0308 	and.w	r3, r3, #8
 8003c16:	60bb      	str	r3, [r7, #8]
 8003c18:	68bb      	ldr	r3, [r7, #8]
}
 8003c1a:	bf00      	nop
 8003c1c:	3718      	adds	r7, #24
 8003c1e:	46bd      	mov	sp, r7
 8003c20:	bd80      	pop	{r7, pc}
 8003c22:	bf00      	nop
 8003c24:	40021000 	.word	0x40021000
 8003c28:	40000400 	.word	0x40000400
 8003c2c:	40000800 	.word	0x40000800
 8003c30:	40000c00 	.word	0x40000c00

08003c34 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8003c34:	b480      	push	{r7}
 8003c36:	b085      	sub	sp, #20
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM8)
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	4a09      	ldr	r2, [pc, #36]	@ (8003c68 <HAL_TIM_PWM_MspInit+0x34>)
 8003c42:	4293      	cmp	r3, r2
 8003c44:	d10b      	bne.n	8003c5e <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* TIM8 clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 8003c46:	4b09      	ldr	r3, [pc, #36]	@ (8003c6c <HAL_TIM_PWM_MspInit+0x38>)
 8003c48:	699b      	ldr	r3, [r3, #24]
 8003c4a:	4a08      	ldr	r2, [pc, #32]	@ (8003c6c <HAL_TIM_PWM_MspInit+0x38>)
 8003c4c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8003c50:	6193      	str	r3, [r2, #24]
 8003c52:	4b06      	ldr	r3, [pc, #24]	@ (8003c6c <HAL_TIM_PWM_MspInit+0x38>)
 8003c54:	699b      	ldr	r3, [r3, #24]
 8003c56:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003c5a:	60fb      	str	r3, [r7, #12]
 8003c5c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 8003c5e:	bf00      	nop
 8003c60:	3714      	adds	r7, #20
 8003c62:	46bd      	mov	sp, r7
 8003c64:	bc80      	pop	{r7}
 8003c66:	4770      	bx	lr
 8003c68:	40013400 	.word	0x40013400
 8003c6c:	40021000 	.word	0x40021000

08003c70 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8003c70:	b580      	push	{r7, lr}
 8003c72:	b08c      	sub	sp, #48	@ 0x30
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003c78:	f107 031c 	add.w	r3, r7, #28
 8003c7c:	2200      	movs	r2, #0
 8003c7e:	601a      	str	r2, [r3, #0]
 8003c80:	605a      	str	r2, [r3, #4]
 8003c82:	609a      	str	r2, [r3, #8]
 8003c84:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM3)
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	4a46      	ldr	r2, [pc, #280]	@ (8003da4 <HAL_TIM_MspPostInit+0x134>)
 8003c8c:	4293      	cmp	r3, r2
 8003c8e:	d12a      	bne.n	8003ce6 <HAL_TIM_MspPostInit+0x76>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003c90:	4b45      	ldr	r3, [pc, #276]	@ (8003da8 <HAL_TIM_MspPostInit+0x138>)
 8003c92:	699b      	ldr	r3, [r3, #24]
 8003c94:	4a44      	ldr	r2, [pc, #272]	@ (8003da8 <HAL_TIM_MspPostInit+0x138>)
 8003c96:	f043 0308 	orr.w	r3, r3, #8
 8003c9a:	6193      	str	r3, [r2, #24]
 8003c9c:	4b42      	ldr	r3, [pc, #264]	@ (8003da8 <HAL_TIM_MspPostInit+0x138>)
 8003c9e:	699b      	ldr	r3, [r3, #24]
 8003ca0:	f003 0308 	and.w	r3, r3, #8
 8003ca4:	61bb      	str	r3, [r7, #24]
 8003ca6:	69bb      	ldr	r3, [r7, #24]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = SM_STEP_Pin;
 8003ca8:	2310      	movs	r3, #16
 8003caa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003cac:	2302      	movs	r3, #2
 8003cae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003cb0:	2302      	movs	r3, #2
 8003cb2:	62bb      	str	r3, [r7, #40]	@ 0x28
    HAL_GPIO_Init(SM_STEP_GPIO_Port, &GPIO_InitStruct);
 8003cb4:	f107 031c 	add.w	r3, r7, #28
 8003cb8:	4619      	mov	r1, r3
 8003cba:	483c      	ldr	r0, [pc, #240]	@ (8003dac <HAL_TIM_MspPostInit+0x13c>)
 8003cbc:	f001 fcf6 	bl	80056ac <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM3_PARTIAL();
 8003cc0:	4b3b      	ldr	r3, [pc, #236]	@ (8003db0 <HAL_TIM_MspPostInit+0x140>)
 8003cc2:	685b      	ldr	r3, [r3, #4]
 8003cc4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003cc6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003cc8:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8003ccc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003cce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003cd0:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8003cd4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003cd6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003cd8:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8003cdc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003cde:	4a34      	ldr	r2, [pc, #208]	@ (8003db0 <HAL_TIM_MspPostInit+0x140>)
 8003ce0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003ce2:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8003ce4:	e05a      	b.n	8003d9c <HAL_TIM_MspPostInit+0x12c>
  else if(timHandle->Instance==TIM4)
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	4a32      	ldr	r2, [pc, #200]	@ (8003db4 <HAL_TIM_MspPostInit+0x144>)
 8003cec:	4293      	cmp	r3, r2
 8003cee:	d119      	bne.n	8003d24 <HAL_TIM_MspPostInit+0xb4>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003cf0:	4b2d      	ldr	r3, [pc, #180]	@ (8003da8 <HAL_TIM_MspPostInit+0x138>)
 8003cf2:	699b      	ldr	r3, [r3, #24]
 8003cf4:	4a2c      	ldr	r2, [pc, #176]	@ (8003da8 <HAL_TIM_MspPostInit+0x138>)
 8003cf6:	f043 0308 	orr.w	r3, r3, #8
 8003cfa:	6193      	str	r3, [r2, #24]
 8003cfc:	4b2a      	ldr	r3, [pc, #168]	@ (8003da8 <HAL_TIM_MspPostInit+0x138>)
 8003cfe:	699b      	ldr	r3, [r3, #24]
 8003d00:	f003 0308 	and.w	r3, r3, #8
 8003d04:	617b      	str	r3, [r7, #20]
 8003d06:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = RC_SERVO_3_Pin|RC_SERVO_2_Pin|RC_SERVO_1_Pin;
 8003d08:	f44f 73e0 	mov.w	r3, #448	@ 0x1c0
 8003d0c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d0e:	2302      	movs	r3, #2
 8003d10:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003d12:	2302      	movs	r3, #2
 8003d14:	62bb      	str	r3, [r7, #40]	@ 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003d16:	f107 031c 	add.w	r3, r7, #28
 8003d1a:	4619      	mov	r1, r3
 8003d1c:	4823      	ldr	r0, [pc, #140]	@ (8003dac <HAL_TIM_MspPostInit+0x13c>)
 8003d1e:	f001 fcc5 	bl	80056ac <HAL_GPIO_Init>
}
 8003d22:	e03b      	b.n	8003d9c <HAL_TIM_MspPostInit+0x12c>
  else if(timHandle->Instance==TIM5)
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	4a23      	ldr	r2, [pc, #140]	@ (8003db8 <HAL_TIM_MspPostInit+0x148>)
 8003d2a:	4293      	cmp	r3, r2
 8003d2c:	d118      	bne.n	8003d60 <HAL_TIM_MspPostInit+0xf0>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003d2e:	4b1e      	ldr	r3, [pc, #120]	@ (8003da8 <HAL_TIM_MspPostInit+0x138>)
 8003d30:	699b      	ldr	r3, [r3, #24]
 8003d32:	4a1d      	ldr	r2, [pc, #116]	@ (8003da8 <HAL_TIM_MspPostInit+0x138>)
 8003d34:	f043 0304 	orr.w	r3, r3, #4
 8003d38:	6193      	str	r3, [r2, #24]
 8003d3a:	4b1b      	ldr	r3, [pc, #108]	@ (8003da8 <HAL_TIM_MspPostInit+0x138>)
 8003d3c:	699b      	ldr	r3, [r3, #24]
 8003d3e:	f003 0304 	and.w	r3, r3, #4
 8003d42:	613b      	str	r3, [r7, #16]
 8003d44:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = BUZZER_Pin;
 8003d46:	2301      	movs	r3, #1
 8003d48:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d4a:	2302      	movs	r3, #2
 8003d4c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003d4e:	2302      	movs	r3, #2
 8003d50:	62bb      	str	r3, [r7, #40]	@ 0x28
    HAL_GPIO_Init(BUZZER_GPIO_Port, &GPIO_InitStruct);
 8003d52:	f107 031c 	add.w	r3, r7, #28
 8003d56:	4619      	mov	r1, r3
 8003d58:	4818      	ldr	r0, [pc, #96]	@ (8003dbc <HAL_TIM_MspPostInit+0x14c>)
 8003d5a:	f001 fca7 	bl	80056ac <HAL_GPIO_Init>
}
 8003d5e:	e01d      	b.n	8003d9c <HAL_TIM_MspPostInit+0x12c>
  else if(timHandle->Instance==TIM8)
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	4a16      	ldr	r2, [pc, #88]	@ (8003dc0 <HAL_TIM_MspPostInit+0x150>)
 8003d66:	4293      	cmp	r3, r2
 8003d68:	d118      	bne.n	8003d9c <HAL_TIM_MspPostInit+0x12c>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003d6a:	4b0f      	ldr	r3, [pc, #60]	@ (8003da8 <HAL_TIM_MspPostInit+0x138>)
 8003d6c:	699b      	ldr	r3, [r3, #24]
 8003d6e:	4a0e      	ldr	r2, [pc, #56]	@ (8003da8 <HAL_TIM_MspPostInit+0x138>)
 8003d70:	f043 0310 	orr.w	r3, r3, #16
 8003d74:	6193      	str	r3, [r2, #24]
 8003d76:	4b0c      	ldr	r3, [pc, #48]	@ (8003da8 <HAL_TIM_MspPostInit+0x138>)
 8003d78:	699b      	ldr	r3, [r3, #24]
 8003d7a:	f003 0310 	and.w	r3, r3, #16
 8003d7e:	60fb      	str	r3, [r7, #12]
 8003d80:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8003d82:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 8003d86:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d88:	2302      	movs	r3, #2
 8003d8a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003d8c:	2302      	movs	r3, #2
 8003d8e:	62bb      	str	r3, [r7, #40]	@ 0x28
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003d90:	f107 031c 	add.w	r3, r7, #28
 8003d94:	4619      	mov	r1, r3
 8003d96:	480b      	ldr	r0, [pc, #44]	@ (8003dc4 <HAL_TIM_MspPostInit+0x154>)
 8003d98:	f001 fc88 	bl	80056ac <HAL_GPIO_Init>
}
 8003d9c:	bf00      	nop
 8003d9e:	3730      	adds	r7, #48	@ 0x30
 8003da0:	46bd      	mov	sp, r7
 8003da2:	bd80      	pop	{r7, pc}
 8003da4:	40000400 	.word	0x40000400
 8003da8:	40021000 	.word	0x40021000
 8003dac:	40010c00 	.word	0x40010c00
 8003db0:	40010000 	.word	0x40010000
 8003db4:	40000800 	.word	0x40000800
 8003db8:	40000c00 	.word	0x40000c00
 8003dbc:	40010800 	.word	0x40010800
 8003dc0:	40013400 	.word	0x40013400
 8003dc4:	40011000 	.word	0x40011000

08003dc8 <initUartReceiveIT>:
	/**
	 * @brief UART receive function
	 * @param huart &huart1 or // &huart2
	 */
	enum StatusCode initUartReceiveIT(UART_HandleTypeDef *huart)
	{
 8003dc8:	b580      	push	{r7, lr}
 8003dca:	b084      	sub	sp, #16
 8003dcc:	af00      	add	r7, sp, #0
 8003dce:	6078      	str	r0, [r7, #4]
		for (uint8_t attempt = 0; attempt < MAX_RETRY_COUNT; ++attempt)
 8003dd0:	2300      	movs	r3, #0
 8003dd2:	73fb      	strb	r3, [r7, #15]
 8003dd4:	e025      	b.n	8003e22 <initUartReceiveIT+0x5a>
		{
			if (huart->Instance == USART1)
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	4a16      	ldr	r2, [pc, #88]	@ (8003e34 <initUartReceiveIT+0x6c>)
 8003ddc:	4293      	cmp	r3, r2
 8003dde:	d109      	bne.n	8003df4 <initUartReceiveIT+0x2c>
			{
				if (HAL_UART_Receive_IT(&huart1, &receive_buffer_1, 1) == HAL_OK)
 8003de0:	2201      	movs	r2, #1
 8003de2:	4915      	ldr	r1, [pc, #84]	@ (8003e38 <initUartReceiveIT+0x70>)
 8003de4:	4815      	ldr	r0, [pc, #84]	@ (8003e3c <initUartReceiveIT+0x74>)
 8003de6:	f005 fad5 	bl	8009394 <HAL_UART_Receive_IT>
 8003dea:	4603      	mov	r3, r0
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d112      	bne.n	8003e16 <initUartReceiveIT+0x4e>
				{
					return STATUS_OK;
 8003df0:	2301      	movs	r3, #1
 8003df2:	e01a      	b.n	8003e2a <initUartReceiveIT+0x62>
				}
			}
			else if (huart->Instance == USART2)
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	4a11      	ldr	r2, [pc, #68]	@ (8003e40 <initUartReceiveIT+0x78>)
 8003dfa:	4293      	cmp	r3, r2
 8003dfc:	d109      	bne.n	8003e12 <initUartReceiveIT+0x4a>
			{
				if (HAL_UART_Receive_IT(&huart2, &receive_buffer_2, 1) == HAL_OK)
 8003dfe:	2201      	movs	r2, #1
 8003e00:	4910      	ldr	r1, [pc, #64]	@ (8003e44 <initUartReceiveIT+0x7c>)
 8003e02:	4811      	ldr	r0, [pc, #68]	@ (8003e48 <initUartReceiveIT+0x80>)
 8003e04:	f005 fac6 	bl	8009394 <HAL_UART_Receive_IT>
 8003e08:	4603      	mov	r3, r0
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d103      	bne.n	8003e16 <initUartReceiveIT+0x4e>
				{
					return STATUS_OK;
 8003e0e:	2301      	movs	r3, #1
 8003e10:	e00b      	b.n	8003e2a <initUartReceiveIT+0x62>
				}
			}
			else
			{
				return STATUS_ERROR;
 8003e12:	2300      	movs	r3, #0
 8003e14:	e009      	b.n	8003e2a <initUartReceiveIT+0x62>
			}

			HAL_Delay(50);
 8003e16:	2032      	movs	r0, #50	@ 0x32
 8003e18:	f000 fab4 	bl	8004384 <HAL_Delay>
		for (uint8_t attempt = 0; attempt < MAX_RETRY_COUNT; ++attempt)
 8003e1c:	7bfb      	ldrb	r3, [r7, #15]
 8003e1e:	3301      	adds	r3, #1
 8003e20:	73fb      	strb	r3, [r7, #15]
 8003e22:	7bfb      	ldrb	r3, [r7, #15]
 8003e24:	2b02      	cmp	r3, #2
 8003e26:	d9d6      	bls.n	8003dd6 <initUartReceiveIT+0xe>
		}
		return STATUS_ERROR;
 8003e28:	2300      	movs	r3, #0
	}
 8003e2a:	4618      	mov	r0, r3
 8003e2c:	3710      	adds	r7, #16
 8003e2e:	46bd      	mov	sp, r7
 8003e30:	bd80      	pop	{r7, pc}
 8003e32:	bf00      	nop
 8003e34:	40013800 	.word	0x40013800
 8003e38:	200003f8 	.word	0x200003f8
 8003e3c:	200003fc 	.word	0x200003fc
 8003e40:	40004400 	.word	0x40004400
 8003e44:	200003fa 	.word	0x200003fa
 8003e48:	20000444 	.word	0x20000444

08003e4c <uartTransmitString>:
	 * @param huart &huart1 or // &huart2
	 * @param str The string to be transmitted
	 * @note str sould be < 100 character
	 */
	enum StatusCode uartTransmitString(UART_HandleTypeDef *huart, const char *str)
	{
 8003e4c:	b590      	push	{r4, r7, lr}
 8003e4e:	b085      	sub	sp, #20
 8003e50:	af00      	add	r7, sp, #0
 8003e52:	6078      	str	r0, [r7, #4]
 8003e54:	6039      	str	r1, [r7, #0]
		for (uint8_t attempt = 0; attempt < MAX_RETRY_COUNT; ++attempt)
 8003e56:	2300      	movs	r3, #0
 8003e58:	73fb      	strb	r3, [r7, #15]
 8003e5a:	e019      	b.n	8003e90 <uartTransmitString+0x44>
		{
			if (HAL_UART_Transmit(huart, (uint8_t *)str, strlen(str), strlen(str) * 2) == HAL_OK)
 8003e5c:	6838      	ldr	r0, [r7, #0]
 8003e5e:	f7fc f9e1 	bl	8000224 <strlen>
 8003e62:	4603      	mov	r3, r0
 8003e64:	b29c      	uxth	r4, r3
 8003e66:	6838      	ldr	r0, [r7, #0]
 8003e68:	f7fc f9dc 	bl	8000224 <strlen>
 8003e6c:	4603      	mov	r3, r0
 8003e6e:	005b      	lsls	r3, r3, #1
 8003e70:	4622      	mov	r2, r4
 8003e72:	6839      	ldr	r1, [r7, #0]
 8003e74:	6878      	ldr	r0, [r7, #4]
 8003e76:	f005 fa02 	bl	800927e <HAL_UART_Transmit>
 8003e7a:	4603      	mov	r3, r0
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d101      	bne.n	8003e84 <uartTransmitString+0x38>
			{
				return STATUS_OK;
 8003e80:	2301      	movs	r3, #1
 8003e82:	e009      	b.n	8003e98 <uartTransmitString+0x4c>
			}
			HAL_Delay(50);
 8003e84:	2032      	movs	r0, #50	@ 0x32
 8003e86:	f000 fa7d 	bl	8004384 <HAL_Delay>
		for (uint8_t attempt = 0; attempt < MAX_RETRY_COUNT; ++attempt)
 8003e8a:	7bfb      	ldrb	r3, [r7, #15]
 8003e8c:	3301      	adds	r3, #1
 8003e8e:	73fb      	strb	r3, [r7, #15]
 8003e90:	7bfb      	ldrb	r3, [r7, #15]
 8003e92:	2b02      	cmp	r3, #2
 8003e94:	d9e2      	bls.n	8003e5c <uartTransmitString+0x10>
		}
		return STATUS_ERROR;
 8003e96:	2300      	movs	r3, #0
	}
 8003e98:	4618      	mov	r0, r3
 8003e9a:	3714      	adds	r7, #20
 8003e9c:	46bd      	mov	sp, r7
 8003e9e:	bd90      	pop	{r4, r7, pc}

08003ea0 <uartTransmit8b>:

	enum StatusCode uartTransmit8b(UART_HandleTypeDef *huart, const uint8_t *array, const uint16_t size)
	{
 8003ea0:	b580      	push	{r7, lr}
 8003ea2:	b086      	sub	sp, #24
 8003ea4:	af00      	add	r7, sp, #0
 8003ea6:	60f8      	str	r0, [r7, #12]
 8003ea8:	60b9      	str	r1, [r7, #8]
 8003eaa:	4613      	mov	r3, r2
 8003eac:	80fb      	strh	r3, [r7, #6]
		if (array == NULL || size == 0)
 8003eae:	68bb      	ldr	r3, [r7, #8]
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d002      	beq.n	8003eba <uartTransmit8b+0x1a>
 8003eb4:	88fb      	ldrh	r3, [r7, #6]
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d101      	bne.n	8003ebe <uartTransmit8b+0x1e>
		{
			return STATUS_ERROR;
 8003eba:	2300      	movs	r3, #0
 8003ebc:	e018      	b.n	8003ef0 <uartTransmit8b+0x50>
		}

		for (uint8_t attempt = 0; attempt < MAX_RETRY_COUNT; ++attempt)
 8003ebe:	2300      	movs	r3, #0
 8003ec0:	75fb      	strb	r3, [r7, #23]
 8003ec2:	e011      	b.n	8003ee8 <uartTransmit8b+0x48>
		{
			if (HAL_UART_Transmit(huart, array, size, size * 2) == HAL_OK)
 8003ec4:	88fb      	ldrh	r3, [r7, #6]
 8003ec6:	005b      	lsls	r3, r3, #1
 8003ec8:	88fa      	ldrh	r2, [r7, #6]
 8003eca:	68b9      	ldr	r1, [r7, #8]
 8003ecc:	68f8      	ldr	r0, [r7, #12]
 8003ece:	f005 f9d6 	bl	800927e <HAL_UART_Transmit>
 8003ed2:	4603      	mov	r3, r0
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d101      	bne.n	8003edc <uartTransmit8b+0x3c>
			{
				return STATUS_OK;
 8003ed8:	2301      	movs	r3, #1
 8003eda:	e009      	b.n	8003ef0 <uartTransmit8b+0x50>
			}
			HAL_Delay(50);
 8003edc:	2032      	movs	r0, #50	@ 0x32
 8003ede:	f000 fa51 	bl	8004384 <HAL_Delay>
		for (uint8_t attempt = 0; attempt < MAX_RETRY_COUNT; ++attempt)
 8003ee2:	7dfb      	ldrb	r3, [r7, #23]
 8003ee4:	3301      	adds	r3, #1
 8003ee6:	75fb      	strb	r3, [r7, #23]
 8003ee8:	7dfb      	ldrb	r3, [r7, #23]
 8003eea:	2b02      	cmp	r3, #2
 8003eec:	d9ea      	bls.n	8003ec4 <uartTransmit8b+0x24>
		}
		return STATUS_ERROR;
 8003eee:	2300      	movs	r3, #0
	}
 8003ef0:	4618      	mov	r0, r3
 8003ef2:	3718      	adds	r7, #24
 8003ef4:	46bd      	mov	sp, r7
 8003ef6:	bd80      	pop	{r7, pc}

08003ef8 <getFlagUart1>:

	uint8_t getFlagUart1()
	{
 8003ef8:	b480      	push	{r7}
 8003efa:	af00      	add	r7, sp, #0
		if (uart_1_flag)
 8003efc:	4b07      	ldr	r3, [pc, #28]	@ (8003f1c <getFlagUart1+0x24>)
 8003efe:	781b      	ldrb	r3, [r3, #0]
 8003f00:	b2db      	uxtb	r3, r3
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d004      	beq.n	8003f10 <getFlagUart1+0x18>
		{
			uart_1_flag = 0;
 8003f06:	4b05      	ldr	r3, [pc, #20]	@ (8003f1c <getFlagUart1+0x24>)
 8003f08:	2200      	movs	r2, #0
 8003f0a:	701a      	strb	r2, [r3, #0]
			return 1;
 8003f0c:	2301      	movs	r3, #1
 8003f0e:	e000      	b.n	8003f12 <getFlagUart1+0x1a>
		}
		return 0;
 8003f10:	2300      	movs	r3, #0
	}
 8003f12:	4618      	mov	r0, r3
 8003f14:	46bd      	mov	sp, r7
 8003f16:	bc80      	pop	{r7}
 8003f18:	4770      	bx	lr
 8003f1a:	bf00      	nop
 8003f1c:	200003f9 	.word	0x200003f9

08003f20 <getBufferUart1>:
		}
		return 0;
	}

	uint8_t getBufferUart1()
	{
 8003f20:	b480      	push	{r7}
 8003f22:	af00      	add	r7, sp, #0
		return receive_buffer_1;
 8003f24:	4b02      	ldr	r3, [pc, #8]	@ (8003f30 <getBufferUart1+0x10>)
 8003f26:	781b      	ldrb	r3, [r3, #0]
	}
 8003f28:	4618      	mov	r0, r3
 8003f2a:	46bd      	mov	sp, r7
 8003f2c:	bc80      	pop	{r7}
 8003f2e:	4770      	bx	lr
 8003f30:	200003f8 	.word	0x200003f8

08003f34 <getBufferUart2>:

	uint8_t getBufferUart2()
	{
 8003f34:	b480      	push	{r7}
 8003f36:	af00      	add	r7, sp, #0
		return receive_buffer_2;
 8003f38:	4b02      	ldr	r3, [pc, #8]	@ (8003f44 <getBufferUart2+0x10>)
 8003f3a:	781b      	ldrb	r3, [r3, #0]
	}
 8003f3c:	4618      	mov	r0, r3
 8003f3e:	46bd      	mov	sp, r7
 8003f40:	bc80      	pop	{r7}
 8003f42:	4770      	bx	lr
 8003f44:	200003fa 	.word	0x200003fa

08003f48 <HAL_UART_RxCpltCallback>:
	 * @brief This function is evoked automatically when the UART peripheral received data send through uart and echo its back
	 *
	 * @param huart The UART handle
	 */
	void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
	{
 8003f48:	b580      	push	{r7, lr}
 8003f4a:	b082      	sub	sp, #8
 8003f4c:	af00      	add	r7, sp, #0
 8003f4e:	6078      	str	r0, [r7, #4]
		if (huart->Instance == USART1)
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	4a0d      	ldr	r2, [pc, #52]	@ (8003f8c <HAL_UART_RxCpltCallback+0x44>)
 8003f56:	4293      	cmp	r3, r2
 8003f58:	d107      	bne.n	8003f6a <HAL_UART_RxCpltCallback+0x22>
		{
			uart_1_flag = 1;
 8003f5a:	4b0d      	ldr	r3, [pc, #52]	@ (8003f90 <HAL_UART_RxCpltCallback+0x48>)
 8003f5c:	2201      	movs	r2, #1
 8003f5e:	701a      	strb	r2, [r3, #0]
			// turn back on the receice interrupt
			HAL_UART_Receive_IT(&huart1, &receive_buffer_1, 1);
 8003f60:	2201      	movs	r2, #1
 8003f62:	490c      	ldr	r1, [pc, #48]	@ (8003f94 <HAL_UART_RxCpltCallback+0x4c>)
 8003f64:	480c      	ldr	r0, [pc, #48]	@ (8003f98 <HAL_UART_RxCpltCallback+0x50>)
 8003f66:	f005 fa15 	bl	8009394 <HAL_UART_Receive_IT>
		}
		if (huart->Instance == USART2)
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	4a0b      	ldr	r2, [pc, #44]	@ (8003f9c <HAL_UART_RxCpltCallback+0x54>)
 8003f70:	4293      	cmp	r3, r2
 8003f72:	d107      	bne.n	8003f84 <HAL_UART_RxCpltCallback+0x3c>
		{
			uart_2_flag = 1;
 8003f74:	4b0a      	ldr	r3, [pc, #40]	@ (8003fa0 <HAL_UART_RxCpltCallback+0x58>)
 8003f76:	2201      	movs	r2, #1
 8003f78:	701a      	strb	r2, [r3, #0]
			// turn back on the receice interrupt
			HAL_UART_Receive_IT(&huart2, &receive_buffer_2, 1);
 8003f7a:	2201      	movs	r2, #1
 8003f7c:	4909      	ldr	r1, [pc, #36]	@ (8003fa4 <HAL_UART_RxCpltCallback+0x5c>)
 8003f7e:	480a      	ldr	r0, [pc, #40]	@ (8003fa8 <HAL_UART_RxCpltCallback+0x60>)
 8003f80:	f005 fa08 	bl	8009394 <HAL_UART_Receive_IT>
		}
	}
 8003f84:	bf00      	nop
 8003f86:	3708      	adds	r7, #8
 8003f88:	46bd      	mov	sp, r7
 8003f8a:	bd80      	pop	{r7, pc}
 8003f8c:	40013800 	.word	0x40013800
 8003f90:	200003f9 	.word	0x200003f9
 8003f94:	200003f8 	.word	0x200003f8
 8003f98:	200003fc 	.word	0x200003fc
 8003f9c:	40004400 	.word	0x40004400
 8003fa0:	200003fb 	.word	0x200003fb
 8003fa4:	200003fa 	.word	0x200003fa
 8003fa8:	20000444 	.word	0x20000444

08003fac <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8003fac:	b580      	push	{r7, lr}
 8003fae:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003fb0:	4b11      	ldr	r3, [pc, #68]	@ (8003ff8 <MX_USART1_UART_Init+0x4c>)
 8003fb2:	4a12      	ldr	r2, [pc, #72]	@ (8003ffc <MX_USART1_UART_Init+0x50>)
 8003fb4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8003fb6:	4b10      	ldr	r3, [pc, #64]	@ (8003ff8 <MX_USART1_UART_Init+0x4c>)
 8003fb8:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8003fbc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003fbe:	4b0e      	ldr	r3, [pc, #56]	@ (8003ff8 <MX_USART1_UART_Init+0x4c>)
 8003fc0:	2200      	movs	r2, #0
 8003fc2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003fc4:	4b0c      	ldr	r3, [pc, #48]	@ (8003ff8 <MX_USART1_UART_Init+0x4c>)
 8003fc6:	2200      	movs	r2, #0
 8003fc8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003fca:	4b0b      	ldr	r3, [pc, #44]	@ (8003ff8 <MX_USART1_UART_Init+0x4c>)
 8003fcc:	2200      	movs	r2, #0
 8003fce:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003fd0:	4b09      	ldr	r3, [pc, #36]	@ (8003ff8 <MX_USART1_UART_Init+0x4c>)
 8003fd2:	220c      	movs	r2, #12
 8003fd4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003fd6:	4b08      	ldr	r3, [pc, #32]	@ (8003ff8 <MX_USART1_UART_Init+0x4c>)
 8003fd8:	2200      	movs	r2, #0
 8003fda:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003fdc:	4b06      	ldr	r3, [pc, #24]	@ (8003ff8 <MX_USART1_UART_Init+0x4c>)
 8003fde:	2200      	movs	r2, #0
 8003fe0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003fe2:	4805      	ldr	r0, [pc, #20]	@ (8003ff8 <MX_USART1_UART_Init+0x4c>)
 8003fe4:	f005 f8fb 	bl	80091de <HAL_UART_Init>
 8003fe8:	4603      	mov	r3, r0
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d001      	beq.n	8003ff2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8003fee:	f7fd fda2 	bl	8001b36 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003ff2:	bf00      	nop
 8003ff4:	bd80      	pop	{r7, pc}
 8003ff6:	bf00      	nop
 8003ff8:	200003fc 	.word	0x200003fc
 8003ffc:	40013800 	.word	0x40013800

08004000 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8004000:	b580      	push	{r7, lr}
 8004002:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8004004:	4b11      	ldr	r3, [pc, #68]	@ (800404c <MX_USART2_UART_Init+0x4c>)
 8004006:	4a12      	ldr	r2, [pc, #72]	@ (8004050 <MX_USART2_UART_Init+0x50>)
 8004008:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800400a:	4b10      	ldr	r3, [pc, #64]	@ (800404c <MX_USART2_UART_Init+0x4c>)
 800400c:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8004010:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8004012:	4b0e      	ldr	r3, [pc, #56]	@ (800404c <MX_USART2_UART_Init+0x4c>)
 8004014:	2200      	movs	r2, #0
 8004016:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8004018:	4b0c      	ldr	r3, [pc, #48]	@ (800404c <MX_USART2_UART_Init+0x4c>)
 800401a:	2200      	movs	r2, #0
 800401c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800401e:	4b0b      	ldr	r3, [pc, #44]	@ (800404c <MX_USART2_UART_Init+0x4c>)
 8004020:	2200      	movs	r2, #0
 8004022:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8004024:	4b09      	ldr	r3, [pc, #36]	@ (800404c <MX_USART2_UART_Init+0x4c>)
 8004026:	220c      	movs	r2, #12
 8004028:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800402a:	4b08      	ldr	r3, [pc, #32]	@ (800404c <MX_USART2_UART_Init+0x4c>)
 800402c:	2200      	movs	r2, #0
 800402e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8004030:	4b06      	ldr	r3, [pc, #24]	@ (800404c <MX_USART2_UART_Init+0x4c>)
 8004032:	2200      	movs	r2, #0
 8004034:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8004036:	4805      	ldr	r0, [pc, #20]	@ (800404c <MX_USART2_UART_Init+0x4c>)
 8004038:	f005 f8d1 	bl	80091de <HAL_UART_Init>
 800403c:	4603      	mov	r3, r0
 800403e:	2b00      	cmp	r3, #0
 8004040:	d001      	beq.n	8004046 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8004042:	f7fd fd78 	bl	8001b36 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8004046:	bf00      	nop
 8004048:	bd80      	pop	{r7, pc}
 800404a:	bf00      	nop
 800404c:	20000444 	.word	0x20000444
 8004050:	40004400 	.word	0x40004400

08004054 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8004054:	b580      	push	{r7, lr}
 8004056:	b08a      	sub	sp, #40	@ 0x28
 8004058:	af00      	add	r7, sp, #0
 800405a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800405c:	f107 0318 	add.w	r3, r7, #24
 8004060:	2200      	movs	r2, #0
 8004062:	601a      	str	r2, [r3, #0]
 8004064:	605a      	str	r2, [r3, #4]
 8004066:	609a      	str	r2, [r3, #8]
 8004068:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	4a3f      	ldr	r2, [pc, #252]	@ (800416c <HAL_UART_MspInit+0x118>)
 8004070:	4293      	cmp	r3, r2
 8004072:	d13a      	bne.n	80040ea <HAL_UART_MspInit+0x96>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8004074:	4b3e      	ldr	r3, [pc, #248]	@ (8004170 <HAL_UART_MspInit+0x11c>)
 8004076:	699b      	ldr	r3, [r3, #24]
 8004078:	4a3d      	ldr	r2, [pc, #244]	@ (8004170 <HAL_UART_MspInit+0x11c>)
 800407a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800407e:	6193      	str	r3, [r2, #24]
 8004080:	4b3b      	ldr	r3, [pc, #236]	@ (8004170 <HAL_UART_MspInit+0x11c>)
 8004082:	699b      	ldr	r3, [r3, #24]
 8004084:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004088:	617b      	str	r3, [r7, #20]
 800408a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800408c:	4b38      	ldr	r3, [pc, #224]	@ (8004170 <HAL_UART_MspInit+0x11c>)
 800408e:	699b      	ldr	r3, [r3, #24]
 8004090:	4a37      	ldr	r2, [pc, #220]	@ (8004170 <HAL_UART_MspInit+0x11c>)
 8004092:	f043 0304 	orr.w	r3, r3, #4
 8004096:	6193      	str	r3, [r2, #24]
 8004098:	4b35      	ldr	r3, [pc, #212]	@ (8004170 <HAL_UART_MspInit+0x11c>)
 800409a:	699b      	ldr	r3, [r3, #24]
 800409c:	f003 0304 	and.w	r3, r3, #4
 80040a0:	613b      	str	r3, [r7, #16]
 80040a2:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80040a4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80040a8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80040aa:	2302      	movs	r3, #2
 80040ac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80040ae:	2303      	movs	r3, #3
 80040b0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80040b2:	f107 0318 	add.w	r3, r7, #24
 80040b6:	4619      	mov	r1, r3
 80040b8:	482e      	ldr	r0, [pc, #184]	@ (8004174 <HAL_UART_MspInit+0x120>)
 80040ba:	f001 faf7 	bl	80056ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80040be:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80040c2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80040c4:	2300      	movs	r3, #0
 80040c6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040c8:	2300      	movs	r3, #0
 80040ca:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80040cc:	f107 0318 	add.w	r3, r7, #24
 80040d0:	4619      	mov	r1, r3
 80040d2:	4828      	ldr	r0, [pc, #160]	@ (8004174 <HAL_UART_MspInit+0x120>)
 80040d4:	f001 faea 	bl	80056ac <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80040d8:	2200      	movs	r2, #0
 80040da:	2100      	movs	r1, #0
 80040dc:	2025      	movs	r0, #37	@ 0x25
 80040de:	f000 fe2a 	bl	8004d36 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80040e2:	2025      	movs	r0, #37	@ 0x25
 80040e4:	f000 fe43 	bl	8004d6e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80040e8:	e03c      	b.n	8004164 <HAL_UART_MspInit+0x110>
  else if(uartHandle->Instance==USART2)
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	4a22      	ldr	r2, [pc, #136]	@ (8004178 <HAL_UART_MspInit+0x124>)
 80040f0:	4293      	cmp	r3, r2
 80040f2:	d137      	bne.n	8004164 <HAL_UART_MspInit+0x110>
    __HAL_RCC_USART2_CLK_ENABLE();
 80040f4:	4b1e      	ldr	r3, [pc, #120]	@ (8004170 <HAL_UART_MspInit+0x11c>)
 80040f6:	69db      	ldr	r3, [r3, #28]
 80040f8:	4a1d      	ldr	r2, [pc, #116]	@ (8004170 <HAL_UART_MspInit+0x11c>)
 80040fa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80040fe:	61d3      	str	r3, [r2, #28]
 8004100:	4b1b      	ldr	r3, [pc, #108]	@ (8004170 <HAL_UART_MspInit+0x11c>)
 8004102:	69db      	ldr	r3, [r3, #28]
 8004104:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004108:	60fb      	str	r3, [r7, #12]
 800410a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800410c:	4b18      	ldr	r3, [pc, #96]	@ (8004170 <HAL_UART_MspInit+0x11c>)
 800410e:	699b      	ldr	r3, [r3, #24]
 8004110:	4a17      	ldr	r2, [pc, #92]	@ (8004170 <HAL_UART_MspInit+0x11c>)
 8004112:	f043 0304 	orr.w	r3, r3, #4
 8004116:	6193      	str	r3, [r2, #24]
 8004118:	4b15      	ldr	r3, [pc, #84]	@ (8004170 <HAL_UART_MspInit+0x11c>)
 800411a:	699b      	ldr	r3, [r3, #24]
 800411c:	f003 0304 	and.w	r3, r3, #4
 8004120:	60bb      	str	r3, [r7, #8]
 8004122:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8004124:	2304      	movs	r3, #4
 8004126:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004128:	2302      	movs	r3, #2
 800412a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800412c:	2303      	movs	r3, #3
 800412e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004130:	f107 0318 	add.w	r3, r7, #24
 8004134:	4619      	mov	r1, r3
 8004136:	480f      	ldr	r0, [pc, #60]	@ (8004174 <HAL_UART_MspInit+0x120>)
 8004138:	f001 fab8 	bl	80056ac <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800413c:	2308      	movs	r3, #8
 800413e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004140:	2300      	movs	r3, #0
 8004142:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004144:	2300      	movs	r3, #0
 8004146:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004148:	f107 0318 	add.w	r3, r7, #24
 800414c:	4619      	mov	r1, r3
 800414e:	4809      	ldr	r0, [pc, #36]	@ (8004174 <HAL_UART_MspInit+0x120>)
 8004150:	f001 faac 	bl	80056ac <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8004154:	2200      	movs	r2, #0
 8004156:	2100      	movs	r1, #0
 8004158:	2026      	movs	r0, #38	@ 0x26
 800415a:	f000 fdec 	bl	8004d36 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800415e:	2026      	movs	r0, #38	@ 0x26
 8004160:	f000 fe05 	bl	8004d6e <HAL_NVIC_EnableIRQ>
}
 8004164:	bf00      	nop
 8004166:	3728      	adds	r7, #40	@ 0x28
 8004168:	46bd      	mov	sp, r7
 800416a:	bd80      	pop	{r7, pc}
 800416c:	40013800 	.word	0x40013800
 8004170:	40021000 	.word	0x40021000
 8004174:	40010800 	.word	0x40010800
 8004178:	40004400 	.word	0x40004400

0800417c <uint32_to_bytes>:
 * @note The output array should be at least 4*input_size bytes long
 * uint32_t input_32[] = {0x12345678, 0x9ABCDEF0};
 * uint32_to_bytes → [0x12, 0x34, 0x56, 0x78, 0x9A, 0xBC, 0xDE, 0xF0]
 */
void uint32_to_bytes(const uint32_t *input_32b, uint8_t *output_8b, const uint8_t input_size)
{
 800417c:	b480      	push	{r7}
 800417e:	b087      	sub	sp, #28
 8004180:	af00      	add	r7, sp, #0
 8004182:	60f8      	str	r0, [r7, #12]
 8004184:	60b9      	str	r1, [r7, #8]
 8004186:	4613      	mov	r3, r2
 8004188:	71fb      	strb	r3, [r7, #7]
    for (uint8_t i = 0; i < input_size; i++)
 800418a:	2300      	movs	r3, #0
 800418c:	75fb      	strb	r3, [r7, #23]
 800418e:	e035      	b.n	80041fc <uint32_to_bytes+0x80>
    {
        output_8b[4 * i] = (input_32b[i] >> 24) & 0x000000FF;
 8004190:	7dfb      	ldrb	r3, [r7, #23]
 8004192:	009b      	lsls	r3, r3, #2
 8004194:	68fa      	ldr	r2, [r7, #12]
 8004196:	4413      	add	r3, r2
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	0e1a      	lsrs	r2, r3, #24
 800419c:	7dfb      	ldrb	r3, [r7, #23]
 800419e:	009b      	lsls	r3, r3, #2
 80041a0:	4619      	mov	r1, r3
 80041a2:	68bb      	ldr	r3, [r7, #8]
 80041a4:	440b      	add	r3, r1
 80041a6:	b2d2      	uxtb	r2, r2
 80041a8:	701a      	strb	r2, [r3, #0]
        output_8b[4 * i + 1] = (input_32b[i] >> 16) & 0x000000FF;
 80041aa:	7dfb      	ldrb	r3, [r7, #23]
 80041ac:	009b      	lsls	r3, r3, #2
 80041ae:	68fa      	ldr	r2, [r7, #12]
 80041b0:	4413      	add	r3, r2
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	0c19      	lsrs	r1, r3, #16
 80041b6:	7dfb      	ldrb	r3, [r7, #23]
 80041b8:	009b      	lsls	r3, r3, #2
 80041ba:	3301      	adds	r3, #1
 80041bc:	68ba      	ldr	r2, [r7, #8]
 80041be:	4413      	add	r3, r2
 80041c0:	b2ca      	uxtb	r2, r1
 80041c2:	701a      	strb	r2, [r3, #0]
        output_8b[4 * i + 2] = (input_32b[i] >> 8) & 0x000000FF;
 80041c4:	7dfb      	ldrb	r3, [r7, #23]
 80041c6:	009b      	lsls	r3, r3, #2
 80041c8:	68fa      	ldr	r2, [r7, #12]
 80041ca:	4413      	add	r3, r2
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	0a19      	lsrs	r1, r3, #8
 80041d0:	7dfb      	ldrb	r3, [r7, #23]
 80041d2:	009b      	lsls	r3, r3, #2
 80041d4:	3302      	adds	r3, #2
 80041d6:	68ba      	ldr	r2, [r7, #8]
 80041d8:	4413      	add	r3, r2
 80041da:	b2ca      	uxtb	r2, r1
 80041dc:	701a      	strb	r2, [r3, #0]
        output_8b[4 * i + 3] = input_32b[i] & 0x000000FF;
 80041de:	7dfb      	ldrb	r3, [r7, #23]
 80041e0:	009b      	lsls	r3, r3, #2
 80041e2:	68fa      	ldr	r2, [r7, #12]
 80041e4:	4413      	add	r3, r2
 80041e6:	6819      	ldr	r1, [r3, #0]
 80041e8:	7dfb      	ldrb	r3, [r7, #23]
 80041ea:	009b      	lsls	r3, r3, #2
 80041ec:	3303      	adds	r3, #3
 80041ee:	68ba      	ldr	r2, [r7, #8]
 80041f0:	4413      	add	r3, r2
 80041f2:	b2ca      	uxtb	r2, r1
 80041f4:	701a      	strb	r2, [r3, #0]
    for (uint8_t i = 0; i < input_size; i++)
 80041f6:	7dfb      	ldrb	r3, [r7, #23]
 80041f8:	3301      	adds	r3, #1
 80041fa:	75fb      	strb	r3, [r7, #23]
 80041fc:	7dfa      	ldrb	r2, [r7, #23]
 80041fe:	79fb      	ldrb	r3, [r7, #7]
 8004200:	429a      	cmp	r2, r3
 8004202:	d3c5      	bcc.n	8004190 <uint32_to_bytes+0x14>
    }
}
 8004204:	bf00      	nop
 8004206:	bf00      	nop
 8004208:	371c      	adds	r7, #28
 800420a:	46bd      	mov	sp, r7
 800420c:	bc80      	pop	{r7}
 800420e:	4770      	bx	lr

08004210 <uint16_to_bytes>:
 * @note The output array should be at least 2*input_size bytes long
 * uint16_t input_16[] = {0x1234, 0x5678};
 * uint16_to_bytes → [0x12, 0x34, 0x56, 0x78]
 */
void uint16_to_bytes(const uint16_t *input_16b, uint8_t *output_8b, const uint8_t input_size)
{
 8004210:	b480      	push	{r7}
 8004212:	b087      	sub	sp, #28
 8004214:	af00      	add	r7, sp, #0
 8004216:	60f8      	str	r0, [r7, #12]
 8004218:	60b9      	str	r1, [r7, #8]
 800421a:	4613      	mov	r3, r2
 800421c:	71fb      	strb	r3, [r7, #7]
    for (uint8_t i = 0; i < input_size; i++)
 800421e:	2300      	movs	r3, #0
 8004220:	75fb      	strb	r3, [r7, #23]
 8004222:	e01c      	b.n	800425e <uint16_to_bytes+0x4e>
    {
        output_8b[2 * i] = (input_16b[i] >> 8) & 0x00FF;
 8004224:	7dfb      	ldrb	r3, [r7, #23]
 8004226:	005b      	lsls	r3, r3, #1
 8004228:	68fa      	ldr	r2, [r7, #12]
 800422a:	4413      	add	r3, r2
 800422c:	881b      	ldrh	r3, [r3, #0]
 800422e:	0a1b      	lsrs	r3, r3, #8
 8004230:	b29a      	uxth	r2, r3
 8004232:	7dfb      	ldrb	r3, [r7, #23]
 8004234:	005b      	lsls	r3, r3, #1
 8004236:	4619      	mov	r1, r3
 8004238:	68bb      	ldr	r3, [r7, #8]
 800423a:	440b      	add	r3, r1
 800423c:	b2d2      	uxtb	r2, r2
 800423e:	701a      	strb	r2, [r3, #0]
        output_8b[2 * i + 1] = input_16b[i] & 0x00FF;
 8004240:	7dfb      	ldrb	r3, [r7, #23]
 8004242:	005b      	lsls	r3, r3, #1
 8004244:	68fa      	ldr	r2, [r7, #12]
 8004246:	4413      	add	r3, r2
 8004248:	8819      	ldrh	r1, [r3, #0]
 800424a:	7dfb      	ldrb	r3, [r7, #23]
 800424c:	005b      	lsls	r3, r3, #1
 800424e:	3301      	adds	r3, #1
 8004250:	68ba      	ldr	r2, [r7, #8]
 8004252:	4413      	add	r3, r2
 8004254:	b2ca      	uxtb	r2, r1
 8004256:	701a      	strb	r2, [r3, #0]
    for (uint8_t i = 0; i < input_size; i++)
 8004258:	7dfb      	ldrb	r3, [r7, #23]
 800425a:	3301      	adds	r3, #1
 800425c:	75fb      	strb	r3, [r7, #23]
 800425e:	7dfa      	ldrb	r2, [r7, #23]
 8004260:	79fb      	ldrb	r3, [r7, #7]
 8004262:	429a      	cmp	r2, r3
 8004264:	d3de      	bcc.n	8004224 <uint16_to_bytes+0x14>
    }
}
 8004266:	bf00      	nop
 8004268:	bf00      	nop
 800426a:	371c      	adds	r7, #28
 800426c:	46bd      	mov	sp, r7
 800426e:	bc80      	pop	{r7}
 8004270:	4770      	bx	lr
	...

08004274 <Reset_Handler>:
 8004274:	f7ff f9fa 	bl	800366c <SystemInit>
 8004278:	480b      	ldr	r0, [pc, #44]	@ (80042a8 <LoopFillZerobss+0xe>)
 800427a:	490c      	ldr	r1, [pc, #48]	@ (80042ac <LoopFillZerobss+0x12>)
 800427c:	4a0c      	ldr	r2, [pc, #48]	@ (80042b0 <LoopFillZerobss+0x16>)
 800427e:	2300      	movs	r3, #0
 8004280:	e002      	b.n	8004288 <LoopCopyDataInit>

08004282 <CopyDataInit>:
 8004282:	58d4      	ldr	r4, [r2, r3]
 8004284:	50c4      	str	r4, [r0, r3]
 8004286:	3304      	adds	r3, #4

08004288 <LoopCopyDataInit>:
 8004288:	18c4      	adds	r4, r0, r3
 800428a:	428c      	cmp	r4, r1
 800428c:	d3f9      	bcc.n	8004282 <CopyDataInit>
 800428e:	4a09      	ldr	r2, [pc, #36]	@ (80042b4 <LoopFillZerobss+0x1a>)
 8004290:	4c09      	ldr	r4, [pc, #36]	@ (80042b8 <LoopFillZerobss+0x1e>)
 8004292:	2300      	movs	r3, #0
 8004294:	e001      	b.n	800429a <LoopFillZerobss>

08004296 <FillZerobss>:
 8004296:	6013      	str	r3, [r2, #0]
 8004298:	3204      	adds	r2, #4

0800429a <LoopFillZerobss>:
 800429a:	42a2      	cmp	r2, r4
 800429c:	d3fb      	bcc.n	8004296 <FillZerobss>
 800429e:	f005 fe11 	bl	8009ec4 <__libc_init_array>
 80042a2:	f7fd fbc1 	bl	8001a28 <main>
 80042a6:	4770      	bx	lr
 80042a8:	20000000 	.word	0x20000000
 80042ac:	20000030 	.word	0x20000030
 80042b0:	0800a1a8 	.word	0x0800a1a8
 80042b4:	20000030 	.word	0x20000030
 80042b8:	20000490 	.word	0x20000490

080042bc <ADC1_2_IRQHandler>:
 80042bc:	e7fe      	b.n	80042bc <ADC1_2_IRQHandler>
	...

080042c0 <HAL_Init>:
 80042c0:	b580      	push	{r7, lr}
 80042c2:	af00      	add	r7, sp, #0
 80042c4:	4b08      	ldr	r3, [pc, #32]	@ (80042e8 <HAL_Init+0x28>)
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	4a07      	ldr	r2, [pc, #28]	@ (80042e8 <HAL_Init+0x28>)
 80042ca:	f043 0310 	orr.w	r3, r3, #16
 80042ce:	6013      	str	r3, [r2, #0]
 80042d0:	2003      	movs	r0, #3
 80042d2:	f000 fd25 	bl	8004d20 <HAL_NVIC_SetPriorityGrouping>
 80042d6:	200f      	movs	r0, #15
 80042d8:	f000 f808 	bl	80042ec <HAL_InitTick>
 80042dc:	f7ff f8c2 	bl	8003464 <HAL_MspInit>
 80042e0:	2300      	movs	r3, #0
 80042e2:	4618      	mov	r0, r3
 80042e4:	bd80      	pop	{r7, pc}
 80042e6:	bf00      	nop
 80042e8:	40022000 	.word	0x40022000

080042ec <HAL_InitTick>:
 80042ec:	b580      	push	{r7, lr}
 80042ee:	b082      	sub	sp, #8
 80042f0:	af00      	add	r7, sp, #0
 80042f2:	6078      	str	r0, [r7, #4]
 80042f4:	4b12      	ldr	r3, [pc, #72]	@ (8004340 <HAL_InitTick+0x54>)
 80042f6:	681a      	ldr	r2, [r3, #0]
 80042f8:	4b12      	ldr	r3, [pc, #72]	@ (8004344 <HAL_InitTick+0x58>)
 80042fa:	781b      	ldrb	r3, [r3, #0]
 80042fc:	4619      	mov	r1, r3
 80042fe:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004302:	fbb3 f3f1 	udiv	r3, r3, r1
 8004306:	fbb2 f3f3 	udiv	r3, r2, r3
 800430a:	4618      	mov	r0, r3
 800430c:	f000 fd3d 	bl	8004d8a <HAL_SYSTICK_Config>
 8004310:	4603      	mov	r3, r0
 8004312:	2b00      	cmp	r3, #0
 8004314:	d001      	beq.n	800431a <HAL_InitTick+0x2e>
 8004316:	2301      	movs	r3, #1
 8004318:	e00e      	b.n	8004338 <HAL_InitTick+0x4c>
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	2b0f      	cmp	r3, #15
 800431e:	d80a      	bhi.n	8004336 <HAL_InitTick+0x4a>
 8004320:	2200      	movs	r2, #0
 8004322:	6879      	ldr	r1, [r7, #4]
 8004324:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004328:	f000 fd05 	bl	8004d36 <HAL_NVIC_SetPriority>
 800432c:	4a06      	ldr	r2, [pc, #24]	@ (8004348 <HAL_InitTick+0x5c>)
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	6013      	str	r3, [r2, #0]
 8004332:	2300      	movs	r3, #0
 8004334:	e000      	b.n	8004338 <HAL_InitTick+0x4c>
 8004336:	2301      	movs	r3, #1
 8004338:	4618      	mov	r0, r3
 800433a:	3708      	adds	r7, #8
 800433c:	46bd      	mov	sp, r7
 800433e:	bd80      	pop	{r7, pc}
 8004340:	20000024 	.word	0x20000024
 8004344:	2000002c 	.word	0x2000002c
 8004348:	20000028 	.word	0x20000028

0800434c <HAL_IncTick>:
 800434c:	b480      	push	{r7}
 800434e:	af00      	add	r7, sp, #0
 8004350:	4b05      	ldr	r3, [pc, #20]	@ (8004368 <HAL_IncTick+0x1c>)
 8004352:	781b      	ldrb	r3, [r3, #0]
 8004354:	461a      	mov	r2, r3
 8004356:	4b05      	ldr	r3, [pc, #20]	@ (800436c <HAL_IncTick+0x20>)
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	4413      	add	r3, r2
 800435c:	4a03      	ldr	r2, [pc, #12]	@ (800436c <HAL_IncTick+0x20>)
 800435e:	6013      	str	r3, [r2, #0]
 8004360:	bf00      	nop
 8004362:	46bd      	mov	sp, r7
 8004364:	bc80      	pop	{r7}
 8004366:	4770      	bx	lr
 8004368:	2000002c 	.word	0x2000002c
 800436c:	2000048c 	.word	0x2000048c

08004370 <HAL_GetTick>:
 8004370:	b480      	push	{r7}
 8004372:	af00      	add	r7, sp, #0
 8004374:	4b02      	ldr	r3, [pc, #8]	@ (8004380 <HAL_GetTick+0x10>)
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	4618      	mov	r0, r3
 800437a:	46bd      	mov	sp, r7
 800437c:	bc80      	pop	{r7}
 800437e:	4770      	bx	lr
 8004380:	2000048c 	.word	0x2000048c

08004384 <HAL_Delay>:
 8004384:	b580      	push	{r7, lr}
 8004386:	b084      	sub	sp, #16
 8004388:	af00      	add	r7, sp, #0
 800438a:	6078      	str	r0, [r7, #4]
 800438c:	f7ff fff0 	bl	8004370 <HAL_GetTick>
 8004390:	60b8      	str	r0, [r7, #8]
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	60fb      	str	r3, [r7, #12]
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800439c:	d005      	beq.n	80043aa <HAL_Delay+0x26>
 800439e:	4b0a      	ldr	r3, [pc, #40]	@ (80043c8 <HAL_Delay+0x44>)
 80043a0:	781b      	ldrb	r3, [r3, #0]
 80043a2:	461a      	mov	r2, r3
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	4413      	add	r3, r2
 80043a8:	60fb      	str	r3, [r7, #12]
 80043aa:	bf00      	nop
 80043ac:	f7ff ffe0 	bl	8004370 <HAL_GetTick>
 80043b0:	4602      	mov	r2, r0
 80043b2:	68bb      	ldr	r3, [r7, #8]
 80043b4:	1ad3      	subs	r3, r2, r3
 80043b6:	68fa      	ldr	r2, [r7, #12]
 80043b8:	429a      	cmp	r2, r3
 80043ba:	d8f7      	bhi.n	80043ac <HAL_Delay+0x28>
 80043bc:	bf00      	nop
 80043be:	bf00      	nop
 80043c0:	3710      	adds	r7, #16
 80043c2:	46bd      	mov	sp, r7
 80043c4:	bd80      	pop	{r7, pc}
 80043c6:	bf00      	nop
 80043c8:	2000002c 	.word	0x2000002c

080043cc <HAL_ADC_Init>:
 80043cc:	b580      	push	{r7, lr}
 80043ce:	b086      	sub	sp, #24
 80043d0:	af00      	add	r7, sp, #0
 80043d2:	6078      	str	r0, [r7, #4]
 80043d4:	2300      	movs	r3, #0
 80043d6:	75fb      	strb	r3, [r7, #23]
 80043d8:	2300      	movs	r3, #0
 80043da:	613b      	str	r3, [r7, #16]
 80043dc:	2300      	movs	r3, #0
 80043de:	60bb      	str	r3, [r7, #8]
 80043e0:	2300      	movs	r3, #0
 80043e2:	60fb      	str	r3, [r7, #12]
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d101      	bne.n	80043ee <HAL_ADC_Init+0x22>
 80043ea:	2301      	movs	r3, #1
 80043ec:	e0ce      	b.n	800458c <HAL_ADC_Init+0x1c0>
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	689b      	ldr	r3, [r3, #8]
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d109      	bne.n	8004410 <HAL_ADC_Init+0x44>
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	2200      	movs	r2, #0
 8004400:	62da      	str	r2, [r3, #44]	@ 0x2c
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	2200      	movs	r2, #0
 8004406:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 800440a:	6878      	ldr	r0, [r7, #4]
 800440c:	f7fc fc1c 	bl	8000c48 <HAL_ADC_MspInit>
 8004410:	6878      	ldr	r0, [r7, #4]
 8004412:	f000 fb11 	bl	8004a38 <ADC_ConversionStop_Disable>
 8004416:	4603      	mov	r3, r0
 8004418:	75fb      	strb	r3, [r7, #23]
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800441e:	f003 0310 	and.w	r3, r3, #16
 8004422:	2b00      	cmp	r3, #0
 8004424:	f040 80a9 	bne.w	800457a <HAL_ADC_Init+0x1ae>
 8004428:	7dfb      	ldrb	r3, [r7, #23]
 800442a:	2b00      	cmp	r3, #0
 800442c:	f040 80a5 	bne.w	800457a <HAL_ADC_Init+0x1ae>
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004434:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8004438:	f023 0302 	bic.w	r3, r3, #2
 800443c:	f043 0202 	orr.w	r2, r3, #2
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	629a      	str	r2, [r3, #40]	@ 0x28
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	685a      	ldr	r2, [r3, #4]
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	4951      	ldr	r1, [pc, #324]	@ (8004594 <HAL_ADC_Init+0x1c8>)
 800444e:	428b      	cmp	r3, r1
 8004450:	d10a      	bne.n	8004468 <HAL_ADC_Init+0x9c>
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	69db      	ldr	r3, [r3, #28]
 8004456:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800445a:	d002      	beq.n	8004462 <HAL_ADC_Init+0x96>
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	69db      	ldr	r3, [r3, #28]
 8004460:	e004      	b.n	800446c <HAL_ADC_Init+0xa0>
 8004462:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8004466:	e001      	b.n	800446c <HAL_ADC_Init+0xa0>
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	69db      	ldr	r3, [r3, #28]
 800446c:	431a      	orrs	r2, r3
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	7b1b      	ldrb	r3, [r3, #12]
 8004472:	005b      	lsls	r3, r3, #1
 8004474:	4313      	orrs	r3, r2
 8004476:	68ba      	ldr	r2, [r7, #8]
 8004478:	4313      	orrs	r3, r2
 800447a:	60bb      	str	r3, [r7, #8]
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	689b      	ldr	r3, [r3, #8]
 8004480:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004484:	d003      	beq.n	800448e <HAL_ADC_Init+0xc2>
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	689b      	ldr	r3, [r3, #8]
 800448a:	2b01      	cmp	r3, #1
 800448c:	d102      	bne.n	8004494 <HAL_ADC_Init+0xc8>
 800448e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004492:	e000      	b.n	8004496 <HAL_ADC_Init+0xca>
 8004494:	2300      	movs	r3, #0
 8004496:	693a      	ldr	r2, [r7, #16]
 8004498:	4313      	orrs	r3, r2
 800449a:	613b      	str	r3, [r7, #16]
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	7d1b      	ldrb	r3, [r3, #20]
 80044a0:	2b01      	cmp	r3, #1
 80044a2:	d119      	bne.n	80044d8 <HAL_ADC_Init+0x10c>
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	7b1b      	ldrb	r3, [r3, #12]
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d109      	bne.n	80044c0 <HAL_ADC_Init+0xf4>
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	699b      	ldr	r3, [r3, #24]
 80044b0:	3b01      	subs	r3, #1
 80044b2:	035a      	lsls	r2, r3, #13
 80044b4:	693b      	ldr	r3, [r7, #16]
 80044b6:	4313      	orrs	r3, r2
 80044b8:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80044bc:	613b      	str	r3, [r7, #16]
 80044be:	e00b      	b.n	80044d8 <HAL_ADC_Init+0x10c>
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80044c4:	f043 0220 	orr.w	r2, r3, #32
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	629a      	str	r2, [r3, #40]	@ 0x28
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044d0:	f043 0201 	orr.w	r2, r3, #1
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	62da      	str	r2, [r3, #44]	@ 0x2c
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	685b      	ldr	r3, [r3, #4]
 80044de:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	693a      	ldr	r2, [r7, #16]
 80044e8:	430a      	orrs	r2, r1
 80044ea:	605a      	str	r2, [r3, #4]
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	689a      	ldr	r2, [r3, #8]
 80044f2:	4b29      	ldr	r3, [pc, #164]	@ (8004598 <HAL_ADC_Init+0x1cc>)
 80044f4:	4013      	ands	r3, r2
 80044f6:	687a      	ldr	r2, [r7, #4]
 80044f8:	6812      	ldr	r2, [r2, #0]
 80044fa:	68b9      	ldr	r1, [r7, #8]
 80044fc:	430b      	orrs	r3, r1
 80044fe:	6093      	str	r3, [r2, #8]
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	689b      	ldr	r3, [r3, #8]
 8004504:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004508:	d003      	beq.n	8004512 <HAL_ADC_Init+0x146>
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	689b      	ldr	r3, [r3, #8]
 800450e:	2b01      	cmp	r3, #1
 8004510:	d104      	bne.n	800451c <HAL_ADC_Init+0x150>
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	691b      	ldr	r3, [r3, #16]
 8004516:	3b01      	subs	r3, #1
 8004518:	051b      	lsls	r3, r3, #20
 800451a:	60fb      	str	r3, [r7, #12]
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004522:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	68fa      	ldr	r2, [r7, #12]
 800452c:	430a      	orrs	r2, r1
 800452e:	62da      	str	r2, [r3, #44]	@ 0x2c
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	689a      	ldr	r2, [r3, #8]
 8004536:	4b19      	ldr	r3, [pc, #100]	@ (800459c <HAL_ADC_Init+0x1d0>)
 8004538:	4013      	ands	r3, r2
 800453a:	68ba      	ldr	r2, [r7, #8]
 800453c:	429a      	cmp	r2, r3
 800453e:	d10b      	bne.n	8004558 <HAL_ADC_Init+0x18c>
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	2200      	movs	r2, #0
 8004544:	62da      	str	r2, [r3, #44]	@ 0x2c
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800454a:	f023 0303 	bic.w	r3, r3, #3
 800454e:	f043 0201 	orr.w	r2, r3, #1
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	629a      	str	r2, [r3, #40]	@ 0x28
 8004556:	e018      	b.n	800458a <HAL_ADC_Init+0x1be>
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800455c:	f023 0312 	bic.w	r3, r3, #18
 8004560:	f043 0210 	orr.w	r2, r3, #16
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	629a      	str	r2, [r3, #40]	@ 0x28
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800456c:	f043 0201 	orr.w	r2, r3, #1
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	62da      	str	r2, [r3, #44]	@ 0x2c
 8004574:	2301      	movs	r3, #1
 8004576:	75fb      	strb	r3, [r7, #23]
 8004578:	e007      	b.n	800458a <HAL_ADC_Init+0x1be>
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800457e:	f043 0210 	orr.w	r2, r3, #16
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	629a      	str	r2, [r3, #40]	@ 0x28
 8004586:	2301      	movs	r3, #1
 8004588:	75fb      	strb	r3, [r7, #23]
 800458a:	7dfb      	ldrb	r3, [r7, #23]
 800458c:	4618      	mov	r0, r3
 800458e:	3718      	adds	r7, #24
 8004590:	46bd      	mov	sp, r7
 8004592:	bd80      	pop	{r7, pc}
 8004594:	40013c00 	.word	0x40013c00
 8004598:	ffe1f7fd 	.word	0xffe1f7fd
 800459c:	ff1f0efe 	.word	0xff1f0efe

080045a0 <HAL_ADC_Start_DMA>:
 80045a0:	b580      	push	{r7, lr}
 80045a2:	b086      	sub	sp, #24
 80045a4:	af00      	add	r7, sp, #0
 80045a6:	60f8      	str	r0, [r7, #12]
 80045a8:	60b9      	str	r1, [r7, #8]
 80045aa:	607a      	str	r2, [r7, #4]
 80045ac:	2300      	movs	r3, #0
 80045ae:	75fb      	strb	r3, [r7, #23]
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	4a64      	ldr	r2, [pc, #400]	@ (8004748 <HAL_ADC_Start_DMA+0x1a8>)
 80045b6:	4293      	cmp	r3, r2
 80045b8:	d004      	beq.n	80045c4 <HAL_ADC_Start_DMA+0x24>
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	4a63      	ldr	r2, [pc, #396]	@ (800474c <HAL_ADC_Start_DMA+0x1ac>)
 80045c0:	4293      	cmp	r3, r2
 80045c2:	d106      	bne.n	80045d2 <HAL_ADC_Start_DMA+0x32>
 80045c4:	4b60      	ldr	r3, [pc, #384]	@ (8004748 <HAL_ADC_Start_DMA+0x1a8>)
 80045c6:	685b      	ldr	r3, [r3, #4]
 80045c8:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	f040 80b3 	bne.w	8004738 <HAL_ADC_Start_DMA+0x198>
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80045d8:	2b01      	cmp	r3, #1
 80045da:	d101      	bne.n	80045e0 <HAL_ADC_Start_DMA+0x40>
 80045dc:	2302      	movs	r3, #2
 80045de:	e0ae      	b.n	800473e <HAL_ADC_Start_DMA+0x19e>
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	2201      	movs	r2, #1
 80045e4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 80045e8:	68f8      	ldr	r0, [r7, #12]
 80045ea:	f000 f9cb 	bl	8004984 <ADC_Enable>
 80045ee:	4603      	mov	r3, r0
 80045f0:	75fb      	strb	r3, [r7, #23]
 80045f2:	7dfb      	ldrb	r3, [r7, #23]
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	f040 809a 	bne.w	800472e <HAL_ADC_Start_DMA+0x18e>
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80045fe:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8004602:	f023 0301 	bic.w	r3, r3, #1
 8004606:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	629a      	str	r2, [r3, #40]	@ 0x28
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	4a4e      	ldr	r2, [pc, #312]	@ (800474c <HAL_ADC_Start_DMA+0x1ac>)
 8004614:	4293      	cmp	r3, r2
 8004616:	d105      	bne.n	8004624 <HAL_ADC_Start_DMA+0x84>
 8004618:	4b4b      	ldr	r3, [pc, #300]	@ (8004748 <HAL_ADC_Start_DMA+0x1a8>)
 800461a:	685b      	ldr	r3, [r3, #4]
 800461c:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 8004620:	2b00      	cmp	r3, #0
 8004622:	d115      	bne.n	8004650 <HAL_ADC_Start_DMA+0xb0>
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004628:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	629a      	str	r2, [r3, #40]	@ 0x28
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	685b      	ldr	r3, [r3, #4]
 8004636:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800463a:	2b00      	cmp	r3, #0
 800463c:	d026      	beq.n	800468c <HAL_ADC_Start_DMA+0xec>
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004642:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8004646:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	629a      	str	r2, [r3, #40]	@ 0x28
 800464e:	e01d      	b.n	800468c <HAL_ADC_Start_DMA+0xec>
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004654:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	629a      	str	r2, [r3, #40]	@ 0x28
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	4a39      	ldr	r2, [pc, #228]	@ (8004748 <HAL_ADC_Start_DMA+0x1a8>)
 8004662:	4293      	cmp	r3, r2
 8004664:	d004      	beq.n	8004670 <HAL_ADC_Start_DMA+0xd0>
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	4a38      	ldr	r2, [pc, #224]	@ (800474c <HAL_ADC_Start_DMA+0x1ac>)
 800466c:	4293      	cmp	r3, r2
 800466e:	d10d      	bne.n	800468c <HAL_ADC_Start_DMA+0xec>
 8004670:	4b35      	ldr	r3, [pc, #212]	@ (8004748 <HAL_ADC_Start_DMA+0x1a8>)
 8004672:	685b      	ldr	r3, [r3, #4]
 8004674:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004678:	2b00      	cmp	r3, #0
 800467a:	d007      	beq.n	800468c <HAL_ADC_Start_DMA+0xec>
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004680:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8004684:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	629a      	str	r2, [r3, #40]	@ 0x28
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004690:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004694:	2b00      	cmp	r3, #0
 8004696:	d006      	beq.n	80046a6 <HAL_ADC_Start_DMA+0x106>
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800469c:	f023 0206 	bic.w	r2, r3, #6
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	62da      	str	r2, [r3, #44]	@ 0x2c
 80046a4:	e002      	b.n	80046ac <HAL_ADC_Start_DMA+0x10c>
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	2200      	movs	r2, #0
 80046aa:	62da      	str	r2, [r3, #44]	@ 0x2c
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	2200      	movs	r2, #0
 80046b0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	6a1b      	ldr	r3, [r3, #32]
 80046b8:	4a25      	ldr	r2, [pc, #148]	@ (8004750 <HAL_ADC_Start_DMA+0x1b0>)
 80046ba:	629a      	str	r2, [r3, #40]	@ 0x28
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	6a1b      	ldr	r3, [r3, #32]
 80046c0:	4a24      	ldr	r2, [pc, #144]	@ (8004754 <HAL_ADC_Start_DMA+0x1b4>)
 80046c2:	62da      	str	r2, [r3, #44]	@ 0x2c
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	6a1b      	ldr	r3, [r3, #32]
 80046c8:	4a23      	ldr	r2, [pc, #140]	@ (8004758 <HAL_ADC_Start_DMA+0x1b8>)
 80046ca:	631a      	str	r2, [r3, #48]	@ 0x30
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	f06f 0202 	mvn.w	r2, #2
 80046d4:	601a      	str	r2, [r3, #0]
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	689a      	ldr	r2, [r3, #8]
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80046e4:	609a      	str	r2, [r3, #8]
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	6a18      	ldr	r0, [r3, #32]
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	334c      	adds	r3, #76	@ 0x4c
 80046f0:	4619      	mov	r1, r3
 80046f2:	68ba      	ldr	r2, [r7, #8]
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	f000 fbcb 	bl	8004e90 <HAL_DMA_Start_IT>
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	689b      	ldr	r3, [r3, #8]
 8004700:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8004704:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8004708:	d108      	bne.n	800471c <HAL_ADC_Start_DMA+0x17c>
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	689a      	ldr	r2, [r3, #8]
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 8004718:	609a      	str	r2, [r3, #8]
 800471a:	e00f      	b.n	800473c <HAL_ADC_Start_DMA+0x19c>
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	689a      	ldr	r2, [r3, #8]
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 800472a:	609a      	str	r2, [r3, #8]
 800472c:	e006      	b.n	800473c <HAL_ADC_Start_DMA+0x19c>
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	2200      	movs	r2, #0
 8004732:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8004736:	e001      	b.n	800473c <HAL_ADC_Start_DMA+0x19c>
 8004738:	2301      	movs	r3, #1
 800473a:	75fb      	strb	r3, [r7, #23]
 800473c:	7dfb      	ldrb	r3, [r7, #23]
 800473e:	4618      	mov	r0, r3
 8004740:	3718      	adds	r7, #24
 8004742:	46bd      	mov	sp, r7
 8004744:	bd80      	pop	{r7, pc}
 8004746:	bf00      	nop
 8004748:	40012400 	.word	0x40012400
 800474c:	40012800 	.word	0x40012800
 8004750:	08004abb 	.word	0x08004abb
 8004754:	08004b37 	.word	0x08004b37
 8004758:	08004b53 	.word	0x08004b53

0800475c <HAL_ADC_ConvCpltCallback>:
 800475c:	b480      	push	{r7}
 800475e:	b083      	sub	sp, #12
 8004760:	af00      	add	r7, sp, #0
 8004762:	6078      	str	r0, [r7, #4]
 8004764:	bf00      	nop
 8004766:	370c      	adds	r7, #12
 8004768:	46bd      	mov	sp, r7
 800476a:	bc80      	pop	{r7}
 800476c:	4770      	bx	lr

0800476e <HAL_ADC_ConvHalfCpltCallback>:
 800476e:	b480      	push	{r7}
 8004770:	b083      	sub	sp, #12
 8004772:	af00      	add	r7, sp, #0
 8004774:	6078      	str	r0, [r7, #4]
 8004776:	bf00      	nop
 8004778:	370c      	adds	r7, #12
 800477a:	46bd      	mov	sp, r7
 800477c:	bc80      	pop	{r7}
 800477e:	4770      	bx	lr

08004780 <HAL_ADC_ErrorCallback>:
 8004780:	b480      	push	{r7}
 8004782:	b083      	sub	sp, #12
 8004784:	af00      	add	r7, sp, #0
 8004786:	6078      	str	r0, [r7, #4]
 8004788:	bf00      	nop
 800478a:	370c      	adds	r7, #12
 800478c:	46bd      	mov	sp, r7
 800478e:	bc80      	pop	{r7}
 8004790:	4770      	bx	lr
	...

08004794 <HAL_ADC_ConfigChannel>:
 8004794:	b480      	push	{r7}
 8004796:	b085      	sub	sp, #20
 8004798:	af00      	add	r7, sp, #0
 800479a:	6078      	str	r0, [r7, #4]
 800479c:	6039      	str	r1, [r7, #0]
 800479e:	2300      	movs	r3, #0
 80047a0:	73fb      	strb	r3, [r7, #15]
 80047a2:	2300      	movs	r3, #0
 80047a4:	60bb      	str	r3, [r7, #8]
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80047ac:	2b01      	cmp	r3, #1
 80047ae:	d101      	bne.n	80047b4 <HAL_ADC_ConfigChannel+0x20>
 80047b0:	2302      	movs	r3, #2
 80047b2:	e0dc      	b.n	800496e <HAL_ADC_ConfigChannel+0x1da>
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	2201      	movs	r2, #1
 80047b8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 80047bc:	683b      	ldr	r3, [r7, #0]
 80047be:	685b      	ldr	r3, [r3, #4]
 80047c0:	2b06      	cmp	r3, #6
 80047c2:	d81c      	bhi.n	80047fe <HAL_ADC_ConfigChannel+0x6a>
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80047ca:	683b      	ldr	r3, [r7, #0]
 80047cc:	685a      	ldr	r2, [r3, #4]
 80047ce:	4613      	mov	r3, r2
 80047d0:	009b      	lsls	r3, r3, #2
 80047d2:	4413      	add	r3, r2
 80047d4:	3b05      	subs	r3, #5
 80047d6:	221f      	movs	r2, #31
 80047d8:	fa02 f303 	lsl.w	r3, r2, r3
 80047dc:	43db      	mvns	r3, r3
 80047de:	4019      	ands	r1, r3
 80047e0:	683b      	ldr	r3, [r7, #0]
 80047e2:	6818      	ldr	r0, [r3, #0]
 80047e4:	683b      	ldr	r3, [r7, #0]
 80047e6:	685a      	ldr	r2, [r3, #4]
 80047e8:	4613      	mov	r3, r2
 80047ea:	009b      	lsls	r3, r3, #2
 80047ec:	4413      	add	r3, r2
 80047ee:	3b05      	subs	r3, #5
 80047f0:	fa00 f203 	lsl.w	r2, r0, r3
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	430a      	orrs	r2, r1
 80047fa:	635a      	str	r2, [r3, #52]	@ 0x34
 80047fc:	e03c      	b.n	8004878 <HAL_ADC_ConfigChannel+0xe4>
 80047fe:	683b      	ldr	r3, [r7, #0]
 8004800:	685b      	ldr	r3, [r3, #4]
 8004802:	2b0c      	cmp	r3, #12
 8004804:	d81c      	bhi.n	8004840 <HAL_ADC_ConfigChannel+0xac>
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800480c:	683b      	ldr	r3, [r7, #0]
 800480e:	685a      	ldr	r2, [r3, #4]
 8004810:	4613      	mov	r3, r2
 8004812:	009b      	lsls	r3, r3, #2
 8004814:	4413      	add	r3, r2
 8004816:	3b23      	subs	r3, #35	@ 0x23
 8004818:	221f      	movs	r2, #31
 800481a:	fa02 f303 	lsl.w	r3, r2, r3
 800481e:	43db      	mvns	r3, r3
 8004820:	4019      	ands	r1, r3
 8004822:	683b      	ldr	r3, [r7, #0]
 8004824:	6818      	ldr	r0, [r3, #0]
 8004826:	683b      	ldr	r3, [r7, #0]
 8004828:	685a      	ldr	r2, [r3, #4]
 800482a:	4613      	mov	r3, r2
 800482c:	009b      	lsls	r3, r3, #2
 800482e:	4413      	add	r3, r2
 8004830:	3b23      	subs	r3, #35	@ 0x23
 8004832:	fa00 f203 	lsl.w	r2, r0, r3
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	430a      	orrs	r2, r1
 800483c:	631a      	str	r2, [r3, #48]	@ 0x30
 800483e:	e01b      	b.n	8004878 <HAL_ADC_ConfigChannel+0xe4>
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8004846:	683b      	ldr	r3, [r7, #0]
 8004848:	685a      	ldr	r2, [r3, #4]
 800484a:	4613      	mov	r3, r2
 800484c:	009b      	lsls	r3, r3, #2
 800484e:	4413      	add	r3, r2
 8004850:	3b41      	subs	r3, #65	@ 0x41
 8004852:	221f      	movs	r2, #31
 8004854:	fa02 f303 	lsl.w	r3, r2, r3
 8004858:	43db      	mvns	r3, r3
 800485a:	4019      	ands	r1, r3
 800485c:	683b      	ldr	r3, [r7, #0]
 800485e:	6818      	ldr	r0, [r3, #0]
 8004860:	683b      	ldr	r3, [r7, #0]
 8004862:	685a      	ldr	r2, [r3, #4]
 8004864:	4613      	mov	r3, r2
 8004866:	009b      	lsls	r3, r3, #2
 8004868:	4413      	add	r3, r2
 800486a:	3b41      	subs	r3, #65	@ 0x41
 800486c:	fa00 f203 	lsl.w	r2, r0, r3
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	430a      	orrs	r2, r1
 8004876:	62da      	str	r2, [r3, #44]	@ 0x2c
 8004878:	683b      	ldr	r3, [r7, #0]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	2b09      	cmp	r3, #9
 800487e:	d91c      	bls.n	80048ba <HAL_ADC_ConfigChannel+0x126>
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	68d9      	ldr	r1, [r3, #12]
 8004886:	683b      	ldr	r3, [r7, #0]
 8004888:	681a      	ldr	r2, [r3, #0]
 800488a:	4613      	mov	r3, r2
 800488c:	005b      	lsls	r3, r3, #1
 800488e:	4413      	add	r3, r2
 8004890:	3b1e      	subs	r3, #30
 8004892:	2207      	movs	r2, #7
 8004894:	fa02 f303 	lsl.w	r3, r2, r3
 8004898:	43db      	mvns	r3, r3
 800489a:	4019      	ands	r1, r3
 800489c:	683b      	ldr	r3, [r7, #0]
 800489e:	6898      	ldr	r0, [r3, #8]
 80048a0:	683b      	ldr	r3, [r7, #0]
 80048a2:	681a      	ldr	r2, [r3, #0]
 80048a4:	4613      	mov	r3, r2
 80048a6:	005b      	lsls	r3, r3, #1
 80048a8:	4413      	add	r3, r2
 80048aa:	3b1e      	subs	r3, #30
 80048ac:	fa00 f203 	lsl.w	r2, r0, r3
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	430a      	orrs	r2, r1
 80048b6:	60da      	str	r2, [r3, #12]
 80048b8:	e019      	b.n	80048ee <HAL_ADC_ConfigChannel+0x15a>
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	6919      	ldr	r1, [r3, #16]
 80048c0:	683b      	ldr	r3, [r7, #0]
 80048c2:	681a      	ldr	r2, [r3, #0]
 80048c4:	4613      	mov	r3, r2
 80048c6:	005b      	lsls	r3, r3, #1
 80048c8:	4413      	add	r3, r2
 80048ca:	2207      	movs	r2, #7
 80048cc:	fa02 f303 	lsl.w	r3, r2, r3
 80048d0:	43db      	mvns	r3, r3
 80048d2:	4019      	ands	r1, r3
 80048d4:	683b      	ldr	r3, [r7, #0]
 80048d6:	6898      	ldr	r0, [r3, #8]
 80048d8:	683b      	ldr	r3, [r7, #0]
 80048da:	681a      	ldr	r2, [r3, #0]
 80048dc:	4613      	mov	r3, r2
 80048de:	005b      	lsls	r3, r3, #1
 80048e0:	4413      	add	r3, r2
 80048e2:	fa00 f203 	lsl.w	r2, r0, r3
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	430a      	orrs	r2, r1
 80048ec:	611a      	str	r2, [r3, #16]
 80048ee:	683b      	ldr	r3, [r7, #0]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	2b10      	cmp	r3, #16
 80048f4:	d003      	beq.n	80048fe <HAL_ADC_ConfigChannel+0x16a>
 80048f6:	683b      	ldr	r3, [r7, #0]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	2b11      	cmp	r3, #17
 80048fc:	d132      	bne.n	8004964 <HAL_ADC_ConfigChannel+0x1d0>
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	4a1d      	ldr	r2, [pc, #116]	@ (8004978 <HAL_ADC_ConfigChannel+0x1e4>)
 8004904:	4293      	cmp	r3, r2
 8004906:	d125      	bne.n	8004954 <HAL_ADC_ConfigChannel+0x1c0>
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	689b      	ldr	r3, [r3, #8]
 800490e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004912:	2b00      	cmp	r3, #0
 8004914:	d126      	bne.n	8004964 <HAL_ADC_ConfigChannel+0x1d0>
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	689a      	ldr	r2, [r3, #8]
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8004924:	609a      	str	r2, [r3, #8]
 8004926:	683b      	ldr	r3, [r7, #0]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	2b10      	cmp	r3, #16
 800492c:	d11a      	bne.n	8004964 <HAL_ADC_ConfigChannel+0x1d0>
 800492e:	4b13      	ldr	r3, [pc, #76]	@ (800497c <HAL_ADC_ConfigChannel+0x1e8>)
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	4a13      	ldr	r2, [pc, #76]	@ (8004980 <HAL_ADC_ConfigChannel+0x1ec>)
 8004934:	fba2 2303 	umull	r2, r3, r2, r3
 8004938:	0c9a      	lsrs	r2, r3, #18
 800493a:	4613      	mov	r3, r2
 800493c:	009b      	lsls	r3, r3, #2
 800493e:	4413      	add	r3, r2
 8004940:	005b      	lsls	r3, r3, #1
 8004942:	60bb      	str	r3, [r7, #8]
 8004944:	e002      	b.n	800494c <HAL_ADC_ConfigChannel+0x1b8>
 8004946:	68bb      	ldr	r3, [r7, #8]
 8004948:	3b01      	subs	r3, #1
 800494a:	60bb      	str	r3, [r7, #8]
 800494c:	68bb      	ldr	r3, [r7, #8]
 800494e:	2b00      	cmp	r3, #0
 8004950:	d1f9      	bne.n	8004946 <HAL_ADC_ConfigChannel+0x1b2>
 8004952:	e007      	b.n	8004964 <HAL_ADC_ConfigChannel+0x1d0>
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004958:	f043 0220 	orr.w	r2, r3, #32
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	629a      	str	r2, [r3, #40]	@ 0x28
 8004960:	2301      	movs	r3, #1
 8004962:	73fb      	strb	r3, [r7, #15]
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	2200      	movs	r2, #0
 8004968:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 800496c:	7bfb      	ldrb	r3, [r7, #15]
 800496e:	4618      	mov	r0, r3
 8004970:	3714      	adds	r7, #20
 8004972:	46bd      	mov	sp, r7
 8004974:	bc80      	pop	{r7}
 8004976:	4770      	bx	lr
 8004978:	40012400 	.word	0x40012400
 800497c:	20000024 	.word	0x20000024
 8004980:	431bde83 	.word	0x431bde83

08004984 <ADC_Enable>:
 8004984:	b580      	push	{r7, lr}
 8004986:	b084      	sub	sp, #16
 8004988:	af00      	add	r7, sp, #0
 800498a:	6078      	str	r0, [r7, #4]
 800498c:	2300      	movs	r3, #0
 800498e:	60fb      	str	r3, [r7, #12]
 8004990:	2300      	movs	r3, #0
 8004992:	60bb      	str	r3, [r7, #8]
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	689b      	ldr	r3, [r3, #8]
 800499a:	f003 0301 	and.w	r3, r3, #1
 800499e:	2b01      	cmp	r3, #1
 80049a0:	d040      	beq.n	8004a24 <ADC_Enable+0xa0>
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	689a      	ldr	r2, [r3, #8]
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	f042 0201 	orr.w	r2, r2, #1
 80049b0:	609a      	str	r2, [r3, #8]
 80049b2:	4b1f      	ldr	r3, [pc, #124]	@ (8004a30 <ADC_Enable+0xac>)
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	4a1f      	ldr	r2, [pc, #124]	@ (8004a34 <ADC_Enable+0xb0>)
 80049b8:	fba2 2303 	umull	r2, r3, r2, r3
 80049bc:	0c9b      	lsrs	r3, r3, #18
 80049be:	60bb      	str	r3, [r7, #8]
 80049c0:	e002      	b.n	80049c8 <ADC_Enable+0x44>
 80049c2:	68bb      	ldr	r3, [r7, #8]
 80049c4:	3b01      	subs	r3, #1
 80049c6:	60bb      	str	r3, [r7, #8]
 80049c8:	68bb      	ldr	r3, [r7, #8]
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d1f9      	bne.n	80049c2 <ADC_Enable+0x3e>
 80049ce:	f7ff fccf 	bl	8004370 <HAL_GetTick>
 80049d2:	60f8      	str	r0, [r7, #12]
 80049d4:	e01f      	b.n	8004a16 <ADC_Enable+0x92>
 80049d6:	f7ff fccb 	bl	8004370 <HAL_GetTick>
 80049da:	4602      	mov	r2, r0
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	1ad3      	subs	r3, r2, r3
 80049e0:	2b02      	cmp	r3, #2
 80049e2:	d918      	bls.n	8004a16 <ADC_Enable+0x92>
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	689b      	ldr	r3, [r3, #8]
 80049ea:	f003 0301 	and.w	r3, r3, #1
 80049ee:	2b01      	cmp	r3, #1
 80049f0:	d011      	beq.n	8004a16 <ADC_Enable+0x92>
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049f6:	f043 0210 	orr.w	r2, r3, #16
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	629a      	str	r2, [r3, #40]	@ 0x28
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a02:	f043 0201 	orr.w	r2, r3, #1
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	62da      	str	r2, [r3, #44]	@ 0x2c
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	2200      	movs	r2, #0
 8004a0e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8004a12:	2301      	movs	r3, #1
 8004a14:	e007      	b.n	8004a26 <ADC_Enable+0xa2>
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	689b      	ldr	r3, [r3, #8]
 8004a1c:	f003 0301 	and.w	r3, r3, #1
 8004a20:	2b01      	cmp	r3, #1
 8004a22:	d1d8      	bne.n	80049d6 <ADC_Enable+0x52>
 8004a24:	2300      	movs	r3, #0
 8004a26:	4618      	mov	r0, r3
 8004a28:	3710      	adds	r7, #16
 8004a2a:	46bd      	mov	sp, r7
 8004a2c:	bd80      	pop	{r7, pc}
 8004a2e:	bf00      	nop
 8004a30:	20000024 	.word	0x20000024
 8004a34:	431bde83 	.word	0x431bde83

08004a38 <ADC_ConversionStop_Disable>:
 8004a38:	b580      	push	{r7, lr}
 8004a3a:	b084      	sub	sp, #16
 8004a3c:	af00      	add	r7, sp, #0
 8004a3e:	6078      	str	r0, [r7, #4]
 8004a40:	2300      	movs	r3, #0
 8004a42:	60fb      	str	r3, [r7, #12]
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	689b      	ldr	r3, [r3, #8]
 8004a4a:	f003 0301 	and.w	r3, r3, #1
 8004a4e:	2b01      	cmp	r3, #1
 8004a50:	d12e      	bne.n	8004ab0 <ADC_ConversionStop_Disable+0x78>
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	689a      	ldr	r2, [r3, #8]
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	f022 0201 	bic.w	r2, r2, #1
 8004a60:	609a      	str	r2, [r3, #8]
 8004a62:	f7ff fc85 	bl	8004370 <HAL_GetTick>
 8004a66:	60f8      	str	r0, [r7, #12]
 8004a68:	e01b      	b.n	8004aa2 <ADC_ConversionStop_Disable+0x6a>
 8004a6a:	f7ff fc81 	bl	8004370 <HAL_GetTick>
 8004a6e:	4602      	mov	r2, r0
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	1ad3      	subs	r3, r2, r3
 8004a74:	2b02      	cmp	r3, #2
 8004a76:	d914      	bls.n	8004aa2 <ADC_ConversionStop_Disable+0x6a>
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	689b      	ldr	r3, [r3, #8]
 8004a7e:	f003 0301 	and.w	r3, r3, #1
 8004a82:	2b01      	cmp	r3, #1
 8004a84:	d10d      	bne.n	8004aa2 <ADC_ConversionStop_Disable+0x6a>
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a8a:	f043 0210 	orr.w	r2, r3, #16
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	629a      	str	r2, [r3, #40]	@ 0x28
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a96:	f043 0201 	orr.w	r2, r3, #1
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	62da      	str	r2, [r3, #44]	@ 0x2c
 8004a9e:	2301      	movs	r3, #1
 8004aa0:	e007      	b.n	8004ab2 <ADC_ConversionStop_Disable+0x7a>
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	689b      	ldr	r3, [r3, #8]
 8004aa8:	f003 0301 	and.w	r3, r3, #1
 8004aac:	2b01      	cmp	r3, #1
 8004aae:	d0dc      	beq.n	8004a6a <ADC_ConversionStop_Disable+0x32>
 8004ab0:	2300      	movs	r3, #0
 8004ab2:	4618      	mov	r0, r3
 8004ab4:	3710      	adds	r7, #16
 8004ab6:	46bd      	mov	sp, r7
 8004ab8:	bd80      	pop	{r7, pc}

08004aba <ADC_DMAConvCplt>:
 8004aba:	b580      	push	{r7, lr}
 8004abc:	b084      	sub	sp, #16
 8004abe:	af00      	add	r7, sp, #0
 8004ac0:	6078      	str	r0, [r7, #4]
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ac6:	60fb      	str	r3, [r7, #12]
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004acc:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d127      	bne.n	8004b24 <ADC_DMAConvCplt+0x6a>
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ad8:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	629a      	str	r2, [r3, #40]	@ 0x28
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	689b      	ldr	r3, [r3, #8]
 8004ae6:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8004aea:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8004aee:	d115      	bne.n	8004b1c <ADC_DMAConvCplt+0x62>
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	7b1b      	ldrb	r3, [r3, #12]
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d111      	bne.n	8004b1c <ADC_DMAConvCplt+0x62>
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004afc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	629a      	str	r2, [r3, #40]	@ 0x28
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b08:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d105      	bne.n	8004b1c <ADC_DMAConvCplt+0x62>
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b14:	f043 0201 	orr.w	r2, r3, #1
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	629a      	str	r2, [r3, #40]	@ 0x28
 8004b1c:	68f8      	ldr	r0, [r7, #12]
 8004b1e:	f7ff fe1d 	bl	800475c <HAL_ADC_ConvCpltCallback>
 8004b22:	e004      	b.n	8004b2e <ADC_DMAConvCplt+0x74>
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	6a1b      	ldr	r3, [r3, #32]
 8004b28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b2a:	6878      	ldr	r0, [r7, #4]
 8004b2c:	4798      	blx	r3
 8004b2e:	bf00      	nop
 8004b30:	3710      	adds	r7, #16
 8004b32:	46bd      	mov	sp, r7
 8004b34:	bd80      	pop	{r7, pc}

08004b36 <ADC_DMAHalfConvCplt>:
 8004b36:	b580      	push	{r7, lr}
 8004b38:	b084      	sub	sp, #16
 8004b3a:	af00      	add	r7, sp, #0
 8004b3c:	6078      	str	r0, [r7, #4]
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b42:	60fb      	str	r3, [r7, #12]
 8004b44:	68f8      	ldr	r0, [r7, #12]
 8004b46:	f7ff fe12 	bl	800476e <HAL_ADC_ConvHalfCpltCallback>
 8004b4a:	bf00      	nop
 8004b4c:	3710      	adds	r7, #16
 8004b4e:	46bd      	mov	sp, r7
 8004b50:	bd80      	pop	{r7, pc}

08004b52 <ADC_DMAError>:
 8004b52:	b580      	push	{r7, lr}
 8004b54:	b084      	sub	sp, #16
 8004b56:	af00      	add	r7, sp, #0
 8004b58:	6078      	str	r0, [r7, #4]
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b5e:	60fb      	str	r3, [r7, #12]
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b64:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	629a      	str	r2, [r3, #40]	@ 0x28
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b70:	f043 0204 	orr.w	r2, r3, #4
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	62da      	str	r2, [r3, #44]	@ 0x2c
 8004b78:	68f8      	ldr	r0, [r7, #12]
 8004b7a:	f7ff fe01 	bl	8004780 <HAL_ADC_ErrorCallback>
 8004b7e:	bf00      	nop
 8004b80:	3710      	adds	r7, #16
 8004b82:	46bd      	mov	sp, r7
 8004b84:	bd80      	pop	{r7, pc}
	...

08004b88 <__NVIC_SetPriorityGrouping>:
 8004b88:	b480      	push	{r7}
 8004b8a:	b085      	sub	sp, #20
 8004b8c:	af00      	add	r7, sp, #0
 8004b8e:	6078      	str	r0, [r7, #4]
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	f003 0307 	and.w	r3, r3, #7
 8004b96:	60fb      	str	r3, [r7, #12]
 8004b98:	4b0c      	ldr	r3, [pc, #48]	@ (8004bcc <__NVIC_SetPriorityGrouping+0x44>)
 8004b9a:	68db      	ldr	r3, [r3, #12]
 8004b9c:	60bb      	str	r3, [r7, #8]
 8004b9e:	68ba      	ldr	r2, [r7, #8]
 8004ba0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004ba4:	4013      	ands	r3, r2
 8004ba6:	60bb      	str	r3, [r7, #8]
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	021a      	lsls	r2, r3, #8
 8004bac:	68bb      	ldr	r3, [r7, #8]
 8004bae:	4313      	orrs	r3, r2
 8004bb0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004bb4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004bb8:	60bb      	str	r3, [r7, #8]
 8004bba:	4a04      	ldr	r2, [pc, #16]	@ (8004bcc <__NVIC_SetPriorityGrouping+0x44>)
 8004bbc:	68bb      	ldr	r3, [r7, #8]
 8004bbe:	60d3      	str	r3, [r2, #12]
 8004bc0:	bf00      	nop
 8004bc2:	3714      	adds	r7, #20
 8004bc4:	46bd      	mov	sp, r7
 8004bc6:	bc80      	pop	{r7}
 8004bc8:	4770      	bx	lr
 8004bca:	bf00      	nop
 8004bcc:	e000ed00 	.word	0xe000ed00

08004bd0 <__NVIC_GetPriorityGrouping>:
 8004bd0:	b480      	push	{r7}
 8004bd2:	af00      	add	r7, sp, #0
 8004bd4:	4b04      	ldr	r3, [pc, #16]	@ (8004be8 <__NVIC_GetPriorityGrouping+0x18>)
 8004bd6:	68db      	ldr	r3, [r3, #12]
 8004bd8:	0a1b      	lsrs	r3, r3, #8
 8004bda:	f003 0307 	and.w	r3, r3, #7
 8004bde:	4618      	mov	r0, r3
 8004be0:	46bd      	mov	sp, r7
 8004be2:	bc80      	pop	{r7}
 8004be4:	4770      	bx	lr
 8004be6:	bf00      	nop
 8004be8:	e000ed00 	.word	0xe000ed00

08004bec <__NVIC_EnableIRQ>:
 8004bec:	b480      	push	{r7}
 8004bee:	b083      	sub	sp, #12
 8004bf0:	af00      	add	r7, sp, #0
 8004bf2:	4603      	mov	r3, r0
 8004bf4:	71fb      	strb	r3, [r7, #7]
 8004bf6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	db0b      	blt.n	8004c16 <__NVIC_EnableIRQ+0x2a>
 8004bfe:	79fb      	ldrb	r3, [r7, #7]
 8004c00:	f003 021f 	and.w	r2, r3, #31
 8004c04:	4906      	ldr	r1, [pc, #24]	@ (8004c20 <__NVIC_EnableIRQ+0x34>)
 8004c06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c0a:	095b      	lsrs	r3, r3, #5
 8004c0c:	2001      	movs	r0, #1
 8004c0e:	fa00 f202 	lsl.w	r2, r0, r2
 8004c12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8004c16:	bf00      	nop
 8004c18:	370c      	adds	r7, #12
 8004c1a:	46bd      	mov	sp, r7
 8004c1c:	bc80      	pop	{r7}
 8004c1e:	4770      	bx	lr
 8004c20:	e000e100 	.word	0xe000e100

08004c24 <__NVIC_SetPriority>:
 8004c24:	b480      	push	{r7}
 8004c26:	b083      	sub	sp, #12
 8004c28:	af00      	add	r7, sp, #0
 8004c2a:	4603      	mov	r3, r0
 8004c2c:	6039      	str	r1, [r7, #0]
 8004c2e:	71fb      	strb	r3, [r7, #7]
 8004c30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	db0a      	blt.n	8004c4e <__NVIC_SetPriority+0x2a>
 8004c38:	683b      	ldr	r3, [r7, #0]
 8004c3a:	b2da      	uxtb	r2, r3
 8004c3c:	490c      	ldr	r1, [pc, #48]	@ (8004c70 <__NVIC_SetPriority+0x4c>)
 8004c3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c42:	0112      	lsls	r2, r2, #4
 8004c44:	b2d2      	uxtb	r2, r2
 8004c46:	440b      	add	r3, r1
 8004c48:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
 8004c4c:	e00a      	b.n	8004c64 <__NVIC_SetPriority+0x40>
 8004c4e:	683b      	ldr	r3, [r7, #0]
 8004c50:	b2da      	uxtb	r2, r3
 8004c52:	4908      	ldr	r1, [pc, #32]	@ (8004c74 <__NVIC_SetPriority+0x50>)
 8004c54:	79fb      	ldrb	r3, [r7, #7]
 8004c56:	f003 030f 	and.w	r3, r3, #15
 8004c5a:	3b04      	subs	r3, #4
 8004c5c:	0112      	lsls	r2, r2, #4
 8004c5e:	b2d2      	uxtb	r2, r2
 8004c60:	440b      	add	r3, r1
 8004c62:	761a      	strb	r2, [r3, #24]
 8004c64:	bf00      	nop
 8004c66:	370c      	adds	r7, #12
 8004c68:	46bd      	mov	sp, r7
 8004c6a:	bc80      	pop	{r7}
 8004c6c:	4770      	bx	lr
 8004c6e:	bf00      	nop
 8004c70:	e000e100 	.word	0xe000e100
 8004c74:	e000ed00 	.word	0xe000ed00

08004c78 <NVIC_EncodePriority>:
 8004c78:	b480      	push	{r7}
 8004c7a:	b089      	sub	sp, #36	@ 0x24
 8004c7c:	af00      	add	r7, sp, #0
 8004c7e:	60f8      	str	r0, [r7, #12]
 8004c80:	60b9      	str	r1, [r7, #8]
 8004c82:	607a      	str	r2, [r7, #4]
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	f003 0307 	and.w	r3, r3, #7
 8004c8a:	61fb      	str	r3, [r7, #28]
 8004c8c:	69fb      	ldr	r3, [r7, #28]
 8004c8e:	f1c3 0307 	rsb	r3, r3, #7
 8004c92:	2b04      	cmp	r3, #4
 8004c94:	bf28      	it	cs
 8004c96:	2304      	movcs	r3, #4
 8004c98:	61bb      	str	r3, [r7, #24]
 8004c9a:	69fb      	ldr	r3, [r7, #28]
 8004c9c:	3304      	adds	r3, #4
 8004c9e:	2b06      	cmp	r3, #6
 8004ca0:	d902      	bls.n	8004ca8 <NVIC_EncodePriority+0x30>
 8004ca2:	69fb      	ldr	r3, [r7, #28]
 8004ca4:	3b03      	subs	r3, #3
 8004ca6:	e000      	b.n	8004caa <NVIC_EncodePriority+0x32>
 8004ca8:	2300      	movs	r3, #0
 8004caa:	617b      	str	r3, [r7, #20]
 8004cac:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004cb0:	69bb      	ldr	r3, [r7, #24]
 8004cb2:	fa02 f303 	lsl.w	r3, r2, r3
 8004cb6:	43da      	mvns	r2, r3
 8004cb8:	68bb      	ldr	r3, [r7, #8]
 8004cba:	401a      	ands	r2, r3
 8004cbc:	697b      	ldr	r3, [r7, #20]
 8004cbe:	409a      	lsls	r2, r3
 8004cc0:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8004cc4:	697b      	ldr	r3, [r7, #20]
 8004cc6:	fa01 f303 	lsl.w	r3, r1, r3
 8004cca:	43d9      	mvns	r1, r3
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	400b      	ands	r3, r1
 8004cd0:	4313      	orrs	r3, r2
 8004cd2:	4618      	mov	r0, r3
 8004cd4:	3724      	adds	r7, #36	@ 0x24
 8004cd6:	46bd      	mov	sp, r7
 8004cd8:	bc80      	pop	{r7}
 8004cda:	4770      	bx	lr

08004cdc <SysTick_Config>:
 8004cdc:	b580      	push	{r7, lr}
 8004cde:	b082      	sub	sp, #8
 8004ce0:	af00      	add	r7, sp, #0
 8004ce2:	6078      	str	r0, [r7, #4]
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	3b01      	subs	r3, #1
 8004ce8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004cec:	d301      	bcc.n	8004cf2 <SysTick_Config+0x16>
 8004cee:	2301      	movs	r3, #1
 8004cf0:	e00f      	b.n	8004d12 <SysTick_Config+0x36>
 8004cf2:	4a0a      	ldr	r2, [pc, #40]	@ (8004d1c <SysTick_Config+0x40>)
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	3b01      	subs	r3, #1
 8004cf8:	6053      	str	r3, [r2, #4]
 8004cfa:	210f      	movs	r1, #15
 8004cfc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004d00:	f7ff ff90 	bl	8004c24 <__NVIC_SetPriority>
 8004d04:	4b05      	ldr	r3, [pc, #20]	@ (8004d1c <SysTick_Config+0x40>)
 8004d06:	2200      	movs	r2, #0
 8004d08:	609a      	str	r2, [r3, #8]
 8004d0a:	4b04      	ldr	r3, [pc, #16]	@ (8004d1c <SysTick_Config+0x40>)
 8004d0c:	2207      	movs	r2, #7
 8004d0e:	601a      	str	r2, [r3, #0]
 8004d10:	2300      	movs	r3, #0
 8004d12:	4618      	mov	r0, r3
 8004d14:	3708      	adds	r7, #8
 8004d16:	46bd      	mov	sp, r7
 8004d18:	bd80      	pop	{r7, pc}
 8004d1a:	bf00      	nop
 8004d1c:	e000e010 	.word	0xe000e010

08004d20 <HAL_NVIC_SetPriorityGrouping>:
 8004d20:	b580      	push	{r7, lr}
 8004d22:	b082      	sub	sp, #8
 8004d24:	af00      	add	r7, sp, #0
 8004d26:	6078      	str	r0, [r7, #4]
 8004d28:	6878      	ldr	r0, [r7, #4]
 8004d2a:	f7ff ff2d 	bl	8004b88 <__NVIC_SetPriorityGrouping>
 8004d2e:	bf00      	nop
 8004d30:	3708      	adds	r7, #8
 8004d32:	46bd      	mov	sp, r7
 8004d34:	bd80      	pop	{r7, pc}

08004d36 <HAL_NVIC_SetPriority>:
 8004d36:	b580      	push	{r7, lr}
 8004d38:	b086      	sub	sp, #24
 8004d3a:	af00      	add	r7, sp, #0
 8004d3c:	4603      	mov	r3, r0
 8004d3e:	60b9      	str	r1, [r7, #8]
 8004d40:	607a      	str	r2, [r7, #4]
 8004d42:	73fb      	strb	r3, [r7, #15]
 8004d44:	2300      	movs	r3, #0
 8004d46:	617b      	str	r3, [r7, #20]
 8004d48:	f7ff ff42 	bl	8004bd0 <__NVIC_GetPriorityGrouping>
 8004d4c:	6178      	str	r0, [r7, #20]
 8004d4e:	687a      	ldr	r2, [r7, #4]
 8004d50:	68b9      	ldr	r1, [r7, #8]
 8004d52:	6978      	ldr	r0, [r7, #20]
 8004d54:	f7ff ff90 	bl	8004c78 <NVIC_EncodePriority>
 8004d58:	4602      	mov	r2, r0
 8004d5a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004d5e:	4611      	mov	r1, r2
 8004d60:	4618      	mov	r0, r3
 8004d62:	f7ff ff5f 	bl	8004c24 <__NVIC_SetPriority>
 8004d66:	bf00      	nop
 8004d68:	3718      	adds	r7, #24
 8004d6a:	46bd      	mov	sp, r7
 8004d6c:	bd80      	pop	{r7, pc}

08004d6e <HAL_NVIC_EnableIRQ>:
 8004d6e:	b580      	push	{r7, lr}
 8004d70:	b082      	sub	sp, #8
 8004d72:	af00      	add	r7, sp, #0
 8004d74:	4603      	mov	r3, r0
 8004d76:	71fb      	strb	r3, [r7, #7]
 8004d78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d7c:	4618      	mov	r0, r3
 8004d7e:	f7ff ff35 	bl	8004bec <__NVIC_EnableIRQ>
 8004d82:	bf00      	nop
 8004d84:	3708      	adds	r7, #8
 8004d86:	46bd      	mov	sp, r7
 8004d88:	bd80      	pop	{r7, pc}

08004d8a <HAL_SYSTICK_Config>:
 8004d8a:	b580      	push	{r7, lr}
 8004d8c:	b082      	sub	sp, #8
 8004d8e:	af00      	add	r7, sp, #0
 8004d90:	6078      	str	r0, [r7, #4]
 8004d92:	6878      	ldr	r0, [r7, #4]
 8004d94:	f7ff ffa2 	bl	8004cdc <SysTick_Config>
 8004d98:	4603      	mov	r3, r0
 8004d9a:	4618      	mov	r0, r3
 8004d9c:	3708      	adds	r7, #8
 8004d9e:	46bd      	mov	sp, r7
 8004da0:	bd80      	pop	{r7, pc}
	...

08004da4 <HAL_DMA_Init>:
 8004da4:	b480      	push	{r7}
 8004da6:	b085      	sub	sp, #20
 8004da8:	af00      	add	r7, sp, #0
 8004daa:	6078      	str	r0, [r7, #4]
 8004dac:	2300      	movs	r3, #0
 8004dae:	60fb      	str	r3, [r7, #12]
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d101      	bne.n	8004dba <HAL_DMA_Init+0x16>
 8004db6:	2301      	movs	r3, #1
 8004db8:	e059      	b.n	8004e6e <HAL_DMA_Init+0xca>
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	461a      	mov	r2, r3
 8004dc0:	4b2d      	ldr	r3, [pc, #180]	@ (8004e78 <HAL_DMA_Init+0xd4>)
 8004dc2:	429a      	cmp	r2, r3
 8004dc4:	d80f      	bhi.n	8004de6 <HAL_DMA_Init+0x42>
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	461a      	mov	r2, r3
 8004dcc:	4b2b      	ldr	r3, [pc, #172]	@ (8004e7c <HAL_DMA_Init+0xd8>)
 8004dce:	4413      	add	r3, r2
 8004dd0:	4a2b      	ldr	r2, [pc, #172]	@ (8004e80 <HAL_DMA_Init+0xdc>)
 8004dd2:	fba2 2303 	umull	r2, r3, r2, r3
 8004dd6:	091b      	lsrs	r3, r3, #4
 8004dd8:	009a      	lsls	r2, r3, #2
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	641a      	str	r2, [r3, #64]	@ 0x40
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	4a28      	ldr	r2, [pc, #160]	@ (8004e84 <HAL_DMA_Init+0xe0>)
 8004de2:	63da      	str	r2, [r3, #60]	@ 0x3c
 8004de4:	e00e      	b.n	8004e04 <HAL_DMA_Init+0x60>
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	461a      	mov	r2, r3
 8004dec:	4b26      	ldr	r3, [pc, #152]	@ (8004e88 <HAL_DMA_Init+0xe4>)
 8004dee:	4413      	add	r3, r2
 8004df0:	4a23      	ldr	r2, [pc, #140]	@ (8004e80 <HAL_DMA_Init+0xdc>)
 8004df2:	fba2 2303 	umull	r2, r3, r2, r3
 8004df6:	091b      	lsrs	r3, r3, #4
 8004df8:	009a      	lsls	r2, r3, #2
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	641a      	str	r2, [r3, #64]	@ 0x40
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	4a22      	ldr	r2, [pc, #136]	@ (8004e8c <HAL_DMA_Init+0xe8>)
 8004e02:	63da      	str	r2, [r3, #60]	@ 0x3c
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	2202      	movs	r2, #2
 8004e08:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	60fb      	str	r3, [r7, #12]
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8004e1a:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8004e1e:	60fb      	str	r3, [r7, #12]
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	685a      	ldr	r2, [r3, #4]
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	689b      	ldr	r3, [r3, #8]
 8004e28:	431a      	orrs	r2, r3
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	68db      	ldr	r3, [r3, #12]
 8004e2e:	431a      	orrs	r2, r3
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	691b      	ldr	r3, [r3, #16]
 8004e34:	431a      	orrs	r2, r3
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	695b      	ldr	r3, [r3, #20]
 8004e3a:	431a      	orrs	r2, r3
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	699b      	ldr	r3, [r3, #24]
 8004e40:	431a      	orrs	r2, r3
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	69db      	ldr	r3, [r3, #28]
 8004e46:	4313      	orrs	r3, r2
 8004e48:	68fa      	ldr	r2, [r7, #12]
 8004e4a:	4313      	orrs	r3, r2
 8004e4c:	60fb      	str	r3, [r7, #12]
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	68fa      	ldr	r2, [r7, #12]
 8004e54:	601a      	str	r2, [r3, #0]
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	2200      	movs	r2, #0
 8004e5a:	639a      	str	r2, [r3, #56]	@ 0x38
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	2201      	movs	r2, #1
 8004e60:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	2200      	movs	r2, #0
 8004e68:	f883 2020 	strb.w	r2, [r3, #32]
 8004e6c:	2300      	movs	r3, #0
 8004e6e:	4618      	mov	r0, r3
 8004e70:	3714      	adds	r7, #20
 8004e72:	46bd      	mov	sp, r7
 8004e74:	bc80      	pop	{r7}
 8004e76:	4770      	bx	lr
 8004e78:	40020407 	.word	0x40020407
 8004e7c:	bffdfff8 	.word	0xbffdfff8
 8004e80:	cccccccd 	.word	0xcccccccd
 8004e84:	40020000 	.word	0x40020000
 8004e88:	bffdfbf8 	.word	0xbffdfbf8
 8004e8c:	40020400 	.word	0x40020400

08004e90 <HAL_DMA_Start_IT>:
 8004e90:	b580      	push	{r7, lr}
 8004e92:	b086      	sub	sp, #24
 8004e94:	af00      	add	r7, sp, #0
 8004e96:	60f8      	str	r0, [r7, #12]
 8004e98:	60b9      	str	r1, [r7, #8]
 8004e9a:	607a      	str	r2, [r7, #4]
 8004e9c:	603b      	str	r3, [r7, #0]
 8004e9e:	2300      	movs	r3, #0
 8004ea0:	75fb      	strb	r3, [r7, #23]
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004ea8:	2b01      	cmp	r3, #1
 8004eaa:	d101      	bne.n	8004eb0 <HAL_DMA_Start_IT+0x20>
 8004eac:	2302      	movs	r3, #2
 8004eae:	e04b      	b.n	8004f48 <HAL_DMA_Start_IT+0xb8>
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	2201      	movs	r2, #1
 8004eb4:	f883 2020 	strb.w	r2, [r3, #32]
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8004ebe:	b2db      	uxtb	r3, r3
 8004ec0:	2b01      	cmp	r3, #1
 8004ec2:	d13a      	bne.n	8004f3a <HAL_DMA_Start_IT+0xaa>
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	2202      	movs	r2, #2
 8004ec8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	2200      	movs	r2, #0
 8004ed0:	639a      	str	r2, [r3, #56]	@ 0x38
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	681a      	ldr	r2, [r3, #0]
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	f022 0201 	bic.w	r2, r2, #1
 8004ee0:	601a      	str	r2, [r3, #0]
 8004ee2:	683b      	ldr	r3, [r7, #0]
 8004ee4:	687a      	ldr	r2, [r7, #4]
 8004ee6:	68b9      	ldr	r1, [r7, #8]
 8004ee8:	68f8      	ldr	r0, [r7, #12]
 8004eea:	f000 fbb1 	bl	8005650 <DMA_SetConfig>
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d008      	beq.n	8004f08 <HAL_DMA_Start_IT+0x78>
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	681a      	ldr	r2, [r3, #0]
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	f042 020e 	orr.w	r2, r2, #14
 8004f04:	601a      	str	r2, [r3, #0]
 8004f06:	e00f      	b.n	8004f28 <HAL_DMA_Start_IT+0x98>
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	681a      	ldr	r2, [r3, #0]
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	f022 0204 	bic.w	r2, r2, #4
 8004f16:	601a      	str	r2, [r3, #0]
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	681a      	ldr	r2, [r3, #0]
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	f042 020a 	orr.w	r2, r2, #10
 8004f26:	601a      	str	r2, [r3, #0]
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	681a      	ldr	r2, [r3, #0]
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	f042 0201 	orr.w	r2, r2, #1
 8004f36:	601a      	str	r2, [r3, #0]
 8004f38:	e005      	b.n	8004f46 <HAL_DMA_Start_IT+0xb6>
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	2200      	movs	r2, #0
 8004f3e:	f883 2020 	strb.w	r2, [r3, #32]
 8004f42:	2302      	movs	r3, #2
 8004f44:	75fb      	strb	r3, [r7, #23]
 8004f46:	7dfb      	ldrb	r3, [r7, #23]
 8004f48:	4618      	mov	r0, r3
 8004f4a:	3718      	adds	r7, #24
 8004f4c:	46bd      	mov	sp, r7
 8004f4e:	bd80      	pop	{r7, pc}

08004f50 <HAL_DMA_Abort>:
 8004f50:	b480      	push	{r7}
 8004f52:	b085      	sub	sp, #20
 8004f54:	af00      	add	r7, sp, #0
 8004f56:	6078      	str	r0, [r7, #4]
 8004f58:	2300      	movs	r3, #0
 8004f5a:	73fb      	strb	r3, [r7, #15]
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8004f62:	b2db      	uxtb	r3, r3
 8004f64:	2b02      	cmp	r3, #2
 8004f66:	d008      	beq.n	8004f7a <HAL_DMA_Abort+0x2a>
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	2204      	movs	r2, #4
 8004f6c:	639a      	str	r2, [r3, #56]	@ 0x38
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	2200      	movs	r2, #0
 8004f72:	f883 2020 	strb.w	r2, [r3, #32]
 8004f76:	2301      	movs	r3, #1
 8004f78:	e020      	b.n	8004fbc <HAL_DMA_Abort+0x6c>
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	681a      	ldr	r2, [r3, #0]
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	f022 020e 	bic.w	r2, r2, #14
 8004f88:	601a      	str	r2, [r3, #0]
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	681a      	ldr	r2, [r3, #0]
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	f022 0201 	bic.w	r2, r2, #1
 8004f98:	601a      	str	r2, [r3, #0]
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004fa2:	2101      	movs	r1, #1
 8004fa4:	fa01 f202 	lsl.w	r2, r1, r2
 8004fa8:	605a      	str	r2, [r3, #4]
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	2201      	movs	r2, #1
 8004fae:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	2200      	movs	r2, #0
 8004fb6:	f883 2020 	strb.w	r2, [r3, #32]
 8004fba:	7bfb      	ldrb	r3, [r7, #15]
 8004fbc:	4618      	mov	r0, r3
 8004fbe:	3714      	adds	r7, #20
 8004fc0:	46bd      	mov	sp, r7
 8004fc2:	bc80      	pop	{r7}
 8004fc4:	4770      	bx	lr
	...

08004fc8 <HAL_DMA_Abort_IT>:
 8004fc8:	b580      	push	{r7, lr}
 8004fca:	b084      	sub	sp, #16
 8004fcc:	af00      	add	r7, sp, #0
 8004fce:	6078      	str	r0, [r7, #4]
 8004fd0:	2300      	movs	r3, #0
 8004fd2:	73fb      	strb	r3, [r7, #15]
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8004fda:	b2db      	uxtb	r3, r3
 8004fdc:	2b02      	cmp	r3, #2
 8004fde:	d005      	beq.n	8004fec <HAL_DMA_Abort_IT+0x24>
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	2204      	movs	r2, #4
 8004fe4:	639a      	str	r2, [r3, #56]	@ 0x38
 8004fe6:	2301      	movs	r3, #1
 8004fe8:	73fb      	strb	r3, [r7, #15]
 8004fea:	e0d6      	b.n	800519a <HAL_DMA_Abort_IT+0x1d2>
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	681a      	ldr	r2, [r3, #0]
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	f022 020e 	bic.w	r2, r2, #14
 8004ffa:	601a      	str	r2, [r3, #0]
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	681a      	ldr	r2, [r3, #0]
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	f022 0201 	bic.w	r2, r2, #1
 800500a:	601a      	str	r2, [r3, #0]
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	461a      	mov	r2, r3
 8005012:	4b64      	ldr	r3, [pc, #400]	@ (80051a4 <HAL_DMA_Abort_IT+0x1dc>)
 8005014:	429a      	cmp	r2, r3
 8005016:	d958      	bls.n	80050ca <HAL_DMA_Abort_IT+0x102>
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	4a62      	ldr	r2, [pc, #392]	@ (80051a8 <HAL_DMA_Abort_IT+0x1e0>)
 800501e:	4293      	cmp	r3, r2
 8005020:	d04f      	beq.n	80050c2 <HAL_DMA_Abort_IT+0xfa>
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	4a61      	ldr	r2, [pc, #388]	@ (80051ac <HAL_DMA_Abort_IT+0x1e4>)
 8005028:	4293      	cmp	r3, r2
 800502a:	d048      	beq.n	80050be <HAL_DMA_Abort_IT+0xf6>
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	4a5f      	ldr	r2, [pc, #380]	@ (80051b0 <HAL_DMA_Abort_IT+0x1e8>)
 8005032:	4293      	cmp	r3, r2
 8005034:	d040      	beq.n	80050b8 <HAL_DMA_Abort_IT+0xf0>
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	4a5e      	ldr	r2, [pc, #376]	@ (80051b4 <HAL_DMA_Abort_IT+0x1ec>)
 800503c:	4293      	cmp	r3, r2
 800503e:	d038      	beq.n	80050b2 <HAL_DMA_Abort_IT+0xea>
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	4a5c      	ldr	r2, [pc, #368]	@ (80051b8 <HAL_DMA_Abort_IT+0x1f0>)
 8005046:	4293      	cmp	r3, r2
 8005048:	d030      	beq.n	80050ac <HAL_DMA_Abort_IT+0xe4>
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	4a5b      	ldr	r2, [pc, #364]	@ (80051bc <HAL_DMA_Abort_IT+0x1f4>)
 8005050:	4293      	cmp	r3, r2
 8005052:	d028      	beq.n	80050a6 <HAL_DMA_Abort_IT+0xde>
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	4a52      	ldr	r2, [pc, #328]	@ (80051a4 <HAL_DMA_Abort_IT+0x1dc>)
 800505a:	4293      	cmp	r3, r2
 800505c:	d020      	beq.n	80050a0 <HAL_DMA_Abort_IT+0xd8>
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	4a57      	ldr	r2, [pc, #348]	@ (80051c0 <HAL_DMA_Abort_IT+0x1f8>)
 8005064:	4293      	cmp	r3, r2
 8005066:	d019      	beq.n	800509c <HAL_DMA_Abort_IT+0xd4>
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	4a55      	ldr	r2, [pc, #340]	@ (80051c4 <HAL_DMA_Abort_IT+0x1fc>)
 800506e:	4293      	cmp	r3, r2
 8005070:	d012      	beq.n	8005098 <HAL_DMA_Abort_IT+0xd0>
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	4a54      	ldr	r2, [pc, #336]	@ (80051c8 <HAL_DMA_Abort_IT+0x200>)
 8005078:	4293      	cmp	r3, r2
 800507a:	d00a      	beq.n	8005092 <HAL_DMA_Abort_IT+0xca>
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	4a52      	ldr	r2, [pc, #328]	@ (80051cc <HAL_DMA_Abort_IT+0x204>)
 8005082:	4293      	cmp	r3, r2
 8005084:	d102      	bne.n	800508c <HAL_DMA_Abort_IT+0xc4>
 8005086:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800508a:	e01b      	b.n	80050c4 <HAL_DMA_Abort_IT+0xfc>
 800508c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8005090:	e018      	b.n	80050c4 <HAL_DMA_Abort_IT+0xfc>
 8005092:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8005096:	e015      	b.n	80050c4 <HAL_DMA_Abort_IT+0xfc>
 8005098:	2310      	movs	r3, #16
 800509a:	e013      	b.n	80050c4 <HAL_DMA_Abort_IT+0xfc>
 800509c:	2301      	movs	r3, #1
 800509e:	e011      	b.n	80050c4 <HAL_DMA_Abort_IT+0xfc>
 80050a0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80050a4:	e00e      	b.n	80050c4 <HAL_DMA_Abort_IT+0xfc>
 80050a6:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80050aa:	e00b      	b.n	80050c4 <HAL_DMA_Abort_IT+0xfc>
 80050ac:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80050b0:	e008      	b.n	80050c4 <HAL_DMA_Abort_IT+0xfc>
 80050b2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80050b6:	e005      	b.n	80050c4 <HAL_DMA_Abort_IT+0xfc>
 80050b8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80050bc:	e002      	b.n	80050c4 <HAL_DMA_Abort_IT+0xfc>
 80050be:	2310      	movs	r3, #16
 80050c0:	e000      	b.n	80050c4 <HAL_DMA_Abort_IT+0xfc>
 80050c2:	2301      	movs	r3, #1
 80050c4:	4a42      	ldr	r2, [pc, #264]	@ (80051d0 <HAL_DMA_Abort_IT+0x208>)
 80050c6:	6053      	str	r3, [r2, #4]
 80050c8:	e057      	b.n	800517a <HAL_DMA_Abort_IT+0x1b2>
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	4a36      	ldr	r2, [pc, #216]	@ (80051a8 <HAL_DMA_Abort_IT+0x1e0>)
 80050d0:	4293      	cmp	r3, r2
 80050d2:	d04f      	beq.n	8005174 <HAL_DMA_Abort_IT+0x1ac>
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	4a34      	ldr	r2, [pc, #208]	@ (80051ac <HAL_DMA_Abort_IT+0x1e4>)
 80050da:	4293      	cmp	r3, r2
 80050dc:	d048      	beq.n	8005170 <HAL_DMA_Abort_IT+0x1a8>
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	4a33      	ldr	r2, [pc, #204]	@ (80051b0 <HAL_DMA_Abort_IT+0x1e8>)
 80050e4:	4293      	cmp	r3, r2
 80050e6:	d040      	beq.n	800516a <HAL_DMA_Abort_IT+0x1a2>
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	4a31      	ldr	r2, [pc, #196]	@ (80051b4 <HAL_DMA_Abort_IT+0x1ec>)
 80050ee:	4293      	cmp	r3, r2
 80050f0:	d038      	beq.n	8005164 <HAL_DMA_Abort_IT+0x19c>
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	4a30      	ldr	r2, [pc, #192]	@ (80051b8 <HAL_DMA_Abort_IT+0x1f0>)
 80050f8:	4293      	cmp	r3, r2
 80050fa:	d030      	beq.n	800515e <HAL_DMA_Abort_IT+0x196>
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	4a2e      	ldr	r2, [pc, #184]	@ (80051bc <HAL_DMA_Abort_IT+0x1f4>)
 8005102:	4293      	cmp	r3, r2
 8005104:	d028      	beq.n	8005158 <HAL_DMA_Abort_IT+0x190>
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	4a26      	ldr	r2, [pc, #152]	@ (80051a4 <HAL_DMA_Abort_IT+0x1dc>)
 800510c:	4293      	cmp	r3, r2
 800510e:	d020      	beq.n	8005152 <HAL_DMA_Abort_IT+0x18a>
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	4a2a      	ldr	r2, [pc, #168]	@ (80051c0 <HAL_DMA_Abort_IT+0x1f8>)
 8005116:	4293      	cmp	r3, r2
 8005118:	d019      	beq.n	800514e <HAL_DMA_Abort_IT+0x186>
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	4a29      	ldr	r2, [pc, #164]	@ (80051c4 <HAL_DMA_Abort_IT+0x1fc>)
 8005120:	4293      	cmp	r3, r2
 8005122:	d012      	beq.n	800514a <HAL_DMA_Abort_IT+0x182>
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	4a27      	ldr	r2, [pc, #156]	@ (80051c8 <HAL_DMA_Abort_IT+0x200>)
 800512a:	4293      	cmp	r3, r2
 800512c:	d00a      	beq.n	8005144 <HAL_DMA_Abort_IT+0x17c>
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	4a26      	ldr	r2, [pc, #152]	@ (80051cc <HAL_DMA_Abort_IT+0x204>)
 8005134:	4293      	cmp	r3, r2
 8005136:	d102      	bne.n	800513e <HAL_DMA_Abort_IT+0x176>
 8005138:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800513c:	e01b      	b.n	8005176 <HAL_DMA_Abort_IT+0x1ae>
 800513e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8005142:	e018      	b.n	8005176 <HAL_DMA_Abort_IT+0x1ae>
 8005144:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8005148:	e015      	b.n	8005176 <HAL_DMA_Abort_IT+0x1ae>
 800514a:	2310      	movs	r3, #16
 800514c:	e013      	b.n	8005176 <HAL_DMA_Abort_IT+0x1ae>
 800514e:	2301      	movs	r3, #1
 8005150:	e011      	b.n	8005176 <HAL_DMA_Abort_IT+0x1ae>
 8005152:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005156:	e00e      	b.n	8005176 <HAL_DMA_Abort_IT+0x1ae>
 8005158:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800515c:	e00b      	b.n	8005176 <HAL_DMA_Abort_IT+0x1ae>
 800515e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8005162:	e008      	b.n	8005176 <HAL_DMA_Abort_IT+0x1ae>
 8005164:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8005168:	e005      	b.n	8005176 <HAL_DMA_Abort_IT+0x1ae>
 800516a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800516e:	e002      	b.n	8005176 <HAL_DMA_Abort_IT+0x1ae>
 8005170:	2310      	movs	r3, #16
 8005172:	e000      	b.n	8005176 <HAL_DMA_Abort_IT+0x1ae>
 8005174:	2301      	movs	r3, #1
 8005176:	4a17      	ldr	r2, [pc, #92]	@ (80051d4 <HAL_DMA_Abort_IT+0x20c>)
 8005178:	6053      	str	r3, [r2, #4]
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	2201      	movs	r2, #1
 800517e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	2200      	movs	r2, #0
 8005186:	f883 2020 	strb.w	r2, [r3, #32]
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800518e:	2b00      	cmp	r3, #0
 8005190:	d003      	beq.n	800519a <HAL_DMA_Abort_IT+0x1d2>
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005196:	6878      	ldr	r0, [r7, #4]
 8005198:	4798      	blx	r3
 800519a:	7bfb      	ldrb	r3, [r7, #15]
 800519c:	4618      	mov	r0, r3
 800519e:	3710      	adds	r7, #16
 80051a0:	46bd      	mov	sp, r7
 80051a2:	bd80      	pop	{r7, pc}
 80051a4:	40020080 	.word	0x40020080
 80051a8:	40020008 	.word	0x40020008
 80051ac:	4002001c 	.word	0x4002001c
 80051b0:	40020030 	.word	0x40020030
 80051b4:	40020044 	.word	0x40020044
 80051b8:	40020058 	.word	0x40020058
 80051bc:	4002006c 	.word	0x4002006c
 80051c0:	40020408 	.word	0x40020408
 80051c4:	4002041c 	.word	0x4002041c
 80051c8:	40020430 	.word	0x40020430
 80051cc:	40020444 	.word	0x40020444
 80051d0:	40020400 	.word	0x40020400
 80051d4:	40020000 	.word	0x40020000

080051d8 <HAL_DMA_IRQHandler>:
 80051d8:	b580      	push	{r7, lr}
 80051da:	b084      	sub	sp, #16
 80051dc:	af00      	add	r7, sp, #0
 80051de:	6078      	str	r0, [r7, #4]
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	60fb      	str	r3, [r7, #12]
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	60bb      	str	r3, [r7, #8]
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051f4:	2204      	movs	r2, #4
 80051f6:	409a      	lsls	r2, r3
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	4013      	ands	r3, r2
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	f000 80f1 	beq.w	80053e4 <HAL_DMA_IRQHandler+0x20c>
 8005202:	68bb      	ldr	r3, [r7, #8]
 8005204:	f003 0304 	and.w	r3, r3, #4
 8005208:	2b00      	cmp	r3, #0
 800520a:	f000 80eb 	beq.w	80053e4 <HAL_DMA_IRQHandler+0x20c>
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	f003 0320 	and.w	r3, r3, #32
 8005218:	2b00      	cmp	r3, #0
 800521a:	d107      	bne.n	800522c <HAL_DMA_IRQHandler+0x54>
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	681a      	ldr	r2, [r3, #0]
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	f022 0204 	bic.w	r2, r2, #4
 800522a:	601a      	str	r2, [r3, #0]
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	461a      	mov	r2, r3
 8005232:	4b5f      	ldr	r3, [pc, #380]	@ (80053b0 <HAL_DMA_IRQHandler+0x1d8>)
 8005234:	429a      	cmp	r2, r3
 8005236:	d958      	bls.n	80052ea <HAL_DMA_IRQHandler+0x112>
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	4a5d      	ldr	r2, [pc, #372]	@ (80053b4 <HAL_DMA_IRQHandler+0x1dc>)
 800523e:	4293      	cmp	r3, r2
 8005240:	d04f      	beq.n	80052e2 <HAL_DMA_IRQHandler+0x10a>
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	4a5c      	ldr	r2, [pc, #368]	@ (80053b8 <HAL_DMA_IRQHandler+0x1e0>)
 8005248:	4293      	cmp	r3, r2
 800524a:	d048      	beq.n	80052de <HAL_DMA_IRQHandler+0x106>
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	4a5a      	ldr	r2, [pc, #360]	@ (80053bc <HAL_DMA_IRQHandler+0x1e4>)
 8005252:	4293      	cmp	r3, r2
 8005254:	d040      	beq.n	80052d8 <HAL_DMA_IRQHandler+0x100>
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	4a59      	ldr	r2, [pc, #356]	@ (80053c0 <HAL_DMA_IRQHandler+0x1e8>)
 800525c:	4293      	cmp	r3, r2
 800525e:	d038      	beq.n	80052d2 <HAL_DMA_IRQHandler+0xfa>
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	4a57      	ldr	r2, [pc, #348]	@ (80053c4 <HAL_DMA_IRQHandler+0x1ec>)
 8005266:	4293      	cmp	r3, r2
 8005268:	d030      	beq.n	80052cc <HAL_DMA_IRQHandler+0xf4>
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	4a56      	ldr	r2, [pc, #344]	@ (80053c8 <HAL_DMA_IRQHandler+0x1f0>)
 8005270:	4293      	cmp	r3, r2
 8005272:	d028      	beq.n	80052c6 <HAL_DMA_IRQHandler+0xee>
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	4a4d      	ldr	r2, [pc, #308]	@ (80053b0 <HAL_DMA_IRQHandler+0x1d8>)
 800527a:	4293      	cmp	r3, r2
 800527c:	d020      	beq.n	80052c0 <HAL_DMA_IRQHandler+0xe8>
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	4a52      	ldr	r2, [pc, #328]	@ (80053cc <HAL_DMA_IRQHandler+0x1f4>)
 8005284:	4293      	cmp	r3, r2
 8005286:	d019      	beq.n	80052bc <HAL_DMA_IRQHandler+0xe4>
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	4a50      	ldr	r2, [pc, #320]	@ (80053d0 <HAL_DMA_IRQHandler+0x1f8>)
 800528e:	4293      	cmp	r3, r2
 8005290:	d012      	beq.n	80052b8 <HAL_DMA_IRQHandler+0xe0>
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	4a4f      	ldr	r2, [pc, #316]	@ (80053d4 <HAL_DMA_IRQHandler+0x1fc>)
 8005298:	4293      	cmp	r3, r2
 800529a:	d00a      	beq.n	80052b2 <HAL_DMA_IRQHandler+0xda>
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	4a4d      	ldr	r2, [pc, #308]	@ (80053d8 <HAL_DMA_IRQHandler+0x200>)
 80052a2:	4293      	cmp	r3, r2
 80052a4:	d102      	bne.n	80052ac <HAL_DMA_IRQHandler+0xd4>
 80052a6:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80052aa:	e01b      	b.n	80052e4 <HAL_DMA_IRQHandler+0x10c>
 80052ac:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 80052b0:	e018      	b.n	80052e4 <HAL_DMA_IRQHandler+0x10c>
 80052b2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80052b6:	e015      	b.n	80052e4 <HAL_DMA_IRQHandler+0x10c>
 80052b8:	2340      	movs	r3, #64	@ 0x40
 80052ba:	e013      	b.n	80052e4 <HAL_DMA_IRQHandler+0x10c>
 80052bc:	2304      	movs	r3, #4
 80052be:	e011      	b.n	80052e4 <HAL_DMA_IRQHandler+0x10c>
 80052c0:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 80052c4:	e00e      	b.n	80052e4 <HAL_DMA_IRQHandler+0x10c>
 80052c6:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80052ca:	e00b      	b.n	80052e4 <HAL_DMA_IRQHandler+0x10c>
 80052cc:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 80052d0:	e008      	b.n	80052e4 <HAL_DMA_IRQHandler+0x10c>
 80052d2:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80052d6:	e005      	b.n	80052e4 <HAL_DMA_IRQHandler+0x10c>
 80052d8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80052dc:	e002      	b.n	80052e4 <HAL_DMA_IRQHandler+0x10c>
 80052de:	2340      	movs	r3, #64	@ 0x40
 80052e0:	e000      	b.n	80052e4 <HAL_DMA_IRQHandler+0x10c>
 80052e2:	2304      	movs	r3, #4
 80052e4:	4a3d      	ldr	r2, [pc, #244]	@ (80053dc <HAL_DMA_IRQHandler+0x204>)
 80052e6:	6053      	str	r3, [r2, #4]
 80052e8:	e057      	b.n	800539a <HAL_DMA_IRQHandler+0x1c2>
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	4a31      	ldr	r2, [pc, #196]	@ (80053b4 <HAL_DMA_IRQHandler+0x1dc>)
 80052f0:	4293      	cmp	r3, r2
 80052f2:	d04f      	beq.n	8005394 <HAL_DMA_IRQHandler+0x1bc>
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	4a2f      	ldr	r2, [pc, #188]	@ (80053b8 <HAL_DMA_IRQHandler+0x1e0>)
 80052fa:	4293      	cmp	r3, r2
 80052fc:	d048      	beq.n	8005390 <HAL_DMA_IRQHandler+0x1b8>
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	4a2e      	ldr	r2, [pc, #184]	@ (80053bc <HAL_DMA_IRQHandler+0x1e4>)
 8005304:	4293      	cmp	r3, r2
 8005306:	d040      	beq.n	800538a <HAL_DMA_IRQHandler+0x1b2>
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	4a2c      	ldr	r2, [pc, #176]	@ (80053c0 <HAL_DMA_IRQHandler+0x1e8>)
 800530e:	4293      	cmp	r3, r2
 8005310:	d038      	beq.n	8005384 <HAL_DMA_IRQHandler+0x1ac>
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	4a2b      	ldr	r2, [pc, #172]	@ (80053c4 <HAL_DMA_IRQHandler+0x1ec>)
 8005318:	4293      	cmp	r3, r2
 800531a:	d030      	beq.n	800537e <HAL_DMA_IRQHandler+0x1a6>
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	4a29      	ldr	r2, [pc, #164]	@ (80053c8 <HAL_DMA_IRQHandler+0x1f0>)
 8005322:	4293      	cmp	r3, r2
 8005324:	d028      	beq.n	8005378 <HAL_DMA_IRQHandler+0x1a0>
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	4a21      	ldr	r2, [pc, #132]	@ (80053b0 <HAL_DMA_IRQHandler+0x1d8>)
 800532c:	4293      	cmp	r3, r2
 800532e:	d020      	beq.n	8005372 <HAL_DMA_IRQHandler+0x19a>
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	4a25      	ldr	r2, [pc, #148]	@ (80053cc <HAL_DMA_IRQHandler+0x1f4>)
 8005336:	4293      	cmp	r3, r2
 8005338:	d019      	beq.n	800536e <HAL_DMA_IRQHandler+0x196>
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	4a24      	ldr	r2, [pc, #144]	@ (80053d0 <HAL_DMA_IRQHandler+0x1f8>)
 8005340:	4293      	cmp	r3, r2
 8005342:	d012      	beq.n	800536a <HAL_DMA_IRQHandler+0x192>
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	4a22      	ldr	r2, [pc, #136]	@ (80053d4 <HAL_DMA_IRQHandler+0x1fc>)
 800534a:	4293      	cmp	r3, r2
 800534c:	d00a      	beq.n	8005364 <HAL_DMA_IRQHandler+0x18c>
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	4a21      	ldr	r2, [pc, #132]	@ (80053d8 <HAL_DMA_IRQHandler+0x200>)
 8005354:	4293      	cmp	r3, r2
 8005356:	d102      	bne.n	800535e <HAL_DMA_IRQHandler+0x186>
 8005358:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800535c:	e01b      	b.n	8005396 <HAL_DMA_IRQHandler+0x1be>
 800535e:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8005362:	e018      	b.n	8005396 <HAL_DMA_IRQHandler+0x1be>
 8005364:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005368:	e015      	b.n	8005396 <HAL_DMA_IRQHandler+0x1be>
 800536a:	2340      	movs	r3, #64	@ 0x40
 800536c:	e013      	b.n	8005396 <HAL_DMA_IRQHandler+0x1be>
 800536e:	2304      	movs	r3, #4
 8005370:	e011      	b.n	8005396 <HAL_DMA_IRQHandler+0x1be>
 8005372:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8005376:	e00e      	b.n	8005396 <HAL_DMA_IRQHandler+0x1be>
 8005378:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800537c:	e00b      	b.n	8005396 <HAL_DMA_IRQHandler+0x1be>
 800537e:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8005382:	e008      	b.n	8005396 <HAL_DMA_IRQHandler+0x1be>
 8005384:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8005388:	e005      	b.n	8005396 <HAL_DMA_IRQHandler+0x1be>
 800538a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800538e:	e002      	b.n	8005396 <HAL_DMA_IRQHandler+0x1be>
 8005390:	2340      	movs	r3, #64	@ 0x40
 8005392:	e000      	b.n	8005396 <HAL_DMA_IRQHandler+0x1be>
 8005394:	2304      	movs	r3, #4
 8005396:	4a12      	ldr	r2, [pc, #72]	@ (80053e0 <HAL_DMA_IRQHandler+0x208>)
 8005398:	6053      	str	r3, [r2, #4]
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800539e:	2b00      	cmp	r3, #0
 80053a0:	f000 8136 	beq.w	8005610 <HAL_DMA_IRQHandler+0x438>
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053a8:	6878      	ldr	r0, [r7, #4]
 80053aa:	4798      	blx	r3
 80053ac:	e130      	b.n	8005610 <HAL_DMA_IRQHandler+0x438>
 80053ae:	bf00      	nop
 80053b0:	40020080 	.word	0x40020080
 80053b4:	40020008 	.word	0x40020008
 80053b8:	4002001c 	.word	0x4002001c
 80053bc:	40020030 	.word	0x40020030
 80053c0:	40020044 	.word	0x40020044
 80053c4:	40020058 	.word	0x40020058
 80053c8:	4002006c 	.word	0x4002006c
 80053cc:	40020408 	.word	0x40020408
 80053d0:	4002041c 	.word	0x4002041c
 80053d4:	40020430 	.word	0x40020430
 80053d8:	40020444 	.word	0x40020444
 80053dc:	40020400 	.word	0x40020400
 80053e0:	40020000 	.word	0x40020000
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053e8:	2202      	movs	r2, #2
 80053ea:	409a      	lsls	r2, r3
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	4013      	ands	r3, r2
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	f000 80dd 	beq.w	80055b0 <HAL_DMA_IRQHandler+0x3d8>
 80053f6:	68bb      	ldr	r3, [r7, #8]
 80053f8:	f003 0302 	and.w	r3, r3, #2
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	f000 80d7 	beq.w	80055b0 <HAL_DMA_IRQHandler+0x3d8>
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	f003 0320 	and.w	r3, r3, #32
 800540c:	2b00      	cmp	r3, #0
 800540e:	d10b      	bne.n	8005428 <HAL_DMA_IRQHandler+0x250>
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	681a      	ldr	r2, [r3, #0]
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	f022 020a 	bic.w	r2, r2, #10
 800541e:	601a      	str	r2, [r3, #0]
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	2201      	movs	r2, #1
 8005424:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	461a      	mov	r2, r3
 800542e:	4b7b      	ldr	r3, [pc, #492]	@ (800561c <HAL_DMA_IRQHandler+0x444>)
 8005430:	429a      	cmp	r2, r3
 8005432:	d958      	bls.n	80054e6 <HAL_DMA_IRQHandler+0x30e>
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	4a79      	ldr	r2, [pc, #484]	@ (8005620 <HAL_DMA_IRQHandler+0x448>)
 800543a:	4293      	cmp	r3, r2
 800543c:	d04f      	beq.n	80054de <HAL_DMA_IRQHandler+0x306>
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	4a78      	ldr	r2, [pc, #480]	@ (8005624 <HAL_DMA_IRQHandler+0x44c>)
 8005444:	4293      	cmp	r3, r2
 8005446:	d048      	beq.n	80054da <HAL_DMA_IRQHandler+0x302>
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	4a76      	ldr	r2, [pc, #472]	@ (8005628 <HAL_DMA_IRQHandler+0x450>)
 800544e:	4293      	cmp	r3, r2
 8005450:	d040      	beq.n	80054d4 <HAL_DMA_IRQHandler+0x2fc>
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	4a75      	ldr	r2, [pc, #468]	@ (800562c <HAL_DMA_IRQHandler+0x454>)
 8005458:	4293      	cmp	r3, r2
 800545a:	d038      	beq.n	80054ce <HAL_DMA_IRQHandler+0x2f6>
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	4a73      	ldr	r2, [pc, #460]	@ (8005630 <HAL_DMA_IRQHandler+0x458>)
 8005462:	4293      	cmp	r3, r2
 8005464:	d030      	beq.n	80054c8 <HAL_DMA_IRQHandler+0x2f0>
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	4a72      	ldr	r2, [pc, #456]	@ (8005634 <HAL_DMA_IRQHandler+0x45c>)
 800546c:	4293      	cmp	r3, r2
 800546e:	d028      	beq.n	80054c2 <HAL_DMA_IRQHandler+0x2ea>
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	4a69      	ldr	r2, [pc, #420]	@ (800561c <HAL_DMA_IRQHandler+0x444>)
 8005476:	4293      	cmp	r3, r2
 8005478:	d020      	beq.n	80054bc <HAL_DMA_IRQHandler+0x2e4>
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	4a6e      	ldr	r2, [pc, #440]	@ (8005638 <HAL_DMA_IRQHandler+0x460>)
 8005480:	4293      	cmp	r3, r2
 8005482:	d019      	beq.n	80054b8 <HAL_DMA_IRQHandler+0x2e0>
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	4a6c      	ldr	r2, [pc, #432]	@ (800563c <HAL_DMA_IRQHandler+0x464>)
 800548a:	4293      	cmp	r3, r2
 800548c:	d012      	beq.n	80054b4 <HAL_DMA_IRQHandler+0x2dc>
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	4a6b      	ldr	r2, [pc, #428]	@ (8005640 <HAL_DMA_IRQHandler+0x468>)
 8005494:	4293      	cmp	r3, r2
 8005496:	d00a      	beq.n	80054ae <HAL_DMA_IRQHandler+0x2d6>
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	4a69      	ldr	r2, [pc, #420]	@ (8005644 <HAL_DMA_IRQHandler+0x46c>)
 800549e:	4293      	cmp	r3, r2
 80054a0:	d102      	bne.n	80054a8 <HAL_DMA_IRQHandler+0x2d0>
 80054a2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80054a6:	e01b      	b.n	80054e0 <HAL_DMA_IRQHandler+0x308>
 80054a8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80054ac:	e018      	b.n	80054e0 <HAL_DMA_IRQHandler+0x308>
 80054ae:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80054b2:	e015      	b.n	80054e0 <HAL_DMA_IRQHandler+0x308>
 80054b4:	2320      	movs	r3, #32
 80054b6:	e013      	b.n	80054e0 <HAL_DMA_IRQHandler+0x308>
 80054b8:	2302      	movs	r3, #2
 80054ba:	e011      	b.n	80054e0 <HAL_DMA_IRQHandler+0x308>
 80054bc:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80054c0:	e00e      	b.n	80054e0 <HAL_DMA_IRQHandler+0x308>
 80054c2:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80054c6:	e00b      	b.n	80054e0 <HAL_DMA_IRQHandler+0x308>
 80054c8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80054cc:	e008      	b.n	80054e0 <HAL_DMA_IRQHandler+0x308>
 80054ce:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80054d2:	e005      	b.n	80054e0 <HAL_DMA_IRQHandler+0x308>
 80054d4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80054d8:	e002      	b.n	80054e0 <HAL_DMA_IRQHandler+0x308>
 80054da:	2320      	movs	r3, #32
 80054dc:	e000      	b.n	80054e0 <HAL_DMA_IRQHandler+0x308>
 80054de:	2302      	movs	r3, #2
 80054e0:	4a59      	ldr	r2, [pc, #356]	@ (8005648 <HAL_DMA_IRQHandler+0x470>)
 80054e2:	6053      	str	r3, [r2, #4]
 80054e4:	e057      	b.n	8005596 <HAL_DMA_IRQHandler+0x3be>
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	4a4d      	ldr	r2, [pc, #308]	@ (8005620 <HAL_DMA_IRQHandler+0x448>)
 80054ec:	4293      	cmp	r3, r2
 80054ee:	d04f      	beq.n	8005590 <HAL_DMA_IRQHandler+0x3b8>
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	4a4b      	ldr	r2, [pc, #300]	@ (8005624 <HAL_DMA_IRQHandler+0x44c>)
 80054f6:	4293      	cmp	r3, r2
 80054f8:	d048      	beq.n	800558c <HAL_DMA_IRQHandler+0x3b4>
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	4a4a      	ldr	r2, [pc, #296]	@ (8005628 <HAL_DMA_IRQHandler+0x450>)
 8005500:	4293      	cmp	r3, r2
 8005502:	d040      	beq.n	8005586 <HAL_DMA_IRQHandler+0x3ae>
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	4a48      	ldr	r2, [pc, #288]	@ (800562c <HAL_DMA_IRQHandler+0x454>)
 800550a:	4293      	cmp	r3, r2
 800550c:	d038      	beq.n	8005580 <HAL_DMA_IRQHandler+0x3a8>
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	4a47      	ldr	r2, [pc, #284]	@ (8005630 <HAL_DMA_IRQHandler+0x458>)
 8005514:	4293      	cmp	r3, r2
 8005516:	d030      	beq.n	800557a <HAL_DMA_IRQHandler+0x3a2>
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	4a45      	ldr	r2, [pc, #276]	@ (8005634 <HAL_DMA_IRQHandler+0x45c>)
 800551e:	4293      	cmp	r3, r2
 8005520:	d028      	beq.n	8005574 <HAL_DMA_IRQHandler+0x39c>
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	4a3d      	ldr	r2, [pc, #244]	@ (800561c <HAL_DMA_IRQHandler+0x444>)
 8005528:	4293      	cmp	r3, r2
 800552a:	d020      	beq.n	800556e <HAL_DMA_IRQHandler+0x396>
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	4a41      	ldr	r2, [pc, #260]	@ (8005638 <HAL_DMA_IRQHandler+0x460>)
 8005532:	4293      	cmp	r3, r2
 8005534:	d019      	beq.n	800556a <HAL_DMA_IRQHandler+0x392>
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	4a40      	ldr	r2, [pc, #256]	@ (800563c <HAL_DMA_IRQHandler+0x464>)
 800553c:	4293      	cmp	r3, r2
 800553e:	d012      	beq.n	8005566 <HAL_DMA_IRQHandler+0x38e>
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	4a3e      	ldr	r2, [pc, #248]	@ (8005640 <HAL_DMA_IRQHandler+0x468>)
 8005546:	4293      	cmp	r3, r2
 8005548:	d00a      	beq.n	8005560 <HAL_DMA_IRQHandler+0x388>
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	4a3d      	ldr	r2, [pc, #244]	@ (8005644 <HAL_DMA_IRQHandler+0x46c>)
 8005550:	4293      	cmp	r3, r2
 8005552:	d102      	bne.n	800555a <HAL_DMA_IRQHandler+0x382>
 8005554:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8005558:	e01b      	b.n	8005592 <HAL_DMA_IRQHandler+0x3ba>
 800555a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800555e:	e018      	b.n	8005592 <HAL_DMA_IRQHandler+0x3ba>
 8005560:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005564:	e015      	b.n	8005592 <HAL_DMA_IRQHandler+0x3ba>
 8005566:	2320      	movs	r3, #32
 8005568:	e013      	b.n	8005592 <HAL_DMA_IRQHandler+0x3ba>
 800556a:	2302      	movs	r3, #2
 800556c:	e011      	b.n	8005592 <HAL_DMA_IRQHandler+0x3ba>
 800556e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005572:	e00e      	b.n	8005592 <HAL_DMA_IRQHandler+0x3ba>
 8005574:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8005578:	e00b      	b.n	8005592 <HAL_DMA_IRQHandler+0x3ba>
 800557a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800557e:	e008      	b.n	8005592 <HAL_DMA_IRQHandler+0x3ba>
 8005580:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8005584:	e005      	b.n	8005592 <HAL_DMA_IRQHandler+0x3ba>
 8005586:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800558a:	e002      	b.n	8005592 <HAL_DMA_IRQHandler+0x3ba>
 800558c:	2320      	movs	r3, #32
 800558e:	e000      	b.n	8005592 <HAL_DMA_IRQHandler+0x3ba>
 8005590:	2302      	movs	r3, #2
 8005592:	4a2e      	ldr	r2, [pc, #184]	@ (800564c <HAL_DMA_IRQHandler+0x474>)
 8005594:	6053      	str	r3, [r2, #4]
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	2200      	movs	r2, #0
 800559a:	f883 2020 	strb.w	r2, [r3, #32]
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d034      	beq.n	8005610 <HAL_DMA_IRQHandler+0x438>
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80055aa:	6878      	ldr	r0, [r7, #4]
 80055ac:	4798      	blx	r3
 80055ae:	e02f      	b.n	8005610 <HAL_DMA_IRQHandler+0x438>
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055b4:	2208      	movs	r2, #8
 80055b6:	409a      	lsls	r2, r3
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	4013      	ands	r3, r2
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d028      	beq.n	8005612 <HAL_DMA_IRQHandler+0x43a>
 80055c0:	68bb      	ldr	r3, [r7, #8]
 80055c2:	f003 0308 	and.w	r3, r3, #8
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d023      	beq.n	8005612 <HAL_DMA_IRQHandler+0x43a>
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	681a      	ldr	r2, [r3, #0]
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	f022 020e 	bic.w	r2, r2, #14
 80055d8:	601a      	str	r2, [r3, #0]
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80055e2:	2101      	movs	r1, #1
 80055e4:	fa01 f202 	lsl.w	r2, r1, r2
 80055e8:	605a      	str	r2, [r3, #4]
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	2201      	movs	r2, #1
 80055ee:	639a      	str	r2, [r3, #56]	@ 0x38
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	2201      	movs	r2, #1
 80055f4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	2200      	movs	r2, #0
 80055fc:	f883 2020 	strb.w	r2, [r3, #32]
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005604:	2b00      	cmp	r3, #0
 8005606:	d004      	beq.n	8005612 <HAL_DMA_IRQHandler+0x43a>
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800560c:	6878      	ldr	r0, [r7, #4]
 800560e:	4798      	blx	r3
 8005610:	bf00      	nop
 8005612:	bf00      	nop
 8005614:	3710      	adds	r7, #16
 8005616:	46bd      	mov	sp, r7
 8005618:	bd80      	pop	{r7, pc}
 800561a:	bf00      	nop
 800561c:	40020080 	.word	0x40020080
 8005620:	40020008 	.word	0x40020008
 8005624:	4002001c 	.word	0x4002001c
 8005628:	40020030 	.word	0x40020030
 800562c:	40020044 	.word	0x40020044
 8005630:	40020058 	.word	0x40020058
 8005634:	4002006c 	.word	0x4002006c
 8005638:	40020408 	.word	0x40020408
 800563c:	4002041c 	.word	0x4002041c
 8005640:	40020430 	.word	0x40020430
 8005644:	40020444 	.word	0x40020444
 8005648:	40020400 	.word	0x40020400
 800564c:	40020000 	.word	0x40020000

08005650 <DMA_SetConfig>:
 8005650:	b480      	push	{r7}
 8005652:	b085      	sub	sp, #20
 8005654:	af00      	add	r7, sp, #0
 8005656:	60f8      	str	r0, [r7, #12]
 8005658:	60b9      	str	r1, [r7, #8]
 800565a:	607a      	str	r2, [r7, #4]
 800565c:	603b      	str	r3, [r7, #0]
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005666:	2101      	movs	r1, #1
 8005668:	fa01 f202 	lsl.w	r2, r1, r2
 800566c:	605a      	str	r2, [r3, #4]
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	683a      	ldr	r2, [r7, #0]
 8005674:	605a      	str	r2, [r3, #4]
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	685b      	ldr	r3, [r3, #4]
 800567a:	2b10      	cmp	r3, #16
 800567c:	d108      	bne.n	8005690 <DMA_SetConfig+0x40>
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	687a      	ldr	r2, [r7, #4]
 8005684:	609a      	str	r2, [r3, #8]
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	68ba      	ldr	r2, [r7, #8]
 800568c:	60da      	str	r2, [r3, #12]
 800568e:	e007      	b.n	80056a0 <DMA_SetConfig+0x50>
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	68ba      	ldr	r2, [r7, #8]
 8005696:	609a      	str	r2, [r3, #8]
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	687a      	ldr	r2, [r7, #4]
 800569e:	60da      	str	r2, [r3, #12]
 80056a0:	bf00      	nop
 80056a2:	3714      	adds	r7, #20
 80056a4:	46bd      	mov	sp, r7
 80056a6:	bc80      	pop	{r7}
 80056a8:	4770      	bx	lr
	...

080056ac <HAL_GPIO_Init>:
 80056ac:	b480      	push	{r7}
 80056ae:	b08b      	sub	sp, #44	@ 0x2c
 80056b0:	af00      	add	r7, sp, #0
 80056b2:	6078      	str	r0, [r7, #4]
 80056b4:	6039      	str	r1, [r7, #0]
 80056b6:	2300      	movs	r3, #0
 80056b8:	627b      	str	r3, [r7, #36]	@ 0x24
 80056ba:	2300      	movs	r3, #0
 80056bc:	623b      	str	r3, [r7, #32]
 80056be:	e179      	b.n	80059b4 <HAL_GPIO_Init+0x308>
 80056c0:	2201      	movs	r2, #1
 80056c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056c4:	fa02 f303 	lsl.w	r3, r2, r3
 80056c8:	61fb      	str	r3, [r7, #28]
 80056ca:	683b      	ldr	r3, [r7, #0]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	69fa      	ldr	r2, [r7, #28]
 80056d0:	4013      	ands	r3, r2
 80056d2:	61bb      	str	r3, [r7, #24]
 80056d4:	69ba      	ldr	r2, [r7, #24]
 80056d6:	69fb      	ldr	r3, [r7, #28]
 80056d8:	429a      	cmp	r2, r3
 80056da:	f040 8168 	bne.w	80059ae <HAL_GPIO_Init+0x302>
 80056de:	683b      	ldr	r3, [r7, #0]
 80056e0:	685b      	ldr	r3, [r3, #4]
 80056e2:	4a96      	ldr	r2, [pc, #600]	@ (800593c <HAL_GPIO_Init+0x290>)
 80056e4:	4293      	cmp	r3, r2
 80056e6:	d05e      	beq.n	80057a6 <HAL_GPIO_Init+0xfa>
 80056e8:	4a94      	ldr	r2, [pc, #592]	@ (800593c <HAL_GPIO_Init+0x290>)
 80056ea:	4293      	cmp	r3, r2
 80056ec:	d875      	bhi.n	80057da <HAL_GPIO_Init+0x12e>
 80056ee:	4a94      	ldr	r2, [pc, #592]	@ (8005940 <HAL_GPIO_Init+0x294>)
 80056f0:	4293      	cmp	r3, r2
 80056f2:	d058      	beq.n	80057a6 <HAL_GPIO_Init+0xfa>
 80056f4:	4a92      	ldr	r2, [pc, #584]	@ (8005940 <HAL_GPIO_Init+0x294>)
 80056f6:	4293      	cmp	r3, r2
 80056f8:	d86f      	bhi.n	80057da <HAL_GPIO_Init+0x12e>
 80056fa:	4a92      	ldr	r2, [pc, #584]	@ (8005944 <HAL_GPIO_Init+0x298>)
 80056fc:	4293      	cmp	r3, r2
 80056fe:	d052      	beq.n	80057a6 <HAL_GPIO_Init+0xfa>
 8005700:	4a90      	ldr	r2, [pc, #576]	@ (8005944 <HAL_GPIO_Init+0x298>)
 8005702:	4293      	cmp	r3, r2
 8005704:	d869      	bhi.n	80057da <HAL_GPIO_Init+0x12e>
 8005706:	4a90      	ldr	r2, [pc, #576]	@ (8005948 <HAL_GPIO_Init+0x29c>)
 8005708:	4293      	cmp	r3, r2
 800570a:	d04c      	beq.n	80057a6 <HAL_GPIO_Init+0xfa>
 800570c:	4a8e      	ldr	r2, [pc, #568]	@ (8005948 <HAL_GPIO_Init+0x29c>)
 800570e:	4293      	cmp	r3, r2
 8005710:	d863      	bhi.n	80057da <HAL_GPIO_Init+0x12e>
 8005712:	4a8e      	ldr	r2, [pc, #568]	@ (800594c <HAL_GPIO_Init+0x2a0>)
 8005714:	4293      	cmp	r3, r2
 8005716:	d046      	beq.n	80057a6 <HAL_GPIO_Init+0xfa>
 8005718:	4a8c      	ldr	r2, [pc, #560]	@ (800594c <HAL_GPIO_Init+0x2a0>)
 800571a:	4293      	cmp	r3, r2
 800571c:	d85d      	bhi.n	80057da <HAL_GPIO_Init+0x12e>
 800571e:	2b12      	cmp	r3, #18
 8005720:	d82a      	bhi.n	8005778 <HAL_GPIO_Init+0xcc>
 8005722:	2b12      	cmp	r3, #18
 8005724:	d859      	bhi.n	80057da <HAL_GPIO_Init+0x12e>
 8005726:	a201      	add	r2, pc, #4	@ (adr r2, 800572c <HAL_GPIO_Init+0x80>)
 8005728:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800572c:	080057a7 	.word	0x080057a7
 8005730:	08005781 	.word	0x08005781
 8005734:	08005793 	.word	0x08005793
 8005738:	080057d5 	.word	0x080057d5
 800573c:	080057db 	.word	0x080057db
 8005740:	080057db 	.word	0x080057db
 8005744:	080057db 	.word	0x080057db
 8005748:	080057db 	.word	0x080057db
 800574c:	080057db 	.word	0x080057db
 8005750:	080057db 	.word	0x080057db
 8005754:	080057db 	.word	0x080057db
 8005758:	080057db 	.word	0x080057db
 800575c:	080057db 	.word	0x080057db
 8005760:	080057db 	.word	0x080057db
 8005764:	080057db 	.word	0x080057db
 8005768:	080057db 	.word	0x080057db
 800576c:	080057db 	.word	0x080057db
 8005770:	08005789 	.word	0x08005789
 8005774:	0800579d 	.word	0x0800579d
 8005778:	4a75      	ldr	r2, [pc, #468]	@ (8005950 <HAL_GPIO_Init+0x2a4>)
 800577a:	4293      	cmp	r3, r2
 800577c:	d013      	beq.n	80057a6 <HAL_GPIO_Init+0xfa>
 800577e:	e02c      	b.n	80057da <HAL_GPIO_Init+0x12e>
 8005780:	683b      	ldr	r3, [r7, #0]
 8005782:	68db      	ldr	r3, [r3, #12]
 8005784:	623b      	str	r3, [r7, #32]
 8005786:	e029      	b.n	80057dc <HAL_GPIO_Init+0x130>
 8005788:	683b      	ldr	r3, [r7, #0]
 800578a:	68db      	ldr	r3, [r3, #12]
 800578c:	3304      	adds	r3, #4
 800578e:	623b      	str	r3, [r7, #32]
 8005790:	e024      	b.n	80057dc <HAL_GPIO_Init+0x130>
 8005792:	683b      	ldr	r3, [r7, #0]
 8005794:	68db      	ldr	r3, [r3, #12]
 8005796:	3308      	adds	r3, #8
 8005798:	623b      	str	r3, [r7, #32]
 800579a:	e01f      	b.n	80057dc <HAL_GPIO_Init+0x130>
 800579c:	683b      	ldr	r3, [r7, #0]
 800579e:	68db      	ldr	r3, [r3, #12]
 80057a0:	330c      	adds	r3, #12
 80057a2:	623b      	str	r3, [r7, #32]
 80057a4:	e01a      	b.n	80057dc <HAL_GPIO_Init+0x130>
 80057a6:	683b      	ldr	r3, [r7, #0]
 80057a8:	689b      	ldr	r3, [r3, #8]
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d102      	bne.n	80057b4 <HAL_GPIO_Init+0x108>
 80057ae:	2304      	movs	r3, #4
 80057b0:	623b      	str	r3, [r7, #32]
 80057b2:	e013      	b.n	80057dc <HAL_GPIO_Init+0x130>
 80057b4:	683b      	ldr	r3, [r7, #0]
 80057b6:	689b      	ldr	r3, [r3, #8]
 80057b8:	2b01      	cmp	r3, #1
 80057ba:	d105      	bne.n	80057c8 <HAL_GPIO_Init+0x11c>
 80057bc:	2308      	movs	r3, #8
 80057be:	623b      	str	r3, [r7, #32]
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	69fa      	ldr	r2, [r7, #28]
 80057c4:	611a      	str	r2, [r3, #16]
 80057c6:	e009      	b.n	80057dc <HAL_GPIO_Init+0x130>
 80057c8:	2308      	movs	r3, #8
 80057ca:	623b      	str	r3, [r7, #32]
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	69fa      	ldr	r2, [r7, #28]
 80057d0:	615a      	str	r2, [r3, #20]
 80057d2:	e003      	b.n	80057dc <HAL_GPIO_Init+0x130>
 80057d4:	2300      	movs	r3, #0
 80057d6:	623b      	str	r3, [r7, #32]
 80057d8:	e000      	b.n	80057dc <HAL_GPIO_Init+0x130>
 80057da:	bf00      	nop
 80057dc:	69bb      	ldr	r3, [r7, #24]
 80057de:	2bff      	cmp	r3, #255	@ 0xff
 80057e0:	d801      	bhi.n	80057e6 <HAL_GPIO_Init+0x13a>
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	e001      	b.n	80057ea <HAL_GPIO_Init+0x13e>
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	3304      	adds	r3, #4
 80057ea:	617b      	str	r3, [r7, #20]
 80057ec:	69bb      	ldr	r3, [r7, #24]
 80057ee:	2bff      	cmp	r3, #255	@ 0xff
 80057f0:	d802      	bhi.n	80057f8 <HAL_GPIO_Init+0x14c>
 80057f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057f4:	009b      	lsls	r3, r3, #2
 80057f6:	e002      	b.n	80057fe <HAL_GPIO_Init+0x152>
 80057f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057fa:	3b08      	subs	r3, #8
 80057fc:	009b      	lsls	r3, r3, #2
 80057fe:	613b      	str	r3, [r7, #16]
 8005800:	697b      	ldr	r3, [r7, #20]
 8005802:	681a      	ldr	r2, [r3, #0]
 8005804:	210f      	movs	r1, #15
 8005806:	693b      	ldr	r3, [r7, #16]
 8005808:	fa01 f303 	lsl.w	r3, r1, r3
 800580c:	43db      	mvns	r3, r3
 800580e:	401a      	ands	r2, r3
 8005810:	6a39      	ldr	r1, [r7, #32]
 8005812:	693b      	ldr	r3, [r7, #16]
 8005814:	fa01 f303 	lsl.w	r3, r1, r3
 8005818:	431a      	orrs	r2, r3
 800581a:	697b      	ldr	r3, [r7, #20]
 800581c:	601a      	str	r2, [r3, #0]
 800581e:	683b      	ldr	r3, [r7, #0]
 8005820:	685b      	ldr	r3, [r3, #4]
 8005822:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005826:	2b00      	cmp	r3, #0
 8005828:	f000 80c1 	beq.w	80059ae <HAL_GPIO_Init+0x302>
 800582c:	4b49      	ldr	r3, [pc, #292]	@ (8005954 <HAL_GPIO_Init+0x2a8>)
 800582e:	699b      	ldr	r3, [r3, #24]
 8005830:	4a48      	ldr	r2, [pc, #288]	@ (8005954 <HAL_GPIO_Init+0x2a8>)
 8005832:	f043 0301 	orr.w	r3, r3, #1
 8005836:	6193      	str	r3, [r2, #24]
 8005838:	4b46      	ldr	r3, [pc, #280]	@ (8005954 <HAL_GPIO_Init+0x2a8>)
 800583a:	699b      	ldr	r3, [r3, #24]
 800583c:	f003 0301 	and.w	r3, r3, #1
 8005840:	60bb      	str	r3, [r7, #8]
 8005842:	68bb      	ldr	r3, [r7, #8]
 8005844:	4a44      	ldr	r2, [pc, #272]	@ (8005958 <HAL_GPIO_Init+0x2ac>)
 8005846:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005848:	089b      	lsrs	r3, r3, #2
 800584a:	3302      	adds	r3, #2
 800584c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005850:	60fb      	str	r3, [r7, #12]
 8005852:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005854:	f003 0303 	and.w	r3, r3, #3
 8005858:	009b      	lsls	r3, r3, #2
 800585a:	220f      	movs	r2, #15
 800585c:	fa02 f303 	lsl.w	r3, r2, r3
 8005860:	43db      	mvns	r3, r3
 8005862:	68fa      	ldr	r2, [r7, #12]
 8005864:	4013      	ands	r3, r2
 8005866:	60fb      	str	r3, [r7, #12]
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	4a3c      	ldr	r2, [pc, #240]	@ (800595c <HAL_GPIO_Init+0x2b0>)
 800586c:	4293      	cmp	r3, r2
 800586e:	d01f      	beq.n	80058b0 <HAL_GPIO_Init+0x204>
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	4a3b      	ldr	r2, [pc, #236]	@ (8005960 <HAL_GPIO_Init+0x2b4>)
 8005874:	4293      	cmp	r3, r2
 8005876:	d019      	beq.n	80058ac <HAL_GPIO_Init+0x200>
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	4a3a      	ldr	r2, [pc, #232]	@ (8005964 <HAL_GPIO_Init+0x2b8>)
 800587c:	4293      	cmp	r3, r2
 800587e:	d013      	beq.n	80058a8 <HAL_GPIO_Init+0x1fc>
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	4a39      	ldr	r2, [pc, #228]	@ (8005968 <HAL_GPIO_Init+0x2bc>)
 8005884:	4293      	cmp	r3, r2
 8005886:	d00d      	beq.n	80058a4 <HAL_GPIO_Init+0x1f8>
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	4a38      	ldr	r2, [pc, #224]	@ (800596c <HAL_GPIO_Init+0x2c0>)
 800588c:	4293      	cmp	r3, r2
 800588e:	d007      	beq.n	80058a0 <HAL_GPIO_Init+0x1f4>
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	4a37      	ldr	r2, [pc, #220]	@ (8005970 <HAL_GPIO_Init+0x2c4>)
 8005894:	4293      	cmp	r3, r2
 8005896:	d101      	bne.n	800589c <HAL_GPIO_Init+0x1f0>
 8005898:	2305      	movs	r3, #5
 800589a:	e00a      	b.n	80058b2 <HAL_GPIO_Init+0x206>
 800589c:	2306      	movs	r3, #6
 800589e:	e008      	b.n	80058b2 <HAL_GPIO_Init+0x206>
 80058a0:	2304      	movs	r3, #4
 80058a2:	e006      	b.n	80058b2 <HAL_GPIO_Init+0x206>
 80058a4:	2303      	movs	r3, #3
 80058a6:	e004      	b.n	80058b2 <HAL_GPIO_Init+0x206>
 80058a8:	2302      	movs	r3, #2
 80058aa:	e002      	b.n	80058b2 <HAL_GPIO_Init+0x206>
 80058ac:	2301      	movs	r3, #1
 80058ae:	e000      	b.n	80058b2 <HAL_GPIO_Init+0x206>
 80058b0:	2300      	movs	r3, #0
 80058b2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80058b4:	f002 0203 	and.w	r2, r2, #3
 80058b8:	0092      	lsls	r2, r2, #2
 80058ba:	4093      	lsls	r3, r2
 80058bc:	68fa      	ldr	r2, [r7, #12]
 80058be:	4313      	orrs	r3, r2
 80058c0:	60fb      	str	r3, [r7, #12]
 80058c2:	4925      	ldr	r1, [pc, #148]	@ (8005958 <HAL_GPIO_Init+0x2ac>)
 80058c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058c6:	089b      	lsrs	r3, r3, #2
 80058c8:	3302      	adds	r3, #2
 80058ca:	68fa      	ldr	r2, [r7, #12]
 80058cc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80058d0:	683b      	ldr	r3, [r7, #0]
 80058d2:	685b      	ldr	r3, [r3, #4]
 80058d4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d006      	beq.n	80058ea <HAL_GPIO_Init+0x23e>
 80058dc:	4b25      	ldr	r3, [pc, #148]	@ (8005974 <HAL_GPIO_Init+0x2c8>)
 80058de:	689a      	ldr	r2, [r3, #8]
 80058e0:	4924      	ldr	r1, [pc, #144]	@ (8005974 <HAL_GPIO_Init+0x2c8>)
 80058e2:	69bb      	ldr	r3, [r7, #24]
 80058e4:	4313      	orrs	r3, r2
 80058e6:	608b      	str	r3, [r1, #8]
 80058e8:	e006      	b.n	80058f8 <HAL_GPIO_Init+0x24c>
 80058ea:	4b22      	ldr	r3, [pc, #136]	@ (8005974 <HAL_GPIO_Init+0x2c8>)
 80058ec:	689a      	ldr	r2, [r3, #8]
 80058ee:	69bb      	ldr	r3, [r7, #24]
 80058f0:	43db      	mvns	r3, r3
 80058f2:	4920      	ldr	r1, [pc, #128]	@ (8005974 <HAL_GPIO_Init+0x2c8>)
 80058f4:	4013      	ands	r3, r2
 80058f6:	608b      	str	r3, [r1, #8]
 80058f8:	683b      	ldr	r3, [r7, #0]
 80058fa:	685b      	ldr	r3, [r3, #4]
 80058fc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005900:	2b00      	cmp	r3, #0
 8005902:	d006      	beq.n	8005912 <HAL_GPIO_Init+0x266>
 8005904:	4b1b      	ldr	r3, [pc, #108]	@ (8005974 <HAL_GPIO_Init+0x2c8>)
 8005906:	68da      	ldr	r2, [r3, #12]
 8005908:	491a      	ldr	r1, [pc, #104]	@ (8005974 <HAL_GPIO_Init+0x2c8>)
 800590a:	69bb      	ldr	r3, [r7, #24]
 800590c:	4313      	orrs	r3, r2
 800590e:	60cb      	str	r3, [r1, #12]
 8005910:	e006      	b.n	8005920 <HAL_GPIO_Init+0x274>
 8005912:	4b18      	ldr	r3, [pc, #96]	@ (8005974 <HAL_GPIO_Init+0x2c8>)
 8005914:	68da      	ldr	r2, [r3, #12]
 8005916:	69bb      	ldr	r3, [r7, #24]
 8005918:	43db      	mvns	r3, r3
 800591a:	4916      	ldr	r1, [pc, #88]	@ (8005974 <HAL_GPIO_Init+0x2c8>)
 800591c:	4013      	ands	r3, r2
 800591e:	60cb      	str	r3, [r1, #12]
 8005920:	683b      	ldr	r3, [r7, #0]
 8005922:	685b      	ldr	r3, [r3, #4]
 8005924:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005928:	2b00      	cmp	r3, #0
 800592a:	d025      	beq.n	8005978 <HAL_GPIO_Init+0x2cc>
 800592c:	4b11      	ldr	r3, [pc, #68]	@ (8005974 <HAL_GPIO_Init+0x2c8>)
 800592e:	685a      	ldr	r2, [r3, #4]
 8005930:	4910      	ldr	r1, [pc, #64]	@ (8005974 <HAL_GPIO_Init+0x2c8>)
 8005932:	69bb      	ldr	r3, [r7, #24]
 8005934:	4313      	orrs	r3, r2
 8005936:	604b      	str	r3, [r1, #4]
 8005938:	e025      	b.n	8005986 <HAL_GPIO_Init+0x2da>
 800593a:	bf00      	nop
 800593c:	10320000 	.word	0x10320000
 8005940:	10310000 	.word	0x10310000
 8005944:	10220000 	.word	0x10220000
 8005948:	10210000 	.word	0x10210000
 800594c:	10120000 	.word	0x10120000
 8005950:	10110000 	.word	0x10110000
 8005954:	40021000 	.word	0x40021000
 8005958:	40010000 	.word	0x40010000
 800595c:	40010800 	.word	0x40010800
 8005960:	40010c00 	.word	0x40010c00
 8005964:	40011000 	.word	0x40011000
 8005968:	40011400 	.word	0x40011400
 800596c:	40011800 	.word	0x40011800
 8005970:	40011c00 	.word	0x40011c00
 8005974:	40010400 	.word	0x40010400
 8005978:	4b15      	ldr	r3, [pc, #84]	@ (80059d0 <HAL_GPIO_Init+0x324>)
 800597a:	685a      	ldr	r2, [r3, #4]
 800597c:	69bb      	ldr	r3, [r7, #24]
 800597e:	43db      	mvns	r3, r3
 8005980:	4913      	ldr	r1, [pc, #76]	@ (80059d0 <HAL_GPIO_Init+0x324>)
 8005982:	4013      	ands	r3, r2
 8005984:	604b      	str	r3, [r1, #4]
 8005986:	683b      	ldr	r3, [r7, #0]
 8005988:	685b      	ldr	r3, [r3, #4]
 800598a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800598e:	2b00      	cmp	r3, #0
 8005990:	d006      	beq.n	80059a0 <HAL_GPIO_Init+0x2f4>
 8005992:	4b0f      	ldr	r3, [pc, #60]	@ (80059d0 <HAL_GPIO_Init+0x324>)
 8005994:	681a      	ldr	r2, [r3, #0]
 8005996:	490e      	ldr	r1, [pc, #56]	@ (80059d0 <HAL_GPIO_Init+0x324>)
 8005998:	69bb      	ldr	r3, [r7, #24]
 800599a:	4313      	orrs	r3, r2
 800599c:	600b      	str	r3, [r1, #0]
 800599e:	e006      	b.n	80059ae <HAL_GPIO_Init+0x302>
 80059a0:	4b0b      	ldr	r3, [pc, #44]	@ (80059d0 <HAL_GPIO_Init+0x324>)
 80059a2:	681a      	ldr	r2, [r3, #0]
 80059a4:	69bb      	ldr	r3, [r7, #24]
 80059a6:	43db      	mvns	r3, r3
 80059a8:	4909      	ldr	r1, [pc, #36]	@ (80059d0 <HAL_GPIO_Init+0x324>)
 80059aa:	4013      	ands	r3, r2
 80059ac:	600b      	str	r3, [r1, #0]
 80059ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059b0:	3301      	adds	r3, #1
 80059b2:	627b      	str	r3, [r7, #36]	@ 0x24
 80059b4:	683b      	ldr	r3, [r7, #0]
 80059b6:	681a      	ldr	r2, [r3, #0]
 80059b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059ba:	fa22 f303 	lsr.w	r3, r2, r3
 80059be:	2b00      	cmp	r3, #0
 80059c0:	f47f ae7e 	bne.w	80056c0 <HAL_GPIO_Init+0x14>
 80059c4:	bf00      	nop
 80059c6:	bf00      	nop
 80059c8:	372c      	adds	r7, #44	@ 0x2c
 80059ca:	46bd      	mov	sp, r7
 80059cc:	bc80      	pop	{r7}
 80059ce:	4770      	bx	lr
 80059d0:	40010400 	.word	0x40010400

080059d4 <HAL_GPIO_ReadPin>:
 80059d4:	b480      	push	{r7}
 80059d6:	b085      	sub	sp, #20
 80059d8:	af00      	add	r7, sp, #0
 80059da:	6078      	str	r0, [r7, #4]
 80059dc:	460b      	mov	r3, r1
 80059de:	807b      	strh	r3, [r7, #2]
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	689a      	ldr	r2, [r3, #8]
 80059e4:	887b      	ldrh	r3, [r7, #2]
 80059e6:	4013      	ands	r3, r2
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d002      	beq.n	80059f2 <HAL_GPIO_ReadPin+0x1e>
 80059ec:	2301      	movs	r3, #1
 80059ee:	73fb      	strb	r3, [r7, #15]
 80059f0:	e001      	b.n	80059f6 <HAL_GPIO_ReadPin+0x22>
 80059f2:	2300      	movs	r3, #0
 80059f4:	73fb      	strb	r3, [r7, #15]
 80059f6:	7bfb      	ldrb	r3, [r7, #15]
 80059f8:	4618      	mov	r0, r3
 80059fa:	3714      	adds	r7, #20
 80059fc:	46bd      	mov	sp, r7
 80059fe:	bc80      	pop	{r7}
 8005a00:	4770      	bx	lr

08005a02 <HAL_GPIO_WritePin>:
 8005a02:	b480      	push	{r7}
 8005a04:	b083      	sub	sp, #12
 8005a06:	af00      	add	r7, sp, #0
 8005a08:	6078      	str	r0, [r7, #4]
 8005a0a:	460b      	mov	r3, r1
 8005a0c:	807b      	strh	r3, [r7, #2]
 8005a0e:	4613      	mov	r3, r2
 8005a10:	707b      	strb	r3, [r7, #1]
 8005a12:	787b      	ldrb	r3, [r7, #1]
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d003      	beq.n	8005a20 <HAL_GPIO_WritePin+0x1e>
 8005a18:	887a      	ldrh	r2, [r7, #2]
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	611a      	str	r2, [r3, #16]
 8005a1e:	e003      	b.n	8005a28 <HAL_GPIO_WritePin+0x26>
 8005a20:	887b      	ldrh	r3, [r7, #2]
 8005a22:	041a      	lsls	r2, r3, #16
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	611a      	str	r2, [r3, #16]
 8005a28:	bf00      	nop
 8005a2a:	370c      	adds	r7, #12
 8005a2c:	46bd      	mov	sp, r7
 8005a2e:	bc80      	pop	{r7}
 8005a30:	4770      	bx	lr

08005a32 <HAL_GPIO_TogglePin>:
 8005a32:	b480      	push	{r7}
 8005a34:	b085      	sub	sp, #20
 8005a36:	af00      	add	r7, sp, #0
 8005a38:	6078      	str	r0, [r7, #4]
 8005a3a:	460b      	mov	r3, r1
 8005a3c:	807b      	strh	r3, [r7, #2]
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	68db      	ldr	r3, [r3, #12]
 8005a42:	60fb      	str	r3, [r7, #12]
 8005a44:	887a      	ldrh	r2, [r7, #2]
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	4013      	ands	r3, r2
 8005a4a:	041a      	lsls	r2, r3, #16
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	43d9      	mvns	r1, r3
 8005a50:	887b      	ldrh	r3, [r7, #2]
 8005a52:	400b      	ands	r3, r1
 8005a54:	431a      	orrs	r2, r3
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	611a      	str	r2, [r3, #16]
 8005a5a:	bf00      	nop
 8005a5c:	3714      	adds	r7, #20
 8005a5e:	46bd      	mov	sp, r7
 8005a60:	bc80      	pop	{r7}
 8005a62:	4770      	bx	lr

08005a64 <HAL_I2C_Init>:
 8005a64:	b580      	push	{r7, lr}
 8005a66:	b084      	sub	sp, #16
 8005a68:	af00      	add	r7, sp, #0
 8005a6a:	6078      	str	r0, [r7, #4]
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d101      	bne.n	8005a76 <HAL_I2C_Init+0x12>
 8005a72:	2301      	movs	r3, #1
 8005a74:	e12b      	b.n	8005cce <HAL_I2C_Init+0x26a>
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005a7c:	b2db      	uxtb	r3, r3
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d106      	bne.n	8005a90 <HAL_I2C_Init+0x2c>
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	2200      	movs	r2, #0
 8005a86:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8005a8a:	6878      	ldr	r0, [r7, #4]
 8005a8c:	f7fb fe00 	bl	8001690 <HAL_I2C_MspInit>
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	2224      	movs	r2, #36	@ 0x24
 8005a94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	681a      	ldr	r2, [r3, #0]
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	f022 0201 	bic.w	r2, r2, #1
 8005aa6:	601a      	str	r2, [r3, #0]
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	681a      	ldr	r2, [r3, #0]
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005ab6:	601a      	str	r2, [r3, #0]
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	681a      	ldr	r2, [r3, #0]
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005ac6:	601a      	str	r2, [r3, #0]
 8005ac8:	f001 faba 	bl	8007040 <HAL_RCC_GetPCLK1Freq>
 8005acc:	60f8      	str	r0, [r7, #12]
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	685b      	ldr	r3, [r3, #4]
 8005ad2:	4a81      	ldr	r2, [pc, #516]	@ (8005cd8 <HAL_I2C_Init+0x274>)
 8005ad4:	4293      	cmp	r3, r2
 8005ad6:	d807      	bhi.n	8005ae8 <HAL_I2C_Init+0x84>
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	4a80      	ldr	r2, [pc, #512]	@ (8005cdc <HAL_I2C_Init+0x278>)
 8005adc:	4293      	cmp	r3, r2
 8005ade:	bf94      	ite	ls
 8005ae0:	2301      	movls	r3, #1
 8005ae2:	2300      	movhi	r3, #0
 8005ae4:	b2db      	uxtb	r3, r3
 8005ae6:	e006      	b.n	8005af6 <HAL_I2C_Init+0x92>
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	4a7d      	ldr	r2, [pc, #500]	@ (8005ce0 <HAL_I2C_Init+0x27c>)
 8005aec:	4293      	cmp	r3, r2
 8005aee:	bf94      	ite	ls
 8005af0:	2301      	movls	r3, #1
 8005af2:	2300      	movhi	r3, #0
 8005af4:	b2db      	uxtb	r3, r3
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d001      	beq.n	8005afe <HAL_I2C_Init+0x9a>
 8005afa:	2301      	movs	r3, #1
 8005afc:	e0e7      	b.n	8005cce <HAL_I2C_Init+0x26a>
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	4a78      	ldr	r2, [pc, #480]	@ (8005ce4 <HAL_I2C_Init+0x280>)
 8005b02:	fba2 2303 	umull	r2, r3, r2, r3
 8005b06:	0c9b      	lsrs	r3, r3, #18
 8005b08:	60bb      	str	r3, [r7, #8]
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	685b      	ldr	r3, [r3, #4]
 8005b10:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	68ba      	ldr	r2, [r7, #8]
 8005b1a:	430a      	orrs	r2, r1
 8005b1c:	605a      	str	r2, [r3, #4]
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	6a1b      	ldr	r3, [r3, #32]
 8005b24:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	685b      	ldr	r3, [r3, #4]
 8005b2c:	4a6a      	ldr	r2, [pc, #424]	@ (8005cd8 <HAL_I2C_Init+0x274>)
 8005b2e:	4293      	cmp	r3, r2
 8005b30:	d802      	bhi.n	8005b38 <HAL_I2C_Init+0xd4>
 8005b32:	68bb      	ldr	r3, [r7, #8]
 8005b34:	3301      	adds	r3, #1
 8005b36:	e009      	b.n	8005b4c <HAL_I2C_Init+0xe8>
 8005b38:	68bb      	ldr	r3, [r7, #8]
 8005b3a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8005b3e:	fb02 f303 	mul.w	r3, r2, r3
 8005b42:	4a69      	ldr	r2, [pc, #420]	@ (8005ce8 <HAL_I2C_Init+0x284>)
 8005b44:	fba2 2303 	umull	r2, r3, r2, r3
 8005b48:	099b      	lsrs	r3, r3, #6
 8005b4a:	3301      	adds	r3, #1
 8005b4c:	687a      	ldr	r2, [r7, #4]
 8005b4e:	6812      	ldr	r2, [r2, #0]
 8005b50:	430b      	orrs	r3, r1
 8005b52:	6213      	str	r3, [r2, #32]
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	69db      	ldr	r3, [r3, #28]
 8005b5a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8005b5e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	685b      	ldr	r3, [r3, #4]
 8005b66:	495c      	ldr	r1, [pc, #368]	@ (8005cd8 <HAL_I2C_Init+0x274>)
 8005b68:	428b      	cmp	r3, r1
 8005b6a:	d819      	bhi.n	8005ba0 <HAL_I2C_Init+0x13c>
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	1e59      	subs	r1, r3, #1
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	685b      	ldr	r3, [r3, #4]
 8005b74:	005b      	lsls	r3, r3, #1
 8005b76:	fbb1 f3f3 	udiv	r3, r1, r3
 8005b7a:	1c59      	adds	r1, r3, #1
 8005b7c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8005b80:	400b      	ands	r3, r1
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d00a      	beq.n	8005b9c <HAL_I2C_Init+0x138>
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	1e59      	subs	r1, r3, #1
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	685b      	ldr	r3, [r3, #4]
 8005b8e:	005b      	lsls	r3, r3, #1
 8005b90:	fbb1 f3f3 	udiv	r3, r1, r3
 8005b94:	3301      	adds	r3, #1
 8005b96:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005b9a:	e051      	b.n	8005c40 <HAL_I2C_Init+0x1dc>
 8005b9c:	2304      	movs	r3, #4
 8005b9e:	e04f      	b.n	8005c40 <HAL_I2C_Init+0x1dc>
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	689b      	ldr	r3, [r3, #8]
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d111      	bne.n	8005bcc <HAL_I2C_Init+0x168>
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	1e58      	subs	r0, r3, #1
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	6859      	ldr	r1, [r3, #4]
 8005bb0:	460b      	mov	r3, r1
 8005bb2:	005b      	lsls	r3, r3, #1
 8005bb4:	440b      	add	r3, r1
 8005bb6:	fbb0 f3f3 	udiv	r3, r0, r3
 8005bba:	3301      	adds	r3, #1
 8005bbc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	bf0c      	ite	eq
 8005bc4:	2301      	moveq	r3, #1
 8005bc6:	2300      	movne	r3, #0
 8005bc8:	b2db      	uxtb	r3, r3
 8005bca:	e012      	b.n	8005bf2 <HAL_I2C_Init+0x18e>
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	1e58      	subs	r0, r3, #1
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	6859      	ldr	r1, [r3, #4]
 8005bd4:	460b      	mov	r3, r1
 8005bd6:	009b      	lsls	r3, r3, #2
 8005bd8:	440b      	add	r3, r1
 8005bda:	0099      	lsls	r1, r3, #2
 8005bdc:	440b      	add	r3, r1
 8005bde:	fbb0 f3f3 	udiv	r3, r0, r3
 8005be2:	3301      	adds	r3, #1
 8005be4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	bf0c      	ite	eq
 8005bec:	2301      	moveq	r3, #1
 8005bee:	2300      	movne	r3, #0
 8005bf0:	b2db      	uxtb	r3, r3
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d001      	beq.n	8005bfa <HAL_I2C_Init+0x196>
 8005bf6:	2301      	movs	r3, #1
 8005bf8:	e022      	b.n	8005c40 <HAL_I2C_Init+0x1dc>
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	689b      	ldr	r3, [r3, #8]
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d10e      	bne.n	8005c20 <HAL_I2C_Init+0x1bc>
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	1e58      	subs	r0, r3, #1
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	6859      	ldr	r1, [r3, #4]
 8005c0a:	460b      	mov	r3, r1
 8005c0c:	005b      	lsls	r3, r3, #1
 8005c0e:	440b      	add	r3, r1
 8005c10:	fbb0 f3f3 	udiv	r3, r0, r3
 8005c14:	3301      	adds	r3, #1
 8005c16:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005c1a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005c1e:	e00f      	b.n	8005c40 <HAL_I2C_Init+0x1dc>
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	1e58      	subs	r0, r3, #1
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	6859      	ldr	r1, [r3, #4]
 8005c28:	460b      	mov	r3, r1
 8005c2a:	009b      	lsls	r3, r3, #2
 8005c2c:	440b      	add	r3, r1
 8005c2e:	0099      	lsls	r1, r3, #2
 8005c30:	440b      	add	r3, r1
 8005c32:	fbb0 f3f3 	udiv	r3, r0, r3
 8005c36:	3301      	adds	r3, #1
 8005c38:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005c3c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005c40:	6879      	ldr	r1, [r7, #4]
 8005c42:	6809      	ldr	r1, [r1, #0]
 8005c44:	4313      	orrs	r3, r2
 8005c46:	61cb      	str	r3, [r1, #28]
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	69da      	ldr	r2, [r3, #28]
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	6a1b      	ldr	r3, [r3, #32]
 8005c5a:	431a      	orrs	r2, r3
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	430a      	orrs	r2, r1
 8005c62:	601a      	str	r2, [r3, #0]
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	689b      	ldr	r3, [r3, #8]
 8005c6a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8005c6e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8005c72:	687a      	ldr	r2, [r7, #4]
 8005c74:	6911      	ldr	r1, [r2, #16]
 8005c76:	687a      	ldr	r2, [r7, #4]
 8005c78:	68d2      	ldr	r2, [r2, #12]
 8005c7a:	4311      	orrs	r1, r2
 8005c7c:	687a      	ldr	r2, [r7, #4]
 8005c7e:	6812      	ldr	r2, [r2, #0]
 8005c80:	430b      	orrs	r3, r1
 8005c82:	6093      	str	r3, [r2, #8]
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	68db      	ldr	r3, [r3, #12]
 8005c8a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	695a      	ldr	r2, [r3, #20]
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	699b      	ldr	r3, [r3, #24]
 8005c96:	431a      	orrs	r2, r3
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	430a      	orrs	r2, r1
 8005c9e:	60da      	str	r2, [r3, #12]
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	681a      	ldr	r2, [r3, #0]
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	f042 0201 	orr.w	r2, r2, #1
 8005cae:	601a      	str	r2, [r3, #0]
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	2200      	movs	r2, #0
 8005cb4:	641a      	str	r2, [r3, #64]	@ 0x40
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	2220      	movs	r2, #32
 8005cba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	2200      	movs	r2, #0
 8005cc2:	631a      	str	r2, [r3, #48]	@ 0x30
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	2200      	movs	r2, #0
 8005cc8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005ccc:	2300      	movs	r3, #0
 8005cce:	4618      	mov	r0, r3
 8005cd0:	3710      	adds	r7, #16
 8005cd2:	46bd      	mov	sp, r7
 8005cd4:	bd80      	pop	{r7, pc}
 8005cd6:	bf00      	nop
 8005cd8:	000186a0 	.word	0x000186a0
 8005cdc:	001e847f 	.word	0x001e847f
 8005ce0:	003d08ff 	.word	0x003d08ff
 8005ce4:	431bde83 	.word	0x431bde83
 8005ce8:	10624dd3 	.word	0x10624dd3

08005cec <HAL_I2C_Master_Receive>:
 8005cec:	b580      	push	{r7, lr}
 8005cee:	b08c      	sub	sp, #48	@ 0x30
 8005cf0:	af02      	add	r7, sp, #8
 8005cf2:	60f8      	str	r0, [r7, #12]
 8005cf4:	607a      	str	r2, [r7, #4]
 8005cf6:	461a      	mov	r2, r3
 8005cf8:	460b      	mov	r3, r1
 8005cfa:	817b      	strh	r3, [r7, #10]
 8005cfc:	4613      	mov	r3, r2
 8005cfe:	813b      	strh	r3, [r7, #8]
 8005d00:	2300      	movs	r3, #0
 8005d02:	623b      	str	r3, [r7, #32]
 8005d04:	f7fe fb34 	bl	8004370 <HAL_GetTick>
 8005d08:	6278      	str	r0, [r7, #36]	@ 0x24
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005d10:	b2db      	uxtb	r3, r3
 8005d12:	2b20      	cmp	r3, #32
 8005d14:	f040 824b 	bne.w	80061ae <HAL_I2C_Master_Receive+0x4c2>
 8005d18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d1a:	9300      	str	r3, [sp, #0]
 8005d1c:	2319      	movs	r3, #25
 8005d1e:	2201      	movs	r2, #1
 8005d20:	497f      	ldr	r1, [pc, #508]	@ (8005f20 <HAL_I2C_Master_Receive+0x234>)
 8005d22:	68f8      	ldr	r0, [r7, #12]
 8005d24:	f000 fc4a 	bl	80065bc <I2C_WaitOnFlagUntilTimeout>
 8005d28:	4603      	mov	r3, r0
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d001      	beq.n	8005d32 <HAL_I2C_Master_Receive+0x46>
 8005d2e:	2302      	movs	r3, #2
 8005d30:	e23e      	b.n	80061b0 <HAL_I2C_Master_Receive+0x4c4>
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005d38:	2b01      	cmp	r3, #1
 8005d3a:	d101      	bne.n	8005d40 <HAL_I2C_Master_Receive+0x54>
 8005d3c:	2302      	movs	r3, #2
 8005d3e:	e237      	b.n	80061b0 <HAL_I2C_Master_Receive+0x4c4>
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	2201      	movs	r2, #1
 8005d44:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	f003 0301 	and.w	r3, r3, #1
 8005d52:	2b01      	cmp	r3, #1
 8005d54:	d007      	beq.n	8005d66 <HAL_I2C_Master_Receive+0x7a>
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	681a      	ldr	r2, [r3, #0]
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	f042 0201 	orr.w	r2, r2, #1
 8005d64:	601a      	str	r2, [r3, #0]
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	681a      	ldr	r2, [r3, #0]
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005d74:	601a      	str	r2, [r3, #0]
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	2222      	movs	r2, #34	@ 0x22
 8005d7a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	2210      	movs	r2, #16
 8005d82:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	2200      	movs	r2, #0
 8005d8a:	641a      	str	r2, [r3, #64]	@ 0x40
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	687a      	ldr	r2, [r7, #4]
 8005d90:	625a      	str	r2, [r3, #36]	@ 0x24
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	893a      	ldrh	r2, [r7, #8]
 8005d96:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005d9c:	b29a      	uxth	r2, r3
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	851a      	strh	r2, [r3, #40]	@ 0x28
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	4a5f      	ldr	r2, [pc, #380]	@ (8005f24 <HAL_I2C_Master_Receive+0x238>)
 8005da6:	62da      	str	r2, [r3, #44]	@ 0x2c
 8005da8:	8979      	ldrh	r1, [r7, #10]
 8005daa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005dac:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005dae:	68f8      	ldr	r0, [r7, #12]
 8005db0:	f000 fb36 	bl	8006420 <I2C_MasterRequestRead>
 8005db4:	4603      	mov	r3, r0
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d001      	beq.n	8005dbe <HAL_I2C_Master_Receive+0xd2>
 8005dba:	2301      	movs	r3, #1
 8005dbc:	e1f8      	b.n	80061b0 <HAL_I2C_Master_Receive+0x4c4>
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d113      	bne.n	8005dee <HAL_I2C_Master_Receive+0x102>
 8005dc6:	2300      	movs	r3, #0
 8005dc8:	61fb      	str	r3, [r7, #28]
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	695b      	ldr	r3, [r3, #20]
 8005dd0:	61fb      	str	r3, [r7, #28]
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	699b      	ldr	r3, [r3, #24]
 8005dd8:	61fb      	str	r3, [r7, #28]
 8005dda:	69fb      	ldr	r3, [r7, #28]
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	681a      	ldr	r2, [r3, #0]
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005dea:	601a      	str	r2, [r3, #0]
 8005dec:	e1cc      	b.n	8006188 <HAL_I2C_Master_Receive+0x49c>
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005df2:	2b01      	cmp	r3, #1
 8005df4:	d11e      	bne.n	8005e34 <HAL_I2C_Master_Receive+0x148>
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	681a      	ldr	r2, [r3, #0]
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005e04:	601a      	str	r2, [r3, #0]
 8005e06:	b672      	cpsid	i
 8005e08:	bf00      	nop
 8005e0a:	2300      	movs	r3, #0
 8005e0c:	61bb      	str	r3, [r7, #24]
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	695b      	ldr	r3, [r3, #20]
 8005e14:	61bb      	str	r3, [r7, #24]
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	699b      	ldr	r3, [r3, #24]
 8005e1c:	61bb      	str	r3, [r7, #24]
 8005e1e:	69bb      	ldr	r3, [r7, #24]
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	681a      	ldr	r2, [r3, #0]
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005e2e:	601a      	str	r2, [r3, #0]
 8005e30:	b662      	cpsie	i
 8005e32:	e035      	b.n	8005ea0 <HAL_I2C_Master_Receive+0x1b4>
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005e38:	2b02      	cmp	r3, #2
 8005e3a:	d11e      	bne.n	8005e7a <HAL_I2C_Master_Receive+0x18e>
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	681a      	ldr	r2, [r3, #0]
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005e4a:	601a      	str	r2, [r3, #0]
 8005e4c:	b672      	cpsid	i
 8005e4e:	bf00      	nop
 8005e50:	2300      	movs	r3, #0
 8005e52:	617b      	str	r3, [r7, #20]
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	695b      	ldr	r3, [r3, #20]
 8005e5a:	617b      	str	r3, [r7, #20]
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	699b      	ldr	r3, [r3, #24]
 8005e62:	617b      	str	r3, [r7, #20]
 8005e64:	697b      	ldr	r3, [r7, #20]
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	681a      	ldr	r2, [r3, #0]
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005e74:	601a      	str	r2, [r3, #0]
 8005e76:	b662      	cpsie	i
 8005e78:	e012      	b.n	8005ea0 <HAL_I2C_Master_Receive+0x1b4>
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	681a      	ldr	r2, [r3, #0]
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8005e88:	601a      	str	r2, [r3, #0]
 8005e8a:	2300      	movs	r3, #0
 8005e8c:	613b      	str	r3, [r7, #16]
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	695b      	ldr	r3, [r3, #20]
 8005e94:	613b      	str	r3, [r7, #16]
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	699b      	ldr	r3, [r3, #24]
 8005e9c:	613b      	str	r3, [r7, #16]
 8005e9e:	693b      	ldr	r3, [r7, #16]
 8005ea0:	e172      	b.n	8006188 <HAL_I2C_Master_Receive+0x49c>
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005ea6:	2b03      	cmp	r3, #3
 8005ea8:	f200 811f 	bhi.w	80060ea <HAL_I2C_Master_Receive+0x3fe>
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005eb0:	2b01      	cmp	r3, #1
 8005eb2:	d123      	bne.n	8005efc <HAL_I2C_Master_Receive+0x210>
 8005eb4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005eb6:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8005eb8:	68f8      	ldr	r0, [r7, #12]
 8005eba:	f000 fc99 	bl	80067f0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005ebe:	4603      	mov	r3, r0
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d001      	beq.n	8005ec8 <HAL_I2C_Master_Receive+0x1dc>
 8005ec4:	2301      	movs	r3, #1
 8005ec6:	e173      	b.n	80061b0 <HAL_I2C_Master_Receive+0x4c4>
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	691a      	ldr	r2, [r3, #16]
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ed2:	b2d2      	uxtb	r2, r2
 8005ed4:	701a      	strb	r2, [r3, #0]
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005eda:	1c5a      	adds	r2, r3, #1
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	625a      	str	r2, [r3, #36]	@ 0x24
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005ee4:	3b01      	subs	r3, #1
 8005ee6:	b29a      	uxth	r2, r3
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	851a      	strh	r2, [r3, #40]	@ 0x28
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005ef0:	b29b      	uxth	r3, r3
 8005ef2:	3b01      	subs	r3, #1
 8005ef4:	b29a      	uxth	r2, r3
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8005efa:	e145      	b.n	8006188 <HAL_I2C_Master_Receive+0x49c>
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005f00:	2b02      	cmp	r3, #2
 8005f02:	d152      	bne.n	8005faa <HAL_I2C_Master_Receive+0x2be>
 8005f04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f06:	9300      	str	r3, [sp, #0]
 8005f08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f0a:	2200      	movs	r2, #0
 8005f0c:	4906      	ldr	r1, [pc, #24]	@ (8005f28 <HAL_I2C_Master_Receive+0x23c>)
 8005f0e:	68f8      	ldr	r0, [r7, #12]
 8005f10:	f000 fb54 	bl	80065bc <I2C_WaitOnFlagUntilTimeout>
 8005f14:	4603      	mov	r3, r0
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d008      	beq.n	8005f2c <HAL_I2C_Master_Receive+0x240>
 8005f1a:	2301      	movs	r3, #1
 8005f1c:	e148      	b.n	80061b0 <HAL_I2C_Master_Receive+0x4c4>
 8005f1e:	bf00      	nop
 8005f20:	00100002 	.word	0x00100002
 8005f24:	ffff0000 	.word	0xffff0000
 8005f28:	00010004 	.word	0x00010004
 8005f2c:	b672      	cpsid	i
 8005f2e:	bf00      	nop
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	681a      	ldr	r2, [r3, #0]
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005f3e:	601a      	str	r2, [r3, #0]
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	691a      	ldr	r2, [r3, #16]
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f4a:	b2d2      	uxtb	r2, r2
 8005f4c:	701a      	strb	r2, [r3, #0]
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f52:	1c5a      	adds	r2, r3, #1
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	625a      	str	r2, [r3, #36]	@ 0x24
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005f5c:	3b01      	subs	r3, #1
 8005f5e:	b29a      	uxth	r2, r3
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	851a      	strh	r2, [r3, #40]	@ 0x28
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005f68:	b29b      	uxth	r3, r3
 8005f6a:	3b01      	subs	r3, #1
 8005f6c:	b29a      	uxth	r2, r3
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8005f72:	b662      	cpsie	i
 8005f74:	bf00      	nop
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	691a      	ldr	r2, [r3, #16]
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f80:	b2d2      	uxtb	r2, r2
 8005f82:	701a      	strb	r2, [r3, #0]
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f88:	1c5a      	adds	r2, r3, #1
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	625a      	str	r2, [r3, #36]	@ 0x24
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005f92:	3b01      	subs	r3, #1
 8005f94:	b29a      	uxth	r2, r3
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	851a      	strh	r2, [r3, #40]	@ 0x28
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005f9e:	b29b      	uxth	r3, r3
 8005fa0:	3b01      	subs	r3, #1
 8005fa2:	b29a      	uxth	r2, r3
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8005fa8:	e0ee      	b.n	8006188 <HAL_I2C_Master_Receive+0x49c>
 8005faa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fac:	9300      	str	r3, [sp, #0]
 8005fae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005fb0:	2200      	movs	r2, #0
 8005fb2:	4981      	ldr	r1, [pc, #516]	@ (80061b8 <HAL_I2C_Master_Receive+0x4cc>)
 8005fb4:	68f8      	ldr	r0, [r7, #12]
 8005fb6:	f000 fb01 	bl	80065bc <I2C_WaitOnFlagUntilTimeout>
 8005fba:	4603      	mov	r3, r0
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d001      	beq.n	8005fc4 <HAL_I2C_Master_Receive+0x2d8>
 8005fc0:	2301      	movs	r3, #1
 8005fc2:	e0f5      	b.n	80061b0 <HAL_I2C_Master_Receive+0x4c4>
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	681a      	ldr	r2, [r3, #0]
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005fd2:	601a      	str	r2, [r3, #0]
 8005fd4:	b672      	cpsid	i
 8005fd6:	bf00      	nop
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	691a      	ldr	r2, [r3, #16]
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005fe2:	b2d2      	uxtb	r2, r2
 8005fe4:	701a      	strb	r2, [r3, #0]
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005fea:	1c5a      	adds	r2, r3, #1
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	625a      	str	r2, [r3, #36]	@ 0x24
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005ff4:	3b01      	subs	r3, #1
 8005ff6:	b29a      	uxth	r2, r3
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	851a      	strh	r2, [r3, #40]	@ 0x28
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006000:	b29b      	uxth	r3, r3
 8006002:	3b01      	subs	r3, #1
 8006004:	b29a      	uxth	r2, r3
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800600a:	4b6c      	ldr	r3, [pc, #432]	@ (80061bc <HAL_I2C_Master_Receive+0x4d0>)
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	08db      	lsrs	r3, r3, #3
 8006010:	4a6b      	ldr	r2, [pc, #428]	@ (80061c0 <HAL_I2C_Master_Receive+0x4d4>)
 8006012:	fba2 2303 	umull	r2, r3, r2, r3
 8006016:	0a1a      	lsrs	r2, r3, #8
 8006018:	4613      	mov	r3, r2
 800601a:	009b      	lsls	r3, r3, #2
 800601c:	4413      	add	r3, r2
 800601e:	00da      	lsls	r2, r3, #3
 8006020:	1ad3      	subs	r3, r2, r3
 8006022:	623b      	str	r3, [r7, #32]
 8006024:	6a3b      	ldr	r3, [r7, #32]
 8006026:	3b01      	subs	r3, #1
 8006028:	623b      	str	r3, [r7, #32]
 800602a:	6a3b      	ldr	r3, [r7, #32]
 800602c:	2b00      	cmp	r3, #0
 800602e:	d118      	bne.n	8006062 <HAL_I2C_Master_Receive+0x376>
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	2200      	movs	r2, #0
 8006034:	631a      	str	r2, [r3, #48]	@ 0x30
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	2220      	movs	r2, #32
 800603a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	2200      	movs	r2, #0
 8006042:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800604a:	f043 0220 	orr.w	r2, r3, #32
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	641a      	str	r2, [r3, #64]	@ 0x40
 8006052:	b662      	cpsie	i
 8006054:	bf00      	nop
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	2200      	movs	r2, #0
 800605a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 800605e:	2301      	movs	r3, #1
 8006060:	e0a6      	b.n	80061b0 <HAL_I2C_Master_Receive+0x4c4>
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	695b      	ldr	r3, [r3, #20]
 8006068:	f003 0304 	and.w	r3, r3, #4
 800606c:	2b04      	cmp	r3, #4
 800606e:	d1d9      	bne.n	8006024 <HAL_I2C_Master_Receive+0x338>
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	681a      	ldr	r2, [r3, #0]
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800607e:	601a      	str	r2, [r3, #0]
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	691a      	ldr	r2, [r3, #16]
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800608a:	b2d2      	uxtb	r2, r2
 800608c:	701a      	strb	r2, [r3, #0]
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006092:	1c5a      	adds	r2, r3, #1
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	625a      	str	r2, [r3, #36]	@ 0x24
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800609c:	3b01      	subs	r3, #1
 800609e:	b29a      	uxth	r2, r3
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	851a      	strh	r2, [r3, #40]	@ 0x28
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80060a8:	b29b      	uxth	r3, r3
 80060aa:	3b01      	subs	r3, #1
 80060ac:	b29a      	uxth	r2, r3
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80060b2:	b662      	cpsie	i
 80060b4:	bf00      	nop
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	691a      	ldr	r2, [r3, #16]
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80060c0:	b2d2      	uxtb	r2, r2
 80060c2:	701a      	strb	r2, [r3, #0]
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80060c8:	1c5a      	adds	r2, r3, #1
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	625a      	str	r2, [r3, #36]	@ 0x24
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80060d2:	3b01      	subs	r3, #1
 80060d4:	b29a      	uxth	r2, r3
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	851a      	strh	r2, [r3, #40]	@ 0x28
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80060de:	b29b      	uxth	r3, r3
 80060e0:	3b01      	subs	r3, #1
 80060e2:	b29a      	uxth	r2, r3
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80060e8:	e04e      	b.n	8006188 <HAL_I2C_Master_Receive+0x49c>
 80060ea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80060ec:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80060ee:	68f8      	ldr	r0, [r7, #12]
 80060f0:	f000 fb7e 	bl	80067f0 <I2C_WaitOnRXNEFlagUntilTimeout>
 80060f4:	4603      	mov	r3, r0
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d001      	beq.n	80060fe <HAL_I2C_Master_Receive+0x412>
 80060fa:	2301      	movs	r3, #1
 80060fc:	e058      	b.n	80061b0 <HAL_I2C_Master_Receive+0x4c4>
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	691a      	ldr	r2, [r3, #16]
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006108:	b2d2      	uxtb	r2, r2
 800610a:	701a      	strb	r2, [r3, #0]
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006110:	1c5a      	adds	r2, r3, #1
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	625a      	str	r2, [r3, #36]	@ 0x24
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800611a:	3b01      	subs	r3, #1
 800611c:	b29a      	uxth	r2, r3
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	851a      	strh	r2, [r3, #40]	@ 0x28
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006126:	b29b      	uxth	r3, r3
 8006128:	3b01      	subs	r3, #1
 800612a:	b29a      	uxth	r2, r3
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	695b      	ldr	r3, [r3, #20]
 8006136:	f003 0304 	and.w	r3, r3, #4
 800613a:	2b04      	cmp	r3, #4
 800613c:	d124      	bne.n	8006188 <HAL_I2C_Master_Receive+0x49c>
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006142:	2b03      	cmp	r3, #3
 8006144:	d107      	bne.n	8006156 <HAL_I2C_Master_Receive+0x46a>
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	681a      	ldr	r2, [r3, #0]
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006154:	601a      	str	r2, [r3, #0]
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	691a      	ldr	r2, [r3, #16]
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006160:	b2d2      	uxtb	r2, r2
 8006162:	701a      	strb	r2, [r3, #0]
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006168:	1c5a      	adds	r2, r3, #1
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	625a      	str	r2, [r3, #36]	@ 0x24
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006172:	3b01      	subs	r3, #1
 8006174:	b29a      	uxth	r2, r3
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	851a      	strh	r2, [r3, #40]	@ 0x28
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800617e:	b29b      	uxth	r3, r3
 8006180:	3b01      	subs	r3, #1
 8006182:	b29a      	uxth	r2, r3
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800618c:	2b00      	cmp	r3, #0
 800618e:	f47f ae88 	bne.w	8005ea2 <HAL_I2C_Master_Receive+0x1b6>
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	2220      	movs	r2, #32
 8006196:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	2200      	movs	r2, #0
 800619e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	2200      	movs	r2, #0
 80061a6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 80061aa:	2300      	movs	r3, #0
 80061ac:	e000      	b.n	80061b0 <HAL_I2C_Master_Receive+0x4c4>
 80061ae:	2302      	movs	r3, #2
 80061b0:	4618      	mov	r0, r3
 80061b2:	3728      	adds	r7, #40	@ 0x28
 80061b4:	46bd      	mov	sp, r7
 80061b6:	bd80      	pop	{r7, pc}
 80061b8:	00010004 	.word	0x00010004
 80061bc:	20000024 	.word	0x20000024
 80061c0:	14f8b589 	.word	0x14f8b589

080061c4 <HAL_I2C_IsDeviceReady>:
 80061c4:	b580      	push	{r7, lr}
 80061c6:	b08a      	sub	sp, #40	@ 0x28
 80061c8:	af02      	add	r7, sp, #8
 80061ca:	60f8      	str	r0, [r7, #12]
 80061cc:	607a      	str	r2, [r7, #4]
 80061ce:	603b      	str	r3, [r7, #0]
 80061d0:	460b      	mov	r3, r1
 80061d2:	817b      	strh	r3, [r7, #10]
 80061d4:	f7fe f8cc 	bl	8004370 <HAL_GetTick>
 80061d8:	61f8      	str	r0, [r7, #28]
 80061da:	2300      	movs	r3, #0
 80061dc:	61bb      	str	r3, [r7, #24]
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80061e4:	b2db      	uxtb	r3, r3
 80061e6:	2b20      	cmp	r3, #32
 80061e8:	f040 8111 	bne.w	800640e <HAL_I2C_IsDeviceReady+0x24a>
 80061ec:	69fb      	ldr	r3, [r7, #28]
 80061ee:	9300      	str	r3, [sp, #0]
 80061f0:	2319      	movs	r3, #25
 80061f2:	2201      	movs	r2, #1
 80061f4:	4988      	ldr	r1, [pc, #544]	@ (8006418 <HAL_I2C_IsDeviceReady+0x254>)
 80061f6:	68f8      	ldr	r0, [r7, #12]
 80061f8:	f000 f9e0 	bl	80065bc <I2C_WaitOnFlagUntilTimeout>
 80061fc:	4603      	mov	r3, r0
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d001      	beq.n	8006206 <HAL_I2C_IsDeviceReady+0x42>
 8006202:	2302      	movs	r3, #2
 8006204:	e104      	b.n	8006410 <HAL_I2C_IsDeviceReady+0x24c>
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800620c:	2b01      	cmp	r3, #1
 800620e:	d101      	bne.n	8006214 <HAL_I2C_IsDeviceReady+0x50>
 8006210:	2302      	movs	r3, #2
 8006212:	e0fd      	b.n	8006410 <HAL_I2C_IsDeviceReady+0x24c>
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	2201      	movs	r2, #1
 8006218:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	f003 0301 	and.w	r3, r3, #1
 8006226:	2b01      	cmp	r3, #1
 8006228:	d007      	beq.n	800623a <HAL_I2C_IsDeviceReady+0x76>
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	681a      	ldr	r2, [r3, #0]
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	f042 0201 	orr.w	r2, r2, #1
 8006238:	601a      	str	r2, [r3, #0]
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	681a      	ldr	r2, [r3, #0]
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006248:	601a      	str	r2, [r3, #0]
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	2224      	movs	r2, #36	@ 0x24
 800624e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	2200      	movs	r2, #0
 8006256:	641a      	str	r2, [r3, #64]	@ 0x40
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	4a70      	ldr	r2, [pc, #448]	@ (800641c <HAL_I2C_IsDeviceReady+0x258>)
 800625c:	62da      	str	r2, [r3, #44]	@ 0x2c
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	681a      	ldr	r2, [r3, #0]
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800626c:	601a      	str	r2, [r3, #0]
 800626e:	69fb      	ldr	r3, [r7, #28]
 8006270:	9300      	str	r3, [sp, #0]
 8006272:	683b      	ldr	r3, [r7, #0]
 8006274:	2200      	movs	r2, #0
 8006276:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800627a:	68f8      	ldr	r0, [r7, #12]
 800627c:	f000 f99e 	bl	80065bc <I2C_WaitOnFlagUntilTimeout>
 8006280:	4603      	mov	r3, r0
 8006282:	2b00      	cmp	r3, #0
 8006284:	d00d      	beq.n	80062a2 <HAL_I2C_IsDeviceReady+0xde>
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006290:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006294:	d103      	bne.n	800629e <HAL_I2C_IsDeviceReady+0xda>
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800629c:	641a      	str	r2, [r3, #64]	@ 0x40
 800629e:	2303      	movs	r3, #3
 80062a0:	e0b6      	b.n	8006410 <HAL_I2C_IsDeviceReady+0x24c>
 80062a2:	897b      	ldrh	r3, [r7, #10]
 80062a4:	b2db      	uxtb	r3, r3
 80062a6:	461a      	mov	r2, r3
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80062b0:	611a      	str	r2, [r3, #16]
 80062b2:	f7fe f85d 	bl	8004370 <HAL_GetTick>
 80062b6:	61f8      	str	r0, [r7, #28]
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	695b      	ldr	r3, [r3, #20]
 80062be:	f003 0302 	and.w	r3, r3, #2
 80062c2:	2b02      	cmp	r3, #2
 80062c4:	bf0c      	ite	eq
 80062c6:	2301      	moveq	r3, #1
 80062c8:	2300      	movne	r3, #0
 80062ca:	b2db      	uxtb	r3, r3
 80062cc:	75fb      	strb	r3, [r7, #23]
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	695b      	ldr	r3, [r3, #20]
 80062d4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80062d8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80062dc:	bf0c      	ite	eq
 80062de:	2301      	moveq	r3, #1
 80062e0:	2300      	movne	r3, #0
 80062e2:	b2db      	uxtb	r3, r3
 80062e4:	75bb      	strb	r3, [r7, #22]
 80062e6:	e025      	b.n	8006334 <HAL_I2C_IsDeviceReady+0x170>
 80062e8:	f7fe f842 	bl	8004370 <HAL_GetTick>
 80062ec:	4602      	mov	r2, r0
 80062ee:	69fb      	ldr	r3, [r7, #28]
 80062f0:	1ad3      	subs	r3, r2, r3
 80062f2:	683a      	ldr	r2, [r7, #0]
 80062f4:	429a      	cmp	r2, r3
 80062f6:	d302      	bcc.n	80062fe <HAL_I2C_IsDeviceReady+0x13a>
 80062f8:	683b      	ldr	r3, [r7, #0]
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d103      	bne.n	8006306 <HAL_I2C_IsDeviceReady+0x142>
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	22a0      	movs	r2, #160	@ 0xa0
 8006302:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	695b      	ldr	r3, [r3, #20]
 800630c:	f003 0302 	and.w	r3, r3, #2
 8006310:	2b02      	cmp	r3, #2
 8006312:	bf0c      	ite	eq
 8006314:	2301      	moveq	r3, #1
 8006316:	2300      	movne	r3, #0
 8006318:	b2db      	uxtb	r3, r3
 800631a:	75fb      	strb	r3, [r7, #23]
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	695b      	ldr	r3, [r3, #20]
 8006322:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006326:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800632a:	bf0c      	ite	eq
 800632c:	2301      	moveq	r3, #1
 800632e:	2300      	movne	r3, #0
 8006330:	b2db      	uxtb	r3, r3
 8006332:	75bb      	strb	r3, [r7, #22]
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800633a:	b2db      	uxtb	r3, r3
 800633c:	2ba0      	cmp	r3, #160	@ 0xa0
 800633e:	d005      	beq.n	800634c <HAL_I2C_IsDeviceReady+0x188>
 8006340:	7dfb      	ldrb	r3, [r7, #23]
 8006342:	2b00      	cmp	r3, #0
 8006344:	d102      	bne.n	800634c <HAL_I2C_IsDeviceReady+0x188>
 8006346:	7dbb      	ldrb	r3, [r7, #22]
 8006348:	2b00      	cmp	r3, #0
 800634a:	d0cd      	beq.n	80062e8 <HAL_I2C_IsDeviceReady+0x124>
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	2220      	movs	r2, #32
 8006350:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	695b      	ldr	r3, [r3, #20]
 800635a:	f003 0302 	and.w	r3, r3, #2
 800635e:	2b02      	cmp	r3, #2
 8006360:	d129      	bne.n	80063b6 <HAL_I2C_IsDeviceReady+0x1f2>
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	681a      	ldr	r2, [r3, #0]
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006370:	601a      	str	r2, [r3, #0]
 8006372:	2300      	movs	r3, #0
 8006374:	613b      	str	r3, [r7, #16]
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	695b      	ldr	r3, [r3, #20]
 800637c:	613b      	str	r3, [r7, #16]
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	699b      	ldr	r3, [r3, #24]
 8006384:	613b      	str	r3, [r7, #16]
 8006386:	693b      	ldr	r3, [r7, #16]
 8006388:	69fb      	ldr	r3, [r7, #28]
 800638a:	9300      	str	r3, [sp, #0]
 800638c:	2319      	movs	r3, #25
 800638e:	2201      	movs	r2, #1
 8006390:	4921      	ldr	r1, [pc, #132]	@ (8006418 <HAL_I2C_IsDeviceReady+0x254>)
 8006392:	68f8      	ldr	r0, [r7, #12]
 8006394:	f000 f912 	bl	80065bc <I2C_WaitOnFlagUntilTimeout>
 8006398:	4603      	mov	r3, r0
 800639a:	2b00      	cmp	r3, #0
 800639c:	d001      	beq.n	80063a2 <HAL_I2C_IsDeviceReady+0x1de>
 800639e:	2301      	movs	r3, #1
 80063a0:	e036      	b.n	8006410 <HAL_I2C_IsDeviceReady+0x24c>
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	2220      	movs	r2, #32
 80063a6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	2200      	movs	r2, #0
 80063ae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 80063b2:	2300      	movs	r3, #0
 80063b4:	e02c      	b.n	8006410 <HAL_I2C_IsDeviceReady+0x24c>
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	681a      	ldr	r2, [r3, #0]
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80063c4:	601a      	str	r2, [r3, #0]
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80063ce:	615a      	str	r2, [r3, #20]
 80063d0:	69fb      	ldr	r3, [r7, #28]
 80063d2:	9300      	str	r3, [sp, #0]
 80063d4:	2319      	movs	r3, #25
 80063d6:	2201      	movs	r2, #1
 80063d8:	490f      	ldr	r1, [pc, #60]	@ (8006418 <HAL_I2C_IsDeviceReady+0x254>)
 80063da:	68f8      	ldr	r0, [r7, #12]
 80063dc:	f000 f8ee 	bl	80065bc <I2C_WaitOnFlagUntilTimeout>
 80063e0:	4603      	mov	r3, r0
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d001      	beq.n	80063ea <HAL_I2C_IsDeviceReady+0x226>
 80063e6:	2301      	movs	r3, #1
 80063e8:	e012      	b.n	8006410 <HAL_I2C_IsDeviceReady+0x24c>
 80063ea:	69bb      	ldr	r3, [r7, #24]
 80063ec:	3301      	adds	r3, #1
 80063ee:	61bb      	str	r3, [r7, #24]
 80063f0:	69ba      	ldr	r2, [r7, #24]
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	429a      	cmp	r2, r3
 80063f6:	f4ff af32 	bcc.w	800625e <HAL_I2C_IsDeviceReady+0x9a>
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	2220      	movs	r2, #32
 80063fe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	2200      	movs	r2, #0
 8006406:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 800640a:	2301      	movs	r3, #1
 800640c:	e000      	b.n	8006410 <HAL_I2C_IsDeviceReady+0x24c>
 800640e:	2302      	movs	r3, #2
 8006410:	4618      	mov	r0, r3
 8006412:	3720      	adds	r7, #32
 8006414:	46bd      	mov	sp, r7
 8006416:	bd80      	pop	{r7, pc}
 8006418:	00100002 	.word	0x00100002
 800641c:	ffff0000 	.word	0xffff0000

08006420 <I2C_MasterRequestRead>:
 8006420:	b580      	push	{r7, lr}
 8006422:	b088      	sub	sp, #32
 8006424:	af02      	add	r7, sp, #8
 8006426:	60f8      	str	r0, [r7, #12]
 8006428:	607a      	str	r2, [r7, #4]
 800642a:	603b      	str	r3, [r7, #0]
 800642c:	460b      	mov	r3, r1
 800642e:	817b      	strh	r3, [r7, #10]
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006434:	617b      	str	r3, [r7, #20]
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	681a      	ldr	r2, [r3, #0]
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8006444:	601a      	str	r2, [r3, #0]
 8006446:	697b      	ldr	r3, [r7, #20]
 8006448:	2b08      	cmp	r3, #8
 800644a:	d006      	beq.n	800645a <I2C_MasterRequestRead+0x3a>
 800644c:	697b      	ldr	r3, [r7, #20]
 800644e:	2b01      	cmp	r3, #1
 8006450:	d003      	beq.n	800645a <I2C_MasterRequestRead+0x3a>
 8006452:	697b      	ldr	r3, [r7, #20]
 8006454:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8006458:	d108      	bne.n	800646c <I2C_MasterRequestRead+0x4c>
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	681a      	ldr	r2, [r3, #0]
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006468:	601a      	str	r2, [r3, #0]
 800646a:	e00b      	b.n	8006484 <I2C_MasterRequestRead+0x64>
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006470:	2b11      	cmp	r3, #17
 8006472:	d107      	bne.n	8006484 <I2C_MasterRequestRead+0x64>
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	681a      	ldr	r2, [r3, #0]
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006482:	601a      	str	r2, [r3, #0]
 8006484:	683b      	ldr	r3, [r7, #0]
 8006486:	9300      	str	r3, [sp, #0]
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	2200      	movs	r2, #0
 800648c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8006490:	68f8      	ldr	r0, [r7, #12]
 8006492:	f000 f893 	bl	80065bc <I2C_WaitOnFlagUntilTimeout>
 8006496:	4603      	mov	r3, r0
 8006498:	2b00      	cmp	r3, #0
 800649a:	d00d      	beq.n	80064b8 <I2C_MasterRequestRead+0x98>
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80064a6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80064aa:	d103      	bne.n	80064b4 <I2C_MasterRequestRead+0x94>
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80064b2:	641a      	str	r2, [r3, #64]	@ 0x40
 80064b4:	2303      	movs	r3, #3
 80064b6:	e079      	b.n	80065ac <I2C_MasterRequestRead+0x18c>
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	691b      	ldr	r3, [r3, #16]
 80064bc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80064c0:	d108      	bne.n	80064d4 <I2C_MasterRequestRead+0xb4>
 80064c2:	897b      	ldrh	r3, [r7, #10]
 80064c4:	b2db      	uxtb	r3, r3
 80064c6:	f043 0301 	orr.w	r3, r3, #1
 80064ca:	b2da      	uxtb	r2, r3
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	611a      	str	r2, [r3, #16]
 80064d2:	e05f      	b.n	8006594 <I2C_MasterRequestRead+0x174>
 80064d4:	897b      	ldrh	r3, [r7, #10]
 80064d6:	11db      	asrs	r3, r3, #7
 80064d8:	b2db      	uxtb	r3, r3
 80064da:	f003 0306 	and.w	r3, r3, #6
 80064de:	b2db      	uxtb	r3, r3
 80064e0:	f063 030f 	orn	r3, r3, #15
 80064e4:	b2da      	uxtb	r2, r3
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	611a      	str	r2, [r3, #16]
 80064ec:	683b      	ldr	r3, [r7, #0]
 80064ee:	687a      	ldr	r2, [r7, #4]
 80064f0:	4930      	ldr	r1, [pc, #192]	@ (80065b4 <I2C_MasterRequestRead+0x194>)
 80064f2:	68f8      	ldr	r0, [r7, #12]
 80064f4:	f000 f8dc 	bl	80066b0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80064f8:	4603      	mov	r3, r0
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d001      	beq.n	8006502 <I2C_MasterRequestRead+0xe2>
 80064fe:	2301      	movs	r3, #1
 8006500:	e054      	b.n	80065ac <I2C_MasterRequestRead+0x18c>
 8006502:	897b      	ldrh	r3, [r7, #10]
 8006504:	b2da      	uxtb	r2, r3
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	611a      	str	r2, [r3, #16]
 800650c:	683b      	ldr	r3, [r7, #0]
 800650e:	687a      	ldr	r2, [r7, #4]
 8006510:	4929      	ldr	r1, [pc, #164]	@ (80065b8 <I2C_MasterRequestRead+0x198>)
 8006512:	68f8      	ldr	r0, [r7, #12]
 8006514:	f000 f8cc 	bl	80066b0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006518:	4603      	mov	r3, r0
 800651a:	2b00      	cmp	r3, #0
 800651c:	d001      	beq.n	8006522 <I2C_MasterRequestRead+0x102>
 800651e:	2301      	movs	r3, #1
 8006520:	e044      	b.n	80065ac <I2C_MasterRequestRead+0x18c>
 8006522:	2300      	movs	r3, #0
 8006524:	613b      	str	r3, [r7, #16]
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	695b      	ldr	r3, [r3, #20]
 800652c:	613b      	str	r3, [r7, #16]
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	699b      	ldr	r3, [r3, #24]
 8006534:	613b      	str	r3, [r7, #16]
 8006536:	693b      	ldr	r3, [r7, #16]
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	681a      	ldr	r2, [r3, #0]
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006546:	601a      	str	r2, [r3, #0]
 8006548:	683b      	ldr	r3, [r7, #0]
 800654a:	9300      	str	r3, [sp, #0]
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	2200      	movs	r2, #0
 8006550:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8006554:	68f8      	ldr	r0, [r7, #12]
 8006556:	f000 f831 	bl	80065bc <I2C_WaitOnFlagUntilTimeout>
 800655a:	4603      	mov	r3, r0
 800655c:	2b00      	cmp	r3, #0
 800655e:	d00d      	beq.n	800657c <I2C_MasterRequestRead+0x15c>
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800656a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800656e:	d103      	bne.n	8006578 <I2C_MasterRequestRead+0x158>
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006576:	641a      	str	r2, [r3, #64]	@ 0x40
 8006578:	2303      	movs	r3, #3
 800657a:	e017      	b.n	80065ac <I2C_MasterRequestRead+0x18c>
 800657c:	897b      	ldrh	r3, [r7, #10]
 800657e:	11db      	asrs	r3, r3, #7
 8006580:	b2db      	uxtb	r3, r3
 8006582:	f003 0306 	and.w	r3, r3, #6
 8006586:	b2db      	uxtb	r3, r3
 8006588:	f063 030e 	orn	r3, r3, #14
 800658c:	b2da      	uxtb	r2, r3
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	611a      	str	r2, [r3, #16]
 8006594:	683b      	ldr	r3, [r7, #0]
 8006596:	687a      	ldr	r2, [r7, #4]
 8006598:	4907      	ldr	r1, [pc, #28]	@ (80065b8 <I2C_MasterRequestRead+0x198>)
 800659a:	68f8      	ldr	r0, [r7, #12]
 800659c:	f000 f888 	bl	80066b0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80065a0:	4603      	mov	r3, r0
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d001      	beq.n	80065aa <I2C_MasterRequestRead+0x18a>
 80065a6:	2301      	movs	r3, #1
 80065a8:	e000      	b.n	80065ac <I2C_MasterRequestRead+0x18c>
 80065aa:	2300      	movs	r3, #0
 80065ac:	4618      	mov	r0, r3
 80065ae:	3718      	adds	r7, #24
 80065b0:	46bd      	mov	sp, r7
 80065b2:	bd80      	pop	{r7, pc}
 80065b4:	00010008 	.word	0x00010008
 80065b8:	00010002 	.word	0x00010002

080065bc <I2C_WaitOnFlagUntilTimeout>:
 80065bc:	b580      	push	{r7, lr}
 80065be:	b084      	sub	sp, #16
 80065c0:	af00      	add	r7, sp, #0
 80065c2:	60f8      	str	r0, [r7, #12]
 80065c4:	60b9      	str	r1, [r7, #8]
 80065c6:	603b      	str	r3, [r7, #0]
 80065c8:	4613      	mov	r3, r2
 80065ca:	71fb      	strb	r3, [r7, #7]
 80065cc:	e048      	b.n	8006660 <I2C_WaitOnFlagUntilTimeout+0xa4>
 80065ce:	683b      	ldr	r3, [r7, #0]
 80065d0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80065d4:	d044      	beq.n	8006660 <I2C_WaitOnFlagUntilTimeout+0xa4>
 80065d6:	f7fd fecb 	bl	8004370 <HAL_GetTick>
 80065da:	4602      	mov	r2, r0
 80065dc:	69bb      	ldr	r3, [r7, #24]
 80065de:	1ad3      	subs	r3, r2, r3
 80065e0:	683a      	ldr	r2, [r7, #0]
 80065e2:	429a      	cmp	r2, r3
 80065e4:	d302      	bcc.n	80065ec <I2C_WaitOnFlagUntilTimeout+0x30>
 80065e6:	683b      	ldr	r3, [r7, #0]
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d139      	bne.n	8006660 <I2C_WaitOnFlagUntilTimeout+0xa4>
 80065ec:	68bb      	ldr	r3, [r7, #8]
 80065ee:	0c1b      	lsrs	r3, r3, #16
 80065f0:	b2db      	uxtb	r3, r3
 80065f2:	2b01      	cmp	r3, #1
 80065f4:	d10d      	bne.n	8006612 <I2C_WaitOnFlagUntilTimeout+0x56>
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	695b      	ldr	r3, [r3, #20]
 80065fc:	43da      	mvns	r2, r3
 80065fe:	68bb      	ldr	r3, [r7, #8]
 8006600:	4013      	ands	r3, r2
 8006602:	b29b      	uxth	r3, r3
 8006604:	2b00      	cmp	r3, #0
 8006606:	bf0c      	ite	eq
 8006608:	2301      	moveq	r3, #1
 800660a:	2300      	movne	r3, #0
 800660c:	b2db      	uxtb	r3, r3
 800660e:	461a      	mov	r2, r3
 8006610:	e00c      	b.n	800662c <I2C_WaitOnFlagUntilTimeout+0x70>
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	699b      	ldr	r3, [r3, #24]
 8006618:	43da      	mvns	r2, r3
 800661a:	68bb      	ldr	r3, [r7, #8]
 800661c:	4013      	ands	r3, r2
 800661e:	b29b      	uxth	r3, r3
 8006620:	2b00      	cmp	r3, #0
 8006622:	bf0c      	ite	eq
 8006624:	2301      	moveq	r3, #1
 8006626:	2300      	movne	r3, #0
 8006628:	b2db      	uxtb	r3, r3
 800662a:	461a      	mov	r2, r3
 800662c:	79fb      	ldrb	r3, [r7, #7]
 800662e:	429a      	cmp	r2, r3
 8006630:	d116      	bne.n	8006660 <I2C_WaitOnFlagUntilTimeout+0xa4>
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	2200      	movs	r2, #0
 8006636:	631a      	str	r2, [r3, #48]	@ 0x30
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	2220      	movs	r2, #32
 800663c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	2200      	movs	r2, #0
 8006644:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800664c:	f043 0220 	orr.w	r2, r3, #32
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	641a      	str	r2, [r3, #64]	@ 0x40
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	2200      	movs	r2, #0
 8006658:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 800665c:	2301      	movs	r3, #1
 800665e:	e023      	b.n	80066a8 <I2C_WaitOnFlagUntilTimeout+0xec>
 8006660:	68bb      	ldr	r3, [r7, #8]
 8006662:	0c1b      	lsrs	r3, r3, #16
 8006664:	b2db      	uxtb	r3, r3
 8006666:	2b01      	cmp	r3, #1
 8006668:	d10d      	bne.n	8006686 <I2C_WaitOnFlagUntilTimeout+0xca>
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	695b      	ldr	r3, [r3, #20]
 8006670:	43da      	mvns	r2, r3
 8006672:	68bb      	ldr	r3, [r7, #8]
 8006674:	4013      	ands	r3, r2
 8006676:	b29b      	uxth	r3, r3
 8006678:	2b00      	cmp	r3, #0
 800667a:	bf0c      	ite	eq
 800667c:	2301      	moveq	r3, #1
 800667e:	2300      	movne	r3, #0
 8006680:	b2db      	uxtb	r3, r3
 8006682:	461a      	mov	r2, r3
 8006684:	e00c      	b.n	80066a0 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	699b      	ldr	r3, [r3, #24]
 800668c:	43da      	mvns	r2, r3
 800668e:	68bb      	ldr	r3, [r7, #8]
 8006690:	4013      	ands	r3, r2
 8006692:	b29b      	uxth	r3, r3
 8006694:	2b00      	cmp	r3, #0
 8006696:	bf0c      	ite	eq
 8006698:	2301      	moveq	r3, #1
 800669a:	2300      	movne	r3, #0
 800669c:	b2db      	uxtb	r3, r3
 800669e:	461a      	mov	r2, r3
 80066a0:	79fb      	ldrb	r3, [r7, #7]
 80066a2:	429a      	cmp	r2, r3
 80066a4:	d093      	beq.n	80065ce <I2C_WaitOnFlagUntilTimeout+0x12>
 80066a6:	2300      	movs	r3, #0
 80066a8:	4618      	mov	r0, r3
 80066aa:	3710      	adds	r7, #16
 80066ac:	46bd      	mov	sp, r7
 80066ae:	bd80      	pop	{r7, pc}

080066b0 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
 80066b0:	b580      	push	{r7, lr}
 80066b2:	b084      	sub	sp, #16
 80066b4:	af00      	add	r7, sp, #0
 80066b6:	60f8      	str	r0, [r7, #12]
 80066b8:	60b9      	str	r1, [r7, #8]
 80066ba:	607a      	str	r2, [r7, #4]
 80066bc:	603b      	str	r3, [r7, #0]
 80066be:	e071      	b.n	80067a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	695b      	ldr	r3, [r3, #20]
 80066c6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80066ca:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80066ce:	d123      	bne.n	8006718 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	681a      	ldr	r2, [r3, #0]
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80066de:	601a      	str	r2, [r3, #0]
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80066e8:	615a      	str	r2, [r3, #20]
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	2200      	movs	r2, #0
 80066ee:	631a      	str	r2, [r3, #48]	@ 0x30
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	2220      	movs	r2, #32
 80066f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	2200      	movs	r2, #0
 80066fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006704:	f043 0204 	orr.w	r2, r3, #4
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	641a      	str	r2, [r3, #64]	@ 0x40
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	2200      	movs	r2, #0
 8006710:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8006714:	2301      	movs	r3, #1
 8006716:	e067      	b.n	80067e8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800671e:	d041      	beq.n	80067a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
 8006720:	f7fd fe26 	bl	8004370 <HAL_GetTick>
 8006724:	4602      	mov	r2, r0
 8006726:	683b      	ldr	r3, [r7, #0]
 8006728:	1ad3      	subs	r3, r2, r3
 800672a:	687a      	ldr	r2, [r7, #4]
 800672c:	429a      	cmp	r2, r3
 800672e:	d302      	bcc.n	8006736 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	2b00      	cmp	r3, #0
 8006734:	d136      	bne.n	80067a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
 8006736:	68bb      	ldr	r3, [r7, #8]
 8006738:	0c1b      	lsrs	r3, r3, #16
 800673a:	b2db      	uxtb	r3, r3
 800673c:	2b01      	cmp	r3, #1
 800673e:	d10c      	bne.n	800675a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	695b      	ldr	r3, [r3, #20]
 8006746:	43da      	mvns	r2, r3
 8006748:	68bb      	ldr	r3, [r7, #8]
 800674a:	4013      	ands	r3, r2
 800674c:	b29b      	uxth	r3, r3
 800674e:	2b00      	cmp	r3, #0
 8006750:	bf14      	ite	ne
 8006752:	2301      	movne	r3, #1
 8006754:	2300      	moveq	r3, #0
 8006756:	b2db      	uxtb	r3, r3
 8006758:	e00b      	b.n	8006772 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	699b      	ldr	r3, [r3, #24]
 8006760:	43da      	mvns	r2, r3
 8006762:	68bb      	ldr	r3, [r7, #8]
 8006764:	4013      	ands	r3, r2
 8006766:	b29b      	uxth	r3, r3
 8006768:	2b00      	cmp	r3, #0
 800676a:	bf14      	ite	ne
 800676c:	2301      	movne	r3, #1
 800676e:	2300      	moveq	r3, #0
 8006770:	b2db      	uxtb	r3, r3
 8006772:	2b00      	cmp	r3, #0
 8006774:	d016      	beq.n	80067a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	2200      	movs	r2, #0
 800677a:	631a      	str	r2, [r3, #48]	@ 0x30
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	2220      	movs	r2, #32
 8006780:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	2200      	movs	r2, #0
 8006788:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006790:	f043 0220 	orr.w	r2, r3, #32
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	641a      	str	r2, [r3, #64]	@ 0x40
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	2200      	movs	r2, #0
 800679c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 80067a0:	2301      	movs	r3, #1
 80067a2:	e021      	b.n	80067e8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
 80067a4:	68bb      	ldr	r3, [r7, #8]
 80067a6:	0c1b      	lsrs	r3, r3, #16
 80067a8:	b2db      	uxtb	r3, r3
 80067aa:	2b01      	cmp	r3, #1
 80067ac:	d10c      	bne.n	80067c8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	695b      	ldr	r3, [r3, #20]
 80067b4:	43da      	mvns	r2, r3
 80067b6:	68bb      	ldr	r3, [r7, #8]
 80067b8:	4013      	ands	r3, r2
 80067ba:	b29b      	uxth	r3, r3
 80067bc:	2b00      	cmp	r3, #0
 80067be:	bf14      	ite	ne
 80067c0:	2301      	movne	r3, #1
 80067c2:	2300      	moveq	r3, #0
 80067c4:	b2db      	uxtb	r3, r3
 80067c6:	e00b      	b.n	80067e0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	699b      	ldr	r3, [r3, #24]
 80067ce:	43da      	mvns	r2, r3
 80067d0:	68bb      	ldr	r3, [r7, #8]
 80067d2:	4013      	ands	r3, r2
 80067d4:	b29b      	uxth	r3, r3
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	bf14      	ite	ne
 80067da:	2301      	movne	r3, #1
 80067dc:	2300      	moveq	r3, #0
 80067de:	b2db      	uxtb	r3, r3
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	f47f af6d 	bne.w	80066c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
 80067e6:	2300      	movs	r3, #0
 80067e8:	4618      	mov	r0, r3
 80067ea:	3710      	adds	r7, #16
 80067ec:	46bd      	mov	sp, r7
 80067ee:	bd80      	pop	{r7, pc}

080067f0 <I2C_WaitOnRXNEFlagUntilTimeout>:
 80067f0:	b580      	push	{r7, lr}
 80067f2:	b084      	sub	sp, #16
 80067f4:	af00      	add	r7, sp, #0
 80067f6:	60f8      	str	r0, [r7, #12]
 80067f8:	60b9      	str	r1, [r7, #8]
 80067fa:	607a      	str	r2, [r7, #4]
 80067fc:	e049      	b.n	8006892 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	695b      	ldr	r3, [r3, #20]
 8006804:	f003 0310 	and.w	r3, r3, #16
 8006808:	2b10      	cmp	r3, #16
 800680a:	d119      	bne.n	8006840 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	f06f 0210 	mvn.w	r2, #16
 8006814:	615a      	str	r2, [r3, #20]
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	2200      	movs	r2, #0
 800681a:	631a      	str	r2, [r3, #48]	@ 0x30
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	2220      	movs	r2, #32
 8006820:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	2200      	movs	r2, #0
 8006828:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	641a      	str	r2, [r3, #64]	@ 0x40
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	2200      	movs	r2, #0
 8006838:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 800683c:	2301      	movs	r3, #1
 800683e:	e030      	b.n	80068a2 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
 8006840:	f7fd fd96 	bl	8004370 <HAL_GetTick>
 8006844:	4602      	mov	r2, r0
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	1ad3      	subs	r3, r2, r3
 800684a:	68ba      	ldr	r2, [r7, #8]
 800684c:	429a      	cmp	r2, r3
 800684e:	d302      	bcc.n	8006856 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8006850:	68bb      	ldr	r3, [r7, #8]
 8006852:	2b00      	cmp	r3, #0
 8006854:	d11d      	bne.n	8006892 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	695b      	ldr	r3, [r3, #20]
 800685c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006860:	2b40      	cmp	r3, #64	@ 0x40
 8006862:	d016      	beq.n	8006892 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	2200      	movs	r2, #0
 8006868:	631a      	str	r2, [r3, #48]	@ 0x30
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	2220      	movs	r2, #32
 800686e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	2200      	movs	r2, #0
 8006876:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800687e:	f043 0220 	orr.w	r2, r3, #32
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	641a      	str	r2, [r3, #64]	@ 0x40
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	2200      	movs	r2, #0
 800688a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 800688e:	2301      	movs	r3, #1
 8006890:	e007      	b.n	80068a2 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	695b      	ldr	r3, [r3, #20]
 8006898:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800689c:	2b40      	cmp	r3, #64	@ 0x40
 800689e:	d1ae      	bne.n	80067fe <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
 80068a0:	2300      	movs	r3, #0
 80068a2:	4618      	mov	r0, r3
 80068a4:	3710      	adds	r7, #16
 80068a6:	46bd      	mov	sp, r7
 80068a8:	bd80      	pop	{r7, pc}
	...

080068ac <HAL_RCC_OscConfig>:
 80068ac:	b580      	push	{r7, lr}
 80068ae:	b086      	sub	sp, #24
 80068b0:	af00      	add	r7, sp, #0
 80068b2:	6078      	str	r0, [r7, #4]
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d101      	bne.n	80068be <HAL_RCC_OscConfig+0x12>
 80068ba:	2301      	movs	r3, #1
 80068bc:	e272      	b.n	8006da4 <HAL_RCC_OscConfig+0x4f8>
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	f003 0301 	and.w	r3, r3, #1
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	f000 8087 	beq.w	80069da <HAL_RCC_OscConfig+0x12e>
 80068cc:	4b92      	ldr	r3, [pc, #584]	@ (8006b18 <HAL_RCC_OscConfig+0x26c>)
 80068ce:	685b      	ldr	r3, [r3, #4]
 80068d0:	f003 030c 	and.w	r3, r3, #12
 80068d4:	2b04      	cmp	r3, #4
 80068d6:	d00c      	beq.n	80068f2 <HAL_RCC_OscConfig+0x46>
 80068d8:	4b8f      	ldr	r3, [pc, #572]	@ (8006b18 <HAL_RCC_OscConfig+0x26c>)
 80068da:	685b      	ldr	r3, [r3, #4]
 80068dc:	f003 030c 	and.w	r3, r3, #12
 80068e0:	2b08      	cmp	r3, #8
 80068e2:	d112      	bne.n	800690a <HAL_RCC_OscConfig+0x5e>
 80068e4:	4b8c      	ldr	r3, [pc, #560]	@ (8006b18 <HAL_RCC_OscConfig+0x26c>)
 80068e6:	685b      	ldr	r3, [r3, #4]
 80068e8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80068ec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80068f0:	d10b      	bne.n	800690a <HAL_RCC_OscConfig+0x5e>
 80068f2:	4b89      	ldr	r3, [pc, #548]	@ (8006b18 <HAL_RCC_OscConfig+0x26c>)
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d06c      	beq.n	80069d8 <HAL_RCC_OscConfig+0x12c>
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	685b      	ldr	r3, [r3, #4]
 8006902:	2b00      	cmp	r3, #0
 8006904:	d168      	bne.n	80069d8 <HAL_RCC_OscConfig+0x12c>
 8006906:	2301      	movs	r3, #1
 8006908:	e24c      	b.n	8006da4 <HAL_RCC_OscConfig+0x4f8>
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	685b      	ldr	r3, [r3, #4]
 800690e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006912:	d106      	bne.n	8006922 <HAL_RCC_OscConfig+0x76>
 8006914:	4b80      	ldr	r3, [pc, #512]	@ (8006b18 <HAL_RCC_OscConfig+0x26c>)
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	4a7f      	ldr	r2, [pc, #508]	@ (8006b18 <HAL_RCC_OscConfig+0x26c>)
 800691a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800691e:	6013      	str	r3, [r2, #0]
 8006920:	e02e      	b.n	8006980 <HAL_RCC_OscConfig+0xd4>
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	685b      	ldr	r3, [r3, #4]
 8006926:	2b00      	cmp	r3, #0
 8006928:	d10c      	bne.n	8006944 <HAL_RCC_OscConfig+0x98>
 800692a:	4b7b      	ldr	r3, [pc, #492]	@ (8006b18 <HAL_RCC_OscConfig+0x26c>)
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	4a7a      	ldr	r2, [pc, #488]	@ (8006b18 <HAL_RCC_OscConfig+0x26c>)
 8006930:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006934:	6013      	str	r3, [r2, #0]
 8006936:	4b78      	ldr	r3, [pc, #480]	@ (8006b18 <HAL_RCC_OscConfig+0x26c>)
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	4a77      	ldr	r2, [pc, #476]	@ (8006b18 <HAL_RCC_OscConfig+0x26c>)
 800693c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006940:	6013      	str	r3, [r2, #0]
 8006942:	e01d      	b.n	8006980 <HAL_RCC_OscConfig+0xd4>
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	685b      	ldr	r3, [r3, #4]
 8006948:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800694c:	d10c      	bne.n	8006968 <HAL_RCC_OscConfig+0xbc>
 800694e:	4b72      	ldr	r3, [pc, #456]	@ (8006b18 <HAL_RCC_OscConfig+0x26c>)
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	4a71      	ldr	r2, [pc, #452]	@ (8006b18 <HAL_RCC_OscConfig+0x26c>)
 8006954:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006958:	6013      	str	r3, [r2, #0]
 800695a:	4b6f      	ldr	r3, [pc, #444]	@ (8006b18 <HAL_RCC_OscConfig+0x26c>)
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	4a6e      	ldr	r2, [pc, #440]	@ (8006b18 <HAL_RCC_OscConfig+0x26c>)
 8006960:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006964:	6013      	str	r3, [r2, #0]
 8006966:	e00b      	b.n	8006980 <HAL_RCC_OscConfig+0xd4>
 8006968:	4b6b      	ldr	r3, [pc, #428]	@ (8006b18 <HAL_RCC_OscConfig+0x26c>)
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	4a6a      	ldr	r2, [pc, #424]	@ (8006b18 <HAL_RCC_OscConfig+0x26c>)
 800696e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006972:	6013      	str	r3, [r2, #0]
 8006974:	4b68      	ldr	r3, [pc, #416]	@ (8006b18 <HAL_RCC_OscConfig+0x26c>)
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	4a67      	ldr	r2, [pc, #412]	@ (8006b18 <HAL_RCC_OscConfig+0x26c>)
 800697a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800697e:	6013      	str	r3, [r2, #0]
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	685b      	ldr	r3, [r3, #4]
 8006984:	2b00      	cmp	r3, #0
 8006986:	d013      	beq.n	80069b0 <HAL_RCC_OscConfig+0x104>
 8006988:	f7fd fcf2 	bl	8004370 <HAL_GetTick>
 800698c:	6138      	str	r0, [r7, #16]
 800698e:	e008      	b.n	80069a2 <HAL_RCC_OscConfig+0xf6>
 8006990:	f7fd fcee 	bl	8004370 <HAL_GetTick>
 8006994:	4602      	mov	r2, r0
 8006996:	693b      	ldr	r3, [r7, #16]
 8006998:	1ad3      	subs	r3, r2, r3
 800699a:	2b64      	cmp	r3, #100	@ 0x64
 800699c:	d901      	bls.n	80069a2 <HAL_RCC_OscConfig+0xf6>
 800699e:	2303      	movs	r3, #3
 80069a0:	e200      	b.n	8006da4 <HAL_RCC_OscConfig+0x4f8>
 80069a2:	4b5d      	ldr	r3, [pc, #372]	@ (8006b18 <HAL_RCC_OscConfig+0x26c>)
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d0f0      	beq.n	8006990 <HAL_RCC_OscConfig+0xe4>
 80069ae:	e014      	b.n	80069da <HAL_RCC_OscConfig+0x12e>
 80069b0:	f7fd fcde 	bl	8004370 <HAL_GetTick>
 80069b4:	6138      	str	r0, [r7, #16]
 80069b6:	e008      	b.n	80069ca <HAL_RCC_OscConfig+0x11e>
 80069b8:	f7fd fcda 	bl	8004370 <HAL_GetTick>
 80069bc:	4602      	mov	r2, r0
 80069be:	693b      	ldr	r3, [r7, #16]
 80069c0:	1ad3      	subs	r3, r2, r3
 80069c2:	2b64      	cmp	r3, #100	@ 0x64
 80069c4:	d901      	bls.n	80069ca <HAL_RCC_OscConfig+0x11e>
 80069c6:	2303      	movs	r3, #3
 80069c8:	e1ec      	b.n	8006da4 <HAL_RCC_OscConfig+0x4f8>
 80069ca:	4b53      	ldr	r3, [pc, #332]	@ (8006b18 <HAL_RCC_OscConfig+0x26c>)
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d1f0      	bne.n	80069b8 <HAL_RCC_OscConfig+0x10c>
 80069d6:	e000      	b.n	80069da <HAL_RCC_OscConfig+0x12e>
 80069d8:	bf00      	nop
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	f003 0302 	and.w	r3, r3, #2
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d063      	beq.n	8006aae <HAL_RCC_OscConfig+0x202>
 80069e6:	4b4c      	ldr	r3, [pc, #304]	@ (8006b18 <HAL_RCC_OscConfig+0x26c>)
 80069e8:	685b      	ldr	r3, [r3, #4]
 80069ea:	f003 030c 	and.w	r3, r3, #12
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d00b      	beq.n	8006a0a <HAL_RCC_OscConfig+0x15e>
 80069f2:	4b49      	ldr	r3, [pc, #292]	@ (8006b18 <HAL_RCC_OscConfig+0x26c>)
 80069f4:	685b      	ldr	r3, [r3, #4]
 80069f6:	f003 030c 	and.w	r3, r3, #12
 80069fa:	2b08      	cmp	r3, #8
 80069fc:	d11c      	bne.n	8006a38 <HAL_RCC_OscConfig+0x18c>
 80069fe:	4b46      	ldr	r3, [pc, #280]	@ (8006b18 <HAL_RCC_OscConfig+0x26c>)
 8006a00:	685b      	ldr	r3, [r3, #4]
 8006a02:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d116      	bne.n	8006a38 <HAL_RCC_OscConfig+0x18c>
 8006a0a:	4b43      	ldr	r3, [pc, #268]	@ (8006b18 <HAL_RCC_OscConfig+0x26c>)
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	f003 0302 	and.w	r3, r3, #2
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d005      	beq.n	8006a22 <HAL_RCC_OscConfig+0x176>
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	691b      	ldr	r3, [r3, #16]
 8006a1a:	2b01      	cmp	r3, #1
 8006a1c:	d001      	beq.n	8006a22 <HAL_RCC_OscConfig+0x176>
 8006a1e:	2301      	movs	r3, #1
 8006a20:	e1c0      	b.n	8006da4 <HAL_RCC_OscConfig+0x4f8>
 8006a22:	4b3d      	ldr	r3, [pc, #244]	@ (8006b18 <HAL_RCC_OscConfig+0x26c>)
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	695b      	ldr	r3, [r3, #20]
 8006a2e:	00db      	lsls	r3, r3, #3
 8006a30:	4939      	ldr	r1, [pc, #228]	@ (8006b18 <HAL_RCC_OscConfig+0x26c>)
 8006a32:	4313      	orrs	r3, r2
 8006a34:	600b      	str	r3, [r1, #0]
 8006a36:	e03a      	b.n	8006aae <HAL_RCC_OscConfig+0x202>
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	691b      	ldr	r3, [r3, #16]
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d020      	beq.n	8006a82 <HAL_RCC_OscConfig+0x1d6>
 8006a40:	4b36      	ldr	r3, [pc, #216]	@ (8006b1c <HAL_RCC_OscConfig+0x270>)
 8006a42:	2201      	movs	r2, #1
 8006a44:	601a      	str	r2, [r3, #0]
 8006a46:	f7fd fc93 	bl	8004370 <HAL_GetTick>
 8006a4a:	6138      	str	r0, [r7, #16]
 8006a4c:	e008      	b.n	8006a60 <HAL_RCC_OscConfig+0x1b4>
 8006a4e:	f7fd fc8f 	bl	8004370 <HAL_GetTick>
 8006a52:	4602      	mov	r2, r0
 8006a54:	693b      	ldr	r3, [r7, #16]
 8006a56:	1ad3      	subs	r3, r2, r3
 8006a58:	2b02      	cmp	r3, #2
 8006a5a:	d901      	bls.n	8006a60 <HAL_RCC_OscConfig+0x1b4>
 8006a5c:	2303      	movs	r3, #3
 8006a5e:	e1a1      	b.n	8006da4 <HAL_RCC_OscConfig+0x4f8>
 8006a60:	4b2d      	ldr	r3, [pc, #180]	@ (8006b18 <HAL_RCC_OscConfig+0x26c>)
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	f003 0302 	and.w	r3, r3, #2
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d0f0      	beq.n	8006a4e <HAL_RCC_OscConfig+0x1a2>
 8006a6c:	4b2a      	ldr	r3, [pc, #168]	@ (8006b18 <HAL_RCC_OscConfig+0x26c>)
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	695b      	ldr	r3, [r3, #20]
 8006a78:	00db      	lsls	r3, r3, #3
 8006a7a:	4927      	ldr	r1, [pc, #156]	@ (8006b18 <HAL_RCC_OscConfig+0x26c>)
 8006a7c:	4313      	orrs	r3, r2
 8006a7e:	600b      	str	r3, [r1, #0]
 8006a80:	e015      	b.n	8006aae <HAL_RCC_OscConfig+0x202>
 8006a82:	4b26      	ldr	r3, [pc, #152]	@ (8006b1c <HAL_RCC_OscConfig+0x270>)
 8006a84:	2200      	movs	r2, #0
 8006a86:	601a      	str	r2, [r3, #0]
 8006a88:	f7fd fc72 	bl	8004370 <HAL_GetTick>
 8006a8c:	6138      	str	r0, [r7, #16]
 8006a8e:	e008      	b.n	8006aa2 <HAL_RCC_OscConfig+0x1f6>
 8006a90:	f7fd fc6e 	bl	8004370 <HAL_GetTick>
 8006a94:	4602      	mov	r2, r0
 8006a96:	693b      	ldr	r3, [r7, #16]
 8006a98:	1ad3      	subs	r3, r2, r3
 8006a9a:	2b02      	cmp	r3, #2
 8006a9c:	d901      	bls.n	8006aa2 <HAL_RCC_OscConfig+0x1f6>
 8006a9e:	2303      	movs	r3, #3
 8006aa0:	e180      	b.n	8006da4 <HAL_RCC_OscConfig+0x4f8>
 8006aa2:	4b1d      	ldr	r3, [pc, #116]	@ (8006b18 <HAL_RCC_OscConfig+0x26c>)
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	f003 0302 	and.w	r3, r3, #2
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d1f0      	bne.n	8006a90 <HAL_RCC_OscConfig+0x1e4>
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	f003 0308 	and.w	r3, r3, #8
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d03a      	beq.n	8006b30 <HAL_RCC_OscConfig+0x284>
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	699b      	ldr	r3, [r3, #24]
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d019      	beq.n	8006af6 <HAL_RCC_OscConfig+0x24a>
 8006ac2:	4b17      	ldr	r3, [pc, #92]	@ (8006b20 <HAL_RCC_OscConfig+0x274>)
 8006ac4:	2201      	movs	r2, #1
 8006ac6:	601a      	str	r2, [r3, #0]
 8006ac8:	f7fd fc52 	bl	8004370 <HAL_GetTick>
 8006acc:	6138      	str	r0, [r7, #16]
 8006ace:	e008      	b.n	8006ae2 <HAL_RCC_OscConfig+0x236>
 8006ad0:	f7fd fc4e 	bl	8004370 <HAL_GetTick>
 8006ad4:	4602      	mov	r2, r0
 8006ad6:	693b      	ldr	r3, [r7, #16]
 8006ad8:	1ad3      	subs	r3, r2, r3
 8006ada:	2b02      	cmp	r3, #2
 8006adc:	d901      	bls.n	8006ae2 <HAL_RCC_OscConfig+0x236>
 8006ade:	2303      	movs	r3, #3
 8006ae0:	e160      	b.n	8006da4 <HAL_RCC_OscConfig+0x4f8>
 8006ae2:	4b0d      	ldr	r3, [pc, #52]	@ (8006b18 <HAL_RCC_OscConfig+0x26c>)
 8006ae4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ae6:	f003 0302 	and.w	r3, r3, #2
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d0f0      	beq.n	8006ad0 <HAL_RCC_OscConfig+0x224>
 8006aee:	2001      	movs	r0, #1
 8006af0:	f000 face 	bl	8007090 <RCC_Delay>
 8006af4:	e01c      	b.n	8006b30 <HAL_RCC_OscConfig+0x284>
 8006af6:	4b0a      	ldr	r3, [pc, #40]	@ (8006b20 <HAL_RCC_OscConfig+0x274>)
 8006af8:	2200      	movs	r2, #0
 8006afa:	601a      	str	r2, [r3, #0]
 8006afc:	f7fd fc38 	bl	8004370 <HAL_GetTick>
 8006b00:	6138      	str	r0, [r7, #16]
 8006b02:	e00f      	b.n	8006b24 <HAL_RCC_OscConfig+0x278>
 8006b04:	f7fd fc34 	bl	8004370 <HAL_GetTick>
 8006b08:	4602      	mov	r2, r0
 8006b0a:	693b      	ldr	r3, [r7, #16]
 8006b0c:	1ad3      	subs	r3, r2, r3
 8006b0e:	2b02      	cmp	r3, #2
 8006b10:	d908      	bls.n	8006b24 <HAL_RCC_OscConfig+0x278>
 8006b12:	2303      	movs	r3, #3
 8006b14:	e146      	b.n	8006da4 <HAL_RCC_OscConfig+0x4f8>
 8006b16:	bf00      	nop
 8006b18:	40021000 	.word	0x40021000
 8006b1c:	42420000 	.word	0x42420000
 8006b20:	42420480 	.word	0x42420480
 8006b24:	4b92      	ldr	r3, [pc, #584]	@ (8006d70 <HAL_RCC_OscConfig+0x4c4>)
 8006b26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b28:	f003 0302 	and.w	r3, r3, #2
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d1e9      	bne.n	8006b04 <HAL_RCC_OscConfig+0x258>
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	f003 0304 	and.w	r3, r3, #4
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	f000 80a6 	beq.w	8006c8a <HAL_RCC_OscConfig+0x3de>
 8006b3e:	2300      	movs	r3, #0
 8006b40:	75fb      	strb	r3, [r7, #23]
 8006b42:	4b8b      	ldr	r3, [pc, #556]	@ (8006d70 <HAL_RCC_OscConfig+0x4c4>)
 8006b44:	69db      	ldr	r3, [r3, #28]
 8006b46:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d10d      	bne.n	8006b6a <HAL_RCC_OscConfig+0x2be>
 8006b4e:	4b88      	ldr	r3, [pc, #544]	@ (8006d70 <HAL_RCC_OscConfig+0x4c4>)
 8006b50:	69db      	ldr	r3, [r3, #28]
 8006b52:	4a87      	ldr	r2, [pc, #540]	@ (8006d70 <HAL_RCC_OscConfig+0x4c4>)
 8006b54:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006b58:	61d3      	str	r3, [r2, #28]
 8006b5a:	4b85      	ldr	r3, [pc, #532]	@ (8006d70 <HAL_RCC_OscConfig+0x4c4>)
 8006b5c:	69db      	ldr	r3, [r3, #28]
 8006b5e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006b62:	60bb      	str	r3, [r7, #8]
 8006b64:	68bb      	ldr	r3, [r7, #8]
 8006b66:	2301      	movs	r3, #1
 8006b68:	75fb      	strb	r3, [r7, #23]
 8006b6a:	4b82      	ldr	r3, [pc, #520]	@ (8006d74 <HAL_RCC_OscConfig+0x4c8>)
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d118      	bne.n	8006ba8 <HAL_RCC_OscConfig+0x2fc>
 8006b76:	4b7f      	ldr	r3, [pc, #508]	@ (8006d74 <HAL_RCC_OscConfig+0x4c8>)
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	4a7e      	ldr	r2, [pc, #504]	@ (8006d74 <HAL_RCC_OscConfig+0x4c8>)
 8006b7c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006b80:	6013      	str	r3, [r2, #0]
 8006b82:	f7fd fbf5 	bl	8004370 <HAL_GetTick>
 8006b86:	6138      	str	r0, [r7, #16]
 8006b88:	e008      	b.n	8006b9c <HAL_RCC_OscConfig+0x2f0>
 8006b8a:	f7fd fbf1 	bl	8004370 <HAL_GetTick>
 8006b8e:	4602      	mov	r2, r0
 8006b90:	693b      	ldr	r3, [r7, #16]
 8006b92:	1ad3      	subs	r3, r2, r3
 8006b94:	2b64      	cmp	r3, #100	@ 0x64
 8006b96:	d901      	bls.n	8006b9c <HAL_RCC_OscConfig+0x2f0>
 8006b98:	2303      	movs	r3, #3
 8006b9a:	e103      	b.n	8006da4 <HAL_RCC_OscConfig+0x4f8>
 8006b9c:	4b75      	ldr	r3, [pc, #468]	@ (8006d74 <HAL_RCC_OscConfig+0x4c8>)
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d0f0      	beq.n	8006b8a <HAL_RCC_OscConfig+0x2de>
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	68db      	ldr	r3, [r3, #12]
 8006bac:	2b01      	cmp	r3, #1
 8006bae:	d106      	bne.n	8006bbe <HAL_RCC_OscConfig+0x312>
 8006bb0:	4b6f      	ldr	r3, [pc, #444]	@ (8006d70 <HAL_RCC_OscConfig+0x4c4>)
 8006bb2:	6a1b      	ldr	r3, [r3, #32]
 8006bb4:	4a6e      	ldr	r2, [pc, #440]	@ (8006d70 <HAL_RCC_OscConfig+0x4c4>)
 8006bb6:	f043 0301 	orr.w	r3, r3, #1
 8006bba:	6213      	str	r3, [r2, #32]
 8006bbc:	e02d      	b.n	8006c1a <HAL_RCC_OscConfig+0x36e>
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	68db      	ldr	r3, [r3, #12]
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d10c      	bne.n	8006be0 <HAL_RCC_OscConfig+0x334>
 8006bc6:	4b6a      	ldr	r3, [pc, #424]	@ (8006d70 <HAL_RCC_OscConfig+0x4c4>)
 8006bc8:	6a1b      	ldr	r3, [r3, #32]
 8006bca:	4a69      	ldr	r2, [pc, #420]	@ (8006d70 <HAL_RCC_OscConfig+0x4c4>)
 8006bcc:	f023 0301 	bic.w	r3, r3, #1
 8006bd0:	6213      	str	r3, [r2, #32]
 8006bd2:	4b67      	ldr	r3, [pc, #412]	@ (8006d70 <HAL_RCC_OscConfig+0x4c4>)
 8006bd4:	6a1b      	ldr	r3, [r3, #32]
 8006bd6:	4a66      	ldr	r2, [pc, #408]	@ (8006d70 <HAL_RCC_OscConfig+0x4c4>)
 8006bd8:	f023 0304 	bic.w	r3, r3, #4
 8006bdc:	6213      	str	r3, [r2, #32]
 8006bde:	e01c      	b.n	8006c1a <HAL_RCC_OscConfig+0x36e>
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	68db      	ldr	r3, [r3, #12]
 8006be4:	2b05      	cmp	r3, #5
 8006be6:	d10c      	bne.n	8006c02 <HAL_RCC_OscConfig+0x356>
 8006be8:	4b61      	ldr	r3, [pc, #388]	@ (8006d70 <HAL_RCC_OscConfig+0x4c4>)
 8006bea:	6a1b      	ldr	r3, [r3, #32]
 8006bec:	4a60      	ldr	r2, [pc, #384]	@ (8006d70 <HAL_RCC_OscConfig+0x4c4>)
 8006bee:	f043 0304 	orr.w	r3, r3, #4
 8006bf2:	6213      	str	r3, [r2, #32]
 8006bf4:	4b5e      	ldr	r3, [pc, #376]	@ (8006d70 <HAL_RCC_OscConfig+0x4c4>)
 8006bf6:	6a1b      	ldr	r3, [r3, #32]
 8006bf8:	4a5d      	ldr	r2, [pc, #372]	@ (8006d70 <HAL_RCC_OscConfig+0x4c4>)
 8006bfa:	f043 0301 	orr.w	r3, r3, #1
 8006bfe:	6213      	str	r3, [r2, #32]
 8006c00:	e00b      	b.n	8006c1a <HAL_RCC_OscConfig+0x36e>
 8006c02:	4b5b      	ldr	r3, [pc, #364]	@ (8006d70 <HAL_RCC_OscConfig+0x4c4>)
 8006c04:	6a1b      	ldr	r3, [r3, #32]
 8006c06:	4a5a      	ldr	r2, [pc, #360]	@ (8006d70 <HAL_RCC_OscConfig+0x4c4>)
 8006c08:	f023 0301 	bic.w	r3, r3, #1
 8006c0c:	6213      	str	r3, [r2, #32]
 8006c0e:	4b58      	ldr	r3, [pc, #352]	@ (8006d70 <HAL_RCC_OscConfig+0x4c4>)
 8006c10:	6a1b      	ldr	r3, [r3, #32]
 8006c12:	4a57      	ldr	r2, [pc, #348]	@ (8006d70 <HAL_RCC_OscConfig+0x4c4>)
 8006c14:	f023 0304 	bic.w	r3, r3, #4
 8006c18:	6213      	str	r3, [r2, #32]
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	68db      	ldr	r3, [r3, #12]
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d015      	beq.n	8006c4e <HAL_RCC_OscConfig+0x3a2>
 8006c22:	f7fd fba5 	bl	8004370 <HAL_GetTick>
 8006c26:	6138      	str	r0, [r7, #16]
 8006c28:	e00a      	b.n	8006c40 <HAL_RCC_OscConfig+0x394>
 8006c2a:	f7fd fba1 	bl	8004370 <HAL_GetTick>
 8006c2e:	4602      	mov	r2, r0
 8006c30:	693b      	ldr	r3, [r7, #16]
 8006c32:	1ad3      	subs	r3, r2, r3
 8006c34:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006c38:	4293      	cmp	r3, r2
 8006c3a:	d901      	bls.n	8006c40 <HAL_RCC_OscConfig+0x394>
 8006c3c:	2303      	movs	r3, #3
 8006c3e:	e0b1      	b.n	8006da4 <HAL_RCC_OscConfig+0x4f8>
 8006c40:	4b4b      	ldr	r3, [pc, #300]	@ (8006d70 <HAL_RCC_OscConfig+0x4c4>)
 8006c42:	6a1b      	ldr	r3, [r3, #32]
 8006c44:	f003 0302 	and.w	r3, r3, #2
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d0ee      	beq.n	8006c2a <HAL_RCC_OscConfig+0x37e>
 8006c4c:	e014      	b.n	8006c78 <HAL_RCC_OscConfig+0x3cc>
 8006c4e:	f7fd fb8f 	bl	8004370 <HAL_GetTick>
 8006c52:	6138      	str	r0, [r7, #16]
 8006c54:	e00a      	b.n	8006c6c <HAL_RCC_OscConfig+0x3c0>
 8006c56:	f7fd fb8b 	bl	8004370 <HAL_GetTick>
 8006c5a:	4602      	mov	r2, r0
 8006c5c:	693b      	ldr	r3, [r7, #16]
 8006c5e:	1ad3      	subs	r3, r2, r3
 8006c60:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006c64:	4293      	cmp	r3, r2
 8006c66:	d901      	bls.n	8006c6c <HAL_RCC_OscConfig+0x3c0>
 8006c68:	2303      	movs	r3, #3
 8006c6a:	e09b      	b.n	8006da4 <HAL_RCC_OscConfig+0x4f8>
 8006c6c:	4b40      	ldr	r3, [pc, #256]	@ (8006d70 <HAL_RCC_OscConfig+0x4c4>)
 8006c6e:	6a1b      	ldr	r3, [r3, #32]
 8006c70:	f003 0302 	and.w	r3, r3, #2
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d1ee      	bne.n	8006c56 <HAL_RCC_OscConfig+0x3aa>
 8006c78:	7dfb      	ldrb	r3, [r7, #23]
 8006c7a:	2b01      	cmp	r3, #1
 8006c7c:	d105      	bne.n	8006c8a <HAL_RCC_OscConfig+0x3de>
 8006c7e:	4b3c      	ldr	r3, [pc, #240]	@ (8006d70 <HAL_RCC_OscConfig+0x4c4>)
 8006c80:	69db      	ldr	r3, [r3, #28]
 8006c82:	4a3b      	ldr	r2, [pc, #236]	@ (8006d70 <HAL_RCC_OscConfig+0x4c4>)
 8006c84:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006c88:	61d3      	str	r3, [r2, #28]
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	69db      	ldr	r3, [r3, #28]
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	f000 8087 	beq.w	8006da2 <HAL_RCC_OscConfig+0x4f6>
 8006c94:	4b36      	ldr	r3, [pc, #216]	@ (8006d70 <HAL_RCC_OscConfig+0x4c4>)
 8006c96:	685b      	ldr	r3, [r3, #4]
 8006c98:	f003 030c 	and.w	r3, r3, #12
 8006c9c:	2b08      	cmp	r3, #8
 8006c9e:	d061      	beq.n	8006d64 <HAL_RCC_OscConfig+0x4b8>
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	69db      	ldr	r3, [r3, #28]
 8006ca4:	2b02      	cmp	r3, #2
 8006ca6:	d146      	bne.n	8006d36 <HAL_RCC_OscConfig+0x48a>
 8006ca8:	4b33      	ldr	r3, [pc, #204]	@ (8006d78 <HAL_RCC_OscConfig+0x4cc>)
 8006caa:	2200      	movs	r2, #0
 8006cac:	601a      	str	r2, [r3, #0]
 8006cae:	f7fd fb5f 	bl	8004370 <HAL_GetTick>
 8006cb2:	6138      	str	r0, [r7, #16]
 8006cb4:	e008      	b.n	8006cc8 <HAL_RCC_OscConfig+0x41c>
 8006cb6:	f7fd fb5b 	bl	8004370 <HAL_GetTick>
 8006cba:	4602      	mov	r2, r0
 8006cbc:	693b      	ldr	r3, [r7, #16]
 8006cbe:	1ad3      	subs	r3, r2, r3
 8006cc0:	2b02      	cmp	r3, #2
 8006cc2:	d901      	bls.n	8006cc8 <HAL_RCC_OscConfig+0x41c>
 8006cc4:	2303      	movs	r3, #3
 8006cc6:	e06d      	b.n	8006da4 <HAL_RCC_OscConfig+0x4f8>
 8006cc8:	4b29      	ldr	r3, [pc, #164]	@ (8006d70 <HAL_RCC_OscConfig+0x4c4>)
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d1f0      	bne.n	8006cb6 <HAL_RCC_OscConfig+0x40a>
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	6a1b      	ldr	r3, [r3, #32]
 8006cd8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006cdc:	d108      	bne.n	8006cf0 <HAL_RCC_OscConfig+0x444>
 8006cde:	4b24      	ldr	r3, [pc, #144]	@ (8006d70 <HAL_RCC_OscConfig+0x4c4>)
 8006ce0:	685b      	ldr	r3, [r3, #4]
 8006ce2:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	689b      	ldr	r3, [r3, #8]
 8006cea:	4921      	ldr	r1, [pc, #132]	@ (8006d70 <HAL_RCC_OscConfig+0x4c4>)
 8006cec:	4313      	orrs	r3, r2
 8006cee:	604b      	str	r3, [r1, #4]
 8006cf0:	4b1f      	ldr	r3, [pc, #124]	@ (8006d70 <HAL_RCC_OscConfig+0x4c4>)
 8006cf2:	685b      	ldr	r3, [r3, #4]
 8006cf4:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	6a19      	ldr	r1, [r3, #32]
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d00:	430b      	orrs	r3, r1
 8006d02:	491b      	ldr	r1, [pc, #108]	@ (8006d70 <HAL_RCC_OscConfig+0x4c4>)
 8006d04:	4313      	orrs	r3, r2
 8006d06:	604b      	str	r3, [r1, #4]
 8006d08:	4b1b      	ldr	r3, [pc, #108]	@ (8006d78 <HAL_RCC_OscConfig+0x4cc>)
 8006d0a:	2201      	movs	r2, #1
 8006d0c:	601a      	str	r2, [r3, #0]
 8006d0e:	f7fd fb2f 	bl	8004370 <HAL_GetTick>
 8006d12:	6138      	str	r0, [r7, #16]
 8006d14:	e008      	b.n	8006d28 <HAL_RCC_OscConfig+0x47c>
 8006d16:	f7fd fb2b 	bl	8004370 <HAL_GetTick>
 8006d1a:	4602      	mov	r2, r0
 8006d1c:	693b      	ldr	r3, [r7, #16]
 8006d1e:	1ad3      	subs	r3, r2, r3
 8006d20:	2b02      	cmp	r3, #2
 8006d22:	d901      	bls.n	8006d28 <HAL_RCC_OscConfig+0x47c>
 8006d24:	2303      	movs	r3, #3
 8006d26:	e03d      	b.n	8006da4 <HAL_RCC_OscConfig+0x4f8>
 8006d28:	4b11      	ldr	r3, [pc, #68]	@ (8006d70 <HAL_RCC_OscConfig+0x4c4>)
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d0f0      	beq.n	8006d16 <HAL_RCC_OscConfig+0x46a>
 8006d34:	e035      	b.n	8006da2 <HAL_RCC_OscConfig+0x4f6>
 8006d36:	4b10      	ldr	r3, [pc, #64]	@ (8006d78 <HAL_RCC_OscConfig+0x4cc>)
 8006d38:	2200      	movs	r2, #0
 8006d3a:	601a      	str	r2, [r3, #0]
 8006d3c:	f7fd fb18 	bl	8004370 <HAL_GetTick>
 8006d40:	6138      	str	r0, [r7, #16]
 8006d42:	e008      	b.n	8006d56 <HAL_RCC_OscConfig+0x4aa>
 8006d44:	f7fd fb14 	bl	8004370 <HAL_GetTick>
 8006d48:	4602      	mov	r2, r0
 8006d4a:	693b      	ldr	r3, [r7, #16]
 8006d4c:	1ad3      	subs	r3, r2, r3
 8006d4e:	2b02      	cmp	r3, #2
 8006d50:	d901      	bls.n	8006d56 <HAL_RCC_OscConfig+0x4aa>
 8006d52:	2303      	movs	r3, #3
 8006d54:	e026      	b.n	8006da4 <HAL_RCC_OscConfig+0x4f8>
 8006d56:	4b06      	ldr	r3, [pc, #24]	@ (8006d70 <HAL_RCC_OscConfig+0x4c4>)
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d1f0      	bne.n	8006d44 <HAL_RCC_OscConfig+0x498>
 8006d62:	e01e      	b.n	8006da2 <HAL_RCC_OscConfig+0x4f6>
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	69db      	ldr	r3, [r3, #28]
 8006d68:	2b01      	cmp	r3, #1
 8006d6a:	d107      	bne.n	8006d7c <HAL_RCC_OscConfig+0x4d0>
 8006d6c:	2301      	movs	r3, #1
 8006d6e:	e019      	b.n	8006da4 <HAL_RCC_OscConfig+0x4f8>
 8006d70:	40021000 	.word	0x40021000
 8006d74:	40007000 	.word	0x40007000
 8006d78:	42420060 	.word	0x42420060
 8006d7c:	4b0b      	ldr	r3, [pc, #44]	@ (8006dac <HAL_RCC_OscConfig+0x500>)
 8006d7e:	685b      	ldr	r3, [r3, #4]
 8006d80:	60fb      	str	r3, [r7, #12]
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	6a1b      	ldr	r3, [r3, #32]
 8006d8c:	429a      	cmp	r2, r3
 8006d8e:	d106      	bne.n	8006d9e <HAL_RCC_OscConfig+0x4f2>
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d9a:	429a      	cmp	r2, r3
 8006d9c:	d001      	beq.n	8006da2 <HAL_RCC_OscConfig+0x4f6>
 8006d9e:	2301      	movs	r3, #1
 8006da0:	e000      	b.n	8006da4 <HAL_RCC_OscConfig+0x4f8>
 8006da2:	2300      	movs	r3, #0
 8006da4:	4618      	mov	r0, r3
 8006da6:	3718      	adds	r7, #24
 8006da8:	46bd      	mov	sp, r7
 8006daa:	bd80      	pop	{r7, pc}
 8006dac:	40021000 	.word	0x40021000

08006db0 <HAL_RCC_ClockConfig>:
 8006db0:	b580      	push	{r7, lr}
 8006db2:	b084      	sub	sp, #16
 8006db4:	af00      	add	r7, sp, #0
 8006db6:	6078      	str	r0, [r7, #4]
 8006db8:	6039      	str	r1, [r7, #0]
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d101      	bne.n	8006dc4 <HAL_RCC_ClockConfig+0x14>
 8006dc0:	2301      	movs	r3, #1
 8006dc2:	e0d0      	b.n	8006f66 <HAL_RCC_ClockConfig+0x1b6>
 8006dc4:	4b6a      	ldr	r3, [pc, #424]	@ (8006f70 <HAL_RCC_ClockConfig+0x1c0>)
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	f003 0307 	and.w	r3, r3, #7
 8006dcc:	683a      	ldr	r2, [r7, #0]
 8006dce:	429a      	cmp	r2, r3
 8006dd0:	d910      	bls.n	8006df4 <HAL_RCC_ClockConfig+0x44>
 8006dd2:	4b67      	ldr	r3, [pc, #412]	@ (8006f70 <HAL_RCC_ClockConfig+0x1c0>)
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	f023 0207 	bic.w	r2, r3, #7
 8006dda:	4965      	ldr	r1, [pc, #404]	@ (8006f70 <HAL_RCC_ClockConfig+0x1c0>)
 8006ddc:	683b      	ldr	r3, [r7, #0]
 8006dde:	4313      	orrs	r3, r2
 8006de0:	600b      	str	r3, [r1, #0]
 8006de2:	4b63      	ldr	r3, [pc, #396]	@ (8006f70 <HAL_RCC_ClockConfig+0x1c0>)
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	f003 0307 	and.w	r3, r3, #7
 8006dea:	683a      	ldr	r2, [r7, #0]
 8006dec:	429a      	cmp	r2, r3
 8006dee:	d001      	beq.n	8006df4 <HAL_RCC_ClockConfig+0x44>
 8006df0:	2301      	movs	r3, #1
 8006df2:	e0b8      	b.n	8006f66 <HAL_RCC_ClockConfig+0x1b6>
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	f003 0302 	and.w	r3, r3, #2
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d020      	beq.n	8006e42 <HAL_RCC_ClockConfig+0x92>
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	f003 0304 	and.w	r3, r3, #4
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d005      	beq.n	8006e18 <HAL_RCC_ClockConfig+0x68>
 8006e0c:	4b59      	ldr	r3, [pc, #356]	@ (8006f74 <HAL_RCC_ClockConfig+0x1c4>)
 8006e0e:	685b      	ldr	r3, [r3, #4]
 8006e10:	4a58      	ldr	r2, [pc, #352]	@ (8006f74 <HAL_RCC_ClockConfig+0x1c4>)
 8006e12:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8006e16:	6053      	str	r3, [r2, #4]
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	f003 0308 	and.w	r3, r3, #8
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d005      	beq.n	8006e30 <HAL_RCC_ClockConfig+0x80>
 8006e24:	4b53      	ldr	r3, [pc, #332]	@ (8006f74 <HAL_RCC_ClockConfig+0x1c4>)
 8006e26:	685b      	ldr	r3, [r3, #4]
 8006e28:	4a52      	ldr	r2, [pc, #328]	@ (8006f74 <HAL_RCC_ClockConfig+0x1c4>)
 8006e2a:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8006e2e:	6053      	str	r3, [r2, #4]
 8006e30:	4b50      	ldr	r3, [pc, #320]	@ (8006f74 <HAL_RCC_ClockConfig+0x1c4>)
 8006e32:	685b      	ldr	r3, [r3, #4]
 8006e34:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	689b      	ldr	r3, [r3, #8]
 8006e3c:	494d      	ldr	r1, [pc, #308]	@ (8006f74 <HAL_RCC_ClockConfig+0x1c4>)
 8006e3e:	4313      	orrs	r3, r2
 8006e40:	604b      	str	r3, [r1, #4]
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	f003 0301 	and.w	r3, r3, #1
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d040      	beq.n	8006ed0 <HAL_RCC_ClockConfig+0x120>
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	685b      	ldr	r3, [r3, #4]
 8006e52:	2b01      	cmp	r3, #1
 8006e54:	d107      	bne.n	8006e66 <HAL_RCC_ClockConfig+0xb6>
 8006e56:	4b47      	ldr	r3, [pc, #284]	@ (8006f74 <HAL_RCC_ClockConfig+0x1c4>)
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d115      	bne.n	8006e8e <HAL_RCC_ClockConfig+0xde>
 8006e62:	2301      	movs	r3, #1
 8006e64:	e07f      	b.n	8006f66 <HAL_RCC_ClockConfig+0x1b6>
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	685b      	ldr	r3, [r3, #4]
 8006e6a:	2b02      	cmp	r3, #2
 8006e6c:	d107      	bne.n	8006e7e <HAL_RCC_ClockConfig+0xce>
 8006e6e:	4b41      	ldr	r3, [pc, #260]	@ (8006f74 <HAL_RCC_ClockConfig+0x1c4>)
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d109      	bne.n	8006e8e <HAL_RCC_ClockConfig+0xde>
 8006e7a:	2301      	movs	r3, #1
 8006e7c:	e073      	b.n	8006f66 <HAL_RCC_ClockConfig+0x1b6>
 8006e7e:	4b3d      	ldr	r3, [pc, #244]	@ (8006f74 <HAL_RCC_ClockConfig+0x1c4>)
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	f003 0302 	and.w	r3, r3, #2
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d101      	bne.n	8006e8e <HAL_RCC_ClockConfig+0xde>
 8006e8a:	2301      	movs	r3, #1
 8006e8c:	e06b      	b.n	8006f66 <HAL_RCC_ClockConfig+0x1b6>
 8006e8e:	4b39      	ldr	r3, [pc, #228]	@ (8006f74 <HAL_RCC_ClockConfig+0x1c4>)
 8006e90:	685b      	ldr	r3, [r3, #4]
 8006e92:	f023 0203 	bic.w	r2, r3, #3
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	685b      	ldr	r3, [r3, #4]
 8006e9a:	4936      	ldr	r1, [pc, #216]	@ (8006f74 <HAL_RCC_ClockConfig+0x1c4>)
 8006e9c:	4313      	orrs	r3, r2
 8006e9e:	604b      	str	r3, [r1, #4]
 8006ea0:	f7fd fa66 	bl	8004370 <HAL_GetTick>
 8006ea4:	60f8      	str	r0, [r7, #12]
 8006ea6:	e00a      	b.n	8006ebe <HAL_RCC_ClockConfig+0x10e>
 8006ea8:	f7fd fa62 	bl	8004370 <HAL_GetTick>
 8006eac:	4602      	mov	r2, r0
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	1ad3      	subs	r3, r2, r3
 8006eb2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006eb6:	4293      	cmp	r3, r2
 8006eb8:	d901      	bls.n	8006ebe <HAL_RCC_ClockConfig+0x10e>
 8006eba:	2303      	movs	r3, #3
 8006ebc:	e053      	b.n	8006f66 <HAL_RCC_ClockConfig+0x1b6>
 8006ebe:	4b2d      	ldr	r3, [pc, #180]	@ (8006f74 <HAL_RCC_ClockConfig+0x1c4>)
 8006ec0:	685b      	ldr	r3, [r3, #4]
 8006ec2:	f003 020c 	and.w	r2, r3, #12
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	685b      	ldr	r3, [r3, #4]
 8006eca:	009b      	lsls	r3, r3, #2
 8006ecc:	429a      	cmp	r2, r3
 8006ece:	d1eb      	bne.n	8006ea8 <HAL_RCC_ClockConfig+0xf8>
 8006ed0:	4b27      	ldr	r3, [pc, #156]	@ (8006f70 <HAL_RCC_ClockConfig+0x1c0>)
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	f003 0307 	and.w	r3, r3, #7
 8006ed8:	683a      	ldr	r2, [r7, #0]
 8006eda:	429a      	cmp	r2, r3
 8006edc:	d210      	bcs.n	8006f00 <HAL_RCC_ClockConfig+0x150>
 8006ede:	4b24      	ldr	r3, [pc, #144]	@ (8006f70 <HAL_RCC_ClockConfig+0x1c0>)
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	f023 0207 	bic.w	r2, r3, #7
 8006ee6:	4922      	ldr	r1, [pc, #136]	@ (8006f70 <HAL_RCC_ClockConfig+0x1c0>)
 8006ee8:	683b      	ldr	r3, [r7, #0]
 8006eea:	4313      	orrs	r3, r2
 8006eec:	600b      	str	r3, [r1, #0]
 8006eee:	4b20      	ldr	r3, [pc, #128]	@ (8006f70 <HAL_RCC_ClockConfig+0x1c0>)
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	f003 0307 	and.w	r3, r3, #7
 8006ef6:	683a      	ldr	r2, [r7, #0]
 8006ef8:	429a      	cmp	r2, r3
 8006efa:	d001      	beq.n	8006f00 <HAL_RCC_ClockConfig+0x150>
 8006efc:	2301      	movs	r3, #1
 8006efe:	e032      	b.n	8006f66 <HAL_RCC_ClockConfig+0x1b6>
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	f003 0304 	and.w	r3, r3, #4
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d008      	beq.n	8006f1e <HAL_RCC_ClockConfig+0x16e>
 8006f0c:	4b19      	ldr	r3, [pc, #100]	@ (8006f74 <HAL_RCC_ClockConfig+0x1c4>)
 8006f0e:	685b      	ldr	r3, [r3, #4]
 8006f10:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	68db      	ldr	r3, [r3, #12]
 8006f18:	4916      	ldr	r1, [pc, #88]	@ (8006f74 <HAL_RCC_ClockConfig+0x1c4>)
 8006f1a:	4313      	orrs	r3, r2
 8006f1c:	604b      	str	r3, [r1, #4]
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	f003 0308 	and.w	r3, r3, #8
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d009      	beq.n	8006f3e <HAL_RCC_ClockConfig+0x18e>
 8006f2a:	4b12      	ldr	r3, [pc, #72]	@ (8006f74 <HAL_RCC_ClockConfig+0x1c4>)
 8006f2c:	685b      	ldr	r3, [r3, #4]
 8006f2e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	691b      	ldr	r3, [r3, #16]
 8006f36:	00db      	lsls	r3, r3, #3
 8006f38:	490e      	ldr	r1, [pc, #56]	@ (8006f74 <HAL_RCC_ClockConfig+0x1c4>)
 8006f3a:	4313      	orrs	r3, r2
 8006f3c:	604b      	str	r3, [r1, #4]
 8006f3e:	f000 f821 	bl	8006f84 <HAL_RCC_GetSysClockFreq>
 8006f42:	4602      	mov	r2, r0
 8006f44:	4b0b      	ldr	r3, [pc, #44]	@ (8006f74 <HAL_RCC_ClockConfig+0x1c4>)
 8006f46:	685b      	ldr	r3, [r3, #4]
 8006f48:	091b      	lsrs	r3, r3, #4
 8006f4a:	f003 030f 	and.w	r3, r3, #15
 8006f4e:	490a      	ldr	r1, [pc, #40]	@ (8006f78 <HAL_RCC_ClockConfig+0x1c8>)
 8006f50:	5ccb      	ldrb	r3, [r1, r3]
 8006f52:	fa22 f303 	lsr.w	r3, r2, r3
 8006f56:	4a09      	ldr	r2, [pc, #36]	@ (8006f7c <HAL_RCC_ClockConfig+0x1cc>)
 8006f58:	6013      	str	r3, [r2, #0]
 8006f5a:	4b09      	ldr	r3, [pc, #36]	@ (8006f80 <HAL_RCC_ClockConfig+0x1d0>)
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	4618      	mov	r0, r3
 8006f60:	f7fd f9c4 	bl	80042ec <HAL_InitTick>
 8006f64:	2300      	movs	r3, #0
 8006f66:	4618      	mov	r0, r3
 8006f68:	3710      	adds	r7, #16
 8006f6a:	46bd      	mov	sp, r7
 8006f6c:	bd80      	pop	{r7, pc}
 8006f6e:	bf00      	nop
 8006f70:	40022000 	.word	0x40022000
 8006f74:	40021000 	.word	0x40021000
 8006f78:	0800a16c 	.word	0x0800a16c
 8006f7c:	20000024 	.word	0x20000024
 8006f80:	20000028 	.word	0x20000028

08006f84 <HAL_RCC_GetSysClockFreq>:
 8006f84:	b480      	push	{r7}
 8006f86:	b087      	sub	sp, #28
 8006f88:	af00      	add	r7, sp, #0
 8006f8a:	2300      	movs	r3, #0
 8006f8c:	60fb      	str	r3, [r7, #12]
 8006f8e:	2300      	movs	r3, #0
 8006f90:	60bb      	str	r3, [r7, #8]
 8006f92:	2300      	movs	r3, #0
 8006f94:	617b      	str	r3, [r7, #20]
 8006f96:	2300      	movs	r3, #0
 8006f98:	607b      	str	r3, [r7, #4]
 8006f9a:	2300      	movs	r3, #0
 8006f9c:	613b      	str	r3, [r7, #16]
 8006f9e:	4b1e      	ldr	r3, [pc, #120]	@ (8007018 <HAL_RCC_GetSysClockFreq+0x94>)
 8006fa0:	685b      	ldr	r3, [r3, #4]
 8006fa2:	60fb      	str	r3, [r7, #12]
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	f003 030c 	and.w	r3, r3, #12
 8006faa:	2b04      	cmp	r3, #4
 8006fac:	d002      	beq.n	8006fb4 <HAL_RCC_GetSysClockFreq+0x30>
 8006fae:	2b08      	cmp	r3, #8
 8006fb0:	d003      	beq.n	8006fba <HAL_RCC_GetSysClockFreq+0x36>
 8006fb2:	e027      	b.n	8007004 <HAL_RCC_GetSysClockFreq+0x80>
 8006fb4:	4b19      	ldr	r3, [pc, #100]	@ (800701c <HAL_RCC_GetSysClockFreq+0x98>)
 8006fb6:	613b      	str	r3, [r7, #16]
 8006fb8:	e027      	b.n	800700a <HAL_RCC_GetSysClockFreq+0x86>
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	0c9b      	lsrs	r3, r3, #18
 8006fbe:	f003 030f 	and.w	r3, r3, #15
 8006fc2:	4a17      	ldr	r2, [pc, #92]	@ (8007020 <HAL_RCC_GetSysClockFreq+0x9c>)
 8006fc4:	5cd3      	ldrb	r3, [r2, r3]
 8006fc6:	607b      	str	r3, [r7, #4]
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d010      	beq.n	8006ff4 <HAL_RCC_GetSysClockFreq+0x70>
 8006fd2:	4b11      	ldr	r3, [pc, #68]	@ (8007018 <HAL_RCC_GetSysClockFreq+0x94>)
 8006fd4:	685b      	ldr	r3, [r3, #4]
 8006fd6:	0c5b      	lsrs	r3, r3, #17
 8006fd8:	f003 0301 	and.w	r3, r3, #1
 8006fdc:	4a11      	ldr	r2, [pc, #68]	@ (8007024 <HAL_RCC_GetSysClockFreq+0xa0>)
 8006fde:	5cd3      	ldrb	r3, [r2, r3]
 8006fe0:	60bb      	str	r3, [r7, #8]
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	4a0d      	ldr	r2, [pc, #52]	@ (800701c <HAL_RCC_GetSysClockFreq+0x98>)
 8006fe6:	fb03 f202 	mul.w	r2, r3, r2
 8006fea:	68bb      	ldr	r3, [r7, #8]
 8006fec:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ff0:	617b      	str	r3, [r7, #20]
 8006ff2:	e004      	b.n	8006ffe <HAL_RCC_GetSysClockFreq+0x7a>
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	4a0c      	ldr	r2, [pc, #48]	@ (8007028 <HAL_RCC_GetSysClockFreq+0xa4>)
 8006ff8:	fb02 f303 	mul.w	r3, r2, r3
 8006ffc:	617b      	str	r3, [r7, #20]
 8006ffe:	697b      	ldr	r3, [r7, #20]
 8007000:	613b      	str	r3, [r7, #16]
 8007002:	e002      	b.n	800700a <HAL_RCC_GetSysClockFreq+0x86>
 8007004:	4b05      	ldr	r3, [pc, #20]	@ (800701c <HAL_RCC_GetSysClockFreq+0x98>)
 8007006:	613b      	str	r3, [r7, #16]
 8007008:	bf00      	nop
 800700a:	693b      	ldr	r3, [r7, #16]
 800700c:	4618      	mov	r0, r3
 800700e:	371c      	adds	r7, #28
 8007010:	46bd      	mov	sp, r7
 8007012:	bc80      	pop	{r7}
 8007014:	4770      	bx	lr
 8007016:	bf00      	nop
 8007018:	40021000 	.word	0x40021000
 800701c:	007a1200 	.word	0x007a1200
 8007020:	0800a184 	.word	0x0800a184
 8007024:	0800a194 	.word	0x0800a194
 8007028:	003d0900 	.word	0x003d0900

0800702c <HAL_RCC_GetHCLKFreq>:
 800702c:	b480      	push	{r7}
 800702e:	af00      	add	r7, sp, #0
 8007030:	4b02      	ldr	r3, [pc, #8]	@ (800703c <HAL_RCC_GetHCLKFreq+0x10>)
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	4618      	mov	r0, r3
 8007036:	46bd      	mov	sp, r7
 8007038:	bc80      	pop	{r7}
 800703a:	4770      	bx	lr
 800703c:	20000024 	.word	0x20000024

08007040 <HAL_RCC_GetPCLK1Freq>:
 8007040:	b580      	push	{r7, lr}
 8007042:	af00      	add	r7, sp, #0
 8007044:	f7ff fff2 	bl	800702c <HAL_RCC_GetHCLKFreq>
 8007048:	4602      	mov	r2, r0
 800704a:	4b05      	ldr	r3, [pc, #20]	@ (8007060 <HAL_RCC_GetPCLK1Freq+0x20>)
 800704c:	685b      	ldr	r3, [r3, #4]
 800704e:	0a1b      	lsrs	r3, r3, #8
 8007050:	f003 0307 	and.w	r3, r3, #7
 8007054:	4903      	ldr	r1, [pc, #12]	@ (8007064 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007056:	5ccb      	ldrb	r3, [r1, r3]
 8007058:	fa22 f303 	lsr.w	r3, r2, r3
 800705c:	4618      	mov	r0, r3
 800705e:	bd80      	pop	{r7, pc}
 8007060:	40021000 	.word	0x40021000
 8007064:	0800a17c 	.word	0x0800a17c

08007068 <HAL_RCC_GetPCLK2Freq>:
 8007068:	b580      	push	{r7, lr}
 800706a:	af00      	add	r7, sp, #0
 800706c:	f7ff ffde 	bl	800702c <HAL_RCC_GetHCLKFreq>
 8007070:	4602      	mov	r2, r0
 8007072:	4b05      	ldr	r3, [pc, #20]	@ (8007088 <HAL_RCC_GetPCLK2Freq+0x20>)
 8007074:	685b      	ldr	r3, [r3, #4]
 8007076:	0adb      	lsrs	r3, r3, #11
 8007078:	f003 0307 	and.w	r3, r3, #7
 800707c:	4903      	ldr	r1, [pc, #12]	@ (800708c <HAL_RCC_GetPCLK2Freq+0x24>)
 800707e:	5ccb      	ldrb	r3, [r1, r3]
 8007080:	fa22 f303 	lsr.w	r3, r2, r3
 8007084:	4618      	mov	r0, r3
 8007086:	bd80      	pop	{r7, pc}
 8007088:	40021000 	.word	0x40021000
 800708c:	0800a17c 	.word	0x0800a17c

08007090 <RCC_Delay>:
 8007090:	b480      	push	{r7}
 8007092:	b085      	sub	sp, #20
 8007094:	af00      	add	r7, sp, #0
 8007096:	6078      	str	r0, [r7, #4]
 8007098:	4b0a      	ldr	r3, [pc, #40]	@ (80070c4 <RCC_Delay+0x34>)
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	4a0a      	ldr	r2, [pc, #40]	@ (80070c8 <RCC_Delay+0x38>)
 800709e:	fba2 2303 	umull	r2, r3, r2, r3
 80070a2:	0a5b      	lsrs	r3, r3, #9
 80070a4:	687a      	ldr	r2, [r7, #4]
 80070a6:	fb02 f303 	mul.w	r3, r2, r3
 80070aa:	60fb      	str	r3, [r7, #12]
 80070ac:	bf00      	nop
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	1e5a      	subs	r2, r3, #1
 80070b2:	60fa      	str	r2, [r7, #12]
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	d1f9      	bne.n	80070ac <RCC_Delay+0x1c>
 80070b8:	bf00      	nop
 80070ba:	bf00      	nop
 80070bc:	3714      	adds	r7, #20
 80070be:	46bd      	mov	sp, r7
 80070c0:	bc80      	pop	{r7}
 80070c2:	4770      	bx	lr
 80070c4:	20000024 	.word	0x20000024
 80070c8:	10624dd3 	.word	0x10624dd3

080070cc <HAL_RCCEx_PeriphCLKConfig>:
 80070cc:	b580      	push	{r7, lr}
 80070ce:	b086      	sub	sp, #24
 80070d0:	af00      	add	r7, sp, #0
 80070d2:	6078      	str	r0, [r7, #4]
 80070d4:	2300      	movs	r3, #0
 80070d6:	613b      	str	r3, [r7, #16]
 80070d8:	2300      	movs	r3, #0
 80070da:	60fb      	str	r3, [r7, #12]
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	f003 0301 	and.w	r3, r3, #1
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d07d      	beq.n	80071e4 <HAL_RCCEx_PeriphCLKConfig+0x118>
 80070e8:	2300      	movs	r3, #0
 80070ea:	75fb      	strb	r3, [r7, #23]
 80070ec:	4b4f      	ldr	r3, [pc, #316]	@ (800722c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80070ee:	69db      	ldr	r3, [r3, #28]
 80070f0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d10d      	bne.n	8007114 <HAL_RCCEx_PeriphCLKConfig+0x48>
 80070f8:	4b4c      	ldr	r3, [pc, #304]	@ (800722c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80070fa:	69db      	ldr	r3, [r3, #28]
 80070fc:	4a4b      	ldr	r2, [pc, #300]	@ (800722c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80070fe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007102:	61d3      	str	r3, [r2, #28]
 8007104:	4b49      	ldr	r3, [pc, #292]	@ (800722c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007106:	69db      	ldr	r3, [r3, #28]
 8007108:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800710c:	60bb      	str	r3, [r7, #8]
 800710e:	68bb      	ldr	r3, [r7, #8]
 8007110:	2301      	movs	r3, #1
 8007112:	75fb      	strb	r3, [r7, #23]
 8007114:	4b46      	ldr	r3, [pc, #280]	@ (8007230 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800711c:	2b00      	cmp	r3, #0
 800711e:	d118      	bne.n	8007152 <HAL_RCCEx_PeriphCLKConfig+0x86>
 8007120:	4b43      	ldr	r3, [pc, #268]	@ (8007230 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	4a42      	ldr	r2, [pc, #264]	@ (8007230 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8007126:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800712a:	6013      	str	r3, [r2, #0]
 800712c:	f7fd f920 	bl	8004370 <HAL_GetTick>
 8007130:	6138      	str	r0, [r7, #16]
 8007132:	e008      	b.n	8007146 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8007134:	f7fd f91c 	bl	8004370 <HAL_GetTick>
 8007138:	4602      	mov	r2, r0
 800713a:	693b      	ldr	r3, [r7, #16]
 800713c:	1ad3      	subs	r3, r2, r3
 800713e:	2b64      	cmp	r3, #100	@ 0x64
 8007140:	d901      	bls.n	8007146 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8007142:	2303      	movs	r3, #3
 8007144:	e06d      	b.n	8007222 <HAL_RCCEx_PeriphCLKConfig+0x156>
 8007146:	4b3a      	ldr	r3, [pc, #232]	@ (8007230 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800714e:	2b00      	cmp	r3, #0
 8007150:	d0f0      	beq.n	8007134 <HAL_RCCEx_PeriphCLKConfig+0x68>
 8007152:	4b36      	ldr	r3, [pc, #216]	@ (800722c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007154:	6a1b      	ldr	r3, [r3, #32]
 8007156:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800715a:	60fb      	str	r3, [r7, #12]
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	2b00      	cmp	r3, #0
 8007160:	d02e      	beq.n	80071c0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	685b      	ldr	r3, [r3, #4]
 8007166:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800716a:	68fa      	ldr	r2, [r7, #12]
 800716c:	429a      	cmp	r2, r3
 800716e:	d027      	beq.n	80071c0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8007170:	4b2e      	ldr	r3, [pc, #184]	@ (800722c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007172:	6a1b      	ldr	r3, [r3, #32]
 8007174:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007178:	60fb      	str	r3, [r7, #12]
 800717a:	4b2e      	ldr	r3, [pc, #184]	@ (8007234 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800717c:	2201      	movs	r2, #1
 800717e:	601a      	str	r2, [r3, #0]
 8007180:	4b2c      	ldr	r3, [pc, #176]	@ (8007234 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8007182:	2200      	movs	r2, #0
 8007184:	601a      	str	r2, [r3, #0]
 8007186:	4a29      	ldr	r2, [pc, #164]	@ (800722c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	6213      	str	r3, [r2, #32]
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	f003 0301 	and.w	r3, r3, #1
 8007192:	2b00      	cmp	r3, #0
 8007194:	d014      	beq.n	80071c0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8007196:	f7fd f8eb 	bl	8004370 <HAL_GetTick>
 800719a:	6138      	str	r0, [r7, #16]
 800719c:	e00a      	b.n	80071b4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 800719e:	f7fd f8e7 	bl	8004370 <HAL_GetTick>
 80071a2:	4602      	mov	r2, r0
 80071a4:	693b      	ldr	r3, [r7, #16]
 80071a6:	1ad3      	subs	r3, r2, r3
 80071a8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80071ac:	4293      	cmp	r3, r2
 80071ae:	d901      	bls.n	80071b4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 80071b0:	2303      	movs	r3, #3
 80071b2:	e036      	b.n	8007222 <HAL_RCCEx_PeriphCLKConfig+0x156>
 80071b4:	4b1d      	ldr	r3, [pc, #116]	@ (800722c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80071b6:	6a1b      	ldr	r3, [r3, #32]
 80071b8:	f003 0302 	and.w	r3, r3, #2
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d0ee      	beq.n	800719e <HAL_RCCEx_PeriphCLKConfig+0xd2>
 80071c0:	4b1a      	ldr	r3, [pc, #104]	@ (800722c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80071c2:	6a1b      	ldr	r3, [r3, #32]
 80071c4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	685b      	ldr	r3, [r3, #4]
 80071cc:	4917      	ldr	r1, [pc, #92]	@ (800722c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80071ce:	4313      	orrs	r3, r2
 80071d0:	620b      	str	r3, [r1, #32]
 80071d2:	7dfb      	ldrb	r3, [r7, #23]
 80071d4:	2b01      	cmp	r3, #1
 80071d6:	d105      	bne.n	80071e4 <HAL_RCCEx_PeriphCLKConfig+0x118>
 80071d8:	4b14      	ldr	r3, [pc, #80]	@ (800722c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80071da:	69db      	ldr	r3, [r3, #28]
 80071dc:	4a13      	ldr	r2, [pc, #76]	@ (800722c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80071de:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80071e2:	61d3      	str	r3, [r2, #28]
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	f003 0302 	and.w	r3, r3, #2
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d008      	beq.n	8007202 <HAL_RCCEx_PeriphCLKConfig+0x136>
 80071f0:	4b0e      	ldr	r3, [pc, #56]	@ (800722c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80071f2:	685b      	ldr	r3, [r3, #4]
 80071f4:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	689b      	ldr	r3, [r3, #8]
 80071fc:	490b      	ldr	r1, [pc, #44]	@ (800722c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80071fe:	4313      	orrs	r3, r2
 8007200:	604b      	str	r3, [r1, #4]
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	f003 0310 	and.w	r3, r3, #16
 800720a:	2b00      	cmp	r3, #0
 800720c:	d008      	beq.n	8007220 <HAL_RCCEx_PeriphCLKConfig+0x154>
 800720e:	4b07      	ldr	r3, [pc, #28]	@ (800722c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007210:	685b      	ldr	r3, [r3, #4]
 8007212:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	695b      	ldr	r3, [r3, #20]
 800721a:	4904      	ldr	r1, [pc, #16]	@ (800722c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800721c:	4313      	orrs	r3, r2
 800721e:	604b      	str	r3, [r1, #4]
 8007220:	2300      	movs	r3, #0
 8007222:	4618      	mov	r0, r3
 8007224:	3718      	adds	r7, #24
 8007226:	46bd      	mov	sp, r7
 8007228:	bd80      	pop	{r7, pc}
 800722a:	bf00      	nop
 800722c:	40021000 	.word	0x40021000
 8007230:	40007000 	.word	0x40007000
 8007234:	42420440 	.word	0x42420440

08007238 <HAL_SPI_Init>:
 8007238:	b580      	push	{r7, lr}
 800723a:	b082      	sub	sp, #8
 800723c:	af00      	add	r7, sp, #0
 800723e:	6078      	str	r0, [r7, #4]
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	2b00      	cmp	r3, #0
 8007244:	d101      	bne.n	800724a <HAL_SPI_Init+0x12>
 8007246:	2301      	movs	r3, #1
 8007248:	e076      	b.n	8007338 <HAL_SPI_Init+0x100>
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800724e:	2b00      	cmp	r3, #0
 8007250:	d108      	bne.n	8007264 <HAL_SPI_Init+0x2c>
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	685b      	ldr	r3, [r3, #4]
 8007256:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800725a:	d009      	beq.n	8007270 <HAL_SPI_Init+0x38>
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	2200      	movs	r2, #0
 8007260:	61da      	str	r2, [r3, #28]
 8007262:	e005      	b.n	8007270 <HAL_SPI_Init+0x38>
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	2200      	movs	r2, #0
 8007268:	611a      	str	r2, [r3, #16]
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	2200      	movs	r2, #0
 800726e:	615a      	str	r2, [r3, #20]
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	2200      	movs	r2, #0
 8007274:	629a      	str	r2, [r3, #40]	@ 0x28
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800727c:	b2db      	uxtb	r3, r3
 800727e:	2b00      	cmp	r3, #0
 8007280:	d106      	bne.n	8007290 <HAL_SPI_Init+0x58>
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	2200      	movs	r2, #0
 8007286:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 800728a:	6878      	ldr	r0, [r7, #4]
 800728c:	f7fb fff0 	bl	8003270 <HAL_SPI_MspInit>
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	2202      	movs	r2, #2
 8007294:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	681a      	ldr	r2, [r3, #0]
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80072a6:	601a      	str	r2, [r3, #0]
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	685b      	ldr	r3, [r3, #4]
 80072ac:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	689b      	ldr	r3, [r3, #8]
 80072b4:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80072b8:	431a      	orrs	r2, r3
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	68db      	ldr	r3, [r3, #12]
 80072be:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80072c2:	431a      	orrs	r2, r3
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	691b      	ldr	r3, [r3, #16]
 80072c8:	f003 0302 	and.w	r3, r3, #2
 80072cc:	431a      	orrs	r2, r3
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	695b      	ldr	r3, [r3, #20]
 80072d2:	f003 0301 	and.w	r3, r3, #1
 80072d6:	431a      	orrs	r2, r3
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	699b      	ldr	r3, [r3, #24]
 80072dc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80072e0:	431a      	orrs	r2, r3
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	69db      	ldr	r3, [r3, #28]
 80072e6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80072ea:	431a      	orrs	r2, r3
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	6a1b      	ldr	r3, [r3, #32]
 80072f0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80072f4:	ea42 0103 	orr.w	r1, r2, r3
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80072fc:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	430a      	orrs	r2, r1
 8007306:	601a      	str	r2, [r3, #0]
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	699b      	ldr	r3, [r3, #24]
 800730c:	0c1a      	lsrs	r2, r3, #16
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	f002 0204 	and.w	r2, r2, #4
 8007316:	605a      	str	r2, [r3, #4]
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	69da      	ldr	r2, [r3, #28]
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007326:	61da      	str	r2, [r3, #28]
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	2200      	movs	r2, #0
 800732c:	655a      	str	r2, [r3, #84]	@ 0x54
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	2201      	movs	r2, #1
 8007332:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
 8007336:	2300      	movs	r3, #0
 8007338:	4618      	mov	r0, r3
 800733a:	3708      	adds	r7, #8
 800733c:	46bd      	mov	sp, r7
 800733e:	bd80      	pop	{r7, pc}

08007340 <HAL_SPI_Transmit>:
 8007340:	b580      	push	{r7, lr}
 8007342:	b088      	sub	sp, #32
 8007344:	af00      	add	r7, sp, #0
 8007346:	60f8      	str	r0, [r7, #12]
 8007348:	60b9      	str	r1, [r7, #8]
 800734a:	603b      	str	r3, [r7, #0]
 800734c:	4613      	mov	r3, r2
 800734e:	80fb      	strh	r3, [r7, #6]
 8007350:	f7fd f80e 	bl	8004370 <HAL_GetTick>
 8007354:	61f8      	str	r0, [r7, #28]
 8007356:	88fb      	ldrh	r3, [r7, #6]
 8007358:	837b      	strh	r3, [r7, #26]
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007360:	b2db      	uxtb	r3, r3
 8007362:	2b01      	cmp	r3, #1
 8007364:	d001      	beq.n	800736a <HAL_SPI_Transmit+0x2a>
 8007366:	2302      	movs	r3, #2
 8007368:	e12a      	b.n	80075c0 <HAL_SPI_Transmit+0x280>
 800736a:	68bb      	ldr	r3, [r7, #8]
 800736c:	2b00      	cmp	r3, #0
 800736e:	d002      	beq.n	8007376 <HAL_SPI_Transmit+0x36>
 8007370:	88fb      	ldrh	r3, [r7, #6]
 8007372:	2b00      	cmp	r3, #0
 8007374:	d101      	bne.n	800737a <HAL_SPI_Transmit+0x3a>
 8007376:	2301      	movs	r3, #1
 8007378:	e122      	b.n	80075c0 <HAL_SPI_Transmit+0x280>
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8007380:	2b01      	cmp	r3, #1
 8007382:	d101      	bne.n	8007388 <HAL_SPI_Transmit+0x48>
 8007384:	2302      	movs	r3, #2
 8007386:	e11b      	b.n	80075c0 <HAL_SPI_Transmit+0x280>
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	2201      	movs	r2, #1
 800738c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	2203      	movs	r2, #3
 8007394:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	2200      	movs	r2, #0
 800739c:	655a      	str	r2, [r3, #84]	@ 0x54
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	68ba      	ldr	r2, [r7, #8]
 80073a2:	631a      	str	r2, [r3, #48]	@ 0x30
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	88fa      	ldrh	r2, [r7, #6]
 80073a8:	869a      	strh	r2, [r3, #52]	@ 0x34
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	88fa      	ldrh	r2, [r7, #6]
 80073ae:	86da      	strh	r2, [r3, #54]	@ 0x36
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	2200      	movs	r2, #0
 80073b4:	639a      	str	r2, [r3, #56]	@ 0x38
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	2200      	movs	r2, #0
 80073ba:	879a      	strh	r2, [r3, #60]	@ 0x3c
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	2200      	movs	r2, #0
 80073c0:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	2200      	movs	r2, #0
 80073c6:	645a      	str	r2, [r3, #68]	@ 0x44
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	2200      	movs	r2, #0
 80073cc:	641a      	str	r2, [r3, #64]	@ 0x40
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	689b      	ldr	r3, [r3, #8]
 80073d2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80073d6:	d10f      	bne.n	80073f8 <HAL_SPI_Transmit+0xb8>
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	681a      	ldr	r2, [r3, #0]
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80073e6:	601a      	str	r2, [r3, #0]
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	681a      	ldr	r2, [r3, #0]
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80073f6:	601a      	str	r2, [r3, #0]
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007402:	2b40      	cmp	r3, #64	@ 0x40
 8007404:	d007      	beq.n	8007416 <HAL_SPI_Transmit+0xd6>
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	681a      	ldr	r2, [r3, #0]
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007414:	601a      	str	r2, [r3, #0]
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	68db      	ldr	r3, [r3, #12]
 800741a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800741e:	d152      	bne.n	80074c6 <HAL_SPI_Transmit+0x186>
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	685b      	ldr	r3, [r3, #4]
 8007424:	2b00      	cmp	r3, #0
 8007426:	d002      	beq.n	800742e <HAL_SPI_Transmit+0xee>
 8007428:	8b7b      	ldrh	r3, [r7, #26]
 800742a:	2b01      	cmp	r3, #1
 800742c:	d145      	bne.n	80074ba <HAL_SPI_Transmit+0x17a>
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007432:	881a      	ldrh	r2, [r3, #0]
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	60da      	str	r2, [r3, #12]
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800743e:	1c9a      	adds	r2, r3, #2
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	631a      	str	r2, [r3, #48]	@ 0x30
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007448:	b29b      	uxth	r3, r3
 800744a:	3b01      	subs	r3, #1
 800744c:	b29a      	uxth	r2, r3
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	86da      	strh	r2, [r3, #54]	@ 0x36
 8007452:	e032      	b.n	80074ba <HAL_SPI_Transmit+0x17a>
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	689b      	ldr	r3, [r3, #8]
 800745a:	f003 0302 	and.w	r3, r3, #2
 800745e:	2b02      	cmp	r3, #2
 8007460:	d112      	bne.n	8007488 <HAL_SPI_Transmit+0x148>
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007466:	881a      	ldrh	r2, [r3, #0]
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	60da      	str	r2, [r3, #12]
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007472:	1c9a      	adds	r2, r3, #2
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	631a      	str	r2, [r3, #48]	@ 0x30
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800747c:	b29b      	uxth	r3, r3
 800747e:	3b01      	subs	r3, #1
 8007480:	b29a      	uxth	r2, r3
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	86da      	strh	r2, [r3, #54]	@ 0x36
 8007486:	e018      	b.n	80074ba <HAL_SPI_Transmit+0x17a>
 8007488:	f7fc ff72 	bl	8004370 <HAL_GetTick>
 800748c:	4602      	mov	r2, r0
 800748e:	69fb      	ldr	r3, [r7, #28]
 8007490:	1ad3      	subs	r3, r2, r3
 8007492:	683a      	ldr	r2, [r7, #0]
 8007494:	429a      	cmp	r2, r3
 8007496:	d803      	bhi.n	80074a0 <HAL_SPI_Transmit+0x160>
 8007498:	683b      	ldr	r3, [r7, #0]
 800749a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800749e:	d102      	bne.n	80074a6 <HAL_SPI_Transmit+0x166>
 80074a0:	683b      	ldr	r3, [r7, #0]
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d109      	bne.n	80074ba <HAL_SPI_Transmit+0x17a>
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	2201      	movs	r2, #1
 80074aa:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	2200      	movs	r2, #0
 80074b2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 80074b6:	2303      	movs	r3, #3
 80074b8:	e082      	b.n	80075c0 <HAL_SPI_Transmit+0x280>
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80074be:	b29b      	uxth	r3, r3
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	d1c7      	bne.n	8007454 <HAL_SPI_Transmit+0x114>
 80074c4:	e053      	b.n	800756e <HAL_SPI_Transmit+0x22e>
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	685b      	ldr	r3, [r3, #4]
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d002      	beq.n	80074d4 <HAL_SPI_Transmit+0x194>
 80074ce:	8b7b      	ldrh	r3, [r7, #26]
 80074d0:	2b01      	cmp	r3, #1
 80074d2:	d147      	bne.n	8007564 <HAL_SPI_Transmit+0x224>
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	330c      	adds	r3, #12
 80074de:	7812      	ldrb	r2, [r2, #0]
 80074e0:	701a      	strb	r2, [r3, #0]
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80074e6:	1c5a      	adds	r2, r3, #1
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	631a      	str	r2, [r3, #48]	@ 0x30
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80074f0:	b29b      	uxth	r3, r3
 80074f2:	3b01      	subs	r3, #1
 80074f4:	b29a      	uxth	r2, r3
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	86da      	strh	r2, [r3, #54]	@ 0x36
 80074fa:	e033      	b.n	8007564 <HAL_SPI_Transmit+0x224>
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	689b      	ldr	r3, [r3, #8]
 8007502:	f003 0302 	and.w	r3, r3, #2
 8007506:	2b02      	cmp	r3, #2
 8007508:	d113      	bne.n	8007532 <HAL_SPI_Transmit+0x1f2>
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	330c      	adds	r3, #12
 8007514:	7812      	ldrb	r2, [r2, #0]
 8007516:	701a      	strb	r2, [r3, #0]
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800751c:	1c5a      	adds	r2, r3, #1
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	631a      	str	r2, [r3, #48]	@ 0x30
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007526:	b29b      	uxth	r3, r3
 8007528:	3b01      	subs	r3, #1
 800752a:	b29a      	uxth	r2, r3
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	86da      	strh	r2, [r3, #54]	@ 0x36
 8007530:	e018      	b.n	8007564 <HAL_SPI_Transmit+0x224>
 8007532:	f7fc ff1d 	bl	8004370 <HAL_GetTick>
 8007536:	4602      	mov	r2, r0
 8007538:	69fb      	ldr	r3, [r7, #28]
 800753a:	1ad3      	subs	r3, r2, r3
 800753c:	683a      	ldr	r2, [r7, #0]
 800753e:	429a      	cmp	r2, r3
 8007540:	d803      	bhi.n	800754a <HAL_SPI_Transmit+0x20a>
 8007542:	683b      	ldr	r3, [r7, #0]
 8007544:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007548:	d102      	bne.n	8007550 <HAL_SPI_Transmit+0x210>
 800754a:	683b      	ldr	r3, [r7, #0]
 800754c:	2b00      	cmp	r3, #0
 800754e:	d109      	bne.n	8007564 <HAL_SPI_Transmit+0x224>
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	2201      	movs	r2, #1
 8007554:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	2200      	movs	r2, #0
 800755c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 8007560:	2303      	movs	r3, #3
 8007562:	e02d      	b.n	80075c0 <HAL_SPI_Transmit+0x280>
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007568:	b29b      	uxth	r3, r3
 800756a:	2b00      	cmp	r3, #0
 800756c:	d1c6      	bne.n	80074fc <HAL_SPI_Transmit+0x1bc>
 800756e:	69fa      	ldr	r2, [r7, #28]
 8007570:	6839      	ldr	r1, [r7, #0]
 8007572:	68f8      	ldr	r0, [r7, #12]
 8007574:	f000 fbc4 	bl	8007d00 <SPI_EndRxTxTransaction>
 8007578:	4603      	mov	r3, r0
 800757a:	2b00      	cmp	r3, #0
 800757c:	d002      	beq.n	8007584 <HAL_SPI_Transmit+0x244>
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	2220      	movs	r2, #32
 8007582:	655a      	str	r2, [r3, #84]	@ 0x54
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	689b      	ldr	r3, [r3, #8]
 8007588:	2b00      	cmp	r3, #0
 800758a:	d10a      	bne.n	80075a2 <HAL_SPI_Transmit+0x262>
 800758c:	2300      	movs	r3, #0
 800758e:	617b      	str	r3, [r7, #20]
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	68db      	ldr	r3, [r3, #12]
 8007596:	617b      	str	r3, [r7, #20]
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	689b      	ldr	r3, [r3, #8]
 800759e:	617b      	str	r3, [r7, #20]
 80075a0:	697b      	ldr	r3, [r7, #20]
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	2201      	movs	r2, #1
 80075a6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	2200      	movs	r2, #0
 80075ae:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	d001      	beq.n	80075be <HAL_SPI_Transmit+0x27e>
 80075ba:	2301      	movs	r3, #1
 80075bc:	e000      	b.n	80075c0 <HAL_SPI_Transmit+0x280>
 80075be:	2300      	movs	r3, #0
 80075c0:	4618      	mov	r0, r3
 80075c2:	3720      	adds	r7, #32
 80075c4:	46bd      	mov	sp, r7
 80075c6:	bd80      	pop	{r7, pc}

080075c8 <HAL_SPI_Receive>:
 80075c8:	b580      	push	{r7, lr}
 80075ca:	b088      	sub	sp, #32
 80075cc:	af02      	add	r7, sp, #8
 80075ce:	60f8      	str	r0, [r7, #12]
 80075d0:	60b9      	str	r1, [r7, #8]
 80075d2:	603b      	str	r3, [r7, #0]
 80075d4:	4613      	mov	r3, r2
 80075d6:	80fb      	strh	r3, [r7, #6]
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80075de:	b2db      	uxtb	r3, r3
 80075e0:	2b01      	cmp	r3, #1
 80075e2:	d001      	beq.n	80075e8 <HAL_SPI_Receive+0x20>
 80075e4:	2302      	movs	r3, #2
 80075e6:	e104      	b.n	80077f2 <HAL_SPI_Receive+0x22a>
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	685b      	ldr	r3, [r3, #4]
 80075ec:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80075f0:	d112      	bne.n	8007618 <HAL_SPI_Receive+0x50>
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	689b      	ldr	r3, [r3, #8]
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d10e      	bne.n	8007618 <HAL_SPI_Receive+0x50>
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	2204      	movs	r2, #4
 80075fe:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
 8007602:	88fa      	ldrh	r2, [r7, #6]
 8007604:	683b      	ldr	r3, [r7, #0]
 8007606:	9300      	str	r3, [sp, #0]
 8007608:	4613      	mov	r3, r2
 800760a:	68ba      	ldr	r2, [r7, #8]
 800760c:	68b9      	ldr	r1, [r7, #8]
 800760e:	68f8      	ldr	r0, [r7, #12]
 8007610:	f000 f8f3 	bl	80077fa <HAL_SPI_TransmitReceive>
 8007614:	4603      	mov	r3, r0
 8007616:	e0ec      	b.n	80077f2 <HAL_SPI_Receive+0x22a>
 8007618:	f7fc feaa 	bl	8004370 <HAL_GetTick>
 800761c:	6178      	str	r0, [r7, #20]
 800761e:	68bb      	ldr	r3, [r7, #8]
 8007620:	2b00      	cmp	r3, #0
 8007622:	d002      	beq.n	800762a <HAL_SPI_Receive+0x62>
 8007624:	88fb      	ldrh	r3, [r7, #6]
 8007626:	2b00      	cmp	r3, #0
 8007628:	d101      	bne.n	800762e <HAL_SPI_Receive+0x66>
 800762a:	2301      	movs	r3, #1
 800762c:	e0e1      	b.n	80077f2 <HAL_SPI_Receive+0x22a>
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8007634:	2b01      	cmp	r3, #1
 8007636:	d101      	bne.n	800763c <HAL_SPI_Receive+0x74>
 8007638:	2302      	movs	r3, #2
 800763a:	e0da      	b.n	80077f2 <HAL_SPI_Receive+0x22a>
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	2201      	movs	r2, #1
 8007640:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	2204      	movs	r2, #4
 8007648:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	2200      	movs	r2, #0
 8007650:	655a      	str	r2, [r3, #84]	@ 0x54
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	68ba      	ldr	r2, [r7, #8]
 8007656:	639a      	str	r2, [r3, #56]	@ 0x38
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	88fa      	ldrh	r2, [r7, #6]
 800765c:	879a      	strh	r2, [r3, #60]	@ 0x3c
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	88fa      	ldrh	r2, [r7, #6]
 8007662:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	2200      	movs	r2, #0
 8007668:	631a      	str	r2, [r3, #48]	@ 0x30
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	2200      	movs	r2, #0
 800766e:	869a      	strh	r2, [r3, #52]	@ 0x34
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	2200      	movs	r2, #0
 8007674:	86da      	strh	r2, [r3, #54]	@ 0x36
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	2200      	movs	r2, #0
 800767a:	641a      	str	r2, [r3, #64]	@ 0x40
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	2200      	movs	r2, #0
 8007680:	645a      	str	r2, [r3, #68]	@ 0x44
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	689b      	ldr	r3, [r3, #8]
 8007686:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800768a:	d10f      	bne.n	80076ac <HAL_SPI_Receive+0xe4>
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	681a      	ldr	r2, [r3, #0]
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800769a:	601a      	str	r2, [r3, #0]
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	681a      	ldr	r2, [r3, #0]
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80076aa:	601a      	str	r2, [r3, #0]
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80076b6:	2b40      	cmp	r3, #64	@ 0x40
 80076b8:	d007      	beq.n	80076ca <HAL_SPI_Receive+0x102>
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	681a      	ldr	r2, [r3, #0]
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80076c8:	601a      	str	r2, [r3, #0]
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	68db      	ldr	r3, [r3, #12]
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	d170      	bne.n	80077b4 <HAL_SPI_Receive+0x1ec>
 80076d2:	e035      	b.n	8007740 <HAL_SPI_Receive+0x178>
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	689b      	ldr	r3, [r3, #8]
 80076da:	f003 0301 	and.w	r3, r3, #1
 80076de:	2b01      	cmp	r3, #1
 80076e0:	d115      	bne.n	800770e <HAL_SPI_Receive+0x146>
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	f103 020c 	add.w	r2, r3, #12
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80076ee:	7812      	ldrb	r2, [r2, #0]
 80076f0:	b2d2      	uxtb	r2, r2
 80076f2:	701a      	strb	r2, [r3, #0]
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80076f8:	1c5a      	adds	r2, r3, #1
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	639a      	str	r2, [r3, #56]	@ 0x38
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007702:	b29b      	uxth	r3, r3
 8007704:	3b01      	subs	r3, #1
 8007706:	b29a      	uxth	r2, r3
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800770c:	e018      	b.n	8007740 <HAL_SPI_Receive+0x178>
 800770e:	f7fc fe2f 	bl	8004370 <HAL_GetTick>
 8007712:	4602      	mov	r2, r0
 8007714:	697b      	ldr	r3, [r7, #20]
 8007716:	1ad3      	subs	r3, r2, r3
 8007718:	683a      	ldr	r2, [r7, #0]
 800771a:	429a      	cmp	r2, r3
 800771c:	d803      	bhi.n	8007726 <HAL_SPI_Receive+0x15e>
 800771e:	683b      	ldr	r3, [r7, #0]
 8007720:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007724:	d102      	bne.n	800772c <HAL_SPI_Receive+0x164>
 8007726:	683b      	ldr	r3, [r7, #0]
 8007728:	2b00      	cmp	r3, #0
 800772a:	d109      	bne.n	8007740 <HAL_SPI_Receive+0x178>
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	2201      	movs	r2, #1
 8007730:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	2200      	movs	r2, #0
 8007738:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 800773c:	2303      	movs	r3, #3
 800773e:	e058      	b.n	80077f2 <HAL_SPI_Receive+0x22a>
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007744:	b29b      	uxth	r3, r3
 8007746:	2b00      	cmp	r3, #0
 8007748:	d1c4      	bne.n	80076d4 <HAL_SPI_Receive+0x10c>
 800774a:	e038      	b.n	80077be <HAL_SPI_Receive+0x1f6>
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	689b      	ldr	r3, [r3, #8]
 8007752:	f003 0301 	and.w	r3, r3, #1
 8007756:	2b01      	cmp	r3, #1
 8007758:	d113      	bne.n	8007782 <HAL_SPI_Receive+0x1ba>
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	68da      	ldr	r2, [r3, #12]
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007764:	b292      	uxth	r2, r2
 8007766:	801a      	strh	r2, [r3, #0]
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800776c:	1c9a      	adds	r2, r3, #2
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	639a      	str	r2, [r3, #56]	@ 0x38
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007776:	b29b      	uxth	r3, r3
 8007778:	3b01      	subs	r3, #1
 800777a:	b29a      	uxth	r2, r3
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8007780:	e018      	b.n	80077b4 <HAL_SPI_Receive+0x1ec>
 8007782:	f7fc fdf5 	bl	8004370 <HAL_GetTick>
 8007786:	4602      	mov	r2, r0
 8007788:	697b      	ldr	r3, [r7, #20]
 800778a:	1ad3      	subs	r3, r2, r3
 800778c:	683a      	ldr	r2, [r7, #0]
 800778e:	429a      	cmp	r2, r3
 8007790:	d803      	bhi.n	800779a <HAL_SPI_Receive+0x1d2>
 8007792:	683b      	ldr	r3, [r7, #0]
 8007794:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007798:	d102      	bne.n	80077a0 <HAL_SPI_Receive+0x1d8>
 800779a:	683b      	ldr	r3, [r7, #0]
 800779c:	2b00      	cmp	r3, #0
 800779e:	d109      	bne.n	80077b4 <HAL_SPI_Receive+0x1ec>
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	2201      	movs	r2, #1
 80077a4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	2200      	movs	r2, #0
 80077ac:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 80077b0:	2303      	movs	r3, #3
 80077b2:	e01e      	b.n	80077f2 <HAL_SPI_Receive+0x22a>
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80077b8:	b29b      	uxth	r3, r3
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d1c6      	bne.n	800774c <HAL_SPI_Receive+0x184>
 80077be:	697a      	ldr	r2, [r7, #20]
 80077c0:	6839      	ldr	r1, [r7, #0]
 80077c2:	68f8      	ldr	r0, [r7, #12]
 80077c4:	f000 fa4a 	bl	8007c5c <SPI_EndRxTransaction>
 80077c8:	4603      	mov	r3, r0
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	d002      	beq.n	80077d4 <HAL_SPI_Receive+0x20c>
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	2220      	movs	r2, #32
 80077d2:	655a      	str	r2, [r3, #84]	@ 0x54
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	2201      	movs	r2, #1
 80077d8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	2200      	movs	r2, #0
 80077e0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d001      	beq.n	80077f0 <HAL_SPI_Receive+0x228>
 80077ec:	2301      	movs	r3, #1
 80077ee:	e000      	b.n	80077f2 <HAL_SPI_Receive+0x22a>
 80077f0:	2300      	movs	r3, #0
 80077f2:	4618      	mov	r0, r3
 80077f4:	3718      	adds	r7, #24
 80077f6:	46bd      	mov	sp, r7
 80077f8:	bd80      	pop	{r7, pc}

080077fa <HAL_SPI_TransmitReceive>:
 80077fa:	b580      	push	{r7, lr}
 80077fc:	b08a      	sub	sp, #40	@ 0x28
 80077fe:	af00      	add	r7, sp, #0
 8007800:	60f8      	str	r0, [r7, #12]
 8007802:	60b9      	str	r1, [r7, #8]
 8007804:	607a      	str	r2, [r7, #4]
 8007806:	807b      	strh	r3, [r7, #2]
 8007808:	2301      	movs	r3, #1
 800780a:	627b      	str	r3, [r7, #36]	@ 0x24
 800780c:	f7fc fdb0 	bl	8004370 <HAL_GetTick>
 8007810:	6238      	str	r0, [r7, #32]
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007818:	77fb      	strb	r3, [r7, #31]
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	685b      	ldr	r3, [r3, #4]
 800781e:	61bb      	str	r3, [r7, #24]
 8007820:	887b      	ldrh	r3, [r7, #2]
 8007822:	82fb      	strh	r3, [r7, #22]
 8007824:	7ffb      	ldrb	r3, [r7, #31]
 8007826:	2b01      	cmp	r3, #1
 8007828:	d00c      	beq.n	8007844 <HAL_SPI_TransmitReceive+0x4a>
 800782a:	69bb      	ldr	r3, [r7, #24]
 800782c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007830:	d106      	bne.n	8007840 <HAL_SPI_TransmitReceive+0x46>
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	689b      	ldr	r3, [r3, #8]
 8007836:	2b00      	cmp	r3, #0
 8007838:	d102      	bne.n	8007840 <HAL_SPI_TransmitReceive+0x46>
 800783a:	7ffb      	ldrb	r3, [r7, #31]
 800783c:	2b04      	cmp	r3, #4
 800783e:	d001      	beq.n	8007844 <HAL_SPI_TransmitReceive+0x4a>
 8007840:	2302      	movs	r3, #2
 8007842:	e17f      	b.n	8007b44 <HAL_SPI_TransmitReceive+0x34a>
 8007844:	68bb      	ldr	r3, [r7, #8]
 8007846:	2b00      	cmp	r3, #0
 8007848:	d005      	beq.n	8007856 <HAL_SPI_TransmitReceive+0x5c>
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	2b00      	cmp	r3, #0
 800784e:	d002      	beq.n	8007856 <HAL_SPI_TransmitReceive+0x5c>
 8007850:	887b      	ldrh	r3, [r7, #2]
 8007852:	2b00      	cmp	r3, #0
 8007854:	d101      	bne.n	800785a <HAL_SPI_TransmitReceive+0x60>
 8007856:	2301      	movs	r3, #1
 8007858:	e174      	b.n	8007b44 <HAL_SPI_TransmitReceive+0x34a>
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8007860:	2b01      	cmp	r3, #1
 8007862:	d101      	bne.n	8007868 <HAL_SPI_TransmitReceive+0x6e>
 8007864:	2302      	movs	r3, #2
 8007866:	e16d      	b.n	8007b44 <HAL_SPI_TransmitReceive+0x34a>
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	2201      	movs	r2, #1
 800786c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007876:	b2db      	uxtb	r3, r3
 8007878:	2b04      	cmp	r3, #4
 800787a:	d003      	beq.n	8007884 <HAL_SPI_TransmitReceive+0x8a>
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	2205      	movs	r2, #5
 8007880:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	2200      	movs	r2, #0
 8007888:	655a      	str	r2, [r3, #84]	@ 0x54
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	687a      	ldr	r2, [r7, #4]
 800788e:	639a      	str	r2, [r3, #56]	@ 0x38
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	887a      	ldrh	r2, [r7, #2]
 8007894:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	887a      	ldrh	r2, [r7, #2]
 800789a:	879a      	strh	r2, [r3, #60]	@ 0x3c
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	68ba      	ldr	r2, [r7, #8]
 80078a0:	631a      	str	r2, [r3, #48]	@ 0x30
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	887a      	ldrh	r2, [r7, #2]
 80078a6:	86da      	strh	r2, [r3, #54]	@ 0x36
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	887a      	ldrh	r2, [r7, #2]
 80078ac:	869a      	strh	r2, [r3, #52]	@ 0x34
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	2200      	movs	r2, #0
 80078b2:	641a      	str	r2, [r3, #64]	@ 0x40
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	2200      	movs	r2, #0
 80078b8:	645a      	str	r2, [r3, #68]	@ 0x44
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80078c4:	2b40      	cmp	r3, #64	@ 0x40
 80078c6:	d007      	beq.n	80078d8 <HAL_SPI_TransmitReceive+0xde>
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	681a      	ldr	r2, [r3, #0]
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80078d6:	601a      	str	r2, [r3, #0]
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	68db      	ldr	r3, [r3, #12]
 80078dc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80078e0:	d17e      	bne.n	80079e0 <HAL_SPI_TransmitReceive+0x1e6>
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	685b      	ldr	r3, [r3, #4]
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	d002      	beq.n	80078f0 <HAL_SPI_TransmitReceive+0xf6>
 80078ea:	8afb      	ldrh	r3, [r7, #22]
 80078ec:	2b01      	cmp	r3, #1
 80078ee:	d16c      	bne.n	80079ca <HAL_SPI_TransmitReceive+0x1d0>
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80078f4:	881a      	ldrh	r2, [r3, #0]
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	60da      	str	r2, [r3, #12]
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007900:	1c9a      	adds	r2, r3, #2
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	631a      	str	r2, [r3, #48]	@ 0x30
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800790a:	b29b      	uxth	r3, r3
 800790c:	3b01      	subs	r3, #1
 800790e:	b29a      	uxth	r2, r3
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	86da      	strh	r2, [r3, #54]	@ 0x36
 8007914:	e059      	b.n	80079ca <HAL_SPI_TransmitReceive+0x1d0>
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	689b      	ldr	r3, [r3, #8]
 800791c:	f003 0302 	and.w	r3, r3, #2
 8007920:	2b02      	cmp	r3, #2
 8007922:	d11b      	bne.n	800795c <HAL_SPI_TransmitReceive+0x162>
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007928:	b29b      	uxth	r3, r3
 800792a:	2b00      	cmp	r3, #0
 800792c:	d016      	beq.n	800795c <HAL_SPI_TransmitReceive+0x162>
 800792e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007930:	2b01      	cmp	r3, #1
 8007932:	d113      	bne.n	800795c <HAL_SPI_TransmitReceive+0x162>
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007938:	881a      	ldrh	r2, [r3, #0]
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	60da      	str	r2, [r3, #12]
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007944:	1c9a      	adds	r2, r3, #2
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	631a      	str	r2, [r3, #48]	@ 0x30
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800794e:	b29b      	uxth	r3, r3
 8007950:	3b01      	subs	r3, #1
 8007952:	b29a      	uxth	r2, r3
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	86da      	strh	r2, [r3, #54]	@ 0x36
 8007958:	2300      	movs	r3, #0
 800795a:	627b      	str	r3, [r7, #36]	@ 0x24
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	689b      	ldr	r3, [r3, #8]
 8007962:	f003 0301 	and.w	r3, r3, #1
 8007966:	2b01      	cmp	r3, #1
 8007968:	d119      	bne.n	800799e <HAL_SPI_TransmitReceive+0x1a4>
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800796e:	b29b      	uxth	r3, r3
 8007970:	2b00      	cmp	r3, #0
 8007972:	d014      	beq.n	800799e <HAL_SPI_TransmitReceive+0x1a4>
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	68da      	ldr	r2, [r3, #12]
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800797e:	b292      	uxth	r2, r2
 8007980:	801a      	strh	r2, [r3, #0]
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007986:	1c9a      	adds	r2, r3, #2
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	639a      	str	r2, [r3, #56]	@ 0x38
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007990:	b29b      	uxth	r3, r3
 8007992:	3b01      	subs	r3, #1
 8007994:	b29a      	uxth	r2, r3
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800799a:	2301      	movs	r3, #1
 800799c:	627b      	str	r3, [r7, #36]	@ 0x24
 800799e:	f7fc fce7 	bl	8004370 <HAL_GetTick>
 80079a2:	4602      	mov	r2, r0
 80079a4:	6a3b      	ldr	r3, [r7, #32]
 80079a6:	1ad3      	subs	r3, r2, r3
 80079a8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80079aa:	429a      	cmp	r2, r3
 80079ac:	d80d      	bhi.n	80079ca <HAL_SPI_TransmitReceive+0x1d0>
 80079ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079b0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80079b4:	d009      	beq.n	80079ca <HAL_SPI_TransmitReceive+0x1d0>
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	2201      	movs	r2, #1
 80079ba:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	2200      	movs	r2, #0
 80079c2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 80079c6:	2303      	movs	r3, #3
 80079c8:	e0bc      	b.n	8007b44 <HAL_SPI_TransmitReceive+0x34a>
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80079ce:	b29b      	uxth	r3, r3
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	d1a0      	bne.n	8007916 <HAL_SPI_TransmitReceive+0x11c>
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80079d8:	b29b      	uxth	r3, r3
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d19b      	bne.n	8007916 <HAL_SPI_TransmitReceive+0x11c>
 80079de:	e082      	b.n	8007ae6 <HAL_SPI_TransmitReceive+0x2ec>
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	685b      	ldr	r3, [r3, #4]
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	d002      	beq.n	80079ee <HAL_SPI_TransmitReceive+0x1f4>
 80079e8:	8afb      	ldrh	r3, [r7, #22]
 80079ea:	2b01      	cmp	r3, #1
 80079ec:	d171      	bne.n	8007ad2 <HAL_SPI_TransmitReceive+0x2d8>
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	330c      	adds	r3, #12
 80079f8:	7812      	ldrb	r2, [r2, #0]
 80079fa:	701a      	strb	r2, [r3, #0]
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007a00:	1c5a      	adds	r2, r3, #1
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	631a      	str	r2, [r3, #48]	@ 0x30
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007a0a:	b29b      	uxth	r3, r3
 8007a0c:	3b01      	subs	r3, #1
 8007a0e:	b29a      	uxth	r2, r3
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	86da      	strh	r2, [r3, #54]	@ 0x36
 8007a14:	e05d      	b.n	8007ad2 <HAL_SPI_TransmitReceive+0x2d8>
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	689b      	ldr	r3, [r3, #8]
 8007a1c:	f003 0302 	and.w	r3, r3, #2
 8007a20:	2b02      	cmp	r3, #2
 8007a22:	d11c      	bne.n	8007a5e <HAL_SPI_TransmitReceive+0x264>
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007a28:	b29b      	uxth	r3, r3
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	d017      	beq.n	8007a5e <HAL_SPI_TransmitReceive+0x264>
 8007a2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a30:	2b01      	cmp	r3, #1
 8007a32:	d114      	bne.n	8007a5e <HAL_SPI_TransmitReceive+0x264>
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	330c      	adds	r3, #12
 8007a3e:	7812      	ldrb	r2, [r2, #0]
 8007a40:	701a      	strb	r2, [r3, #0]
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007a46:	1c5a      	adds	r2, r3, #1
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	631a      	str	r2, [r3, #48]	@ 0x30
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007a50:	b29b      	uxth	r3, r3
 8007a52:	3b01      	subs	r3, #1
 8007a54:	b29a      	uxth	r2, r3
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	86da      	strh	r2, [r3, #54]	@ 0x36
 8007a5a:	2300      	movs	r3, #0
 8007a5c:	627b      	str	r3, [r7, #36]	@ 0x24
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	689b      	ldr	r3, [r3, #8]
 8007a64:	f003 0301 	and.w	r3, r3, #1
 8007a68:	2b01      	cmp	r3, #1
 8007a6a:	d119      	bne.n	8007aa0 <HAL_SPI_TransmitReceive+0x2a6>
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007a70:	b29b      	uxth	r3, r3
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	d014      	beq.n	8007aa0 <HAL_SPI_TransmitReceive+0x2a6>
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	68da      	ldr	r2, [r3, #12]
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007a80:	b2d2      	uxtb	r2, r2
 8007a82:	701a      	strb	r2, [r3, #0]
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007a88:	1c5a      	adds	r2, r3, #1
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	639a      	str	r2, [r3, #56]	@ 0x38
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007a92:	b29b      	uxth	r3, r3
 8007a94:	3b01      	subs	r3, #1
 8007a96:	b29a      	uxth	r2, r3
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8007a9c:	2301      	movs	r3, #1
 8007a9e:	627b      	str	r3, [r7, #36]	@ 0x24
 8007aa0:	f7fc fc66 	bl	8004370 <HAL_GetTick>
 8007aa4:	4602      	mov	r2, r0
 8007aa6:	6a3b      	ldr	r3, [r7, #32]
 8007aa8:	1ad3      	subs	r3, r2, r3
 8007aaa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007aac:	429a      	cmp	r2, r3
 8007aae:	d803      	bhi.n	8007ab8 <HAL_SPI_TransmitReceive+0x2be>
 8007ab0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ab2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007ab6:	d102      	bne.n	8007abe <HAL_SPI_TransmitReceive+0x2c4>
 8007ab8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	d109      	bne.n	8007ad2 <HAL_SPI_TransmitReceive+0x2d8>
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	2201      	movs	r2, #1
 8007ac2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	2200      	movs	r2, #0
 8007aca:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 8007ace:	2303      	movs	r3, #3
 8007ad0:	e038      	b.n	8007b44 <HAL_SPI_TransmitReceive+0x34a>
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007ad6:	b29b      	uxth	r3, r3
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d19c      	bne.n	8007a16 <HAL_SPI_TransmitReceive+0x21c>
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007ae0:	b29b      	uxth	r3, r3
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	d197      	bne.n	8007a16 <HAL_SPI_TransmitReceive+0x21c>
 8007ae6:	6a3a      	ldr	r2, [r7, #32]
 8007ae8:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8007aea:	68f8      	ldr	r0, [r7, #12]
 8007aec:	f000 f908 	bl	8007d00 <SPI_EndRxTxTransaction>
 8007af0:	4603      	mov	r3, r0
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d008      	beq.n	8007b08 <HAL_SPI_TransmitReceive+0x30e>
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	2220      	movs	r2, #32
 8007afa:	655a      	str	r2, [r3, #84]	@ 0x54
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	2200      	movs	r2, #0
 8007b00:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 8007b04:	2301      	movs	r3, #1
 8007b06:	e01d      	b.n	8007b44 <HAL_SPI_TransmitReceive+0x34a>
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	689b      	ldr	r3, [r3, #8]
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	d10a      	bne.n	8007b26 <HAL_SPI_TransmitReceive+0x32c>
 8007b10:	2300      	movs	r3, #0
 8007b12:	613b      	str	r3, [r7, #16]
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	68db      	ldr	r3, [r3, #12]
 8007b1a:	613b      	str	r3, [r7, #16]
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	689b      	ldr	r3, [r3, #8]
 8007b22:	613b      	str	r3, [r7, #16]
 8007b24:	693b      	ldr	r3, [r7, #16]
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	2201      	movs	r2, #1
 8007b2a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	2200      	movs	r2, #0
 8007b32:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d001      	beq.n	8007b42 <HAL_SPI_TransmitReceive+0x348>
 8007b3e:	2301      	movs	r3, #1
 8007b40:	e000      	b.n	8007b44 <HAL_SPI_TransmitReceive+0x34a>
 8007b42:	2300      	movs	r3, #0
 8007b44:	4618      	mov	r0, r3
 8007b46:	3728      	adds	r7, #40	@ 0x28
 8007b48:	46bd      	mov	sp, r7
 8007b4a:	bd80      	pop	{r7, pc}

08007b4c <SPI_WaitFlagStateUntilTimeout>:
 8007b4c:	b580      	push	{r7, lr}
 8007b4e:	b088      	sub	sp, #32
 8007b50:	af00      	add	r7, sp, #0
 8007b52:	60f8      	str	r0, [r7, #12]
 8007b54:	60b9      	str	r1, [r7, #8]
 8007b56:	603b      	str	r3, [r7, #0]
 8007b58:	4613      	mov	r3, r2
 8007b5a:	71fb      	strb	r3, [r7, #7]
 8007b5c:	f7fc fc08 	bl	8004370 <HAL_GetTick>
 8007b60:	4602      	mov	r2, r0
 8007b62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b64:	1a9b      	subs	r3, r3, r2
 8007b66:	683a      	ldr	r2, [r7, #0]
 8007b68:	4413      	add	r3, r2
 8007b6a:	61fb      	str	r3, [r7, #28]
 8007b6c:	f7fc fc00 	bl	8004370 <HAL_GetTick>
 8007b70:	61b8      	str	r0, [r7, #24]
 8007b72:	4b39      	ldr	r3, [pc, #228]	@ (8007c58 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	015b      	lsls	r3, r3, #5
 8007b78:	0d1b      	lsrs	r3, r3, #20
 8007b7a:	69fa      	ldr	r2, [r7, #28]
 8007b7c:	fb02 f303 	mul.w	r3, r2, r3
 8007b80:	617b      	str	r3, [r7, #20]
 8007b82:	e054      	b.n	8007c2e <SPI_WaitFlagStateUntilTimeout+0xe2>
 8007b84:	683b      	ldr	r3, [r7, #0]
 8007b86:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007b8a:	d050      	beq.n	8007c2e <SPI_WaitFlagStateUntilTimeout+0xe2>
 8007b8c:	f7fc fbf0 	bl	8004370 <HAL_GetTick>
 8007b90:	4602      	mov	r2, r0
 8007b92:	69bb      	ldr	r3, [r7, #24]
 8007b94:	1ad3      	subs	r3, r2, r3
 8007b96:	69fa      	ldr	r2, [r7, #28]
 8007b98:	429a      	cmp	r2, r3
 8007b9a:	d902      	bls.n	8007ba2 <SPI_WaitFlagStateUntilTimeout+0x56>
 8007b9c:	69fb      	ldr	r3, [r7, #28]
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	d13d      	bne.n	8007c1e <SPI_WaitFlagStateUntilTimeout+0xd2>
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	685a      	ldr	r2, [r3, #4]
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8007bb0:	605a      	str	r2, [r3, #4]
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	685b      	ldr	r3, [r3, #4]
 8007bb6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007bba:	d111      	bne.n	8007be0 <SPI_WaitFlagStateUntilTimeout+0x94>
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	689b      	ldr	r3, [r3, #8]
 8007bc0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007bc4:	d004      	beq.n	8007bd0 <SPI_WaitFlagStateUntilTimeout+0x84>
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	689b      	ldr	r3, [r3, #8]
 8007bca:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007bce:	d107      	bne.n	8007be0 <SPI_WaitFlagStateUntilTimeout+0x94>
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	681a      	ldr	r2, [r3, #0]
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007bde:	601a      	str	r2, [r3, #0]
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007be4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007be8:	d10f      	bne.n	8007c0a <SPI_WaitFlagStateUntilTimeout+0xbe>
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	681a      	ldr	r2, [r3, #0]
 8007bf0:	68fb      	ldr	r3, [r7, #12]
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8007bf8:	601a      	str	r2, [r3, #0]
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	681a      	ldr	r2, [r3, #0]
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8007c08:	601a      	str	r2, [r3, #0]
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	2201      	movs	r2, #1
 8007c0e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
 8007c12:	68fb      	ldr	r3, [r7, #12]
 8007c14:	2200      	movs	r2, #0
 8007c16:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 8007c1a:	2303      	movs	r3, #3
 8007c1c:	e017      	b.n	8007c4e <SPI_WaitFlagStateUntilTimeout+0x102>
 8007c1e:	697b      	ldr	r3, [r7, #20]
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	d101      	bne.n	8007c28 <SPI_WaitFlagStateUntilTimeout+0xdc>
 8007c24:	2300      	movs	r3, #0
 8007c26:	61fb      	str	r3, [r7, #28]
 8007c28:	697b      	ldr	r3, [r7, #20]
 8007c2a:	3b01      	subs	r3, #1
 8007c2c:	617b      	str	r3, [r7, #20]
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	689a      	ldr	r2, [r3, #8]
 8007c34:	68bb      	ldr	r3, [r7, #8]
 8007c36:	4013      	ands	r3, r2
 8007c38:	68ba      	ldr	r2, [r7, #8]
 8007c3a:	429a      	cmp	r2, r3
 8007c3c:	bf0c      	ite	eq
 8007c3e:	2301      	moveq	r3, #1
 8007c40:	2300      	movne	r3, #0
 8007c42:	b2db      	uxtb	r3, r3
 8007c44:	461a      	mov	r2, r3
 8007c46:	79fb      	ldrb	r3, [r7, #7]
 8007c48:	429a      	cmp	r2, r3
 8007c4a:	d19b      	bne.n	8007b84 <SPI_WaitFlagStateUntilTimeout+0x38>
 8007c4c:	2300      	movs	r3, #0
 8007c4e:	4618      	mov	r0, r3
 8007c50:	3720      	adds	r7, #32
 8007c52:	46bd      	mov	sp, r7
 8007c54:	bd80      	pop	{r7, pc}
 8007c56:	bf00      	nop
 8007c58:	20000024 	.word	0x20000024

08007c5c <SPI_EndRxTransaction>:
 8007c5c:	b580      	push	{r7, lr}
 8007c5e:	b086      	sub	sp, #24
 8007c60:	af02      	add	r7, sp, #8
 8007c62:	60f8      	str	r0, [r7, #12]
 8007c64:	60b9      	str	r1, [r7, #8]
 8007c66:	607a      	str	r2, [r7, #4]
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	685b      	ldr	r3, [r3, #4]
 8007c6c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007c70:	d111      	bne.n	8007c96 <SPI_EndRxTransaction+0x3a>
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	689b      	ldr	r3, [r3, #8]
 8007c76:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007c7a:	d004      	beq.n	8007c86 <SPI_EndRxTransaction+0x2a>
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	689b      	ldr	r3, [r3, #8]
 8007c80:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007c84:	d107      	bne.n	8007c96 <SPI_EndRxTransaction+0x3a>
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	681a      	ldr	r2, [r3, #0]
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007c94:	601a      	str	r2, [r3, #0]
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	685b      	ldr	r3, [r3, #4]
 8007c9a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007c9e:	d117      	bne.n	8007cd0 <SPI_EndRxTransaction+0x74>
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	689b      	ldr	r3, [r3, #8]
 8007ca4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007ca8:	d112      	bne.n	8007cd0 <SPI_EndRxTransaction+0x74>
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	9300      	str	r3, [sp, #0]
 8007cae:	68bb      	ldr	r3, [r7, #8]
 8007cb0:	2200      	movs	r2, #0
 8007cb2:	2101      	movs	r1, #1
 8007cb4:	68f8      	ldr	r0, [r7, #12]
 8007cb6:	f7ff ff49 	bl	8007b4c <SPI_WaitFlagStateUntilTimeout>
 8007cba:	4603      	mov	r3, r0
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	d01a      	beq.n	8007cf6 <SPI_EndRxTransaction+0x9a>
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007cc4:	f043 0220 	orr.w	r2, r3, #32
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	655a      	str	r2, [r3, #84]	@ 0x54
 8007ccc:	2303      	movs	r3, #3
 8007cce:	e013      	b.n	8007cf8 <SPI_EndRxTransaction+0x9c>
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	9300      	str	r3, [sp, #0]
 8007cd4:	68bb      	ldr	r3, [r7, #8]
 8007cd6:	2200      	movs	r2, #0
 8007cd8:	2180      	movs	r1, #128	@ 0x80
 8007cda:	68f8      	ldr	r0, [r7, #12]
 8007cdc:	f7ff ff36 	bl	8007b4c <SPI_WaitFlagStateUntilTimeout>
 8007ce0:	4603      	mov	r3, r0
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	d007      	beq.n	8007cf6 <SPI_EndRxTransaction+0x9a>
 8007ce6:	68fb      	ldr	r3, [r7, #12]
 8007ce8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007cea:	f043 0220 	orr.w	r2, r3, #32
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	655a      	str	r2, [r3, #84]	@ 0x54
 8007cf2:	2303      	movs	r3, #3
 8007cf4:	e000      	b.n	8007cf8 <SPI_EndRxTransaction+0x9c>
 8007cf6:	2300      	movs	r3, #0
 8007cf8:	4618      	mov	r0, r3
 8007cfa:	3710      	adds	r7, #16
 8007cfc:	46bd      	mov	sp, r7
 8007cfe:	bd80      	pop	{r7, pc}

08007d00 <SPI_EndRxTxTransaction>:
 8007d00:	b580      	push	{r7, lr}
 8007d02:	b086      	sub	sp, #24
 8007d04:	af02      	add	r7, sp, #8
 8007d06:	60f8      	str	r0, [r7, #12]
 8007d08:	60b9      	str	r1, [r7, #8]
 8007d0a:	607a      	str	r2, [r7, #4]
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	9300      	str	r3, [sp, #0]
 8007d10:	68bb      	ldr	r3, [r7, #8]
 8007d12:	2201      	movs	r2, #1
 8007d14:	2102      	movs	r1, #2
 8007d16:	68f8      	ldr	r0, [r7, #12]
 8007d18:	f7ff ff18 	bl	8007b4c <SPI_WaitFlagStateUntilTimeout>
 8007d1c:	4603      	mov	r3, r0
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	d007      	beq.n	8007d32 <SPI_EndRxTxTransaction+0x32>
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007d26:	f043 0220 	orr.w	r2, r3, #32
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	655a      	str	r2, [r3, #84]	@ 0x54
 8007d2e:	2303      	movs	r3, #3
 8007d30:	e013      	b.n	8007d5a <SPI_EndRxTxTransaction+0x5a>
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	9300      	str	r3, [sp, #0]
 8007d36:	68bb      	ldr	r3, [r7, #8]
 8007d38:	2200      	movs	r2, #0
 8007d3a:	2180      	movs	r1, #128	@ 0x80
 8007d3c:	68f8      	ldr	r0, [r7, #12]
 8007d3e:	f7ff ff05 	bl	8007b4c <SPI_WaitFlagStateUntilTimeout>
 8007d42:	4603      	mov	r3, r0
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	d007      	beq.n	8007d58 <SPI_EndRxTxTransaction+0x58>
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007d4c:	f043 0220 	orr.w	r2, r3, #32
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	655a      	str	r2, [r3, #84]	@ 0x54
 8007d54:	2303      	movs	r3, #3
 8007d56:	e000      	b.n	8007d5a <SPI_EndRxTxTransaction+0x5a>
 8007d58:	2300      	movs	r3, #0
 8007d5a:	4618      	mov	r0, r3
 8007d5c:	3710      	adds	r7, #16
 8007d5e:	46bd      	mov	sp, r7
 8007d60:	bd80      	pop	{r7, pc}

08007d62 <HAL_TIM_Base_Init>:
 8007d62:	b580      	push	{r7, lr}
 8007d64:	b082      	sub	sp, #8
 8007d66:	af00      	add	r7, sp, #0
 8007d68:	6078      	str	r0, [r7, #4]
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d101      	bne.n	8007d74 <HAL_TIM_Base_Init+0x12>
 8007d70:	2301      	movs	r3, #1
 8007d72:	e041      	b.n	8007df8 <HAL_TIM_Base_Init+0x96>
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007d7a:	b2db      	uxtb	r3, r3
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	d106      	bne.n	8007d8e <HAL_TIM_Base_Init+0x2c>
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	2200      	movs	r2, #0
 8007d84:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8007d88:	6878      	ldr	r0, [r7, #4]
 8007d8a:	f7fb fee3 	bl	8003b54 <HAL_TIM_Base_MspInit>
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	2202      	movs	r2, #2
 8007d92:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	681a      	ldr	r2, [r3, #0]
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	3304      	adds	r3, #4
 8007d9e:	4619      	mov	r1, r3
 8007da0:	4610      	mov	r0, r2
 8007da2:	f000 fe61 	bl	8008a68 <TIM_Base_SetConfig>
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	2201      	movs	r2, #1
 8007daa:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	2201      	movs	r2, #1
 8007db2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	2201      	movs	r2, #1
 8007dba:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	2201      	movs	r2, #1
 8007dc2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	2201      	movs	r2, #1
 8007dca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	2201      	movs	r2, #1
 8007dd2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	2201      	movs	r2, #1
 8007dda:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	2201      	movs	r2, #1
 8007de2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	2201      	movs	r2, #1
 8007dea:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	2201      	movs	r2, #1
 8007df2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8007df6:	2300      	movs	r3, #0
 8007df8:	4618      	mov	r0, r3
 8007dfa:	3708      	adds	r7, #8
 8007dfc:	46bd      	mov	sp, r7
 8007dfe:	bd80      	pop	{r7, pc}

08007e00 <HAL_TIM_Base_Start_IT>:
 8007e00:	b480      	push	{r7}
 8007e02:	b085      	sub	sp, #20
 8007e04:	af00      	add	r7, sp, #0
 8007e06:	6078      	str	r0, [r7, #4]
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007e0e:	b2db      	uxtb	r3, r3
 8007e10:	2b01      	cmp	r3, #1
 8007e12:	d001      	beq.n	8007e18 <HAL_TIM_Base_Start_IT+0x18>
 8007e14:	2301      	movs	r3, #1
 8007e16:	e044      	b.n	8007ea2 <HAL_TIM_Base_Start_IT+0xa2>
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	2202      	movs	r2, #2
 8007e1c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	68da      	ldr	r2, [r3, #12]
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	f042 0201 	orr.w	r2, r2, #1
 8007e2e:	60da      	str	r2, [r3, #12]
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	4a1d      	ldr	r2, [pc, #116]	@ (8007eac <HAL_TIM_Base_Start_IT+0xac>)
 8007e36:	4293      	cmp	r3, r2
 8007e38:	d018      	beq.n	8007e6c <HAL_TIM_Base_Start_IT+0x6c>
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	4a1c      	ldr	r2, [pc, #112]	@ (8007eb0 <HAL_TIM_Base_Start_IT+0xb0>)
 8007e40:	4293      	cmp	r3, r2
 8007e42:	d013      	beq.n	8007e6c <HAL_TIM_Base_Start_IT+0x6c>
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007e4c:	d00e      	beq.n	8007e6c <HAL_TIM_Base_Start_IT+0x6c>
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	4a18      	ldr	r2, [pc, #96]	@ (8007eb4 <HAL_TIM_Base_Start_IT+0xb4>)
 8007e54:	4293      	cmp	r3, r2
 8007e56:	d009      	beq.n	8007e6c <HAL_TIM_Base_Start_IT+0x6c>
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	4a16      	ldr	r2, [pc, #88]	@ (8007eb8 <HAL_TIM_Base_Start_IT+0xb8>)
 8007e5e:	4293      	cmp	r3, r2
 8007e60:	d004      	beq.n	8007e6c <HAL_TIM_Base_Start_IT+0x6c>
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	4a15      	ldr	r2, [pc, #84]	@ (8007ebc <HAL_TIM_Base_Start_IT+0xbc>)
 8007e68:	4293      	cmp	r3, r2
 8007e6a:	d111      	bne.n	8007e90 <HAL_TIM_Base_Start_IT+0x90>
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	689b      	ldr	r3, [r3, #8]
 8007e72:	f003 0307 	and.w	r3, r3, #7
 8007e76:	60fb      	str	r3, [r7, #12]
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	2b06      	cmp	r3, #6
 8007e7c:	d010      	beq.n	8007ea0 <HAL_TIM_Base_Start_IT+0xa0>
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	681a      	ldr	r2, [r3, #0]
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	f042 0201 	orr.w	r2, r2, #1
 8007e8c:	601a      	str	r2, [r3, #0]
 8007e8e:	e007      	b.n	8007ea0 <HAL_TIM_Base_Start_IT+0xa0>
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	681a      	ldr	r2, [r3, #0]
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	f042 0201 	orr.w	r2, r2, #1
 8007e9e:	601a      	str	r2, [r3, #0]
 8007ea0:	2300      	movs	r3, #0
 8007ea2:	4618      	mov	r0, r3
 8007ea4:	3714      	adds	r7, #20
 8007ea6:	46bd      	mov	sp, r7
 8007ea8:	bc80      	pop	{r7}
 8007eaa:	4770      	bx	lr
 8007eac:	40012c00 	.word	0x40012c00
 8007eb0:	40013400 	.word	0x40013400
 8007eb4:	40000400 	.word	0x40000400
 8007eb8:	40000800 	.word	0x40000800
 8007ebc:	40000c00 	.word	0x40000c00

08007ec0 <HAL_TIM_PWM_Init>:
 8007ec0:	b580      	push	{r7, lr}
 8007ec2:	b082      	sub	sp, #8
 8007ec4:	af00      	add	r7, sp, #0
 8007ec6:	6078      	str	r0, [r7, #4]
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	d101      	bne.n	8007ed2 <HAL_TIM_PWM_Init+0x12>
 8007ece:	2301      	movs	r3, #1
 8007ed0:	e041      	b.n	8007f56 <HAL_TIM_PWM_Init+0x96>
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007ed8:	b2db      	uxtb	r3, r3
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	d106      	bne.n	8007eec <HAL_TIM_PWM_Init+0x2c>
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	2200      	movs	r2, #0
 8007ee2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8007ee6:	6878      	ldr	r0, [r7, #4]
 8007ee8:	f7fb fea4 	bl	8003c34 <HAL_TIM_PWM_MspInit>
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	2202      	movs	r2, #2
 8007ef0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	681a      	ldr	r2, [r3, #0]
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	3304      	adds	r3, #4
 8007efc:	4619      	mov	r1, r3
 8007efe:	4610      	mov	r0, r2
 8007f00:	f000 fdb2 	bl	8008a68 <TIM_Base_SetConfig>
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	2201      	movs	r2, #1
 8007f08:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	2201      	movs	r2, #1
 8007f10:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	2201      	movs	r2, #1
 8007f18:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	2201      	movs	r2, #1
 8007f20:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	2201      	movs	r2, #1
 8007f28:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	2201      	movs	r2, #1
 8007f30:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	2201      	movs	r2, #1
 8007f38:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	2201      	movs	r2, #1
 8007f40:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	2201      	movs	r2, #1
 8007f48:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	2201      	movs	r2, #1
 8007f50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8007f54:	2300      	movs	r3, #0
 8007f56:	4618      	mov	r0, r3
 8007f58:	3708      	adds	r7, #8
 8007f5a:	46bd      	mov	sp, r7
 8007f5c:	bd80      	pop	{r7, pc}
	...

08007f60 <HAL_TIM_PWM_Start>:
 8007f60:	b580      	push	{r7, lr}
 8007f62:	b084      	sub	sp, #16
 8007f64:	af00      	add	r7, sp, #0
 8007f66:	6078      	str	r0, [r7, #4]
 8007f68:	6039      	str	r1, [r7, #0]
 8007f6a:	683b      	ldr	r3, [r7, #0]
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	d109      	bne.n	8007f84 <HAL_TIM_PWM_Start+0x24>
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007f76:	b2db      	uxtb	r3, r3
 8007f78:	2b01      	cmp	r3, #1
 8007f7a:	bf14      	ite	ne
 8007f7c:	2301      	movne	r3, #1
 8007f7e:	2300      	moveq	r3, #0
 8007f80:	b2db      	uxtb	r3, r3
 8007f82:	e022      	b.n	8007fca <HAL_TIM_PWM_Start+0x6a>
 8007f84:	683b      	ldr	r3, [r7, #0]
 8007f86:	2b04      	cmp	r3, #4
 8007f88:	d109      	bne.n	8007f9e <HAL_TIM_PWM_Start+0x3e>
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8007f90:	b2db      	uxtb	r3, r3
 8007f92:	2b01      	cmp	r3, #1
 8007f94:	bf14      	ite	ne
 8007f96:	2301      	movne	r3, #1
 8007f98:	2300      	moveq	r3, #0
 8007f9a:	b2db      	uxtb	r3, r3
 8007f9c:	e015      	b.n	8007fca <HAL_TIM_PWM_Start+0x6a>
 8007f9e:	683b      	ldr	r3, [r7, #0]
 8007fa0:	2b08      	cmp	r3, #8
 8007fa2:	d109      	bne.n	8007fb8 <HAL_TIM_PWM_Start+0x58>
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007faa:	b2db      	uxtb	r3, r3
 8007fac:	2b01      	cmp	r3, #1
 8007fae:	bf14      	ite	ne
 8007fb0:	2301      	movne	r3, #1
 8007fb2:	2300      	moveq	r3, #0
 8007fb4:	b2db      	uxtb	r3, r3
 8007fb6:	e008      	b.n	8007fca <HAL_TIM_PWM_Start+0x6a>
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007fbe:	b2db      	uxtb	r3, r3
 8007fc0:	2b01      	cmp	r3, #1
 8007fc2:	bf14      	ite	ne
 8007fc4:	2301      	movne	r3, #1
 8007fc6:	2300      	moveq	r3, #0
 8007fc8:	b2db      	uxtb	r3, r3
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	d001      	beq.n	8007fd2 <HAL_TIM_PWM_Start+0x72>
 8007fce:	2301      	movs	r3, #1
 8007fd0:	e072      	b.n	80080b8 <HAL_TIM_PWM_Start+0x158>
 8007fd2:	683b      	ldr	r3, [r7, #0]
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	d104      	bne.n	8007fe2 <HAL_TIM_PWM_Start+0x82>
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	2202      	movs	r2, #2
 8007fdc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007fe0:	e013      	b.n	800800a <HAL_TIM_PWM_Start+0xaa>
 8007fe2:	683b      	ldr	r3, [r7, #0]
 8007fe4:	2b04      	cmp	r3, #4
 8007fe6:	d104      	bne.n	8007ff2 <HAL_TIM_PWM_Start+0x92>
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	2202      	movs	r2, #2
 8007fec:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007ff0:	e00b      	b.n	800800a <HAL_TIM_PWM_Start+0xaa>
 8007ff2:	683b      	ldr	r3, [r7, #0]
 8007ff4:	2b08      	cmp	r3, #8
 8007ff6:	d104      	bne.n	8008002 <HAL_TIM_PWM_Start+0xa2>
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	2202      	movs	r2, #2
 8007ffc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008000:	e003      	b.n	800800a <HAL_TIM_PWM_Start+0xaa>
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	2202      	movs	r2, #2
 8008006:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	2201      	movs	r2, #1
 8008010:	6839      	ldr	r1, [r7, #0]
 8008012:	4618      	mov	r0, r3
 8008014:	f000 fff0 	bl	8008ff8 <TIM_CCxChannelCmd>
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	4a28      	ldr	r2, [pc, #160]	@ (80080c0 <HAL_TIM_PWM_Start+0x160>)
 800801e:	4293      	cmp	r3, r2
 8008020:	d004      	beq.n	800802c <HAL_TIM_PWM_Start+0xcc>
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	4a27      	ldr	r2, [pc, #156]	@ (80080c4 <HAL_TIM_PWM_Start+0x164>)
 8008028:	4293      	cmp	r3, r2
 800802a:	d101      	bne.n	8008030 <HAL_TIM_PWM_Start+0xd0>
 800802c:	2301      	movs	r3, #1
 800802e:	e000      	b.n	8008032 <HAL_TIM_PWM_Start+0xd2>
 8008030:	2300      	movs	r3, #0
 8008032:	2b00      	cmp	r3, #0
 8008034:	d007      	beq.n	8008046 <HAL_TIM_PWM_Start+0xe6>
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8008044:	645a      	str	r2, [r3, #68]	@ 0x44
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	4a1d      	ldr	r2, [pc, #116]	@ (80080c0 <HAL_TIM_PWM_Start+0x160>)
 800804c:	4293      	cmp	r3, r2
 800804e:	d018      	beq.n	8008082 <HAL_TIM_PWM_Start+0x122>
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	4a1b      	ldr	r2, [pc, #108]	@ (80080c4 <HAL_TIM_PWM_Start+0x164>)
 8008056:	4293      	cmp	r3, r2
 8008058:	d013      	beq.n	8008082 <HAL_TIM_PWM_Start+0x122>
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008062:	d00e      	beq.n	8008082 <HAL_TIM_PWM_Start+0x122>
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	4a17      	ldr	r2, [pc, #92]	@ (80080c8 <HAL_TIM_PWM_Start+0x168>)
 800806a:	4293      	cmp	r3, r2
 800806c:	d009      	beq.n	8008082 <HAL_TIM_PWM_Start+0x122>
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	4a16      	ldr	r2, [pc, #88]	@ (80080cc <HAL_TIM_PWM_Start+0x16c>)
 8008074:	4293      	cmp	r3, r2
 8008076:	d004      	beq.n	8008082 <HAL_TIM_PWM_Start+0x122>
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	4a14      	ldr	r2, [pc, #80]	@ (80080d0 <HAL_TIM_PWM_Start+0x170>)
 800807e:	4293      	cmp	r3, r2
 8008080:	d111      	bne.n	80080a6 <HAL_TIM_PWM_Start+0x146>
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	689b      	ldr	r3, [r3, #8]
 8008088:	f003 0307 	and.w	r3, r3, #7
 800808c:	60fb      	str	r3, [r7, #12]
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	2b06      	cmp	r3, #6
 8008092:	d010      	beq.n	80080b6 <HAL_TIM_PWM_Start+0x156>
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	681a      	ldr	r2, [r3, #0]
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	f042 0201 	orr.w	r2, r2, #1
 80080a2:	601a      	str	r2, [r3, #0]
 80080a4:	e007      	b.n	80080b6 <HAL_TIM_PWM_Start+0x156>
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	681a      	ldr	r2, [r3, #0]
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	f042 0201 	orr.w	r2, r2, #1
 80080b4:	601a      	str	r2, [r3, #0]
 80080b6:	2300      	movs	r3, #0
 80080b8:	4618      	mov	r0, r3
 80080ba:	3710      	adds	r7, #16
 80080bc:	46bd      	mov	sp, r7
 80080be:	bd80      	pop	{r7, pc}
 80080c0:	40012c00 	.word	0x40012c00
 80080c4:	40013400 	.word	0x40013400
 80080c8:	40000400 	.word	0x40000400
 80080cc:	40000800 	.word	0x40000800
 80080d0:	40000c00 	.word	0x40000c00

080080d4 <HAL_TIM_PWM_Stop>:
 80080d4:	b580      	push	{r7, lr}
 80080d6:	b082      	sub	sp, #8
 80080d8:	af00      	add	r7, sp, #0
 80080da:	6078      	str	r0, [r7, #4]
 80080dc:	6039      	str	r1, [r7, #0]
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	2200      	movs	r2, #0
 80080e4:	6839      	ldr	r1, [r7, #0]
 80080e6:	4618      	mov	r0, r3
 80080e8:	f000 ff86 	bl	8008ff8 <TIM_CCxChannelCmd>
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	4a2e      	ldr	r2, [pc, #184]	@ (80081ac <HAL_TIM_PWM_Stop+0xd8>)
 80080f2:	4293      	cmp	r3, r2
 80080f4:	d004      	beq.n	8008100 <HAL_TIM_PWM_Stop+0x2c>
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	4a2d      	ldr	r2, [pc, #180]	@ (80081b0 <HAL_TIM_PWM_Stop+0xdc>)
 80080fc:	4293      	cmp	r3, r2
 80080fe:	d101      	bne.n	8008104 <HAL_TIM_PWM_Stop+0x30>
 8008100:	2301      	movs	r3, #1
 8008102:	e000      	b.n	8008106 <HAL_TIM_PWM_Stop+0x32>
 8008104:	2300      	movs	r3, #0
 8008106:	2b00      	cmp	r3, #0
 8008108:	d017      	beq.n	800813a <HAL_TIM_PWM_Stop+0x66>
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	6a1a      	ldr	r2, [r3, #32]
 8008110:	f241 1311 	movw	r3, #4369	@ 0x1111
 8008114:	4013      	ands	r3, r2
 8008116:	2b00      	cmp	r3, #0
 8008118:	d10f      	bne.n	800813a <HAL_TIM_PWM_Stop+0x66>
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	6a1a      	ldr	r2, [r3, #32]
 8008120:	f240 4344 	movw	r3, #1092	@ 0x444
 8008124:	4013      	ands	r3, r2
 8008126:	2b00      	cmp	r3, #0
 8008128:	d107      	bne.n	800813a <HAL_TIM_PWM_Stop+0x66>
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8008138:	645a      	str	r2, [r3, #68]	@ 0x44
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	6a1a      	ldr	r2, [r3, #32]
 8008140:	f241 1311 	movw	r3, #4369	@ 0x1111
 8008144:	4013      	ands	r3, r2
 8008146:	2b00      	cmp	r3, #0
 8008148:	d10f      	bne.n	800816a <HAL_TIM_PWM_Stop+0x96>
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	6a1a      	ldr	r2, [r3, #32]
 8008150:	f240 4344 	movw	r3, #1092	@ 0x444
 8008154:	4013      	ands	r3, r2
 8008156:	2b00      	cmp	r3, #0
 8008158:	d107      	bne.n	800816a <HAL_TIM_PWM_Stop+0x96>
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	681a      	ldr	r2, [r3, #0]
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	f022 0201 	bic.w	r2, r2, #1
 8008168:	601a      	str	r2, [r3, #0]
 800816a:	683b      	ldr	r3, [r7, #0]
 800816c:	2b00      	cmp	r3, #0
 800816e:	d104      	bne.n	800817a <HAL_TIM_PWM_Stop+0xa6>
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	2201      	movs	r2, #1
 8008174:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008178:	e013      	b.n	80081a2 <HAL_TIM_PWM_Stop+0xce>
 800817a:	683b      	ldr	r3, [r7, #0]
 800817c:	2b04      	cmp	r3, #4
 800817e:	d104      	bne.n	800818a <HAL_TIM_PWM_Stop+0xb6>
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	2201      	movs	r2, #1
 8008184:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008188:	e00b      	b.n	80081a2 <HAL_TIM_PWM_Stop+0xce>
 800818a:	683b      	ldr	r3, [r7, #0]
 800818c:	2b08      	cmp	r3, #8
 800818e:	d104      	bne.n	800819a <HAL_TIM_PWM_Stop+0xc6>
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	2201      	movs	r2, #1
 8008194:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008198:	e003      	b.n	80081a2 <HAL_TIM_PWM_Stop+0xce>
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	2201      	movs	r2, #1
 800819e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80081a2:	2300      	movs	r3, #0
 80081a4:	4618      	mov	r0, r3
 80081a6:	3708      	adds	r7, #8
 80081a8:	46bd      	mov	sp, r7
 80081aa:	bd80      	pop	{r7, pc}
 80081ac:	40012c00 	.word	0x40012c00
 80081b0:	40013400 	.word	0x40013400

080081b4 <HAL_TIM_PWM_Start_IT>:
 80081b4:	b580      	push	{r7, lr}
 80081b6:	b084      	sub	sp, #16
 80081b8:	af00      	add	r7, sp, #0
 80081ba:	6078      	str	r0, [r7, #4]
 80081bc:	6039      	str	r1, [r7, #0]
 80081be:	2300      	movs	r3, #0
 80081c0:	73fb      	strb	r3, [r7, #15]
 80081c2:	683b      	ldr	r3, [r7, #0]
 80081c4:	2b00      	cmp	r3, #0
 80081c6:	d109      	bne.n	80081dc <HAL_TIM_PWM_Start_IT+0x28>
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80081ce:	b2db      	uxtb	r3, r3
 80081d0:	2b01      	cmp	r3, #1
 80081d2:	bf14      	ite	ne
 80081d4:	2301      	movne	r3, #1
 80081d6:	2300      	moveq	r3, #0
 80081d8:	b2db      	uxtb	r3, r3
 80081da:	e022      	b.n	8008222 <HAL_TIM_PWM_Start_IT+0x6e>
 80081dc:	683b      	ldr	r3, [r7, #0]
 80081de:	2b04      	cmp	r3, #4
 80081e0:	d109      	bne.n	80081f6 <HAL_TIM_PWM_Start_IT+0x42>
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80081e8:	b2db      	uxtb	r3, r3
 80081ea:	2b01      	cmp	r3, #1
 80081ec:	bf14      	ite	ne
 80081ee:	2301      	movne	r3, #1
 80081f0:	2300      	moveq	r3, #0
 80081f2:	b2db      	uxtb	r3, r3
 80081f4:	e015      	b.n	8008222 <HAL_TIM_PWM_Start_IT+0x6e>
 80081f6:	683b      	ldr	r3, [r7, #0]
 80081f8:	2b08      	cmp	r3, #8
 80081fa:	d109      	bne.n	8008210 <HAL_TIM_PWM_Start_IT+0x5c>
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8008202:	b2db      	uxtb	r3, r3
 8008204:	2b01      	cmp	r3, #1
 8008206:	bf14      	ite	ne
 8008208:	2301      	movne	r3, #1
 800820a:	2300      	moveq	r3, #0
 800820c:	b2db      	uxtb	r3, r3
 800820e:	e008      	b.n	8008222 <HAL_TIM_PWM_Start_IT+0x6e>
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008216:	b2db      	uxtb	r3, r3
 8008218:	2b01      	cmp	r3, #1
 800821a:	bf14      	ite	ne
 800821c:	2301      	movne	r3, #1
 800821e:	2300      	moveq	r3, #0
 8008220:	b2db      	uxtb	r3, r3
 8008222:	2b00      	cmp	r3, #0
 8008224:	d001      	beq.n	800822a <HAL_TIM_PWM_Start_IT+0x76>
 8008226:	2301      	movs	r3, #1
 8008228:	e0bd      	b.n	80083a6 <HAL_TIM_PWM_Start_IT+0x1f2>
 800822a:	683b      	ldr	r3, [r7, #0]
 800822c:	2b00      	cmp	r3, #0
 800822e:	d104      	bne.n	800823a <HAL_TIM_PWM_Start_IT+0x86>
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	2202      	movs	r2, #2
 8008234:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008238:	e013      	b.n	8008262 <HAL_TIM_PWM_Start_IT+0xae>
 800823a:	683b      	ldr	r3, [r7, #0]
 800823c:	2b04      	cmp	r3, #4
 800823e:	d104      	bne.n	800824a <HAL_TIM_PWM_Start_IT+0x96>
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	2202      	movs	r2, #2
 8008244:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008248:	e00b      	b.n	8008262 <HAL_TIM_PWM_Start_IT+0xae>
 800824a:	683b      	ldr	r3, [r7, #0]
 800824c:	2b08      	cmp	r3, #8
 800824e:	d104      	bne.n	800825a <HAL_TIM_PWM_Start_IT+0xa6>
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	2202      	movs	r2, #2
 8008254:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008258:	e003      	b.n	8008262 <HAL_TIM_PWM_Start_IT+0xae>
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	2202      	movs	r2, #2
 800825e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8008262:	683b      	ldr	r3, [r7, #0]
 8008264:	2b0c      	cmp	r3, #12
 8008266:	d841      	bhi.n	80082ec <HAL_TIM_PWM_Start_IT+0x138>
 8008268:	a201      	add	r2, pc, #4	@ (adr r2, 8008270 <HAL_TIM_PWM_Start_IT+0xbc>)
 800826a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800826e:	bf00      	nop
 8008270:	080082a5 	.word	0x080082a5
 8008274:	080082ed 	.word	0x080082ed
 8008278:	080082ed 	.word	0x080082ed
 800827c:	080082ed 	.word	0x080082ed
 8008280:	080082b7 	.word	0x080082b7
 8008284:	080082ed 	.word	0x080082ed
 8008288:	080082ed 	.word	0x080082ed
 800828c:	080082ed 	.word	0x080082ed
 8008290:	080082c9 	.word	0x080082c9
 8008294:	080082ed 	.word	0x080082ed
 8008298:	080082ed 	.word	0x080082ed
 800829c:	080082ed 	.word	0x080082ed
 80082a0:	080082db 	.word	0x080082db
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	68da      	ldr	r2, [r3, #12]
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	f042 0202 	orr.w	r2, r2, #2
 80082b2:	60da      	str	r2, [r3, #12]
 80082b4:	e01d      	b.n	80082f2 <HAL_TIM_PWM_Start_IT+0x13e>
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	68da      	ldr	r2, [r3, #12]
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	f042 0204 	orr.w	r2, r2, #4
 80082c4:	60da      	str	r2, [r3, #12]
 80082c6:	e014      	b.n	80082f2 <HAL_TIM_PWM_Start_IT+0x13e>
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	68da      	ldr	r2, [r3, #12]
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	f042 0208 	orr.w	r2, r2, #8
 80082d6:	60da      	str	r2, [r3, #12]
 80082d8:	e00b      	b.n	80082f2 <HAL_TIM_PWM_Start_IT+0x13e>
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	68da      	ldr	r2, [r3, #12]
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	f042 0210 	orr.w	r2, r2, #16
 80082e8:	60da      	str	r2, [r3, #12]
 80082ea:	e002      	b.n	80082f2 <HAL_TIM_PWM_Start_IT+0x13e>
 80082ec:	2301      	movs	r3, #1
 80082ee:	73fb      	strb	r3, [r7, #15]
 80082f0:	bf00      	nop
 80082f2:	7bfb      	ldrb	r3, [r7, #15]
 80082f4:	2b00      	cmp	r3, #0
 80082f6:	d155      	bne.n	80083a4 <HAL_TIM_PWM_Start_IT+0x1f0>
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	2201      	movs	r2, #1
 80082fe:	6839      	ldr	r1, [r7, #0]
 8008300:	4618      	mov	r0, r3
 8008302:	f000 fe79 	bl	8008ff8 <TIM_CCxChannelCmd>
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	4a29      	ldr	r2, [pc, #164]	@ (80083b0 <HAL_TIM_PWM_Start_IT+0x1fc>)
 800830c:	4293      	cmp	r3, r2
 800830e:	d004      	beq.n	800831a <HAL_TIM_PWM_Start_IT+0x166>
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	4a27      	ldr	r2, [pc, #156]	@ (80083b4 <HAL_TIM_PWM_Start_IT+0x200>)
 8008316:	4293      	cmp	r3, r2
 8008318:	d101      	bne.n	800831e <HAL_TIM_PWM_Start_IT+0x16a>
 800831a:	2301      	movs	r3, #1
 800831c:	e000      	b.n	8008320 <HAL_TIM_PWM_Start_IT+0x16c>
 800831e:	2300      	movs	r3, #0
 8008320:	2b00      	cmp	r3, #0
 8008322:	d007      	beq.n	8008334 <HAL_TIM_PWM_Start_IT+0x180>
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8008332:	645a      	str	r2, [r3, #68]	@ 0x44
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	4a1d      	ldr	r2, [pc, #116]	@ (80083b0 <HAL_TIM_PWM_Start_IT+0x1fc>)
 800833a:	4293      	cmp	r3, r2
 800833c:	d018      	beq.n	8008370 <HAL_TIM_PWM_Start_IT+0x1bc>
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	4a1c      	ldr	r2, [pc, #112]	@ (80083b4 <HAL_TIM_PWM_Start_IT+0x200>)
 8008344:	4293      	cmp	r3, r2
 8008346:	d013      	beq.n	8008370 <HAL_TIM_PWM_Start_IT+0x1bc>
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008350:	d00e      	beq.n	8008370 <HAL_TIM_PWM_Start_IT+0x1bc>
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	4a18      	ldr	r2, [pc, #96]	@ (80083b8 <HAL_TIM_PWM_Start_IT+0x204>)
 8008358:	4293      	cmp	r3, r2
 800835a:	d009      	beq.n	8008370 <HAL_TIM_PWM_Start_IT+0x1bc>
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	4a16      	ldr	r2, [pc, #88]	@ (80083bc <HAL_TIM_PWM_Start_IT+0x208>)
 8008362:	4293      	cmp	r3, r2
 8008364:	d004      	beq.n	8008370 <HAL_TIM_PWM_Start_IT+0x1bc>
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	4a15      	ldr	r2, [pc, #84]	@ (80083c0 <HAL_TIM_PWM_Start_IT+0x20c>)
 800836c:	4293      	cmp	r3, r2
 800836e:	d111      	bne.n	8008394 <HAL_TIM_PWM_Start_IT+0x1e0>
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	689b      	ldr	r3, [r3, #8]
 8008376:	f003 0307 	and.w	r3, r3, #7
 800837a:	60bb      	str	r3, [r7, #8]
 800837c:	68bb      	ldr	r3, [r7, #8]
 800837e:	2b06      	cmp	r3, #6
 8008380:	d010      	beq.n	80083a4 <HAL_TIM_PWM_Start_IT+0x1f0>
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	681a      	ldr	r2, [r3, #0]
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	f042 0201 	orr.w	r2, r2, #1
 8008390:	601a      	str	r2, [r3, #0]
 8008392:	e007      	b.n	80083a4 <HAL_TIM_PWM_Start_IT+0x1f0>
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	681a      	ldr	r2, [r3, #0]
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	f042 0201 	orr.w	r2, r2, #1
 80083a2:	601a      	str	r2, [r3, #0]
 80083a4:	7bfb      	ldrb	r3, [r7, #15]
 80083a6:	4618      	mov	r0, r3
 80083a8:	3710      	adds	r7, #16
 80083aa:	46bd      	mov	sp, r7
 80083ac:	bd80      	pop	{r7, pc}
 80083ae:	bf00      	nop
 80083b0:	40012c00 	.word	0x40012c00
 80083b4:	40013400 	.word	0x40013400
 80083b8:	40000400 	.word	0x40000400
 80083bc:	40000800 	.word	0x40000800
 80083c0:	40000c00 	.word	0x40000c00

080083c4 <HAL_TIM_PWM_Stop_IT>:
 80083c4:	b580      	push	{r7, lr}
 80083c6:	b084      	sub	sp, #16
 80083c8:	af00      	add	r7, sp, #0
 80083ca:	6078      	str	r0, [r7, #4]
 80083cc:	6039      	str	r1, [r7, #0]
 80083ce:	2300      	movs	r3, #0
 80083d0:	73fb      	strb	r3, [r7, #15]
 80083d2:	683b      	ldr	r3, [r7, #0]
 80083d4:	2b0c      	cmp	r3, #12
 80083d6:	d841      	bhi.n	800845c <HAL_TIM_PWM_Stop_IT+0x98>
 80083d8:	a201      	add	r2, pc, #4	@ (adr r2, 80083e0 <HAL_TIM_PWM_Stop_IT+0x1c>)
 80083da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083de:	bf00      	nop
 80083e0:	08008415 	.word	0x08008415
 80083e4:	0800845d 	.word	0x0800845d
 80083e8:	0800845d 	.word	0x0800845d
 80083ec:	0800845d 	.word	0x0800845d
 80083f0:	08008427 	.word	0x08008427
 80083f4:	0800845d 	.word	0x0800845d
 80083f8:	0800845d 	.word	0x0800845d
 80083fc:	0800845d 	.word	0x0800845d
 8008400:	08008439 	.word	0x08008439
 8008404:	0800845d 	.word	0x0800845d
 8008408:	0800845d 	.word	0x0800845d
 800840c:	0800845d 	.word	0x0800845d
 8008410:	0800844b 	.word	0x0800844b
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	68da      	ldr	r2, [r3, #12]
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	f022 0202 	bic.w	r2, r2, #2
 8008422:	60da      	str	r2, [r3, #12]
 8008424:	e01d      	b.n	8008462 <HAL_TIM_PWM_Stop_IT+0x9e>
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	68da      	ldr	r2, [r3, #12]
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	f022 0204 	bic.w	r2, r2, #4
 8008434:	60da      	str	r2, [r3, #12]
 8008436:	e014      	b.n	8008462 <HAL_TIM_PWM_Stop_IT+0x9e>
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	68da      	ldr	r2, [r3, #12]
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	f022 0208 	bic.w	r2, r2, #8
 8008446:	60da      	str	r2, [r3, #12]
 8008448:	e00b      	b.n	8008462 <HAL_TIM_PWM_Stop_IT+0x9e>
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	68da      	ldr	r2, [r3, #12]
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	f022 0210 	bic.w	r2, r2, #16
 8008458:	60da      	str	r2, [r3, #12]
 800845a:	e002      	b.n	8008462 <HAL_TIM_PWM_Stop_IT+0x9e>
 800845c:	2301      	movs	r3, #1
 800845e:	73fb      	strb	r3, [r7, #15]
 8008460:	bf00      	nop
 8008462:	7bfb      	ldrb	r3, [r7, #15]
 8008464:	2b00      	cmp	r3, #0
 8008466:	d161      	bne.n	800852c <HAL_TIM_PWM_Stop_IT+0x168>
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	2200      	movs	r2, #0
 800846e:	6839      	ldr	r1, [r7, #0]
 8008470:	4618      	mov	r0, r3
 8008472:	f000 fdc1 	bl	8008ff8 <TIM_CCxChannelCmd>
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	4a2f      	ldr	r2, [pc, #188]	@ (8008538 <HAL_TIM_PWM_Stop_IT+0x174>)
 800847c:	4293      	cmp	r3, r2
 800847e:	d004      	beq.n	800848a <HAL_TIM_PWM_Stop_IT+0xc6>
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	4a2d      	ldr	r2, [pc, #180]	@ (800853c <HAL_TIM_PWM_Stop_IT+0x178>)
 8008486:	4293      	cmp	r3, r2
 8008488:	d101      	bne.n	800848e <HAL_TIM_PWM_Stop_IT+0xca>
 800848a:	2301      	movs	r3, #1
 800848c:	e000      	b.n	8008490 <HAL_TIM_PWM_Stop_IT+0xcc>
 800848e:	2300      	movs	r3, #0
 8008490:	2b00      	cmp	r3, #0
 8008492:	d017      	beq.n	80084c4 <HAL_TIM_PWM_Stop_IT+0x100>
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	6a1a      	ldr	r2, [r3, #32]
 800849a:	f241 1311 	movw	r3, #4369	@ 0x1111
 800849e:	4013      	ands	r3, r2
 80084a0:	2b00      	cmp	r3, #0
 80084a2:	d10f      	bne.n	80084c4 <HAL_TIM_PWM_Stop_IT+0x100>
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	6a1a      	ldr	r2, [r3, #32]
 80084aa:	f240 4344 	movw	r3, #1092	@ 0x444
 80084ae:	4013      	ands	r3, r2
 80084b0:	2b00      	cmp	r3, #0
 80084b2:	d107      	bne.n	80084c4 <HAL_TIM_PWM_Stop_IT+0x100>
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80084c2:	645a      	str	r2, [r3, #68]	@ 0x44
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	6a1a      	ldr	r2, [r3, #32]
 80084ca:	f241 1311 	movw	r3, #4369	@ 0x1111
 80084ce:	4013      	ands	r3, r2
 80084d0:	2b00      	cmp	r3, #0
 80084d2:	d10f      	bne.n	80084f4 <HAL_TIM_PWM_Stop_IT+0x130>
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	6a1a      	ldr	r2, [r3, #32]
 80084da:	f240 4344 	movw	r3, #1092	@ 0x444
 80084de:	4013      	ands	r3, r2
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	d107      	bne.n	80084f4 <HAL_TIM_PWM_Stop_IT+0x130>
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	681a      	ldr	r2, [r3, #0]
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	f022 0201 	bic.w	r2, r2, #1
 80084f2:	601a      	str	r2, [r3, #0]
 80084f4:	683b      	ldr	r3, [r7, #0]
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	d104      	bne.n	8008504 <HAL_TIM_PWM_Stop_IT+0x140>
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	2201      	movs	r2, #1
 80084fe:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008502:	e013      	b.n	800852c <HAL_TIM_PWM_Stop_IT+0x168>
 8008504:	683b      	ldr	r3, [r7, #0]
 8008506:	2b04      	cmp	r3, #4
 8008508:	d104      	bne.n	8008514 <HAL_TIM_PWM_Stop_IT+0x150>
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	2201      	movs	r2, #1
 800850e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008512:	e00b      	b.n	800852c <HAL_TIM_PWM_Stop_IT+0x168>
 8008514:	683b      	ldr	r3, [r7, #0]
 8008516:	2b08      	cmp	r3, #8
 8008518:	d104      	bne.n	8008524 <HAL_TIM_PWM_Stop_IT+0x160>
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	2201      	movs	r2, #1
 800851e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008522:	e003      	b.n	800852c <HAL_TIM_PWM_Stop_IT+0x168>
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	2201      	movs	r2, #1
 8008528:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800852c:	7bfb      	ldrb	r3, [r7, #15]
 800852e:	4618      	mov	r0, r3
 8008530:	3710      	adds	r7, #16
 8008532:	46bd      	mov	sp, r7
 8008534:	bd80      	pop	{r7, pc}
 8008536:	bf00      	nop
 8008538:	40012c00 	.word	0x40012c00
 800853c:	40013400 	.word	0x40013400

08008540 <HAL_TIM_IRQHandler>:
 8008540:	b580      	push	{r7, lr}
 8008542:	b084      	sub	sp, #16
 8008544:	af00      	add	r7, sp, #0
 8008546:	6078      	str	r0, [r7, #4]
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	68db      	ldr	r3, [r3, #12]
 800854e:	60fb      	str	r3, [r7, #12]
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	691b      	ldr	r3, [r3, #16]
 8008556:	60bb      	str	r3, [r7, #8]
 8008558:	68bb      	ldr	r3, [r7, #8]
 800855a:	f003 0302 	and.w	r3, r3, #2
 800855e:	2b00      	cmp	r3, #0
 8008560:	d020      	beq.n	80085a4 <HAL_TIM_IRQHandler+0x64>
 8008562:	68fb      	ldr	r3, [r7, #12]
 8008564:	f003 0302 	and.w	r3, r3, #2
 8008568:	2b00      	cmp	r3, #0
 800856a:	d01b      	beq.n	80085a4 <HAL_TIM_IRQHandler+0x64>
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	f06f 0202 	mvn.w	r2, #2
 8008574:	611a      	str	r2, [r3, #16]
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	2201      	movs	r2, #1
 800857a:	771a      	strb	r2, [r3, #28]
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	699b      	ldr	r3, [r3, #24]
 8008582:	f003 0303 	and.w	r3, r3, #3
 8008586:	2b00      	cmp	r3, #0
 8008588:	d003      	beq.n	8008592 <HAL_TIM_IRQHandler+0x52>
 800858a:	6878      	ldr	r0, [r7, #4]
 800858c:	f000 fa5a 	bl	8008a44 <HAL_TIM_IC_CaptureCallback>
 8008590:	e005      	b.n	800859e <HAL_TIM_IRQHandler+0x5e>
 8008592:	6878      	ldr	r0, [r7, #4]
 8008594:	f000 fa4d 	bl	8008a32 <HAL_TIM_OC_DelayElapsedCallback>
 8008598:	6878      	ldr	r0, [r7, #4]
 800859a:	f7fa ff43 	bl	8003424 <HAL_TIM_PWM_PulseFinishedCallback>
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	2200      	movs	r2, #0
 80085a2:	771a      	strb	r2, [r3, #28]
 80085a4:	68bb      	ldr	r3, [r7, #8]
 80085a6:	f003 0304 	and.w	r3, r3, #4
 80085aa:	2b00      	cmp	r3, #0
 80085ac:	d020      	beq.n	80085f0 <HAL_TIM_IRQHandler+0xb0>
 80085ae:	68fb      	ldr	r3, [r7, #12]
 80085b0:	f003 0304 	and.w	r3, r3, #4
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	d01b      	beq.n	80085f0 <HAL_TIM_IRQHandler+0xb0>
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	f06f 0204 	mvn.w	r2, #4
 80085c0:	611a      	str	r2, [r3, #16]
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	2202      	movs	r2, #2
 80085c6:	771a      	strb	r2, [r3, #28]
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	699b      	ldr	r3, [r3, #24]
 80085ce:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	d003      	beq.n	80085de <HAL_TIM_IRQHandler+0x9e>
 80085d6:	6878      	ldr	r0, [r7, #4]
 80085d8:	f000 fa34 	bl	8008a44 <HAL_TIM_IC_CaptureCallback>
 80085dc:	e005      	b.n	80085ea <HAL_TIM_IRQHandler+0xaa>
 80085de:	6878      	ldr	r0, [r7, #4]
 80085e0:	f000 fa27 	bl	8008a32 <HAL_TIM_OC_DelayElapsedCallback>
 80085e4:	6878      	ldr	r0, [r7, #4]
 80085e6:	f7fa ff1d 	bl	8003424 <HAL_TIM_PWM_PulseFinishedCallback>
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	2200      	movs	r2, #0
 80085ee:	771a      	strb	r2, [r3, #28]
 80085f0:	68bb      	ldr	r3, [r7, #8]
 80085f2:	f003 0308 	and.w	r3, r3, #8
 80085f6:	2b00      	cmp	r3, #0
 80085f8:	d020      	beq.n	800863c <HAL_TIM_IRQHandler+0xfc>
 80085fa:	68fb      	ldr	r3, [r7, #12]
 80085fc:	f003 0308 	and.w	r3, r3, #8
 8008600:	2b00      	cmp	r3, #0
 8008602:	d01b      	beq.n	800863c <HAL_TIM_IRQHandler+0xfc>
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	f06f 0208 	mvn.w	r2, #8
 800860c:	611a      	str	r2, [r3, #16]
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	2204      	movs	r2, #4
 8008612:	771a      	strb	r2, [r3, #28]
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	69db      	ldr	r3, [r3, #28]
 800861a:	f003 0303 	and.w	r3, r3, #3
 800861e:	2b00      	cmp	r3, #0
 8008620:	d003      	beq.n	800862a <HAL_TIM_IRQHandler+0xea>
 8008622:	6878      	ldr	r0, [r7, #4]
 8008624:	f000 fa0e 	bl	8008a44 <HAL_TIM_IC_CaptureCallback>
 8008628:	e005      	b.n	8008636 <HAL_TIM_IRQHandler+0xf6>
 800862a:	6878      	ldr	r0, [r7, #4]
 800862c:	f000 fa01 	bl	8008a32 <HAL_TIM_OC_DelayElapsedCallback>
 8008630:	6878      	ldr	r0, [r7, #4]
 8008632:	f7fa fef7 	bl	8003424 <HAL_TIM_PWM_PulseFinishedCallback>
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	2200      	movs	r2, #0
 800863a:	771a      	strb	r2, [r3, #28]
 800863c:	68bb      	ldr	r3, [r7, #8]
 800863e:	f003 0310 	and.w	r3, r3, #16
 8008642:	2b00      	cmp	r3, #0
 8008644:	d020      	beq.n	8008688 <HAL_TIM_IRQHandler+0x148>
 8008646:	68fb      	ldr	r3, [r7, #12]
 8008648:	f003 0310 	and.w	r3, r3, #16
 800864c:	2b00      	cmp	r3, #0
 800864e:	d01b      	beq.n	8008688 <HAL_TIM_IRQHandler+0x148>
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	f06f 0210 	mvn.w	r2, #16
 8008658:	611a      	str	r2, [r3, #16]
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	2208      	movs	r2, #8
 800865e:	771a      	strb	r2, [r3, #28]
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	69db      	ldr	r3, [r3, #28]
 8008666:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800866a:	2b00      	cmp	r3, #0
 800866c:	d003      	beq.n	8008676 <HAL_TIM_IRQHandler+0x136>
 800866e:	6878      	ldr	r0, [r7, #4]
 8008670:	f000 f9e8 	bl	8008a44 <HAL_TIM_IC_CaptureCallback>
 8008674:	e005      	b.n	8008682 <HAL_TIM_IRQHandler+0x142>
 8008676:	6878      	ldr	r0, [r7, #4]
 8008678:	f000 f9db 	bl	8008a32 <HAL_TIM_OC_DelayElapsedCallback>
 800867c:	6878      	ldr	r0, [r7, #4]
 800867e:	f7fa fed1 	bl	8003424 <HAL_TIM_PWM_PulseFinishedCallback>
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	2200      	movs	r2, #0
 8008686:	771a      	strb	r2, [r3, #28]
 8008688:	68bb      	ldr	r3, [r7, #8]
 800868a:	f003 0301 	and.w	r3, r3, #1
 800868e:	2b00      	cmp	r3, #0
 8008690:	d00c      	beq.n	80086ac <HAL_TIM_IRQHandler+0x16c>
 8008692:	68fb      	ldr	r3, [r7, #12]
 8008694:	f003 0301 	and.w	r3, r3, #1
 8008698:	2b00      	cmp	r3, #0
 800869a:	d007      	beq.n	80086ac <HAL_TIM_IRQHandler+0x16c>
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	f06f 0201 	mvn.w	r2, #1
 80086a4:	611a      	str	r2, [r3, #16]
 80086a6:	6878      	ldr	r0, [r7, #4]
 80086a8:	f7fa fd86 	bl	80031b8 <HAL_TIM_PeriodElapsedCallback>
 80086ac:	68bb      	ldr	r3, [r7, #8]
 80086ae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80086b2:	2b00      	cmp	r3, #0
 80086b4:	d00c      	beq.n	80086d0 <HAL_TIM_IRQHandler+0x190>
 80086b6:	68fb      	ldr	r3, [r7, #12]
 80086b8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80086bc:	2b00      	cmp	r3, #0
 80086be:	d007      	beq.n	80086d0 <HAL_TIM_IRQHandler+0x190>
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80086c8:	611a      	str	r2, [r3, #16]
 80086ca:	6878      	ldr	r0, [r7, #4]
 80086cc:	f000 fd7e 	bl	80091cc <HAL_TIMEx_BreakCallback>
 80086d0:	68bb      	ldr	r3, [r7, #8]
 80086d2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	d00c      	beq.n	80086f4 <HAL_TIM_IRQHandler+0x1b4>
 80086da:	68fb      	ldr	r3, [r7, #12]
 80086dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80086e0:	2b00      	cmp	r3, #0
 80086e2:	d007      	beq.n	80086f4 <HAL_TIM_IRQHandler+0x1b4>
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80086ec:	611a      	str	r2, [r3, #16]
 80086ee:	6878      	ldr	r0, [r7, #4]
 80086f0:	f000 f9b1 	bl	8008a56 <HAL_TIM_TriggerCallback>
 80086f4:	68bb      	ldr	r3, [r7, #8]
 80086f6:	f003 0320 	and.w	r3, r3, #32
 80086fa:	2b00      	cmp	r3, #0
 80086fc:	d00c      	beq.n	8008718 <HAL_TIM_IRQHandler+0x1d8>
 80086fe:	68fb      	ldr	r3, [r7, #12]
 8008700:	f003 0320 	and.w	r3, r3, #32
 8008704:	2b00      	cmp	r3, #0
 8008706:	d007      	beq.n	8008718 <HAL_TIM_IRQHandler+0x1d8>
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	f06f 0220 	mvn.w	r2, #32
 8008710:	611a      	str	r2, [r3, #16]
 8008712:	6878      	ldr	r0, [r7, #4]
 8008714:	f000 fd51 	bl	80091ba <HAL_TIMEx_CommutCallback>
 8008718:	bf00      	nop
 800871a:	3710      	adds	r7, #16
 800871c:	46bd      	mov	sp, r7
 800871e:	bd80      	pop	{r7, pc}

08008720 <HAL_TIM_PWM_ConfigChannel>:
 8008720:	b580      	push	{r7, lr}
 8008722:	b086      	sub	sp, #24
 8008724:	af00      	add	r7, sp, #0
 8008726:	60f8      	str	r0, [r7, #12]
 8008728:	60b9      	str	r1, [r7, #8]
 800872a:	607a      	str	r2, [r7, #4]
 800872c:	2300      	movs	r3, #0
 800872e:	75fb      	strb	r3, [r7, #23]
 8008730:	68fb      	ldr	r3, [r7, #12]
 8008732:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008736:	2b01      	cmp	r3, #1
 8008738:	d101      	bne.n	800873e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800873a:	2302      	movs	r3, #2
 800873c:	e0ae      	b.n	800889c <HAL_TIM_PWM_ConfigChannel+0x17c>
 800873e:	68fb      	ldr	r3, [r7, #12]
 8008740:	2201      	movs	r2, #1
 8008742:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	2b0c      	cmp	r3, #12
 800874a:	f200 809f 	bhi.w	800888c <HAL_TIM_PWM_ConfigChannel+0x16c>
 800874e:	a201      	add	r2, pc, #4	@ (adr r2, 8008754 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8008750:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008754:	08008789 	.word	0x08008789
 8008758:	0800888d 	.word	0x0800888d
 800875c:	0800888d 	.word	0x0800888d
 8008760:	0800888d 	.word	0x0800888d
 8008764:	080087c9 	.word	0x080087c9
 8008768:	0800888d 	.word	0x0800888d
 800876c:	0800888d 	.word	0x0800888d
 8008770:	0800888d 	.word	0x0800888d
 8008774:	0800880b 	.word	0x0800880b
 8008778:	0800888d 	.word	0x0800888d
 800877c:	0800888d 	.word	0x0800888d
 8008780:	0800888d 	.word	0x0800888d
 8008784:	0800884b 	.word	0x0800884b
 8008788:	68fb      	ldr	r3, [r7, #12]
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	68b9      	ldr	r1, [r7, #8]
 800878e:	4618      	mov	r0, r3
 8008790:	f000 f9f0 	bl	8008b74 <TIM_OC1_SetConfig>
 8008794:	68fb      	ldr	r3, [r7, #12]
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	699a      	ldr	r2, [r3, #24]
 800879a:	68fb      	ldr	r3, [r7, #12]
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	f042 0208 	orr.w	r2, r2, #8
 80087a2:	619a      	str	r2, [r3, #24]
 80087a4:	68fb      	ldr	r3, [r7, #12]
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	699a      	ldr	r2, [r3, #24]
 80087aa:	68fb      	ldr	r3, [r7, #12]
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	f022 0204 	bic.w	r2, r2, #4
 80087b2:	619a      	str	r2, [r3, #24]
 80087b4:	68fb      	ldr	r3, [r7, #12]
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	6999      	ldr	r1, [r3, #24]
 80087ba:	68bb      	ldr	r3, [r7, #8]
 80087bc:	691a      	ldr	r2, [r3, #16]
 80087be:	68fb      	ldr	r3, [r7, #12]
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	430a      	orrs	r2, r1
 80087c4:	619a      	str	r2, [r3, #24]
 80087c6:	e064      	b.n	8008892 <HAL_TIM_PWM_ConfigChannel+0x172>
 80087c8:	68fb      	ldr	r3, [r7, #12]
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	68b9      	ldr	r1, [r7, #8]
 80087ce:	4618      	mov	r0, r3
 80087d0:	f000 fa40 	bl	8008c54 <TIM_OC2_SetConfig>
 80087d4:	68fb      	ldr	r3, [r7, #12]
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	699a      	ldr	r2, [r3, #24]
 80087da:	68fb      	ldr	r3, [r7, #12]
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80087e2:	619a      	str	r2, [r3, #24]
 80087e4:	68fb      	ldr	r3, [r7, #12]
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	699a      	ldr	r2, [r3, #24]
 80087ea:	68fb      	ldr	r3, [r7, #12]
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80087f2:	619a      	str	r2, [r3, #24]
 80087f4:	68fb      	ldr	r3, [r7, #12]
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	6999      	ldr	r1, [r3, #24]
 80087fa:	68bb      	ldr	r3, [r7, #8]
 80087fc:	691b      	ldr	r3, [r3, #16]
 80087fe:	021a      	lsls	r2, r3, #8
 8008800:	68fb      	ldr	r3, [r7, #12]
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	430a      	orrs	r2, r1
 8008806:	619a      	str	r2, [r3, #24]
 8008808:	e043      	b.n	8008892 <HAL_TIM_PWM_ConfigChannel+0x172>
 800880a:	68fb      	ldr	r3, [r7, #12]
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	68b9      	ldr	r1, [r7, #8]
 8008810:	4618      	mov	r0, r3
 8008812:	f000 fa93 	bl	8008d3c <TIM_OC3_SetConfig>
 8008816:	68fb      	ldr	r3, [r7, #12]
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	69da      	ldr	r2, [r3, #28]
 800881c:	68fb      	ldr	r3, [r7, #12]
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	f042 0208 	orr.w	r2, r2, #8
 8008824:	61da      	str	r2, [r3, #28]
 8008826:	68fb      	ldr	r3, [r7, #12]
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	69da      	ldr	r2, [r3, #28]
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	f022 0204 	bic.w	r2, r2, #4
 8008834:	61da      	str	r2, [r3, #28]
 8008836:	68fb      	ldr	r3, [r7, #12]
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	69d9      	ldr	r1, [r3, #28]
 800883c:	68bb      	ldr	r3, [r7, #8]
 800883e:	691a      	ldr	r2, [r3, #16]
 8008840:	68fb      	ldr	r3, [r7, #12]
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	430a      	orrs	r2, r1
 8008846:	61da      	str	r2, [r3, #28]
 8008848:	e023      	b.n	8008892 <HAL_TIM_PWM_ConfigChannel+0x172>
 800884a:	68fb      	ldr	r3, [r7, #12]
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	68b9      	ldr	r1, [r7, #8]
 8008850:	4618      	mov	r0, r3
 8008852:	f000 fae7 	bl	8008e24 <TIM_OC4_SetConfig>
 8008856:	68fb      	ldr	r3, [r7, #12]
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	69da      	ldr	r2, [r3, #28]
 800885c:	68fb      	ldr	r3, [r7, #12]
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008864:	61da      	str	r2, [r3, #28]
 8008866:	68fb      	ldr	r3, [r7, #12]
 8008868:	681b      	ldr	r3, [r3, #0]
 800886a:	69da      	ldr	r2, [r3, #28]
 800886c:	68fb      	ldr	r3, [r7, #12]
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008874:	61da      	str	r2, [r3, #28]
 8008876:	68fb      	ldr	r3, [r7, #12]
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	69d9      	ldr	r1, [r3, #28]
 800887c:	68bb      	ldr	r3, [r7, #8]
 800887e:	691b      	ldr	r3, [r3, #16]
 8008880:	021a      	lsls	r2, r3, #8
 8008882:	68fb      	ldr	r3, [r7, #12]
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	430a      	orrs	r2, r1
 8008888:	61da      	str	r2, [r3, #28]
 800888a:	e002      	b.n	8008892 <HAL_TIM_PWM_ConfigChannel+0x172>
 800888c:	2301      	movs	r3, #1
 800888e:	75fb      	strb	r3, [r7, #23]
 8008890:	bf00      	nop
 8008892:	68fb      	ldr	r3, [r7, #12]
 8008894:	2200      	movs	r2, #0
 8008896:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 800889a:	7dfb      	ldrb	r3, [r7, #23]
 800889c:	4618      	mov	r0, r3
 800889e:	3718      	adds	r7, #24
 80088a0:	46bd      	mov	sp, r7
 80088a2:	bd80      	pop	{r7, pc}

080088a4 <HAL_TIM_ConfigClockSource>:
 80088a4:	b580      	push	{r7, lr}
 80088a6:	b084      	sub	sp, #16
 80088a8:	af00      	add	r7, sp, #0
 80088aa:	6078      	str	r0, [r7, #4]
 80088ac:	6039      	str	r1, [r7, #0]
 80088ae:	2300      	movs	r3, #0
 80088b0:	73fb      	strb	r3, [r7, #15]
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80088b8:	2b01      	cmp	r3, #1
 80088ba:	d101      	bne.n	80088c0 <HAL_TIM_ConfigClockSource+0x1c>
 80088bc:	2302      	movs	r3, #2
 80088be:	e0b4      	b.n	8008a2a <HAL_TIM_ConfigClockSource+0x186>
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	2201      	movs	r2, #1
 80088c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	2202      	movs	r2, #2
 80088cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	689b      	ldr	r3, [r3, #8]
 80088d6:	60bb      	str	r3, [r7, #8]
 80088d8:	68bb      	ldr	r3, [r7, #8]
 80088da:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80088de:	60bb      	str	r3, [r7, #8]
 80088e0:	68bb      	ldr	r3, [r7, #8]
 80088e2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80088e6:	60bb      	str	r3, [r7, #8]
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	68ba      	ldr	r2, [r7, #8]
 80088ee:	609a      	str	r2, [r3, #8]
 80088f0:	683b      	ldr	r3, [r7, #0]
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80088f8:	d03e      	beq.n	8008978 <HAL_TIM_ConfigClockSource+0xd4>
 80088fa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80088fe:	f200 8087 	bhi.w	8008a10 <HAL_TIM_ConfigClockSource+0x16c>
 8008902:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008906:	f000 8086 	beq.w	8008a16 <HAL_TIM_ConfigClockSource+0x172>
 800890a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800890e:	d87f      	bhi.n	8008a10 <HAL_TIM_ConfigClockSource+0x16c>
 8008910:	2b70      	cmp	r3, #112	@ 0x70
 8008912:	d01a      	beq.n	800894a <HAL_TIM_ConfigClockSource+0xa6>
 8008914:	2b70      	cmp	r3, #112	@ 0x70
 8008916:	d87b      	bhi.n	8008a10 <HAL_TIM_ConfigClockSource+0x16c>
 8008918:	2b60      	cmp	r3, #96	@ 0x60
 800891a:	d050      	beq.n	80089be <HAL_TIM_ConfigClockSource+0x11a>
 800891c:	2b60      	cmp	r3, #96	@ 0x60
 800891e:	d877      	bhi.n	8008a10 <HAL_TIM_ConfigClockSource+0x16c>
 8008920:	2b50      	cmp	r3, #80	@ 0x50
 8008922:	d03c      	beq.n	800899e <HAL_TIM_ConfigClockSource+0xfa>
 8008924:	2b50      	cmp	r3, #80	@ 0x50
 8008926:	d873      	bhi.n	8008a10 <HAL_TIM_ConfigClockSource+0x16c>
 8008928:	2b40      	cmp	r3, #64	@ 0x40
 800892a:	d058      	beq.n	80089de <HAL_TIM_ConfigClockSource+0x13a>
 800892c:	2b40      	cmp	r3, #64	@ 0x40
 800892e:	d86f      	bhi.n	8008a10 <HAL_TIM_ConfigClockSource+0x16c>
 8008930:	2b30      	cmp	r3, #48	@ 0x30
 8008932:	d064      	beq.n	80089fe <HAL_TIM_ConfigClockSource+0x15a>
 8008934:	2b30      	cmp	r3, #48	@ 0x30
 8008936:	d86b      	bhi.n	8008a10 <HAL_TIM_ConfigClockSource+0x16c>
 8008938:	2b20      	cmp	r3, #32
 800893a:	d060      	beq.n	80089fe <HAL_TIM_ConfigClockSource+0x15a>
 800893c:	2b20      	cmp	r3, #32
 800893e:	d867      	bhi.n	8008a10 <HAL_TIM_ConfigClockSource+0x16c>
 8008940:	2b00      	cmp	r3, #0
 8008942:	d05c      	beq.n	80089fe <HAL_TIM_ConfigClockSource+0x15a>
 8008944:	2b10      	cmp	r3, #16
 8008946:	d05a      	beq.n	80089fe <HAL_TIM_ConfigClockSource+0x15a>
 8008948:	e062      	b.n	8008a10 <HAL_TIM_ConfigClockSource+0x16c>
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	6818      	ldr	r0, [r3, #0]
 800894e:	683b      	ldr	r3, [r7, #0]
 8008950:	6899      	ldr	r1, [r3, #8]
 8008952:	683b      	ldr	r3, [r7, #0]
 8008954:	685a      	ldr	r2, [r3, #4]
 8008956:	683b      	ldr	r3, [r7, #0]
 8008958:	68db      	ldr	r3, [r3, #12]
 800895a:	f000 fb2e 	bl	8008fba <TIM_ETR_SetConfig>
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	689b      	ldr	r3, [r3, #8]
 8008964:	60bb      	str	r3, [r7, #8]
 8008966:	68bb      	ldr	r3, [r7, #8]
 8008968:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800896c:	60bb      	str	r3, [r7, #8]
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	68ba      	ldr	r2, [r7, #8]
 8008974:	609a      	str	r2, [r3, #8]
 8008976:	e04f      	b.n	8008a18 <HAL_TIM_ConfigClockSource+0x174>
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	6818      	ldr	r0, [r3, #0]
 800897c:	683b      	ldr	r3, [r7, #0]
 800897e:	6899      	ldr	r1, [r3, #8]
 8008980:	683b      	ldr	r3, [r7, #0]
 8008982:	685a      	ldr	r2, [r3, #4]
 8008984:	683b      	ldr	r3, [r7, #0]
 8008986:	68db      	ldr	r3, [r3, #12]
 8008988:	f000 fb17 	bl	8008fba <TIM_ETR_SetConfig>
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	689a      	ldr	r2, [r3, #8]
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	681b      	ldr	r3, [r3, #0]
 8008996:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800899a:	609a      	str	r2, [r3, #8]
 800899c:	e03c      	b.n	8008a18 <HAL_TIM_ConfigClockSource+0x174>
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	6818      	ldr	r0, [r3, #0]
 80089a2:	683b      	ldr	r3, [r7, #0]
 80089a4:	6859      	ldr	r1, [r3, #4]
 80089a6:	683b      	ldr	r3, [r7, #0]
 80089a8:	68db      	ldr	r3, [r3, #12]
 80089aa:	461a      	mov	r2, r3
 80089ac:	f000 fa8e 	bl	8008ecc <TIM_TI1_ConfigInputStage>
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	2150      	movs	r1, #80	@ 0x50
 80089b6:	4618      	mov	r0, r3
 80089b8:	f000 fae5 	bl	8008f86 <TIM_ITRx_SetConfig>
 80089bc:	e02c      	b.n	8008a18 <HAL_TIM_ConfigClockSource+0x174>
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	6818      	ldr	r0, [r3, #0]
 80089c2:	683b      	ldr	r3, [r7, #0]
 80089c4:	6859      	ldr	r1, [r3, #4]
 80089c6:	683b      	ldr	r3, [r7, #0]
 80089c8:	68db      	ldr	r3, [r3, #12]
 80089ca:	461a      	mov	r2, r3
 80089cc:	f000 faac 	bl	8008f28 <TIM_TI2_ConfigInputStage>
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	2160      	movs	r1, #96	@ 0x60
 80089d6:	4618      	mov	r0, r3
 80089d8:	f000 fad5 	bl	8008f86 <TIM_ITRx_SetConfig>
 80089dc:	e01c      	b.n	8008a18 <HAL_TIM_ConfigClockSource+0x174>
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	6818      	ldr	r0, [r3, #0]
 80089e2:	683b      	ldr	r3, [r7, #0]
 80089e4:	6859      	ldr	r1, [r3, #4]
 80089e6:	683b      	ldr	r3, [r7, #0]
 80089e8:	68db      	ldr	r3, [r3, #12]
 80089ea:	461a      	mov	r2, r3
 80089ec:	f000 fa6e 	bl	8008ecc <TIM_TI1_ConfigInputStage>
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	2140      	movs	r1, #64	@ 0x40
 80089f6:	4618      	mov	r0, r3
 80089f8:	f000 fac5 	bl	8008f86 <TIM_ITRx_SetConfig>
 80089fc:	e00c      	b.n	8008a18 <HAL_TIM_ConfigClockSource+0x174>
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	681a      	ldr	r2, [r3, #0]
 8008a02:	683b      	ldr	r3, [r7, #0]
 8008a04:	681b      	ldr	r3, [r3, #0]
 8008a06:	4619      	mov	r1, r3
 8008a08:	4610      	mov	r0, r2
 8008a0a:	f000 fabc 	bl	8008f86 <TIM_ITRx_SetConfig>
 8008a0e:	e003      	b.n	8008a18 <HAL_TIM_ConfigClockSource+0x174>
 8008a10:	2301      	movs	r3, #1
 8008a12:	73fb      	strb	r3, [r7, #15]
 8008a14:	e000      	b.n	8008a18 <HAL_TIM_ConfigClockSource+0x174>
 8008a16:	bf00      	nop
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	2201      	movs	r2, #1
 8008a1c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	2200      	movs	r2, #0
 8008a24:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8008a28:	7bfb      	ldrb	r3, [r7, #15]
 8008a2a:	4618      	mov	r0, r3
 8008a2c:	3710      	adds	r7, #16
 8008a2e:	46bd      	mov	sp, r7
 8008a30:	bd80      	pop	{r7, pc}

08008a32 <HAL_TIM_OC_DelayElapsedCallback>:
 8008a32:	b480      	push	{r7}
 8008a34:	b083      	sub	sp, #12
 8008a36:	af00      	add	r7, sp, #0
 8008a38:	6078      	str	r0, [r7, #4]
 8008a3a:	bf00      	nop
 8008a3c:	370c      	adds	r7, #12
 8008a3e:	46bd      	mov	sp, r7
 8008a40:	bc80      	pop	{r7}
 8008a42:	4770      	bx	lr

08008a44 <HAL_TIM_IC_CaptureCallback>:
 8008a44:	b480      	push	{r7}
 8008a46:	b083      	sub	sp, #12
 8008a48:	af00      	add	r7, sp, #0
 8008a4a:	6078      	str	r0, [r7, #4]
 8008a4c:	bf00      	nop
 8008a4e:	370c      	adds	r7, #12
 8008a50:	46bd      	mov	sp, r7
 8008a52:	bc80      	pop	{r7}
 8008a54:	4770      	bx	lr

08008a56 <HAL_TIM_TriggerCallback>:
 8008a56:	b480      	push	{r7}
 8008a58:	b083      	sub	sp, #12
 8008a5a:	af00      	add	r7, sp, #0
 8008a5c:	6078      	str	r0, [r7, #4]
 8008a5e:	bf00      	nop
 8008a60:	370c      	adds	r7, #12
 8008a62:	46bd      	mov	sp, r7
 8008a64:	bc80      	pop	{r7}
 8008a66:	4770      	bx	lr

08008a68 <TIM_Base_SetConfig>:
 8008a68:	b480      	push	{r7}
 8008a6a:	b085      	sub	sp, #20
 8008a6c:	af00      	add	r7, sp, #0
 8008a6e:	6078      	str	r0, [r7, #4]
 8008a70:	6039      	str	r1, [r7, #0]
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	60fb      	str	r3, [r7, #12]
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	4a39      	ldr	r2, [pc, #228]	@ (8008b60 <TIM_Base_SetConfig+0xf8>)
 8008a7c:	4293      	cmp	r3, r2
 8008a7e:	d013      	beq.n	8008aa8 <TIM_Base_SetConfig+0x40>
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	4a38      	ldr	r2, [pc, #224]	@ (8008b64 <TIM_Base_SetConfig+0xfc>)
 8008a84:	4293      	cmp	r3, r2
 8008a86:	d00f      	beq.n	8008aa8 <TIM_Base_SetConfig+0x40>
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008a8e:	d00b      	beq.n	8008aa8 <TIM_Base_SetConfig+0x40>
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	4a35      	ldr	r2, [pc, #212]	@ (8008b68 <TIM_Base_SetConfig+0x100>)
 8008a94:	4293      	cmp	r3, r2
 8008a96:	d007      	beq.n	8008aa8 <TIM_Base_SetConfig+0x40>
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	4a34      	ldr	r2, [pc, #208]	@ (8008b6c <TIM_Base_SetConfig+0x104>)
 8008a9c:	4293      	cmp	r3, r2
 8008a9e:	d003      	beq.n	8008aa8 <TIM_Base_SetConfig+0x40>
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	4a33      	ldr	r2, [pc, #204]	@ (8008b70 <TIM_Base_SetConfig+0x108>)
 8008aa4:	4293      	cmp	r3, r2
 8008aa6:	d108      	bne.n	8008aba <TIM_Base_SetConfig+0x52>
 8008aa8:	68fb      	ldr	r3, [r7, #12]
 8008aaa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008aae:	60fb      	str	r3, [r7, #12]
 8008ab0:	683b      	ldr	r3, [r7, #0]
 8008ab2:	685b      	ldr	r3, [r3, #4]
 8008ab4:	68fa      	ldr	r2, [r7, #12]
 8008ab6:	4313      	orrs	r3, r2
 8008ab8:	60fb      	str	r3, [r7, #12]
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	4a28      	ldr	r2, [pc, #160]	@ (8008b60 <TIM_Base_SetConfig+0xf8>)
 8008abe:	4293      	cmp	r3, r2
 8008ac0:	d013      	beq.n	8008aea <TIM_Base_SetConfig+0x82>
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	4a27      	ldr	r2, [pc, #156]	@ (8008b64 <TIM_Base_SetConfig+0xfc>)
 8008ac6:	4293      	cmp	r3, r2
 8008ac8:	d00f      	beq.n	8008aea <TIM_Base_SetConfig+0x82>
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008ad0:	d00b      	beq.n	8008aea <TIM_Base_SetConfig+0x82>
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	4a24      	ldr	r2, [pc, #144]	@ (8008b68 <TIM_Base_SetConfig+0x100>)
 8008ad6:	4293      	cmp	r3, r2
 8008ad8:	d007      	beq.n	8008aea <TIM_Base_SetConfig+0x82>
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	4a23      	ldr	r2, [pc, #140]	@ (8008b6c <TIM_Base_SetConfig+0x104>)
 8008ade:	4293      	cmp	r3, r2
 8008ae0:	d003      	beq.n	8008aea <TIM_Base_SetConfig+0x82>
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	4a22      	ldr	r2, [pc, #136]	@ (8008b70 <TIM_Base_SetConfig+0x108>)
 8008ae6:	4293      	cmp	r3, r2
 8008ae8:	d108      	bne.n	8008afc <TIM_Base_SetConfig+0x94>
 8008aea:	68fb      	ldr	r3, [r7, #12]
 8008aec:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008af0:	60fb      	str	r3, [r7, #12]
 8008af2:	683b      	ldr	r3, [r7, #0]
 8008af4:	68db      	ldr	r3, [r3, #12]
 8008af6:	68fa      	ldr	r2, [r7, #12]
 8008af8:	4313      	orrs	r3, r2
 8008afa:	60fb      	str	r3, [r7, #12]
 8008afc:	68fb      	ldr	r3, [r7, #12]
 8008afe:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8008b02:	683b      	ldr	r3, [r7, #0]
 8008b04:	695b      	ldr	r3, [r3, #20]
 8008b06:	4313      	orrs	r3, r2
 8008b08:	60fb      	str	r3, [r7, #12]
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	68fa      	ldr	r2, [r7, #12]
 8008b0e:	601a      	str	r2, [r3, #0]
 8008b10:	683b      	ldr	r3, [r7, #0]
 8008b12:	689a      	ldr	r2, [r3, #8]
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	62da      	str	r2, [r3, #44]	@ 0x2c
 8008b18:	683b      	ldr	r3, [r7, #0]
 8008b1a:	681a      	ldr	r2, [r3, #0]
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	629a      	str	r2, [r3, #40]	@ 0x28
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	4a0f      	ldr	r2, [pc, #60]	@ (8008b60 <TIM_Base_SetConfig+0xf8>)
 8008b24:	4293      	cmp	r3, r2
 8008b26:	d003      	beq.n	8008b30 <TIM_Base_SetConfig+0xc8>
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	4a0e      	ldr	r2, [pc, #56]	@ (8008b64 <TIM_Base_SetConfig+0xfc>)
 8008b2c:	4293      	cmp	r3, r2
 8008b2e:	d103      	bne.n	8008b38 <TIM_Base_SetConfig+0xd0>
 8008b30:	683b      	ldr	r3, [r7, #0]
 8008b32:	691a      	ldr	r2, [r3, #16]
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	631a      	str	r2, [r3, #48]	@ 0x30
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	2201      	movs	r2, #1
 8008b3c:	615a      	str	r2, [r3, #20]
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	691b      	ldr	r3, [r3, #16]
 8008b42:	f003 0301 	and.w	r3, r3, #1
 8008b46:	2b00      	cmp	r3, #0
 8008b48:	d005      	beq.n	8008b56 <TIM_Base_SetConfig+0xee>
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	691b      	ldr	r3, [r3, #16]
 8008b4e:	f023 0201 	bic.w	r2, r3, #1
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	611a      	str	r2, [r3, #16]
 8008b56:	bf00      	nop
 8008b58:	3714      	adds	r7, #20
 8008b5a:	46bd      	mov	sp, r7
 8008b5c:	bc80      	pop	{r7}
 8008b5e:	4770      	bx	lr
 8008b60:	40012c00 	.word	0x40012c00
 8008b64:	40013400 	.word	0x40013400
 8008b68:	40000400 	.word	0x40000400
 8008b6c:	40000800 	.word	0x40000800
 8008b70:	40000c00 	.word	0x40000c00

08008b74 <TIM_OC1_SetConfig>:
 8008b74:	b480      	push	{r7}
 8008b76:	b087      	sub	sp, #28
 8008b78:	af00      	add	r7, sp, #0
 8008b7a:	6078      	str	r0, [r7, #4]
 8008b7c:	6039      	str	r1, [r7, #0]
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	6a1b      	ldr	r3, [r3, #32]
 8008b82:	617b      	str	r3, [r7, #20]
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	6a1b      	ldr	r3, [r3, #32]
 8008b88:	f023 0201 	bic.w	r2, r3, #1
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	621a      	str	r2, [r3, #32]
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	685b      	ldr	r3, [r3, #4]
 8008b94:	613b      	str	r3, [r7, #16]
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	699b      	ldr	r3, [r3, #24]
 8008b9a:	60fb      	str	r3, [r7, #12]
 8008b9c:	68fb      	ldr	r3, [r7, #12]
 8008b9e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008ba2:	60fb      	str	r3, [r7, #12]
 8008ba4:	68fb      	ldr	r3, [r7, #12]
 8008ba6:	f023 0303 	bic.w	r3, r3, #3
 8008baa:	60fb      	str	r3, [r7, #12]
 8008bac:	683b      	ldr	r3, [r7, #0]
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	68fa      	ldr	r2, [r7, #12]
 8008bb2:	4313      	orrs	r3, r2
 8008bb4:	60fb      	str	r3, [r7, #12]
 8008bb6:	697b      	ldr	r3, [r7, #20]
 8008bb8:	f023 0302 	bic.w	r3, r3, #2
 8008bbc:	617b      	str	r3, [r7, #20]
 8008bbe:	683b      	ldr	r3, [r7, #0]
 8008bc0:	689b      	ldr	r3, [r3, #8]
 8008bc2:	697a      	ldr	r2, [r7, #20]
 8008bc4:	4313      	orrs	r3, r2
 8008bc6:	617b      	str	r3, [r7, #20]
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	4a20      	ldr	r2, [pc, #128]	@ (8008c4c <TIM_OC1_SetConfig+0xd8>)
 8008bcc:	4293      	cmp	r3, r2
 8008bce:	d003      	beq.n	8008bd8 <TIM_OC1_SetConfig+0x64>
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	4a1f      	ldr	r2, [pc, #124]	@ (8008c50 <TIM_OC1_SetConfig+0xdc>)
 8008bd4:	4293      	cmp	r3, r2
 8008bd6:	d10c      	bne.n	8008bf2 <TIM_OC1_SetConfig+0x7e>
 8008bd8:	697b      	ldr	r3, [r7, #20]
 8008bda:	f023 0308 	bic.w	r3, r3, #8
 8008bde:	617b      	str	r3, [r7, #20]
 8008be0:	683b      	ldr	r3, [r7, #0]
 8008be2:	68db      	ldr	r3, [r3, #12]
 8008be4:	697a      	ldr	r2, [r7, #20]
 8008be6:	4313      	orrs	r3, r2
 8008be8:	617b      	str	r3, [r7, #20]
 8008bea:	697b      	ldr	r3, [r7, #20]
 8008bec:	f023 0304 	bic.w	r3, r3, #4
 8008bf0:	617b      	str	r3, [r7, #20]
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	4a15      	ldr	r2, [pc, #84]	@ (8008c4c <TIM_OC1_SetConfig+0xd8>)
 8008bf6:	4293      	cmp	r3, r2
 8008bf8:	d003      	beq.n	8008c02 <TIM_OC1_SetConfig+0x8e>
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	4a14      	ldr	r2, [pc, #80]	@ (8008c50 <TIM_OC1_SetConfig+0xdc>)
 8008bfe:	4293      	cmp	r3, r2
 8008c00:	d111      	bne.n	8008c26 <TIM_OC1_SetConfig+0xb2>
 8008c02:	693b      	ldr	r3, [r7, #16]
 8008c04:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008c08:	613b      	str	r3, [r7, #16]
 8008c0a:	693b      	ldr	r3, [r7, #16]
 8008c0c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8008c10:	613b      	str	r3, [r7, #16]
 8008c12:	683b      	ldr	r3, [r7, #0]
 8008c14:	695b      	ldr	r3, [r3, #20]
 8008c16:	693a      	ldr	r2, [r7, #16]
 8008c18:	4313      	orrs	r3, r2
 8008c1a:	613b      	str	r3, [r7, #16]
 8008c1c:	683b      	ldr	r3, [r7, #0]
 8008c1e:	699b      	ldr	r3, [r3, #24]
 8008c20:	693a      	ldr	r2, [r7, #16]
 8008c22:	4313      	orrs	r3, r2
 8008c24:	613b      	str	r3, [r7, #16]
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	693a      	ldr	r2, [r7, #16]
 8008c2a:	605a      	str	r2, [r3, #4]
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	68fa      	ldr	r2, [r7, #12]
 8008c30:	619a      	str	r2, [r3, #24]
 8008c32:	683b      	ldr	r3, [r7, #0]
 8008c34:	685a      	ldr	r2, [r3, #4]
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	635a      	str	r2, [r3, #52]	@ 0x34
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	697a      	ldr	r2, [r7, #20]
 8008c3e:	621a      	str	r2, [r3, #32]
 8008c40:	bf00      	nop
 8008c42:	371c      	adds	r7, #28
 8008c44:	46bd      	mov	sp, r7
 8008c46:	bc80      	pop	{r7}
 8008c48:	4770      	bx	lr
 8008c4a:	bf00      	nop
 8008c4c:	40012c00 	.word	0x40012c00
 8008c50:	40013400 	.word	0x40013400

08008c54 <TIM_OC2_SetConfig>:
 8008c54:	b480      	push	{r7}
 8008c56:	b087      	sub	sp, #28
 8008c58:	af00      	add	r7, sp, #0
 8008c5a:	6078      	str	r0, [r7, #4]
 8008c5c:	6039      	str	r1, [r7, #0]
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	6a1b      	ldr	r3, [r3, #32]
 8008c62:	617b      	str	r3, [r7, #20]
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	6a1b      	ldr	r3, [r3, #32]
 8008c68:	f023 0210 	bic.w	r2, r3, #16
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	621a      	str	r2, [r3, #32]
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	685b      	ldr	r3, [r3, #4]
 8008c74:	613b      	str	r3, [r7, #16]
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	699b      	ldr	r3, [r3, #24]
 8008c7a:	60fb      	str	r3, [r7, #12]
 8008c7c:	68fb      	ldr	r3, [r7, #12]
 8008c7e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008c82:	60fb      	str	r3, [r7, #12]
 8008c84:	68fb      	ldr	r3, [r7, #12]
 8008c86:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008c8a:	60fb      	str	r3, [r7, #12]
 8008c8c:	683b      	ldr	r3, [r7, #0]
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	021b      	lsls	r3, r3, #8
 8008c92:	68fa      	ldr	r2, [r7, #12]
 8008c94:	4313      	orrs	r3, r2
 8008c96:	60fb      	str	r3, [r7, #12]
 8008c98:	697b      	ldr	r3, [r7, #20]
 8008c9a:	f023 0320 	bic.w	r3, r3, #32
 8008c9e:	617b      	str	r3, [r7, #20]
 8008ca0:	683b      	ldr	r3, [r7, #0]
 8008ca2:	689b      	ldr	r3, [r3, #8]
 8008ca4:	011b      	lsls	r3, r3, #4
 8008ca6:	697a      	ldr	r2, [r7, #20]
 8008ca8:	4313      	orrs	r3, r2
 8008caa:	617b      	str	r3, [r7, #20]
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	4a21      	ldr	r2, [pc, #132]	@ (8008d34 <TIM_OC2_SetConfig+0xe0>)
 8008cb0:	4293      	cmp	r3, r2
 8008cb2:	d003      	beq.n	8008cbc <TIM_OC2_SetConfig+0x68>
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	4a20      	ldr	r2, [pc, #128]	@ (8008d38 <TIM_OC2_SetConfig+0xe4>)
 8008cb8:	4293      	cmp	r3, r2
 8008cba:	d10d      	bne.n	8008cd8 <TIM_OC2_SetConfig+0x84>
 8008cbc:	697b      	ldr	r3, [r7, #20]
 8008cbe:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008cc2:	617b      	str	r3, [r7, #20]
 8008cc4:	683b      	ldr	r3, [r7, #0]
 8008cc6:	68db      	ldr	r3, [r3, #12]
 8008cc8:	011b      	lsls	r3, r3, #4
 8008cca:	697a      	ldr	r2, [r7, #20]
 8008ccc:	4313      	orrs	r3, r2
 8008cce:	617b      	str	r3, [r7, #20]
 8008cd0:	697b      	ldr	r3, [r7, #20]
 8008cd2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008cd6:	617b      	str	r3, [r7, #20]
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	4a16      	ldr	r2, [pc, #88]	@ (8008d34 <TIM_OC2_SetConfig+0xe0>)
 8008cdc:	4293      	cmp	r3, r2
 8008cde:	d003      	beq.n	8008ce8 <TIM_OC2_SetConfig+0x94>
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	4a15      	ldr	r2, [pc, #84]	@ (8008d38 <TIM_OC2_SetConfig+0xe4>)
 8008ce4:	4293      	cmp	r3, r2
 8008ce6:	d113      	bne.n	8008d10 <TIM_OC2_SetConfig+0xbc>
 8008ce8:	693b      	ldr	r3, [r7, #16]
 8008cea:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8008cee:	613b      	str	r3, [r7, #16]
 8008cf0:	693b      	ldr	r3, [r7, #16]
 8008cf2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8008cf6:	613b      	str	r3, [r7, #16]
 8008cf8:	683b      	ldr	r3, [r7, #0]
 8008cfa:	695b      	ldr	r3, [r3, #20]
 8008cfc:	009b      	lsls	r3, r3, #2
 8008cfe:	693a      	ldr	r2, [r7, #16]
 8008d00:	4313      	orrs	r3, r2
 8008d02:	613b      	str	r3, [r7, #16]
 8008d04:	683b      	ldr	r3, [r7, #0]
 8008d06:	699b      	ldr	r3, [r3, #24]
 8008d08:	009b      	lsls	r3, r3, #2
 8008d0a:	693a      	ldr	r2, [r7, #16]
 8008d0c:	4313      	orrs	r3, r2
 8008d0e:	613b      	str	r3, [r7, #16]
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	693a      	ldr	r2, [r7, #16]
 8008d14:	605a      	str	r2, [r3, #4]
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	68fa      	ldr	r2, [r7, #12]
 8008d1a:	619a      	str	r2, [r3, #24]
 8008d1c:	683b      	ldr	r3, [r7, #0]
 8008d1e:	685a      	ldr	r2, [r3, #4]
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	639a      	str	r2, [r3, #56]	@ 0x38
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	697a      	ldr	r2, [r7, #20]
 8008d28:	621a      	str	r2, [r3, #32]
 8008d2a:	bf00      	nop
 8008d2c:	371c      	adds	r7, #28
 8008d2e:	46bd      	mov	sp, r7
 8008d30:	bc80      	pop	{r7}
 8008d32:	4770      	bx	lr
 8008d34:	40012c00 	.word	0x40012c00
 8008d38:	40013400 	.word	0x40013400

08008d3c <TIM_OC3_SetConfig>:
 8008d3c:	b480      	push	{r7}
 8008d3e:	b087      	sub	sp, #28
 8008d40:	af00      	add	r7, sp, #0
 8008d42:	6078      	str	r0, [r7, #4]
 8008d44:	6039      	str	r1, [r7, #0]
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	6a1b      	ldr	r3, [r3, #32]
 8008d4a:	617b      	str	r3, [r7, #20]
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	6a1b      	ldr	r3, [r3, #32]
 8008d50:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	621a      	str	r2, [r3, #32]
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	685b      	ldr	r3, [r3, #4]
 8008d5c:	613b      	str	r3, [r7, #16]
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	69db      	ldr	r3, [r3, #28]
 8008d62:	60fb      	str	r3, [r7, #12]
 8008d64:	68fb      	ldr	r3, [r7, #12]
 8008d66:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008d6a:	60fb      	str	r3, [r7, #12]
 8008d6c:	68fb      	ldr	r3, [r7, #12]
 8008d6e:	f023 0303 	bic.w	r3, r3, #3
 8008d72:	60fb      	str	r3, [r7, #12]
 8008d74:	683b      	ldr	r3, [r7, #0]
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	68fa      	ldr	r2, [r7, #12]
 8008d7a:	4313      	orrs	r3, r2
 8008d7c:	60fb      	str	r3, [r7, #12]
 8008d7e:	697b      	ldr	r3, [r7, #20]
 8008d80:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8008d84:	617b      	str	r3, [r7, #20]
 8008d86:	683b      	ldr	r3, [r7, #0]
 8008d88:	689b      	ldr	r3, [r3, #8]
 8008d8a:	021b      	lsls	r3, r3, #8
 8008d8c:	697a      	ldr	r2, [r7, #20]
 8008d8e:	4313      	orrs	r3, r2
 8008d90:	617b      	str	r3, [r7, #20]
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	4a21      	ldr	r2, [pc, #132]	@ (8008e1c <TIM_OC3_SetConfig+0xe0>)
 8008d96:	4293      	cmp	r3, r2
 8008d98:	d003      	beq.n	8008da2 <TIM_OC3_SetConfig+0x66>
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	4a20      	ldr	r2, [pc, #128]	@ (8008e20 <TIM_OC3_SetConfig+0xe4>)
 8008d9e:	4293      	cmp	r3, r2
 8008da0:	d10d      	bne.n	8008dbe <TIM_OC3_SetConfig+0x82>
 8008da2:	697b      	ldr	r3, [r7, #20]
 8008da4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8008da8:	617b      	str	r3, [r7, #20]
 8008daa:	683b      	ldr	r3, [r7, #0]
 8008dac:	68db      	ldr	r3, [r3, #12]
 8008dae:	021b      	lsls	r3, r3, #8
 8008db0:	697a      	ldr	r2, [r7, #20]
 8008db2:	4313      	orrs	r3, r2
 8008db4:	617b      	str	r3, [r7, #20]
 8008db6:	697b      	ldr	r3, [r7, #20]
 8008db8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8008dbc:	617b      	str	r3, [r7, #20]
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	4a16      	ldr	r2, [pc, #88]	@ (8008e1c <TIM_OC3_SetConfig+0xe0>)
 8008dc2:	4293      	cmp	r3, r2
 8008dc4:	d003      	beq.n	8008dce <TIM_OC3_SetConfig+0x92>
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	4a15      	ldr	r2, [pc, #84]	@ (8008e20 <TIM_OC3_SetConfig+0xe4>)
 8008dca:	4293      	cmp	r3, r2
 8008dcc:	d113      	bne.n	8008df6 <TIM_OC3_SetConfig+0xba>
 8008dce:	693b      	ldr	r3, [r7, #16]
 8008dd0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008dd4:	613b      	str	r3, [r7, #16]
 8008dd6:	693b      	ldr	r3, [r7, #16]
 8008dd8:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8008ddc:	613b      	str	r3, [r7, #16]
 8008dde:	683b      	ldr	r3, [r7, #0]
 8008de0:	695b      	ldr	r3, [r3, #20]
 8008de2:	011b      	lsls	r3, r3, #4
 8008de4:	693a      	ldr	r2, [r7, #16]
 8008de6:	4313      	orrs	r3, r2
 8008de8:	613b      	str	r3, [r7, #16]
 8008dea:	683b      	ldr	r3, [r7, #0]
 8008dec:	699b      	ldr	r3, [r3, #24]
 8008dee:	011b      	lsls	r3, r3, #4
 8008df0:	693a      	ldr	r2, [r7, #16]
 8008df2:	4313      	orrs	r3, r2
 8008df4:	613b      	str	r3, [r7, #16]
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	693a      	ldr	r2, [r7, #16]
 8008dfa:	605a      	str	r2, [r3, #4]
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	68fa      	ldr	r2, [r7, #12]
 8008e00:	61da      	str	r2, [r3, #28]
 8008e02:	683b      	ldr	r3, [r7, #0]
 8008e04:	685a      	ldr	r2, [r3, #4]
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	63da      	str	r2, [r3, #60]	@ 0x3c
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	697a      	ldr	r2, [r7, #20]
 8008e0e:	621a      	str	r2, [r3, #32]
 8008e10:	bf00      	nop
 8008e12:	371c      	adds	r7, #28
 8008e14:	46bd      	mov	sp, r7
 8008e16:	bc80      	pop	{r7}
 8008e18:	4770      	bx	lr
 8008e1a:	bf00      	nop
 8008e1c:	40012c00 	.word	0x40012c00
 8008e20:	40013400 	.word	0x40013400

08008e24 <TIM_OC4_SetConfig>:
 8008e24:	b480      	push	{r7}
 8008e26:	b087      	sub	sp, #28
 8008e28:	af00      	add	r7, sp, #0
 8008e2a:	6078      	str	r0, [r7, #4]
 8008e2c:	6039      	str	r1, [r7, #0]
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	6a1b      	ldr	r3, [r3, #32]
 8008e32:	613b      	str	r3, [r7, #16]
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	6a1b      	ldr	r3, [r3, #32]
 8008e38:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	621a      	str	r2, [r3, #32]
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	685b      	ldr	r3, [r3, #4]
 8008e44:	617b      	str	r3, [r7, #20]
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	69db      	ldr	r3, [r3, #28]
 8008e4a:	60fb      	str	r3, [r7, #12]
 8008e4c:	68fb      	ldr	r3, [r7, #12]
 8008e4e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008e52:	60fb      	str	r3, [r7, #12]
 8008e54:	68fb      	ldr	r3, [r7, #12]
 8008e56:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008e5a:	60fb      	str	r3, [r7, #12]
 8008e5c:	683b      	ldr	r3, [r7, #0]
 8008e5e:	681b      	ldr	r3, [r3, #0]
 8008e60:	021b      	lsls	r3, r3, #8
 8008e62:	68fa      	ldr	r2, [r7, #12]
 8008e64:	4313      	orrs	r3, r2
 8008e66:	60fb      	str	r3, [r7, #12]
 8008e68:	693b      	ldr	r3, [r7, #16]
 8008e6a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8008e6e:	613b      	str	r3, [r7, #16]
 8008e70:	683b      	ldr	r3, [r7, #0]
 8008e72:	689b      	ldr	r3, [r3, #8]
 8008e74:	031b      	lsls	r3, r3, #12
 8008e76:	693a      	ldr	r2, [r7, #16]
 8008e78:	4313      	orrs	r3, r2
 8008e7a:	613b      	str	r3, [r7, #16]
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	4a11      	ldr	r2, [pc, #68]	@ (8008ec4 <TIM_OC4_SetConfig+0xa0>)
 8008e80:	4293      	cmp	r3, r2
 8008e82:	d003      	beq.n	8008e8c <TIM_OC4_SetConfig+0x68>
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	4a10      	ldr	r2, [pc, #64]	@ (8008ec8 <TIM_OC4_SetConfig+0xa4>)
 8008e88:	4293      	cmp	r3, r2
 8008e8a:	d109      	bne.n	8008ea0 <TIM_OC4_SetConfig+0x7c>
 8008e8c:	697b      	ldr	r3, [r7, #20]
 8008e8e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008e92:	617b      	str	r3, [r7, #20]
 8008e94:	683b      	ldr	r3, [r7, #0]
 8008e96:	695b      	ldr	r3, [r3, #20]
 8008e98:	019b      	lsls	r3, r3, #6
 8008e9a:	697a      	ldr	r2, [r7, #20]
 8008e9c:	4313      	orrs	r3, r2
 8008e9e:	617b      	str	r3, [r7, #20]
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	697a      	ldr	r2, [r7, #20]
 8008ea4:	605a      	str	r2, [r3, #4]
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	68fa      	ldr	r2, [r7, #12]
 8008eaa:	61da      	str	r2, [r3, #28]
 8008eac:	683b      	ldr	r3, [r7, #0]
 8008eae:	685a      	ldr	r2, [r3, #4]
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	641a      	str	r2, [r3, #64]	@ 0x40
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	693a      	ldr	r2, [r7, #16]
 8008eb8:	621a      	str	r2, [r3, #32]
 8008eba:	bf00      	nop
 8008ebc:	371c      	adds	r7, #28
 8008ebe:	46bd      	mov	sp, r7
 8008ec0:	bc80      	pop	{r7}
 8008ec2:	4770      	bx	lr
 8008ec4:	40012c00 	.word	0x40012c00
 8008ec8:	40013400 	.word	0x40013400

08008ecc <TIM_TI1_ConfigInputStage>:
 8008ecc:	b480      	push	{r7}
 8008ece:	b087      	sub	sp, #28
 8008ed0:	af00      	add	r7, sp, #0
 8008ed2:	60f8      	str	r0, [r7, #12]
 8008ed4:	60b9      	str	r1, [r7, #8]
 8008ed6:	607a      	str	r2, [r7, #4]
 8008ed8:	68fb      	ldr	r3, [r7, #12]
 8008eda:	6a1b      	ldr	r3, [r3, #32]
 8008edc:	617b      	str	r3, [r7, #20]
 8008ede:	68fb      	ldr	r3, [r7, #12]
 8008ee0:	6a1b      	ldr	r3, [r3, #32]
 8008ee2:	f023 0201 	bic.w	r2, r3, #1
 8008ee6:	68fb      	ldr	r3, [r7, #12]
 8008ee8:	621a      	str	r2, [r3, #32]
 8008eea:	68fb      	ldr	r3, [r7, #12]
 8008eec:	699b      	ldr	r3, [r3, #24]
 8008eee:	613b      	str	r3, [r7, #16]
 8008ef0:	693b      	ldr	r3, [r7, #16]
 8008ef2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008ef6:	613b      	str	r3, [r7, #16]
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	011b      	lsls	r3, r3, #4
 8008efc:	693a      	ldr	r2, [r7, #16]
 8008efe:	4313      	orrs	r3, r2
 8008f00:	613b      	str	r3, [r7, #16]
 8008f02:	697b      	ldr	r3, [r7, #20]
 8008f04:	f023 030a 	bic.w	r3, r3, #10
 8008f08:	617b      	str	r3, [r7, #20]
 8008f0a:	697a      	ldr	r2, [r7, #20]
 8008f0c:	68bb      	ldr	r3, [r7, #8]
 8008f0e:	4313      	orrs	r3, r2
 8008f10:	617b      	str	r3, [r7, #20]
 8008f12:	68fb      	ldr	r3, [r7, #12]
 8008f14:	693a      	ldr	r2, [r7, #16]
 8008f16:	619a      	str	r2, [r3, #24]
 8008f18:	68fb      	ldr	r3, [r7, #12]
 8008f1a:	697a      	ldr	r2, [r7, #20]
 8008f1c:	621a      	str	r2, [r3, #32]
 8008f1e:	bf00      	nop
 8008f20:	371c      	adds	r7, #28
 8008f22:	46bd      	mov	sp, r7
 8008f24:	bc80      	pop	{r7}
 8008f26:	4770      	bx	lr

08008f28 <TIM_TI2_ConfigInputStage>:
 8008f28:	b480      	push	{r7}
 8008f2a:	b087      	sub	sp, #28
 8008f2c:	af00      	add	r7, sp, #0
 8008f2e:	60f8      	str	r0, [r7, #12]
 8008f30:	60b9      	str	r1, [r7, #8]
 8008f32:	607a      	str	r2, [r7, #4]
 8008f34:	68fb      	ldr	r3, [r7, #12]
 8008f36:	6a1b      	ldr	r3, [r3, #32]
 8008f38:	617b      	str	r3, [r7, #20]
 8008f3a:	68fb      	ldr	r3, [r7, #12]
 8008f3c:	6a1b      	ldr	r3, [r3, #32]
 8008f3e:	f023 0210 	bic.w	r2, r3, #16
 8008f42:	68fb      	ldr	r3, [r7, #12]
 8008f44:	621a      	str	r2, [r3, #32]
 8008f46:	68fb      	ldr	r3, [r7, #12]
 8008f48:	699b      	ldr	r3, [r3, #24]
 8008f4a:	613b      	str	r3, [r7, #16]
 8008f4c:	693b      	ldr	r3, [r7, #16]
 8008f4e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8008f52:	613b      	str	r3, [r7, #16]
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	031b      	lsls	r3, r3, #12
 8008f58:	693a      	ldr	r2, [r7, #16]
 8008f5a:	4313      	orrs	r3, r2
 8008f5c:	613b      	str	r3, [r7, #16]
 8008f5e:	697b      	ldr	r3, [r7, #20]
 8008f60:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8008f64:	617b      	str	r3, [r7, #20]
 8008f66:	68bb      	ldr	r3, [r7, #8]
 8008f68:	011b      	lsls	r3, r3, #4
 8008f6a:	697a      	ldr	r2, [r7, #20]
 8008f6c:	4313      	orrs	r3, r2
 8008f6e:	617b      	str	r3, [r7, #20]
 8008f70:	68fb      	ldr	r3, [r7, #12]
 8008f72:	693a      	ldr	r2, [r7, #16]
 8008f74:	619a      	str	r2, [r3, #24]
 8008f76:	68fb      	ldr	r3, [r7, #12]
 8008f78:	697a      	ldr	r2, [r7, #20]
 8008f7a:	621a      	str	r2, [r3, #32]
 8008f7c:	bf00      	nop
 8008f7e:	371c      	adds	r7, #28
 8008f80:	46bd      	mov	sp, r7
 8008f82:	bc80      	pop	{r7}
 8008f84:	4770      	bx	lr

08008f86 <TIM_ITRx_SetConfig>:
 8008f86:	b480      	push	{r7}
 8008f88:	b085      	sub	sp, #20
 8008f8a:	af00      	add	r7, sp, #0
 8008f8c:	6078      	str	r0, [r7, #4]
 8008f8e:	6039      	str	r1, [r7, #0]
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	689b      	ldr	r3, [r3, #8]
 8008f94:	60fb      	str	r3, [r7, #12]
 8008f96:	68fb      	ldr	r3, [r7, #12]
 8008f98:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008f9c:	60fb      	str	r3, [r7, #12]
 8008f9e:	683a      	ldr	r2, [r7, #0]
 8008fa0:	68fb      	ldr	r3, [r7, #12]
 8008fa2:	4313      	orrs	r3, r2
 8008fa4:	f043 0307 	orr.w	r3, r3, #7
 8008fa8:	60fb      	str	r3, [r7, #12]
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	68fa      	ldr	r2, [r7, #12]
 8008fae:	609a      	str	r2, [r3, #8]
 8008fb0:	bf00      	nop
 8008fb2:	3714      	adds	r7, #20
 8008fb4:	46bd      	mov	sp, r7
 8008fb6:	bc80      	pop	{r7}
 8008fb8:	4770      	bx	lr

08008fba <TIM_ETR_SetConfig>:
 8008fba:	b480      	push	{r7}
 8008fbc:	b087      	sub	sp, #28
 8008fbe:	af00      	add	r7, sp, #0
 8008fc0:	60f8      	str	r0, [r7, #12]
 8008fc2:	60b9      	str	r1, [r7, #8]
 8008fc4:	607a      	str	r2, [r7, #4]
 8008fc6:	603b      	str	r3, [r7, #0]
 8008fc8:	68fb      	ldr	r3, [r7, #12]
 8008fca:	689b      	ldr	r3, [r3, #8]
 8008fcc:	617b      	str	r3, [r7, #20]
 8008fce:	697b      	ldr	r3, [r7, #20]
 8008fd0:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008fd4:	617b      	str	r3, [r7, #20]
 8008fd6:	683b      	ldr	r3, [r7, #0]
 8008fd8:	021a      	lsls	r2, r3, #8
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	431a      	orrs	r2, r3
 8008fde:	68bb      	ldr	r3, [r7, #8]
 8008fe0:	4313      	orrs	r3, r2
 8008fe2:	697a      	ldr	r2, [r7, #20]
 8008fe4:	4313      	orrs	r3, r2
 8008fe6:	617b      	str	r3, [r7, #20]
 8008fe8:	68fb      	ldr	r3, [r7, #12]
 8008fea:	697a      	ldr	r2, [r7, #20]
 8008fec:	609a      	str	r2, [r3, #8]
 8008fee:	bf00      	nop
 8008ff0:	371c      	adds	r7, #28
 8008ff2:	46bd      	mov	sp, r7
 8008ff4:	bc80      	pop	{r7}
 8008ff6:	4770      	bx	lr

08008ff8 <TIM_CCxChannelCmd>:
 8008ff8:	b480      	push	{r7}
 8008ffa:	b087      	sub	sp, #28
 8008ffc:	af00      	add	r7, sp, #0
 8008ffe:	60f8      	str	r0, [r7, #12]
 8009000:	60b9      	str	r1, [r7, #8]
 8009002:	607a      	str	r2, [r7, #4]
 8009004:	68bb      	ldr	r3, [r7, #8]
 8009006:	f003 031f 	and.w	r3, r3, #31
 800900a:	2201      	movs	r2, #1
 800900c:	fa02 f303 	lsl.w	r3, r2, r3
 8009010:	617b      	str	r3, [r7, #20]
 8009012:	68fb      	ldr	r3, [r7, #12]
 8009014:	6a1a      	ldr	r2, [r3, #32]
 8009016:	697b      	ldr	r3, [r7, #20]
 8009018:	43db      	mvns	r3, r3
 800901a:	401a      	ands	r2, r3
 800901c:	68fb      	ldr	r3, [r7, #12]
 800901e:	621a      	str	r2, [r3, #32]
 8009020:	68fb      	ldr	r3, [r7, #12]
 8009022:	6a1a      	ldr	r2, [r3, #32]
 8009024:	68bb      	ldr	r3, [r7, #8]
 8009026:	f003 031f 	and.w	r3, r3, #31
 800902a:	6879      	ldr	r1, [r7, #4]
 800902c:	fa01 f303 	lsl.w	r3, r1, r3
 8009030:	431a      	orrs	r2, r3
 8009032:	68fb      	ldr	r3, [r7, #12]
 8009034:	621a      	str	r2, [r3, #32]
 8009036:	bf00      	nop
 8009038:	371c      	adds	r7, #28
 800903a:	46bd      	mov	sp, r7
 800903c:	bc80      	pop	{r7}
 800903e:	4770      	bx	lr

08009040 <HAL_TIMEx_MasterConfigSynchronization>:
 8009040:	b480      	push	{r7}
 8009042:	b085      	sub	sp, #20
 8009044:	af00      	add	r7, sp, #0
 8009046:	6078      	str	r0, [r7, #4]
 8009048:	6039      	str	r1, [r7, #0]
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009050:	2b01      	cmp	r3, #1
 8009052:	d101      	bne.n	8009058 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009054:	2302      	movs	r3, #2
 8009056:	e050      	b.n	80090fa <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	2201      	movs	r2, #1
 800905c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	2202      	movs	r2, #2
 8009064:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	681b      	ldr	r3, [r3, #0]
 800906c:	685b      	ldr	r3, [r3, #4]
 800906e:	60fb      	str	r3, [r7, #12]
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	681b      	ldr	r3, [r3, #0]
 8009074:	689b      	ldr	r3, [r3, #8]
 8009076:	60bb      	str	r3, [r7, #8]
 8009078:	68fb      	ldr	r3, [r7, #12]
 800907a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800907e:	60fb      	str	r3, [r7, #12]
 8009080:	683b      	ldr	r3, [r7, #0]
 8009082:	681b      	ldr	r3, [r3, #0]
 8009084:	68fa      	ldr	r2, [r7, #12]
 8009086:	4313      	orrs	r3, r2
 8009088:	60fb      	str	r3, [r7, #12]
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	681b      	ldr	r3, [r3, #0]
 800908e:	68fa      	ldr	r2, [r7, #12]
 8009090:	605a      	str	r2, [r3, #4]
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	681b      	ldr	r3, [r3, #0]
 8009096:	4a1b      	ldr	r2, [pc, #108]	@ (8009104 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8009098:	4293      	cmp	r3, r2
 800909a:	d018      	beq.n	80090ce <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	681b      	ldr	r3, [r3, #0]
 80090a0:	4a19      	ldr	r2, [pc, #100]	@ (8009108 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80090a2:	4293      	cmp	r3, r2
 80090a4:	d013      	beq.n	80090ce <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	681b      	ldr	r3, [r3, #0]
 80090aa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80090ae:	d00e      	beq.n	80090ce <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	681b      	ldr	r3, [r3, #0]
 80090b4:	4a15      	ldr	r2, [pc, #84]	@ (800910c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80090b6:	4293      	cmp	r3, r2
 80090b8:	d009      	beq.n	80090ce <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	681b      	ldr	r3, [r3, #0]
 80090be:	4a14      	ldr	r2, [pc, #80]	@ (8009110 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80090c0:	4293      	cmp	r3, r2
 80090c2:	d004      	beq.n	80090ce <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	4a12      	ldr	r2, [pc, #72]	@ (8009114 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80090ca:	4293      	cmp	r3, r2
 80090cc:	d10c      	bne.n	80090e8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 80090ce:	68bb      	ldr	r3, [r7, #8]
 80090d0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80090d4:	60bb      	str	r3, [r7, #8]
 80090d6:	683b      	ldr	r3, [r7, #0]
 80090d8:	685b      	ldr	r3, [r3, #4]
 80090da:	68ba      	ldr	r2, [r7, #8]
 80090dc:	4313      	orrs	r3, r2
 80090de:	60bb      	str	r3, [r7, #8]
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	681b      	ldr	r3, [r3, #0]
 80090e4:	68ba      	ldr	r2, [r7, #8]
 80090e6:	609a      	str	r2, [r3, #8]
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	2201      	movs	r2, #1
 80090ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	2200      	movs	r2, #0
 80090f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 80090f8:	2300      	movs	r3, #0
 80090fa:	4618      	mov	r0, r3
 80090fc:	3714      	adds	r7, #20
 80090fe:	46bd      	mov	sp, r7
 8009100:	bc80      	pop	{r7}
 8009102:	4770      	bx	lr
 8009104:	40012c00 	.word	0x40012c00
 8009108:	40013400 	.word	0x40013400
 800910c:	40000400 	.word	0x40000400
 8009110:	40000800 	.word	0x40000800
 8009114:	40000c00 	.word	0x40000c00

08009118 <HAL_TIMEx_ConfigBreakDeadTime>:
 8009118:	b480      	push	{r7}
 800911a:	b085      	sub	sp, #20
 800911c:	af00      	add	r7, sp, #0
 800911e:	6078      	str	r0, [r7, #4]
 8009120:	6039      	str	r1, [r7, #0]
 8009122:	2300      	movs	r3, #0
 8009124:	60fb      	str	r3, [r7, #12]
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800912c:	2b01      	cmp	r3, #1
 800912e:	d101      	bne.n	8009134 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8009130:	2302      	movs	r3, #2
 8009132:	e03d      	b.n	80091b0 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	2201      	movs	r2, #1
 8009138:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 800913c:	68fb      	ldr	r3, [r7, #12]
 800913e:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8009142:	683b      	ldr	r3, [r7, #0]
 8009144:	68db      	ldr	r3, [r3, #12]
 8009146:	4313      	orrs	r3, r2
 8009148:	60fb      	str	r3, [r7, #12]
 800914a:	68fb      	ldr	r3, [r7, #12]
 800914c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8009150:	683b      	ldr	r3, [r7, #0]
 8009152:	689b      	ldr	r3, [r3, #8]
 8009154:	4313      	orrs	r3, r2
 8009156:	60fb      	str	r3, [r7, #12]
 8009158:	68fb      	ldr	r3, [r7, #12]
 800915a:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800915e:	683b      	ldr	r3, [r7, #0]
 8009160:	685b      	ldr	r3, [r3, #4]
 8009162:	4313      	orrs	r3, r2
 8009164:	60fb      	str	r3, [r7, #12]
 8009166:	68fb      	ldr	r3, [r7, #12]
 8009168:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800916c:	683b      	ldr	r3, [r7, #0]
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	4313      	orrs	r3, r2
 8009172:	60fb      	str	r3, [r7, #12]
 8009174:	68fb      	ldr	r3, [r7, #12]
 8009176:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800917a:	683b      	ldr	r3, [r7, #0]
 800917c:	691b      	ldr	r3, [r3, #16]
 800917e:	4313      	orrs	r3, r2
 8009180:	60fb      	str	r3, [r7, #12]
 8009182:	68fb      	ldr	r3, [r7, #12]
 8009184:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8009188:	683b      	ldr	r3, [r7, #0]
 800918a:	695b      	ldr	r3, [r3, #20]
 800918c:	4313      	orrs	r3, r2
 800918e:	60fb      	str	r3, [r7, #12]
 8009190:	68fb      	ldr	r3, [r7, #12]
 8009192:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8009196:	683b      	ldr	r3, [r7, #0]
 8009198:	69db      	ldr	r3, [r3, #28]
 800919a:	4313      	orrs	r3, r2
 800919c:	60fb      	str	r3, [r7, #12]
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	681b      	ldr	r3, [r3, #0]
 80091a2:	68fa      	ldr	r2, [r7, #12]
 80091a4:	645a      	str	r2, [r3, #68]	@ 0x44
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	2200      	movs	r2, #0
 80091aa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 80091ae:	2300      	movs	r3, #0
 80091b0:	4618      	mov	r0, r3
 80091b2:	3714      	adds	r7, #20
 80091b4:	46bd      	mov	sp, r7
 80091b6:	bc80      	pop	{r7}
 80091b8:	4770      	bx	lr

080091ba <HAL_TIMEx_CommutCallback>:
 80091ba:	b480      	push	{r7}
 80091bc:	b083      	sub	sp, #12
 80091be:	af00      	add	r7, sp, #0
 80091c0:	6078      	str	r0, [r7, #4]
 80091c2:	bf00      	nop
 80091c4:	370c      	adds	r7, #12
 80091c6:	46bd      	mov	sp, r7
 80091c8:	bc80      	pop	{r7}
 80091ca:	4770      	bx	lr

080091cc <HAL_TIMEx_BreakCallback>:
 80091cc:	b480      	push	{r7}
 80091ce:	b083      	sub	sp, #12
 80091d0:	af00      	add	r7, sp, #0
 80091d2:	6078      	str	r0, [r7, #4]
 80091d4:	bf00      	nop
 80091d6:	370c      	adds	r7, #12
 80091d8:	46bd      	mov	sp, r7
 80091da:	bc80      	pop	{r7}
 80091dc:	4770      	bx	lr

080091de <HAL_UART_Init>:
 80091de:	b580      	push	{r7, lr}
 80091e0:	b082      	sub	sp, #8
 80091e2:	af00      	add	r7, sp, #0
 80091e4:	6078      	str	r0, [r7, #4]
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	2b00      	cmp	r3, #0
 80091ea:	d101      	bne.n	80091f0 <HAL_UART_Init+0x12>
 80091ec:	2301      	movs	r3, #1
 80091ee:	e042      	b.n	8009276 <HAL_UART_Init+0x98>
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80091f6:	b2db      	uxtb	r3, r3
 80091f8:	2b00      	cmp	r3, #0
 80091fa:	d106      	bne.n	800920a <HAL_UART_Init+0x2c>
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	2200      	movs	r2, #0
 8009200:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8009204:	6878      	ldr	r0, [r7, #4]
 8009206:	f7fa ff25 	bl	8004054 <HAL_UART_MspInit>
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	2224      	movs	r2, #36	@ 0x24
 800920e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	681b      	ldr	r3, [r3, #0]
 8009216:	68da      	ldr	r2, [r3, #12]
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8009220:	60da      	str	r2, [r3, #12]
 8009222:	6878      	ldr	r0, [r7, #4]
 8009224:	f000 fdb8 	bl	8009d98 <UART_SetConfig>
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	691a      	ldr	r2, [r3, #16]
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	681b      	ldr	r3, [r3, #0]
 8009232:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8009236:	611a      	str	r2, [r3, #16]
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	681b      	ldr	r3, [r3, #0]
 800923c:	695a      	ldr	r2, [r3, #20]
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	681b      	ldr	r3, [r3, #0]
 8009242:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8009246:	615a      	str	r2, [r3, #20]
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	681b      	ldr	r3, [r3, #0]
 800924c:	68da      	ldr	r2, [r3, #12]
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	681b      	ldr	r3, [r3, #0]
 8009252:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8009256:	60da      	str	r2, [r3, #12]
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	2200      	movs	r2, #0
 800925c:	645a      	str	r2, [r3, #68]	@ 0x44
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	2220      	movs	r2, #32
 8009262:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	2220      	movs	r2, #32
 800926a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	2200      	movs	r2, #0
 8009272:	635a      	str	r2, [r3, #52]	@ 0x34
 8009274:	2300      	movs	r3, #0
 8009276:	4618      	mov	r0, r3
 8009278:	3708      	adds	r7, #8
 800927a:	46bd      	mov	sp, r7
 800927c:	bd80      	pop	{r7, pc}

0800927e <HAL_UART_Transmit>:
 800927e:	b580      	push	{r7, lr}
 8009280:	b08a      	sub	sp, #40	@ 0x28
 8009282:	af02      	add	r7, sp, #8
 8009284:	60f8      	str	r0, [r7, #12]
 8009286:	60b9      	str	r1, [r7, #8]
 8009288:	603b      	str	r3, [r7, #0]
 800928a:	4613      	mov	r3, r2
 800928c:	80fb      	strh	r3, [r7, #6]
 800928e:	2300      	movs	r3, #0
 8009290:	617b      	str	r3, [r7, #20]
 8009292:	68fb      	ldr	r3, [r7, #12]
 8009294:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009298:	b2db      	uxtb	r3, r3
 800929a:	2b20      	cmp	r3, #32
 800929c:	d175      	bne.n	800938a <HAL_UART_Transmit+0x10c>
 800929e:	68bb      	ldr	r3, [r7, #8]
 80092a0:	2b00      	cmp	r3, #0
 80092a2:	d002      	beq.n	80092aa <HAL_UART_Transmit+0x2c>
 80092a4:	88fb      	ldrh	r3, [r7, #6]
 80092a6:	2b00      	cmp	r3, #0
 80092a8:	d101      	bne.n	80092ae <HAL_UART_Transmit+0x30>
 80092aa:	2301      	movs	r3, #1
 80092ac:	e06e      	b.n	800938c <HAL_UART_Transmit+0x10e>
 80092ae:	68fb      	ldr	r3, [r7, #12]
 80092b0:	2200      	movs	r2, #0
 80092b2:	645a      	str	r2, [r3, #68]	@ 0x44
 80092b4:	68fb      	ldr	r3, [r7, #12]
 80092b6:	2221      	movs	r2, #33	@ 0x21
 80092b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80092bc:	f7fb f858 	bl	8004370 <HAL_GetTick>
 80092c0:	6178      	str	r0, [r7, #20]
 80092c2:	68fb      	ldr	r3, [r7, #12]
 80092c4:	88fa      	ldrh	r2, [r7, #6]
 80092c6:	849a      	strh	r2, [r3, #36]	@ 0x24
 80092c8:	68fb      	ldr	r3, [r7, #12]
 80092ca:	88fa      	ldrh	r2, [r7, #6]
 80092cc:	84da      	strh	r2, [r3, #38]	@ 0x26
 80092ce:	68fb      	ldr	r3, [r7, #12]
 80092d0:	689b      	ldr	r3, [r3, #8]
 80092d2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80092d6:	d108      	bne.n	80092ea <HAL_UART_Transmit+0x6c>
 80092d8:	68fb      	ldr	r3, [r7, #12]
 80092da:	691b      	ldr	r3, [r3, #16]
 80092dc:	2b00      	cmp	r3, #0
 80092de:	d104      	bne.n	80092ea <HAL_UART_Transmit+0x6c>
 80092e0:	2300      	movs	r3, #0
 80092e2:	61fb      	str	r3, [r7, #28]
 80092e4:	68bb      	ldr	r3, [r7, #8]
 80092e6:	61bb      	str	r3, [r7, #24]
 80092e8:	e003      	b.n	80092f2 <HAL_UART_Transmit+0x74>
 80092ea:	68bb      	ldr	r3, [r7, #8]
 80092ec:	61fb      	str	r3, [r7, #28]
 80092ee:	2300      	movs	r3, #0
 80092f0:	61bb      	str	r3, [r7, #24]
 80092f2:	e02e      	b.n	8009352 <HAL_UART_Transmit+0xd4>
 80092f4:	683b      	ldr	r3, [r7, #0]
 80092f6:	9300      	str	r3, [sp, #0]
 80092f8:	697b      	ldr	r3, [r7, #20]
 80092fa:	2200      	movs	r2, #0
 80092fc:	2180      	movs	r1, #128	@ 0x80
 80092fe:	68f8      	ldr	r0, [r7, #12]
 8009300:	f000 fb1d 	bl	800993e <UART_WaitOnFlagUntilTimeout>
 8009304:	4603      	mov	r3, r0
 8009306:	2b00      	cmp	r3, #0
 8009308:	d005      	beq.n	8009316 <HAL_UART_Transmit+0x98>
 800930a:	68fb      	ldr	r3, [r7, #12]
 800930c:	2220      	movs	r2, #32
 800930e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8009312:	2303      	movs	r3, #3
 8009314:	e03a      	b.n	800938c <HAL_UART_Transmit+0x10e>
 8009316:	69fb      	ldr	r3, [r7, #28]
 8009318:	2b00      	cmp	r3, #0
 800931a:	d10b      	bne.n	8009334 <HAL_UART_Transmit+0xb6>
 800931c:	69bb      	ldr	r3, [r7, #24]
 800931e:	881b      	ldrh	r3, [r3, #0]
 8009320:	461a      	mov	r2, r3
 8009322:	68fb      	ldr	r3, [r7, #12]
 8009324:	681b      	ldr	r3, [r3, #0]
 8009326:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800932a:	605a      	str	r2, [r3, #4]
 800932c:	69bb      	ldr	r3, [r7, #24]
 800932e:	3302      	adds	r3, #2
 8009330:	61bb      	str	r3, [r7, #24]
 8009332:	e007      	b.n	8009344 <HAL_UART_Transmit+0xc6>
 8009334:	69fb      	ldr	r3, [r7, #28]
 8009336:	781a      	ldrb	r2, [r3, #0]
 8009338:	68fb      	ldr	r3, [r7, #12]
 800933a:	681b      	ldr	r3, [r3, #0]
 800933c:	605a      	str	r2, [r3, #4]
 800933e:	69fb      	ldr	r3, [r7, #28]
 8009340:	3301      	adds	r3, #1
 8009342:	61fb      	str	r3, [r7, #28]
 8009344:	68fb      	ldr	r3, [r7, #12]
 8009346:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8009348:	b29b      	uxth	r3, r3
 800934a:	3b01      	subs	r3, #1
 800934c:	b29a      	uxth	r2, r3
 800934e:	68fb      	ldr	r3, [r7, #12]
 8009350:	84da      	strh	r2, [r3, #38]	@ 0x26
 8009352:	68fb      	ldr	r3, [r7, #12]
 8009354:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8009356:	b29b      	uxth	r3, r3
 8009358:	2b00      	cmp	r3, #0
 800935a:	d1cb      	bne.n	80092f4 <HAL_UART_Transmit+0x76>
 800935c:	683b      	ldr	r3, [r7, #0]
 800935e:	9300      	str	r3, [sp, #0]
 8009360:	697b      	ldr	r3, [r7, #20]
 8009362:	2200      	movs	r2, #0
 8009364:	2140      	movs	r1, #64	@ 0x40
 8009366:	68f8      	ldr	r0, [r7, #12]
 8009368:	f000 fae9 	bl	800993e <UART_WaitOnFlagUntilTimeout>
 800936c:	4603      	mov	r3, r0
 800936e:	2b00      	cmp	r3, #0
 8009370:	d005      	beq.n	800937e <HAL_UART_Transmit+0x100>
 8009372:	68fb      	ldr	r3, [r7, #12]
 8009374:	2220      	movs	r2, #32
 8009376:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800937a:	2303      	movs	r3, #3
 800937c:	e006      	b.n	800938c <HAL_UART_Transmit+0x10e>
 800937e:	68fb      	ldr	r3, [r7, #12]
 8009380:	2220      	movs	r2, #32
 8009382:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8009386:	2300      	movs	r3, #0
 8009388:	e000      	b.n	800938c <HAL_UART_Transmit+0x10e>
 800938a:	2302      	movs	r3, #2
 800938c:	4618      	mov	r0, r3
 800938e:	3720      	adds	r7, #32
 8009390:	46bd      	mov	sp, r7
 8009392:	bd80      	pop	{r7, pc}

08009394 <HAL_UART_Receive_IT>:
 8009394:	b580      	push	{r7, lr}
 8009396:	b084      	sub	sp, #16
 8009398:	af00      	add	r7, sp, #0
 800939a:	60f8      	str	r0, [r7, #12]
 800939c:	60b9      	str	r1, [r7, #8]
 800939e:	4613      	mov	r3, r2
 80093a0:	80fb      	strh	r3, [r7, #6]
 80093a2:	68fb      	ldr	r3, [r7, #12]
 80093a4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80093a8:	b2db      	uxtb	r3, r3
 80093aa:	2b20      	cmp	r3, #32
 80093ac:	d112      	bne.n	80093d4 <HAL_UART_Receive_IT+0x40>
 80093ae:	68bb      	ldr	r3, [r7, #8]
 80093b0:	2b00      	cmp	r3, #0
 80093b2:	d002      	beq.n	80093ba <HAL_UART_Receive_IT+0x26>
 80093b4:	88fb      	ldrh	r3, [r7, #6]
 80093b6:	2b00      	cmp	r3, #0
 80093b8:	d101      	bne.n	80093be <HAL_UART_Receive_IT+0x2a>
 80093ba:	2301      	movs	r3, #1
 80093bc:	e00b      	b.n	80093d6 <HAL_UART_Receive_IT+0x42>
 80093be:	68fb      	ldr	r3, [r7, #12]
 80093c0:	2200      	movs	r2, #0
 80093c2:	631a      	str	r2, [r3, #48]	@ 0x30
 80093c4:	88fb      	ldrh	r3, [r7, #6]
 80093c6:	461a      	mov	r2, r3
 80093c8:	68b9      	ldr	r1, [r7, #8]
 80093ca:	68f8      	ldr	r0, [r7, #12]
 80093cc:	f000 fb10 	bl	80099f0 <UART_Start_Receive_IT>
 80093d0:	4603      	mov	r3, r0
 80093d2:	e000      	b.n	80093d6 <HAL_UART_Receive_IT+0x42>
 80093d4:	2302      	movs	r3, #2
 80093d6:	4618      	mov	r0, r3
 80093d8:	3710      	adds	r7, #16
 80093da:	46bd      	mov	sp, r7
 80093dc:	bd80      	pop	{r7, pc}
	...

080093e0 <HAL_UART_IRQHandler>:
 80093e0:	b580      	push	{r7, lr}
 80093e2:	b0ba      	sub	sp, #232	@ 0xe8
 80093e4:	af00      	add	r7, sp, #0
 80093e6:	6078      	str	r0, [r7, #4]
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	681b      	ldr	r3, [r3, #0]
 80093ee:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	681b      	ldr	r3, [r3, #0]
 80093f6:	68db      	ldr	r3, [r3, #12]
 80093f8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	681b      	ldr	r3, [r3, #0]
 8009400:	695b      	ldr	r3, [r3, #20]
 8009402:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8009406:	2300      	movs	r3, #0
 8009408:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800940c:	2300      	movs	r3, #0
 800940e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8009412:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009416:	f003 030f 	and.w	r3, r3, #15
 800941a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800941e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8009422:	2b00      	cmp	r3, #0
 8009424:	d10f      	bne.n	8009446 <HAL_UART_IRQHandler+0x66>
 8009426:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800942a:	f003 0320 	and.w	r3, r3, #32
 800942e:	2b00      	cmp	r3, #0
 8009430:	d009      	beq.n	8009446 <HAL_UART_IRQHandler+0x66>
 8009432:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009436:	f003 0320 	and.w	r3, r3, #32
 800943a:	2b00      	cmp	r3, #0
 800943c:	d003      	beq.n	8009446 <HAL_UART_IRQHandler+0x66>
 800943e:	6878      	ldr	r0, [r7, #4]
 8009440:	f000 fbec 	bl	8009c1c <UART_Receive_IT>
 8009444:	e25b      	b.n	80098fe <HAL_UART_IRQHandler+0x51e>
 8009446:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800944a:	2b00      	cmp	r3, #0
 800944c:	f000 80de 	beq.w	800960c <HAL_UART_IRQHandler+0x22c>
 8009450:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009454:	f003 0301 	and.w	r3, r3, #1
 8009458:	2b00      	cmp	r3, #0
 800945a:	d106      	bne.n	800946a <HAL_UART_IRQHandler+0x8a>
 800945c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009460:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8009464:	2b00      	cmp	r3, #0
 8009466:	f000 80d1 	beq.w	800960c <HAL_UART_IRQHandler+0x22c>
 800946a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800946e:	f003 0301 	and.w	r3, r3, #1
 8009472:	2b00      	cmp	r3, #0
 8009474:	d00b      	beq.n	800948e <HAL_UART_IRQHandler+0xae>
 8009476:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800947a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800947e:	2b00      	cmp	r3, #0
 8009480:	d005      	beq.n	800948e <HAL_UART_IRQHandler+0xae>
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009486:	f043 0201 	orr.w	r2, r3, #1
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	645a      	str	r2, [r3, #68]	@ 0x44
 800948e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009492:	f003 0304 	and.w	r3, r3, #4
 8009496:	2b00      	cmp	r3, #0
 8009498:	d00b      	beq.n	80094b2 <HAL_UART_IRQHandler+0xd2>
 800949a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800949e:	f003 0301 	and.w	r3, r3, #1
 80094a2:	2b00      	cmp	r3, #0
 80094a4:	d005      	beq.n	80094b2 <HAL_UART_IRQHandler+0xd2>
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80094aa:	f043 0202 	orr.w	r2, r3, #2
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	645a      	str	r2, [r3, #68]	@ 0x44
 80094b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80094b6:	f003 0302 	and.w	r3, r3, #2
 80094ba:	2b00      	cmp	r3, #0
 80094bc:	d00b      	beq.n	80094d6 <HAL_UART_IRQHandler+0xf6>
 80094be:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80094c2:	f003 0301 	and.w	r3, r3, #1
 80094c6:	2b00      	cmp	r3, #0
 80094c8:	d005      	beq.n	80094d6 <HAL_UART_IRQHandler+0xf6>
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80094ce:	f043 0204 	orr.w	r2, r3, #4
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	645a      	str	r2, [r3, #68]	@ 0x44
 80094d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80094da:	f003 0308 	and.w	r3, r3, #8
 80094de:	2b00      	cmp	r3, #0
 80094e0:	d011      	beq.n	8009506 <HAL_UART_IRQHandler+0x126>
 80094e2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80094e6:	f003 0320 	and.w	r3, r3, #32
 80094ea:	2b00      	cmp	r3, #0
 80094ec:	d105      	bne.n	80094fa <HAL_UART_IRQHandler+0x11a>
 80094ee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80094f2:	f003 0301 	and.w	r3, r3, #1
 80094f6:	2b00      	cmp	r3, #0
 80094f8:	d005      	beq.n	8009506 <HAL_UART_IRQHandler+0x126>
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80094fe:	f043 0208 	orr.w	r2, r3, #8
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	645a      	str	r2, [r3, #68]	@ 0x44
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800950a:	2b00      	cmp	r3, #0
 800950c:	f000 81f2 	beq.w	80098f4 <HAL_UART_IRQHandler+0x514>
 8009510:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009514:	f003 0320 	and.w	r3, r3, #32
 8009518:	2b00      	cmp	r3, #0
 800951a:	d008      	beq.n	800952e <HAL_UART_IRQHandler+0x14e>
 800951c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009520:	f003 0320 	and.w	r3, r3, #32
 8009524:	2b00      	cmp	r3, #0
 8009526:	d002      	beq.n	800952e <HAL_UART_IRQHandler+0x14e>
 8009528:	6878      	ldr	r0, [r7, #4]
 800952a:	f000 fb77 	bl	8009c1c <UART_Receive_IT>
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	681b      	ldr	r3, [r3, #0]
 8009532:	695b      	ldr	r3, [r3, #20]
 8009534:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009538:	2b00      	cmp	r3, #0
 800953a:	bf14      	ite	ne
 800953c:	2301      	movne	r3, #1
 800953e:	2300      	moveq	r3, #0
 8009540:	b2db      	uxtb	r3, r3
 8009542:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800954a:	f003 0308 	and.w	r3, r3, #8
 800954e:	2b00      	cmp	r3, #0
 8009550:	d103      	bne.n	800955a <HAL_UART_IRQHandler+0x17a>
 8009552:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8009556:	2b00      	cmp	r3, #0
 8009558:	d04f      	beq.n	80095fa <HAL_UART_IRQHandler+0x21a>
 800955a:	6878      	ldr	r0, [r7, #4]
 800955c:	f000 fa81 	bl	8009a62 <UART_EndRxTransfer>
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	681b      	ldr	r3, [r3, #0]
 8009564:	695b      	ldr	r3, [r3, #20]
 8009566:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800956a:	2b00      	cmp	r3, #0
 800956c:	d041      	beq.n	80095f2 <HAL_UART_IRQHandler+0x212>
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	681b      	ldr	r3, [r3, #0]
 8009572:	3314      	adds	r3, #20
 8009574:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8009578:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800957c:	e853 3f00 	ldrex	r3, [r3]
 8009580:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8009584:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8009588:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800958c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	681b      	ldr	r3, [r3, #0]
 8009594:	3314      	adds	r3, #20
 8009596:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800959a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800959e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80095a2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80095a6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80095aa:	e841 2300 	strex	r3, r2, [r1]
 80095ae:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80095b2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80095b6:	2b00      	cmp	r3, #0
 80095b8:	d1d9      	bne.n	800956e <HAL_UART_IRQHandler+0x18e>
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80095be:	2b00      	cmp	r3, #0
 80095c0:	d013      	beq.n	80095ea <HAL_UART_IRQHandler+0x20a>
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80095c6:	4a7e      	ldr	r2, [pc, #504]	@ (80097c0 <HAL_UART_IRQHandler+0x3e0>)
 80095c8:	635a      	str	r2, [r3, #52]	@ 0x34
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80095ce:	4618      	mov	r0, r3
 80095d0:	f7fb fcfa 	bl	8004fc8 <HAL_DMA_Abort_IT>
 80095d4:	4603      	mov	r3, r0
 80095d6:	2b00      	cmp	r3, #0
 80095d8:	d016      	beq.n	8009608 <HAL_UART_IRQHandler+0x228>
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80095de:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80095e0:	687a      	ldr	r2, [r7, #4]
 80095e2:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80095e4:	4610      	mov	r0, r2
 80095e6:	4798      	blx	r3
 80095e8:	e00e      	b.n	8009608 <HAL_UART_IRQHandler+0x228>
 80095ea:	6878      	ldr	r0, [r7, #4]
 80095ec:	f000 f993 	bl	8009916 <HAL_UART_ErrorCallback>
 80095f0:	e00a      	b.n	8009608 <HAL_UART_IRQHandler+0x228>
 80095f2:	6878      	ldr	r0, [r7, #4]
 80095f4:	f000 f98f 	bl	8009916 <HAL_UART_ErrorCallback>
 80095f8:	e006      	b.n	8009608 <HAL_UART_IRQHandler+0x228>
 80095fa:	6878      	ldr	r0, [r7, #4]
 80095fc:	f000 f98b 	bl	8009916 <HAL_UART_ErrorCallback>
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	2200      	movs	r2, #0
 8009604:	645a      	str	r2, [r3, #68]	@ 0x44
 8009606:	e175      	b.n	80098f4 <HAL_UART_IRQHandler+0x514>
 8009608:	bf00      	nop
 800960a:	e173      	b.n	80098f4 <HAL_UART_IRQHandler+0x514>
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009610:	2b01      	cmp	r3, #1
 8009612:	f040 814f 	bne.w	80098b4 <HAL_UART_IRQHandler+0x4d4>
 8009616:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800961a:	f003 0310 	and.w	r3, r3, #16
 800961e:	2b00      	cmp	r3, #0
 8009620:	f000 8148 	beq.w	80098b4 <HAL_UART_IRQHandler+0x4d4>
 8009624:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009628:	f003 0310 	and.w	r3, r3, #16
 800962c:	2b00      	cmp	r3, #0
 800962e:	f000 8141 	beq.w	80098b4 <HAL_UART_IRQHandler+0x4d4>
 8009632:	2300      	movs	r3, #0
 8009634:	60bb      	str	r3, [r7, #8]
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	681b      	ldr	r3, [r3, #0]
 800963a:	681b      	ldr	r3, [r3, #0]
 800963c:	60bb      	str	r3, [r7, #8]
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	681b      	ldr	r3, [r3, #0]
 8009642:	685b      	ldr	r3, [r3, #4]
 8009644:	60bb      	str	r3, [r7, #8]
 8009646:	68bb      	ldr	r3, [r7, #8]
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	681b      	ldr	r3, [r3, #0]
 800964c:	695b      	ldr	r3, [r3, #20]
 800964e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009652:	2b00      	cmp	r3, #0
 8009654:	f000 80b6 	beq.w	80097c4 <HAL_UART_IRQHandler+0x3e4>
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800965c:	681b      	ldr	r3, [r3, #0]
 800965e:	685b      	ldr	r3, [r3, #4]
 8009660:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
 8009664:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8009668:	2b00      	cmp	r3, #0
 800966a:	f000 8145 	beq.w	80098f8 <HAL_UART_IRQHandler+0x518>
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8009672:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8009676:	429a      	cmp	r2, r3
 8009678:	f080 813e 	bcs.w	80098f8 <HAL_UART_IRQHandler+0x518>
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8009682:	85da      	strh	r2, [r3, #46]	@ 0x2e
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009688:	699b      	ldr	r3, [r3, #24]
 800968a:	2b20      	cmp	r3, #32
 800968c:	f000 8088 	beq.w	80097a0 <HAL_UART_IRQHandler+0x3c0>
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	681b      	ldr	r3, [r3, #0]
 8009694:	330c      	adds	r3, #12
 8009696:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800969a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800969e:	e853 3f00 	ldrex	r3, [r3]
 80096a2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80096a6:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80096aa:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80096ae:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	681b      	ldr	r3, [r3, #0]
 80096b6:	330c      	adds	r3, #12
 80096b8:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80096bc:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80096c0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80096c4:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80096c8:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80096cc:	e841 2300 	strex	r3, r2, [r1]
 80096d0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80096d4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80096d8:	2b00      	cmp	r3, #0
 80096da:	d1d9      	bne.n	8009690 <HAL_UART_IRQHandler+0x2b0>
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	681b      	ldr	r3, [r3, #0]
 80096e0:	3314      	adds	r3, #20
 80096e2:	677b      	str	r3, [r7, #116]	@ 0x74
 80096e4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80096e6:	e853 3f00 	ldrex	r3, [r3]
 80096ea:	673b      	str	r3, [r7, #112]	@ 0x70
 80096ec:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80096ee:	f023 0301 	bic.w	r3, r3, #1
 80096f2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	681b      	ldr	r3, [r3, #0]
 80096fa:	3314      	adds	r3, #20
 80096fc:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8009700:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8009704:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8009706:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8009708:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800970c:	e841 2300 	strex	r3, r2, [r1]
 8009710:	67bb      	str	r3, [r7, #120]	@ 0x78
 8009712:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009714:	2b00      	cmp	r3, #0
 8009716:	d1e1      	bne.n	80096dc <HAL_UART_IRQHandler+0x2fc>
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	681b      	ldr	r3, [r3, #0]
 800971c:	3314      	adds	r3, #20
 800971e:	663b      	str	r3, [r7, #96]	@ 0x60
 8009720:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009722:	e853 3f00 	ldrex	r3, [r3]
 8009726:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009728:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800972a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800972e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	681b      	ldr	r3, [r3, #0]
 8009736:	3314      	adds	r3, #20
 8009738:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800973c:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800973e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8009740:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8009742:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8009744:	e841 2300 	strex	r3, r2, [r1]
 8009748:	667b      	str	r3, [r7, #100]	@ 0x64
 800974a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800974c:	2b00      	cmp	r3, #0
 800974e:	d1e3      	bne.n	8009718 <HAL_UART_IRQHandler+0x338>
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	2220      	movs	r2, #32
 8009754:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	2200      	movs	r2, #0
 800975c:	631a      	str	r2, [r3, #48]	@ 0x30
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	681b      	ldr	r3, [r3, #0]
 8009762:	330c      	adds	r3, #12
 8009764:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009766:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009768:	e853 3f00 	ldrex	r3, [r3]
 800976c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800976e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009770:	f023 0310 	bic.w	r3, r3, #16
 8009774:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	681b      	ldr	r3, [r3, #0]
 800977c:	330c      	adds	r3, #12
 800977e:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8009782:	65ba      	str	r2, [r7, #88]	@ 0x58
 8009784:	657b      	str	r3, [r7, #84]	@ 0x54
 8009786:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8009788:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800978a:	e841 2300 	strex	r3, r2, [r1]
 800978e:	653b      	str	r3, [r7, #80]	@ 0x50
 8009790:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009792:	2b00      	cmp	r3, #0
 8009794:	d1e3      	bne.n	800975e <HAL_UART_IRQHandler+0x37e>
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800979a:	4618      	mov	r0, r3
 800979c:	f7fb fbd8 	bl	8004f50 <HAL_DMA_Abort>
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	2202      	movs	r2, #2
 80097a4:	635a      	str	r2, [r3, #52]	@ 0x34
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80097ae:	b29b      	uxth	r3, r3
 80097b0:	1ad3      	subs	r3, r2, r3
 80097b2:	b29b      	uxth	r3, r3
 80097b4:	4619      	mov	r1, r3
 80097b6:	6878      	ldr	r0, [r7, #4]
 80097b8:	f000 f8b6 	bl	8009928 <HAL_UARTEx_RxEventCallback>
 80097bc:	e09c      	b.n	80098f8 <HAL_UART_IRQHandler+0x518>
 80097be:	bf00      	nop
 80097c0:	08009b27 	.word	0x08009b27
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80097cc:	b29b      	uxth	r3, r3
 80097ce:	1ad3      	subs	r3, r2, r3
 80097d0:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80097d8:	b29b      	uxth	r3, r3
 80097da:	2b00      	cmp	r3, #0
 80097dc:	f000 808e 	beq.w	80098fc <HAL_UART_IRQHandler+0x51c>
 80097e0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80097e4:	2b00      	cmp	r3, #0
 80097e6:	f000 8089 	beq.w	80098fc <HAL_UART_IRQHandler+0x51c>
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	681b      	ldr	r3, [r3, #0]
 80097ee:	330c      	adds	r3, #12
 80097f0:	63bb      	str	r3, [r7, #56]	@ 0x38
 80097f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80097f4:	e853 3f00 	ldrex	r3, [r3]
 80097f8:	637b      	str	r3, [r7, #52]	@ 0x34
 80097fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80097fc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009800:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	681b      	ldr	r3, [r3, #0]
 8009808:	330c      	adds	r3, #12
 800980a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800980e:	647a      	str	r2, [r7, #68]	@ 0x44
 8009810:	643b      	str	r3, [r7, #64]	@ 0x40
 8009812:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009814:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009816:	e841 2300 	strex	r3, r2, [r1]
 800981a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800981c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800981e:	2b00      	cmp	r3, #0
 8009820:	d1e3      	bne.n	80097ea <HAL_UART_IRQHandler+0x40a>
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	681b      	ldr	r3, [r3, #0]
 8009826:	3314      	adds	r3, #20
 8009828:	627b      	str	r3, [r7, #36]	@ 0x24
 800982a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800982c:	e853 3f00 	ldrex	r3, [r3]
 8009830:	623b      	str	r3, [r7, #32]
 8009832:	6a3b      	ldr	r3, [r7, #32]
 8009834:	f023 0301 	bic.w	r3, r3, #1
 8009838:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	681b      	ldr	r3, [r3, #0]
 8009840:	3314      	adds	r3, #20
 8009842:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8009846:	633a      	str	r2, [r7, #48]	@ 0x30
 8009848:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800984a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800984c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800984e:	e841 2300 	strex	r3, r2, [r1]
 8009852:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009854:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009856:	2b00      	cmp	r3, #0
 8009858:	d1e3      	bne.n	8009822 <HAL_UART_IRQHandler+0x442>
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	2220      	movs	r2, #32
 800985e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	2200      	movs	r2, #0
 8009866:	631a      	str	r2, [r3, #48]	@ 0x30
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	681b      	ldr	r3, [r3, #0]
 800986c:	330c      	adds	r3, #12
 800986e:	613b      	str	r3, [r7, #16]
 8009870:	693b      	ldr	r3, [r7, #16]
 8009872:	e853 3f00 	ldrex	r3, [r3]
 8009876:	60fb      	str	r3, [r7, #12]
 8009878:	68fb      	ldr	r3, [r7, #12]
 800987a:	f023 0310 	bic.w	r3, r3, #16
 800987e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	681b      	ldr	r3, [r3, #0]
 8009886:	330c      	adds	r3, #12
 8009888:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 800988c:	61fa      	str	r2, [r7, #28]
 800988e:	61bb      	str	r3, [r7, #24]
 8009890:	69b9      	ldr	r1, [r7, #24]
 8009892:	69fa      	ldr	r2, [r7, #28]
 8009894:	e841 2300 	strex	r3, r2, [r1]
 8009898:	617b      	str	r3, [r7, #20]
 800989a:	697b      	ldr	r3, [r7, #20]
 800989c:	2b00      	cmp	r3, #0
 800989e:	d1e3      	bne.n	8009868 <HAL_UART_IRQHandler+0x488>
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	2202      	movs	r2, #2
 80098a4:	635a      	str	r2, [r3, #52]	@ 0x34
 80098a6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80098aa:	4619      	mov	r1, r3
 80098ac:	6878      	ldr	r0, [r7, #4]
 80098ae:	f000 f83b 	bl	8009928 <HAL_UARTEx_RxEventCallback>
 80098b2:	e023      	b.n	80098fc <HAL_UART_IRQHandler+0x51c>
 80098b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80098b8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80098bc:	2b00      	cmp	r3, #0
 80098be:	d009      	beq.n	80098d4 <HAL_UART_IRQHandler+0x4f4>
 80098c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80098c4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80098c8:	2b00      	cmp	r3, #0
 80098ca:	d003      	beq.n	80098d4 <HAL_UART_IRQHandler+0x4f4>
 80098cc:	6878      	ldr	r0, [r7, #4]
 80098ce:	f000 f93e 	bl	8009b4e <UART_Transmit_IT>
 80098d2:	e014      	b.n	80098fe <HAL_UART_IRQHandler+0x51e>
 80098d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80098d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80098dc:	2b00      	cmp	r3, #0
 80098de:	d00e      	beq.n	80098fe <HAL_UART_IRQHandler+0x51e>
 80098e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80098e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80098e8:	2b00      	cmp	r3, #0
 80098ea:	d008      	beq.n	80098fe <HAL_UART_IRQHandler+0x51e>
 80098ec:	6878      	ldr	r0, [r7, #4]
 80098ee:	f000 f97d 	bl	8009bec <UART_EndTransmit_IT>
 80098f2:	e004      	b.n	80098fe <HAL_UART_IRQHandler+0x51e>
 80098f4:	bf00      	nop
 80098f6:	e002      	b.n	80098fe <HAL_UART_IRQHandler+0x51e>
 80098f8:	bf00      	nop
 80098fa:	e000      	b.n	80098fe <HAL_UART_IRQHandler+0x51e>
 80098fc:	bf00      	nop
 80098fe:	37e8      	adds	r7, #232	@ 0xe8
 8009900:	46bd      	mov	sp, r7
 8009902:	bd80      	pop	{r7, pc}

08009904 <HAL_UART_TxCpltCallback>:
 8009904:	b480      	push	{r7}
 8009906:	b083      	sub	sp, #12
 8009908:	af00      	add	r7, sp, #0
 800990a:	6078      	str	r0, [r7, #4]
 800990c:	bf00      	nop
 800990e:	370c      	adds	r7, #12
 8009910:	46bd      	mov	sp, r7
 8009912:	bc80      	pop	{r7}
 8009914:	4770      	bx	lr

08009916 <HAL_UART_ErrorCallback>:
 8009916:	b480      	push	{r7}
 8009918:	b083      	sub	sp, #12
 800991a:	af00      	add	r7, sp, #0
 800991c:	6078      	str	r0, [r7, #4]
 800991e:	bf00      	nop
 8009920:	370c      	adds	r7, #12
 8009922:	46bd      	mov	sp, r7
 8009924:	bc80      	pop	{r7}
 8009926:	4770      	bx	lr

08009928 <HAL_UARTEx_RxEventCallback>:
 8009928:	b480      	push	{r7}
 800992a:	b083      	sub	sp, #12
 800992c:	af00      	add	r7, sp, #0
 800992e:	6078      	str	r0, [r7, #4]
 8009930:	460b      	mov	r3, r1
 8009932:	807b      	strh	r3, [r7, #2]
 8009934:	bf00      	nop
 8009936:	370c      	adds	r7, #12
 8009938:	46bd      	mov	sp, r7
 800993a:	bc80      	pop	{r7}
 800993c:	4770      	bx	lr

0800993e <UART_WaitOnFlagUntilTimeout>:
 800993e:	b580      	push	{r7, lr}
 8009940:	b086      	sub	sp, #24
 8009942:	af00      	add	r7, sp, #0
 8009944:	60f8      	str	r0, [r7, #12]
 8009946:	60b9      	str	r1, [r7, #8]
 8009948:	603b      	str	r3, [r7, #0]
 800994a:	4613      	mov	r3, r2
 800994c:	71fb      	strb	r3, [r7, #7]
 800994e:	e03b      	b.n	80099c8 <UART_WaitOnFlagUntilTimeout+0x8a>
 8009950:	6a3b      	ldr	r3, [r7, #32]
 8009952:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009956:	d037      	beq.n	80099c8 <UART_WaitOnFlagUntilTimeout+0x8a>
 8009958:	f7fa fd0a 	bl	8004370 <HAL_GetTick>
 800995c:	4602      	mov	r2, r0
 800995e:	683b      	ldr	r3, [r7, #0]
 8009960:	1ad3      	subs	r3, r2, r3
 8009962:	6a3a      	ldr	r2, [r7, #32]
 8009964:	429a      	cmp	r2, r3
 8009966:	d302      	bcc.n	800996e <UART_WaitOnFlagUntilTimeout+0x30>
 8009968:	6a3b      	ldr	r3, [r7, #32]
 800996a:	2b00      	cmp	r3, #0
 800996c:	d101      	bne.n	8009972 <UART_WaitOnFlagUntilTimeout+0x34>
 800996e:	2303      	movs	r3, #3
 8009970:	e03a      	b.n	80099e8 <UART_WaitOnFlagUntilTimeout+0xaa>
 8009972:	68fb      	ldr	r3, [r7, #12]
 8009974:	681b      	ldr	r3, [r3, #0]
 8009976:	68db      	ldr	r3, [r3, #12]
 8009978:	f003 0304 	and.w	r3, r3, #4
 800997c:	2b00      	cmp	r3, #0
 800997e:	d023      	beq.n	80099c8 <UART_WaitOnFlagUntilTimeout+0x8a>
 8009980:	68bb      	ldr	r3, [r7, #8]
 8009982:	2b80      	cmp	r3, #128	@ 0x80
 8009984:	d020      	beq.n	80099c8 <UART_WaitOnFlagUntilTimeout+0x8a>
 8009986:	68bb      	ldr	r3, [r7, #8]
 8009988:	2b40      	cmp	r3, #64	@ 0x40
 800998a:	d01d      	beq.n	80099c8 <UART_WaitOnFlagUntilTimeout+0x8a>
 800998c:	68fb      	ldr	r3, [r7, #12]
 800998e:	681b      	ldr	r3, [r3, #0]
 8009990:	681b      	ldr	r3, [r3, #0]
 8009992:	f003 0308 	and.w	r3, r3, #8
 8009996:	2b08      	cmp	r3, #8
 8009998:	d116      	bne.n	80099c8 <UART_WaitOnFlagUntilTimeout+0x8a>
 800999a:	2300      	movs	r3, #0
 800999c:	617b      	str	r3, [r7, #20]
 800999e:	68fb      	ldr	r3, [r7, #12]
 80099a0:	681b      	ldr	r3, [r3, #0]
 80099a2:	681b      	ldr	r3, [r3, #0]
 80099a4:	617b      	str	r3, [r7, #20]
 80099a6:	68fb      	ldr	r3, [r7, #12]
 80099a8:	681b      	ldr	r3, [r3, #0]
 80099aa:	685b      	ldr	r3, [r3, #4]
 80099ac:	617b      	str	r3, [r7, #20]
 80099ae:	697b      	ldr	r3, [r7, #20]
 80099b0:	68f8      	ldr	r0, [r7, #12]
 80099b2:	f000 f856 	bl	8009a62 <UART_EndRxTransfer>
 80099b6:	68fb      	ldr	r3, [r7, #12]
 80099b8:	2208      	movs	r2, #8
 80099ba:	645a      	str	r2, [r3, #68]	@ 0x44
 80099bc:	68fb      	ldr	r3, [r7, #12]
 80099be:	2200      	movs	r2, #0
 80099c0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80099c4:	2301      	movs	r3, #1
 80099c6:	e00f      	b.n	80099e8 <UART_WaitOnFlagUntilTimeout+0xaa>
 80099c8:	68fb      	ldr	r3, [r7, #12]
 80099ca:	681b      	ldr	r3, [r3, #0]
 80099cc:	681a      	ldr	r2, [r3, #0]
 80099ce:	68bb      	ldr	r3, [r7, #8]
 80099d0:	4013      	ands	r3, r2
 80099d2:	68ba      	ldr	r2, [r7, #8]
 80099d4:	429a      	cmp	r2, r3
 80099d6:	bf0c      	ite	eq
 80099d8:	2301      	moveq	r3, #1
 80099da:	2300      	movne	r3, #0
 80099dc:	b2db      	uxtb	r3, r3
 80099de:	461a      	mov	r2, r3
 80099e0:	79fb      	ldrb	r3, [r7, #7]
 80099e2:	429a      	cmp	r2, r3
 80099e4:	d0b4      	beq.n	8009950 <UART_WaitOnFlagUntilTimeout+0x12>
 80099e6:	2300      	movs	r3, #0
 80099e8:	4618      	mov	r0, r3
 80099ea:	3718      	adds	r7, #24
 80099ec:	46bd      	mov	sp, r7
 80099ee:	bd80      	pop	{r7, pc}

080099f0 <UART_Start_Receive_IT>:
 80099f0:	b480      	push	{r7}
 80099f2:	b085      	sub	sp, #20
 80099f4:	af00      	add	r7, sp, #0
 80099f6:	60f8      	str	r0, [r7, #12]
 80099f8:	60b9      	str	r1, [r7, #8]
 80099fa:	4613      	mov	r3, r2
 80099fc:	80fb      	strh	r3, [r7, #6]
 80099fe:	68fb      	ldr	r3, [r7, #12]
 8009a00:	68ba      	ldr	r2, [r7, #8]
 8009a02:	629a      	str	r2, [r3, #40]	@ 0x28
 8009a04:	68fb      	ldr	r3, [r7, #12]
 8009a06:	88fa      	ldrh	r2, [r7, #6]
 8009a08:	859a      	strh	r2, [r3, #44]	@ 0x2c
 8009a0a:	68fb      	ldr	r3, [r7, #12]
 8009a0c:	88fa      	ldrh	r2, [r7, #6]
 8009a0e:	85da      	strh	r2, [r3, #46]	@ 0x2e
 8009a10:	68fb      	ldr	r3, [r7, #12]
 8009a12:	2200      	movs	r2, #0
 8009a14:	645a      	str	r2, [r3, #68]	@ 0x44
 8009a16:	68fb      	ldr	r3, [r7, #12]
 8009a18:	2222      	movs	r2, #34	@ 0x22
 8009a1a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8009a1e:	68fb      	ldr	r3, [r7, #12]
 8009a20:	691b      	ldr	r3, [r3, #16]
 8009a22:	2b00      	cmp	r3, #0
 8009a24:	d007      	beq.n	8009a36 <UART_Start_Receive_IT+0x46>
 8009a26:	68fb      	ldr	r3, [r7, #12]
 8009a28:	681b      	ldr	r3, [r3, #0]
 8009a2a:	68da      	ldr	r2, [r3, #12]
 8009a2c:	68fb      	ldr	r3, [r7, #12]
 8009a2e:	681b      	ldr	r3, [r3, #0]
 8009a30:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8009a34:	60da      	str	r2, [r3, #12]
 8009a36:	68fb      	ldr	r3, [r7, #12]
 8009a38:	681b      	ldr	r3, [r3, #0]
 8009a3a:	695a      	ldr	r2, [r3, #20]
 8009a3c:	68fb      	ldr	r3, [r7, #12]
 8009a3e:	681b      	ldr	r3, [r3, #0]
 8009a40:	f042 0201 	orr.w	r2, r2, #1
 8009a44:	615a      	str	r2, [r3, #20]
 8009a46:	68fb      	ldr	r3, [r7, #12]
 8009a48:	681b      	ldr	r3, [r3, #0]
 8009a4a:	68da      	ldr	r2, [r3, #12]
 8009a4c:	68fb      	ldr	r3, [r7, #12]
 8009a4e:	681b      	ldr	r3, [r3, #0]
 8009a50:	f042 0220 	orr.w	r2, r2, #32
 8009a54:	60da      	str	r2, [r3, #12]
 8009a56:	2300      	movs	r3, #0
 8009a58:	4618      	mov	r0, r3
 8009a5a:	3714      	adds	r7, #20
 8009a5c:	46bd      	mov	sp, r7
 8009a5e:	bc80      	pop	{r7}
 8009a60:	4770      	bx	lr

08009a62 <UART_EndRxTransfer>:
 8009a62:	b480      	push	{r7}
 8009a64:	b095      	sub	sp, #84	@ 0x54
 8009a66:	af00      	add	r7, sp, #0
 8009a68:	6078      	str	r0, [r7, #4]
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	681b      	ldr	r3, [r3, #0]
 8009a6e:	330c      	adds	r3, #12
 8009a70:	637b      	str	r3, [r7, #52]	@ 0x34
 8009a72:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009a74:	e853 3f00 	ldrex	r3, [r3]
 8009a78:	633b      	str	r3, [r7, #48]	@ 0x30
 8009a7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009a7c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009a80:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	681b      	ldr	r3, [r3, #0]
 8009a86:	330c      	adds	r3, #12
 8009a88:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8009a8a:	643a      	str	r2, [r7, #64]	@ 0x40
 8009a8c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009a8e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8009a90:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009a92:	e841 2300 	strex	r3, r2, [r1]
 8009a96:	63bb      	str	r3, [r7, #56]	@ 0x38
 8009a98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009a9a:	2b00      	cmp	r3, #0
 8009a9c:	d1e5      	bne.n	8009a6a <UART_EndRxTransfer+0x8>
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	681b      	ldr	r3, [r3, #0]
 8009aa2:	3314      	adds	r3, #20
 8009aa4:	623b      	str	r3, [r7, #32]
 8009aa6:	6a3b      	ldr	r3, [r7, #32]
 8009aa8:	e853 3f00 	ldrex	r3, [r3]
 8009aac:	61fb      	str	r3, [r7, #28]
 8009aae:	69fb      	ldr	r3, [r7, #28]
 8009ab0:	f023 0301 	bic.w	r3, r3, #1
 8009ab4:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	681b      	ldr	r3, [r3, #0]
 8009aba:	3314      	adds	r3, #20
 8009abc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009abe:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009ac0:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009ac2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009ac4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009ac6:	e841 2300 	strex	r3, r2, [r1]
 8009aca:	627b      	str	r3, [r7, #36]	@ 0x24
 8009acc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ace:	2b00      	cmp	r3, #0
 8009ad0:	d1e5      	bne.n	8009a9e <UART_EndRxTransfer+0x3c>
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009ad6:	2b01      	cmp	r3, #1
 8009ad8:	d119      	bne.n	8009b0e <UART_EndRxTransfer+0xac>
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	681b      	ldr	r3, [r3, #0]
 8009ade:	330c      	adds	r3, #12
 8009ae0:	60fb      	str	r3, [r7, #12]
 8009ae2:	68fb      	ldr	r3, [r7, #12]
 8009ae4:	e853 3f00 	ldrex	r3, [r3]
 8009ae8:	60bb      	str	r3, [r7, #8]
 8009aea:	68bb      	ldr	r3, [r7, #8]
 8009aec:	f023 0310 	bic.w	r3, r3, #16
 8009af0:	647b      	str	r3, [r7, #68]	@ 0x44
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	681b      	ldr	r3, [r3, #0]
 8009af6:	330c      	adds	r3, #12
 8009af8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009afa:	61ba      	str	r2, [r7, #24]
 8009afc:	617b      	str	r3, [r7, #20]
 8009afe:	6979      	ldr	r1, [r7, #20]
 8009b00:	69ba      	ldr	r2, [r7, #24]
 8009b02:	e841 2300 	strex	r3, r2, [r1]
 8009b06:	613b      	str	r3, [r7, #16]
 8009b08:	693b      	ldr	r3, [r7, #16]
 8009b0a:	2b00      	cmp	r3, #0
 8009b0c:	d1e5      	bne.n	8009ada <UART_EndRxTransfer+0x78>
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	2220      	movs	r2, #32
 8009b12:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	2200      	movs	r2, #0
 8009b1a:	631a      	str	r2, [r3, #48]	@ 0x30
 8009b1c:	bf00      	nop
 8009b1e:	3754      	adds	r7, #84	@ 0x54
 8009b20:	46bd      	mov	sp, r7
 8009b22:	bc80      	pop	{r7}
 8009b24:	4770      	bx	lr

08009b26 <UART_DMAAbortOnError>:
 8009b26:	b580      	push	{r7, lr}
 8009b28:	b084      	sub	sp, #16
 8009b2a:	af00      	add	r7, sp, #0
 8009b2c:	6078      	str	r0, [r7, #4]
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009b32:	60fb      	str	r3, [r7, #12]
 8009b34:	68fb      	ldr	r3, [r7, #12]
 8009b36:	2200      	movs	r2, #0
 8009b38:	85da      	strh	r2, [r3, #46]	@ 0x2e
 8009b3a:	68fb      	ldr	r3, [r7, #12]
 8009b3c:	2200      	movs	r2, #0
 8009b3e:	84da      	strh	r2, [r3, #38]	@ 0x26
 8009b40:	68f8      	ldr	r0, [r7, #12]
 8009b42:	f7ff fee8 	bl	8009916 <HAL_UART_ErrorCallback>
 8009b46:	bf00      	nop
 8009b48:	3710      	adds	r7, #16
 8009b4a:	46bd      	mov	sp, r7
 8009b4c:	bd80      	pop	{r7, pc}

08009b4e <UART_Transmit_IT>:
 8009b4e:	b480      	push	{r7}
 8009b50:	b085      	sub	sp, #20
 8009b52:	af00      	add	r7, sp, #0
 8009b54:	6078      	str	r0, [r7, #4]
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009b5c:	b2db      	uxtb	r3, r3
 8009b5e:	2b21      	cmp	r3, #33	@ 0x21
 8009b60:	d13e      	bne.n	8009be0 <UART_Transmit_IT+0x92>
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	689b      	ldr	r3, [r3, #8]
 8009b66:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009b6a:	d114      	bne.n	8009b96 <UART_Transmit_IT+0x48>
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	691b      	ldr	r3, [r3, #16]
 8009b70:	2b00      	cmp	r3, #0
 8009b72:	d110      	bne.n	8009b96 <UART_Transmit_IT+0x48>
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	6a1b      	ldr	r3, [r3, #32]
 8009b78:	60fb      	str	r3, [r7, #12]
 8009b7a:	68fb      	ldr	r3, [r7, #12]
 8009b7c:	881b      	ldrh	r3, [r3, #0]
 8009b7e:	461a      	mov	r2, r3
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	681b      	ldr	r3, [r3, #0]
 8009b84:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009b88:	605a      	str	r2, [r3, #4]
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	6a1b      	ldr	r3, [r3, #32]
 8009b8e:	1c9a      	adds	r2, r3, #2
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	621a      	str	r2, [r3, #32]
 8009b94:	e008      	b.n	8009ba8 <UART_Transmit_IT+0x5a>
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	6a1b      	ldr	r3, [r3, #32]
 8009b9a:	1c59      	adds	r1, r3, #1
 8009b9c:	687a      	ldr	r2, [r7, #4]
 8009b9e:	6211      	str	r1, [r2, #32]
 8009ba0:	781a      	ldrb	r2, [r3, #0]
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	681b      	ldr	r3, [r3, #0]
 8009ba6:	605a      	str	r2, [r3, #4]
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8009bac:	b29b      	uxth	r3, r3
 8009bae:	3b01      	subs	r3, #1
 8009bb0:	b29b      	uxth	r3, r3
 8009bb2:	687a      	ldr	r2, [r7, #4]
 8009bb4:	4619      	mov	r1, r3
 8009bb6:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8009bb8:	2b00      	cmp	r3, #0
 8009bba:	d10f      	bne.n	8009bdc <UART_Transmit_IT+0x8e>
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	681b      	ldr	r3, [r3, #0]
 8009bc0:	68da      	ldr	r2, [r3, #12]
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	681b      	ldr	r3, [r3, #0]
 8009bc6:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8009bca:	60da      	str	r2, [r3, #12]
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	681b      	ldr	r3, [r3, #0]
 8009bd0:	68da      	ldr	r2, [r3, #12]
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	681b      	ldr	r3, [r3, #0]
 8009bd6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009bda:	60da      	str	r2, [r3, #12]
 8009bdc:	2300      	movs	r3, #0
 8009bde:	e000      	b.n	8009be2 <UART_Transmit_IT+0x94>
 8009be0:	2302      	movs	r3, #2
 8009be2:	4618      	mov	r0, r3
 8009be4:	3714      	adds	r7, #20
 8009be6:	46bd      	mov	sp, r7
 8009be8:	bc80      	pop	{r7}
 8009bea:	4770      	bx	lr

08009bec <UART_EndTransmit_IT>:
 8009bec:	b580      	push	{r7, lr}
 8009bee:	b082      	sub	sp, #8
 8009bf0:	af00      	add	r7, sp, #0
 8009bf2:	6078      	str	r0, [r7, #4]
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	681b      	ldr	r3, [r3, #0]
 8009bf8:	68da      	ldr	r2, [r3, #12]
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	681b      	ldr	r3, [r3, #0]
 8009bfe:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009c02:	60da      	str	r2, [r3, #12]
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	2220      	movs	r2, #32
 8009c08:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8009c0c:	6878      	ldr	r0, [r7, #4]
 8009c0e:	f7ff fe79 	bl	8009904 <HAL_UART_TxCpltCallback>
 8009c12:	2300      	movs	r3, #0
 8009c14:	4618      	mov	r0, r3
 8009c16:	3708      	adds	r7, #8
 8009c18:	46bd      	mov	sp, r7
 8009c1a:	bd80      	pop	{r7, pc}

08009c1c <UART_Receive_IT>:
 8009c1c:	b580      	push	{r7, lr}
 8009c1e:	b08c      	sub	sp, #48	@ 0x30
 8009c20:	af00      	add	r7, sp, #0
 8009c22:	6078      	str	r0, [r7, #4]
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8009c2a:	b2db      	uxtb	r3, r3
 8009c2c:	2b22      	cmp	r3, #34	@ 0x22
 8009c2e:	f040 80ae 	bne.w	8009d8e <UART_Receive_IT+0x172>
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	689b      	ldr	r3, [r3, #8]
 8009c36:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009c3a:	d117      	bne.n	8009c6c <UART_Receive_IT+0x50>
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	691b      	ldr	r3, [r3, #16]
 8009c40:	2b00      	cmp	r3, #0
 8009c42:	d113      	bne.n	8009c6c <UART_Receive_IT+0x50>
 8009c44:	2300      	movs	r3, #0
 8009c46:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009c4c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	681b      	ldr	r3, [r3, #0]
 8009c52:	685b      	ldr	r3, [r3, #4]
 8009c54:	b29b      	uxth	r3, r3
 8009c56:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009c5a:	b29a      	uxth	r2, r3
 8009c5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c5e:	801a      	strh	r2, [r3, #0]
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009c64:	1c9a      	adds	r2, r3, #2
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	629a      	str	r2, [r3, #40]	@ 0x28
 8009c6a:	e026      	b.n	8009cba <UART_Receive_IT+0x9e>
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009c70:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009c72:	2300      	movs	r3, #0
 8009c74:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	689b      	ldr	r3, [r3, #8]
 8009c7a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009c7e:	d007      	beq.n	8009c90 <UART_Receive_IT+0x74>
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	689b      	ldr	r3, [r3, #8]
 8009c84:	2b00      	cmp	r3, #0
 8009c86:	d10a      	bne.n	8009c9e <UART_Receive_IT+0x82>
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	691b      	ldr	r3, [r3, #16]
 8009c8c:	2b00      	cmp	r3, #0
 8009c8e:	d106      	bne.n	8009c9e <UART_Receive_IT+0x82>
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	681b      	ldr	r3, [r3, #0]
 8009c94:	685b      	ldr	r3, [r3, #4]
 8009c96:	b2da      	uxtb	r2, r3
 8009c98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009c9a:	701a      	strb	r2, [r3, #0]
 8009c9c:	e008      	b.n	8009cb0 <UART_Receive_IT+0x94>
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	681b      	ldr	r3, [r3, #0]
 8009ca2:	685b      	ldr	r3, [r3, #4]
 8009ca4:	b2db      	uxtb	r3, r3
 8009ca6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009caa:	b2da      	uxtb	r2, r3
 8009cac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009cae:	701a      	strb	r2, [r3, #0]
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009cb4:	1c5a      	adds	r2, r3, #1
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	629a      	str	r2, [r3, #40]	@ 0x28
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8009cbe:	b29b      	uxth	r3, r3
 8009cc0:	3b01      	subs	r3, #1
 8009cc2:	b29b      	uxth	r3, r3
 8009cc4:	687a      	ldr	r2, [r7, #4]
 8009cc6:	4619      	mov	r1, r3
 8009cc8:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8009cca:	2b00      	cmp	r3, #0
 8009ccc:	d15d      	bne.n	8009d8a <UART_Receive_IT+0x16e>
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	681b      	ldr	r3, [r3, #0]
 8009cd2:	68da      	ldr	r2, [r3, #12]
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	681b      	ldr	r3, [r3, #0]
 8009cd8:	f022 0220 	bic.w	r2, r2, #32
 8009cdc:	60da      	str	r2, [r3, #12]
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	681b      	ldr	r3, [r3, #0]
 8009ce2:	68da      	ldr	r2, [r3, #12]
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	681b      	ldr	r3, [r3, #0]
 8009ce8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8009cec:	60da      	str	r2, [r3, #12]
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	681b      	ldr	r3, [r3, #0]
 8009cf2:	695a      	ldr	r2, [r3, #20]
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	681b      	ldr	r3, [r3, #0]
 8009cf8:	f022 0201 	bic.w	r2, r2, #1
 8009cfc:	615a      	str	r2, [r3, #20]
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	2220      	movs	r2, #32
 8009d02:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	2200      	movs	r2, #0
 8009d0a:	635a      	str	r2, [r3, #52]	@ 0x34
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009d10:	2b01      	cmp	r3, #1
 8009d12:	d135      	bne.n	8009d80 <UART_Receive_IT+0x164>
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	2200      	movs	r2, #0
 8009d18:	631a      	str	r2, [r3, #48]	@ 0x30
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	681b      	ldr	r3, [r3, #0]
 8009d1e:	330c      	adds	r3, #12
 8009d20:	617b      	str	r3, [r7, #20]
 8009d22:	697b      	ldr	r3, [r7, #20]
 8009d24:	e853 3f00 	ldrex	r3, [r3]
 8009d28:	613b      	str	r3, [r7, #16]
 8009d2a:	693b      	ldr	r3, [r7, #16]
 8009d2c:	f023 0310 	bic.w	r3, r3, #16
 8009d30:	627b      	str	r3, [r7, #36]	@ 0x24
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	681b      	ldr	r3, [r3, #0]
 8009d36:	330c      	adds	r3, #12
 8009d38:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009d3a:	623a      	str	r2, [r7, #32]
 8009d3c:	61fb      	str	r3, [r7, #28]
 8009d3e:	69f9      	ldr	r1, [r7, #28]
 8009d40:	6a3a      	ldr	r2, [r7, #32]
 8009d42:	e841 2300 	strex	r3, r2, [r1]
 8009d46:	61bb      	str	r3, [r7, #24]
 8009d48:	69bb      	ldr	r3, [r7, #24]
 8009d4a:	2b00      	cmp	r3, #0
 8009d4c:	d1e5      	bne.n	8009d1a <UART_Receive_IT+0xfe>
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	681b      	ldr	r3, [r3, #0]
 8009d52:	681b      	ldr	r3, [r3, #0]
 8009d54:	f003 0310 	and.w	r3, r3, #16
 8009d58:	2b10      	cmp	r3, #16
 8009d5a:	d10a      	bne.n	8009d72 <UART_Receive_IT+0x156>
 8009d5c:	2300      	movs	r3, #0
 8009d5e:	60fb      	str	r3, [r7, #12]
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	681b      	ldr	r3, [r3, #0]
 8009d64:	681b      	ldr	r3, [r3, #0]
 8009d66:	60fb      	str	r3, [r7, #12]
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	681b      	ldr	r3, [r3, #0]
 8009d6c:	685b      	ldr	r3, [r3, #4]
 8009d6e:	60fb      	str	r3, [r7, #12]
 8009d70:	68fb      	ldr	r3, [r7, #12]
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8009d76:	4619      	mov	r1, r3
 8009d78:	6878      	ldr	r0, [r7, #4]
 8009d7a:	f7ff fdd5 	bl	8009928 <HAL_UARTEx_RxEventCallback>
 8009d7e:	e002      	b.n	8009d86 <UART_Receive_IT+0x16a>
 8009d80:	6878      	ldr	r0, [r7, #4]
 8009d82:	f7fa f8e1 	bl	8003f48 <HAL_UART_RxCpltCallback>
 8009d86:	2300      	movs	r3, #0
 8009d88:	e002      	b.n	8009d90 <UART_Receive_IT+0x174>
 8009d8a:	2300      	movs	r3, #0
 8009d8c:	e000      	b.n	8009d90 <UART_Receive_IT+0x174>
 8009d8e:	2302      	movs	r3, #2
 8009d90:	4618      	mov	r0, r3
 8009d92:	3730      	adds	r7, #48	@ 0x30
 8009d94:	46bd      	mov	sp, r7
 8009d96:	bd80      	pop	{r7, pc}

08009d98 <UART_SetConfig>:
 8009d98:	b580      	push	{r7, lr}
 8009d9a:	b084      	sub	sp, #16
 8009d9c:	af00      	add	r7, sp, #0
 8009d9e:	6078      	str	r0, [r7, #4]
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	681b      	ldr	r3, [r3, #0]
 8009da4:	691b      	ldr	r3, [r3, #16]
 8009da6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	68da      	ldr	r2, [r3, #12]
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	681b      	ldr	r3, [r3, #0]
 8009db2:	430a      	orrs	r2, r1
 8009db4:	611a      	str	r2, [r3, #16]
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	689a      	ldr	r2, [r3, #8]
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	691b      	ldr	r3, [r3, #16]
 8009dbe:	431a      	orrs	r2, r3
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	695b      	ldr	r3, [r3, #20]
 8009dc4:	4313      	orrs	r3, r2
 8009dc6:	60bb      	str	r3, [r7, #8]
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	681b      	ldr	r3, [r3, #0]
 8009dcc:	68db      	ldr	r3, [r3, #12]
 8009dce:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8009dd2:	f023 030c 	bic.w	r3, r3, #12
 8009dd6:	687a      	ldr	r2, [r7, #4]
 8009dd8:	6812      	ldr	r2, [r2, #0]
 8009dda:	68b9      	ldr	r1, [r7, #8]
 8009ddc:	430b      	orrs	r3, r1
 8009dde:	60d3      	str	r3, [r2, #12]
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	681b      	ldr	r3, [r3, #0]
 8009de4:	695b      	ldr	r3, [r3, #20]
 8009de6:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	699a      	ldr	r2, [r3, #24]
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	681b      	ldr	r3, [r3, #0]
 8009df2:	430a      	orrs	r2, r1
 8009df4:	615a      	str	r2, [r3, #20]
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	681b      	ldr	r3, [r3, #0]
 8009dfa:	4a2c      	ldr	r2, [pc, #176]	@ (8009eac <UART_SetConfig+0x114>)
 8009dfc:	4293      	cmp	r3, r2
 8009dfe:	d103      	bne.n	8009e08 <UART_SetConfig+0x70>
 8009e00:	f7fd f932 	bl	8007068 <HAL_RCC_GetPCLK2Freq>
 8009e04:	60f8      	str	r0, [r7, #12]
 8009e06:	e002      	b.n	8009e0e <UART_SetConfig+0x76>
 8009e08:	f7fd f91a 	bl	8007040 <HAL_RCC_GetPCLK1Freq>
 8009e0c:	60f8      	str	r0, [r7, #12]
 8009e0e:	68fa      	ldr	r2, [r7, #12]
 8009e10:	4613      	mov	r3, r2
 8009e12:	009b      	lsls	r3, r3, #2
 8009e14:	4413      	add	r3, r2
 8009e16:	009a      	lsls	r2, r3, #2
 8009e18:	441a      	add	r2, r3
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	685b      	ldr	r3, [r3, #4]
 8009e1e:	009b      	lsls	r3, r3, #2
 8009e20:	fbb2 f3f3 	udiv	r3, r2, r3
 8009e24:	4a22      	ldr	r2, [pc, #136]	@ (8009eb0 <UART_SetConfig+0x118>)
 8009e26:	fba2 2303 	umull	r2, r3, r2, r3
 8009e2a:	095b      	lsrs	r3, r3, #5
 8009e2c:	0119      	lsls	r1, r3, #4
 8009e2e:	68fa      	ldr	r2, [r7, #12]
 8009e30:	4613      	mov	r3, r2
 8009e32:	009b      	lsls	r3, r3, #2
 8009e34:	4413      	add	r3, r2
 8009e36:	009a      	lsls	r2, r3, #2
 8009e38:	441a      	add	r2, r3
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	685b      	ldr	r3, [r3, #4]
 8009e3e:	009b      	lsls	r3, r3, #2
 8009e40:	fbb2 f2f3 	udiv	r2, r2, r3
 8009e44:	4b1a      	ldr	r3, [pc, #104]	@ (8009eb0 <UART_SetConfig+0x118>)
 8009e46:	fba3 0302 	umull	r0, r3, r3, r2
 8009e4a:	095b      	lsrs	r3, r3, #5
 8009e4c:	2064      	movs	r0, #100	@ 0x64
 8009e4e:	fb00 f303 	mul.w	r3, r0, r3
 8009e52:	1ad3      	subs	r3, r2, r3
 8009e54:	011b      	lsls	r3, r3, #4
 8009e56:	3332      	adds	r3, #50	@ 0x32
 8009e58:	4a15      	ldr	r2, [pc, #84]	@ (8009eb0 <UART_SetConfig+0x118>)
 8009e5a:	fba2 2303 	umull	r2, r3, r2, r3
 8009e5e:	095b      	lsrs	r3, r3, #5
 8009e60:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8009e64:	4419      	add	r1, r3
 8009e66:	68fa      	ldr	r2, [r7, #12]
 8009e68:	4613      	mov	r3, r2
 8009e6a:	009b      	lsls	r3, r3, #2
 8009e6c:	4413      	add	r3, r2
 8009e6e:	009a      	lsls	r2, r3, #2
 8009e70:	441a      	add	r2, r3
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	685b      	ldr	r3, [r3, #4]
 8009e76:	009b      	lsls	r3, r3, #2
 8009e78:	fbb2 f2f3 	udiv	r2, r2, r3
 8009e7c:	4b0c      	ldr	r3, [pc, #48]	@ (8009eb0 <UART_SetConfig+0x118>)
 8009e7e:	fba3 0302 	umull	r0, r3, r3, r2
 8009e82:	095b      	lsrs	r3, r3, #5
 8009e84:	2064      	movs	r0, #100	@ 0x64
 8009e86:	fb00 f303 	mul.w	r3, r0, r3
 8009e8a:	1ad3      	subs	r3, r2, r3
 8009e8c:	011b      	lsls	r3, r3, #4
 8009e8e:	3332      	adds	r3, #50	@ 0x32
 8009e90:	4a07      	ldr	r2, [pc, #28]	@ (8009eb0 <UART_SetConfig+0x118>)
 8009e92:	fba2 2303 	umull	r2, r3, r2, r3
 8009e96:	095b      	lsrs	r3, r3, #5
 8009e98:	f003 020f 	and.w	r2, r3, #15
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	681b      	ldr	r3, [r3, #0]
 8009ea0:	440a      	add	r2, r1
 8009ea2:	609a      	str	r2, [r3, #8]
 8009ea4:	bf00      	nop
 8009ea6:	3710      	adds	r7, #16
 8009ea8:	46bd      	mov	sp, r7
 8009eaa:	bd80      	pop	{r7, pc}
 8009eac:	40013800 	.word	0x40013800
 8009eb0:	51eb851f 	.word	0x51eb851f

08009eb4 <memset>:
 8009eb4:	4603      	mov	r3, r0
 8009eb6:	4402      	add	r2, r0
 8009eb8:	4293      	cmp	r3, r2
 8009eba:	d100      	bne.n	8009ebe <memset+0xa>
 8009ebc:	4770      	bx	lr
 8009ebe:	f803 1b01 	strb.w	r1, [r3], #1
 8009ec2:	e7f9      	b.n	8009eb8 <memset+0x4>

08009ec4 <__libc_init_array>:
 8009ec4:	b570      	push	{r4, r5, r6, lr}
 8009ec6:	2600      	movs	r6, #0
 8009ec8:	4d0c      	ldr	r5, [pc, #48]	@ (8009efc <__libc_init_array+0x38>)
 8009eca:	4c0d      	ldr	r4, [pc, #52]	@ (8009f00 <__libc_init_array+0x3c>)
 8009ecc:	1b64      	subs	r4, r4, r5
 8009ece:	10a4      	asrs	r4, r4, #2
 8009ed0:	42a6      	cmp	r6, r4
 8009ed2:	d109      	bne.n	8009ee8 <__libc_init_array+0x24>
 8009ed4:	f000 f860 	bl	8009f98 <_init>
 8009ed8:	2600      	movs	r6, #0
 8009eda:	4d0a      	ldr	r5, [pc, #40]	@ (8009f04 <__libc_init_array+0x40>)
 8009edc:	4c0a      	ldr	r4, [pc, #40]	@ (8009f08 <__libc_init_array+0x44>)
 8009ede:	1b64      	subs	r4, r4, r5
 8009ee0:	10a4      	asrs	r4, r4, #2
 8009ee2:	42a6      	cmp	r6, r4
 8009ee4:	d105      	bne.n	8009ef2 <__libc_init_array+0x2e>
 8009ee6:	bd70      	pop	{r4, r5, r6, pc}
 8009ee8:	f855 3b04 	ldr.w	r3, [r5], #4
 8009eec:	4798      	blx	r3
 8009eee:	3601      	adds	r6, #1
 8009ef0:	e7ee      	b.n	8009ed0 <__libc_init_array+0xc>
 8009ef2:	f855 3b04 	ldr.w	r3, [r5], #4
 8009ef6:	4798      	blx	r3
 8009ef8:	3601      	adds	r6, #1
 8009efa:	e7f2      	b.n	8009ee2 <__libc_init_array+0x1e>
 8009efc:	0800a1a0 	.word	0x0800a1a0
 8009f00:	0800a1a0 	.word	0x0800a1a0
 8009f04:	0800a1a0 	.word	0x0800a1a0
 8009f08:	0800a1a4 	.word	0x0800a1a4

08009f0c <round>:
 8009f0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f0e:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8009f12:	f2a7 32ff 	subw	r2, r7, #1023	@ 0x3ff
 8009f16:	2a13      	cmp	r2, #19
 8009f18:	4604      	mov	r4, r0
 8009f1a:	460d      	mov	r5, r1
 8009f1c:	460b      	mov	r3, r1
 8009f1e:	dc1a      	bgt.n	8009f56 <round+0x4a>
 8009f20:	2a00      	cmp	r2, #0
 8009f22:	da0b      	bge.n	8009f3c <round+0x30>
 8009f24:	f001 4300 	and.w	r3, r1, #2147483648	@ 0x80000000
 8009f28:	3201      	adds	r2, #1
 8009f2a:	bf04      	itt	eq
 8009f2c:	f043 537f 	orreq.w	r3, r3, #1069547520	@ 0x3fc00000
 8009f30:	f443 1340 	orreq.w	r3, r3, #3145728	@ 0x300000
 8009f34:	2200      	movs	r2, #0
 8009f36:	461d      	mov	r5, r3
 8009f38:	4614      	mov	r4, r2
 8009f3a:	e016      	b.n	8009f6a <round+0x5e>
 8009f3c:	4815      	ldr	r0, [pc, #84]	@ (8009f94 <round+0x88>)
 8009f3e:	4110      	asrs	r0, r2
 8009f40:	4001      	ands	r1, r0
 8009f42:	4321      	orrs	r1, r4
 8009f44:	d011      	beq.n	8009f6a <round+0x5e>
 8009f46:	f44f 2100 	mov.w	r1, #524288	@ 0x80000
 8009f4a:	fa41 f202 	asr.w	r2, r1, r2
 8009f4e:	4413      	add	r3, r2
 8009f50:	ea23 0300 	bic.w	r3, r3, r0
 8009f54:	e7ee      	b.n	8009f34 <round+0x28>
 8009f56:	2a33      	cmp	r2, #51	@ 0x33
 8009f58:	dd0a      	ble.n	8009f70 <round+0x64>
 8009f5a:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 8009f5e:	d104      	bne.n	8009f6a <round+0x5e>
 8009f60:	4602      	mov	r2, r0
 8009f62:	f7f6 f96d 	bl	8000240 <__adddf3>
 8009f66:	4604      	mov	r4, r0
 8009f68:	460d      	mov	r5, r1
 8009f6a:	4620      	mov	r0, r4
 8009f6c:	4629      	mov	r1, r5
 8009f6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009f70:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009f74:	f2a7 4713 	subw	r7, r7, #1043	@ 0x413
 8009f78:	40f8      	lsrs	r0, r7
 8009f7a:	4220      	tst	r0, r4
 8009f7c:	d0f5      	beq.n	8009f6a <round+0x5e>
 8009f7e:	f1c2 0133 	rsb	r1, r2, #51	@ 0x33
 8009f82:	2201      	movs	r2, #1
 8009f84:	408a      	lsls	r2, r1
 8009f86:	1912      	adds	r2, r2, r4
 8009f88:	bf28      	it	cs
 8009f8a:	3301      	addcs	r3, #1
 8009f8c:	ea22 0200 	bic.w	r2, r2, r0
 8009f90:	e7d1      	b.n	8009f36 <round+0x2a>
 8009f92:	bf00      	nop
 8009f94:	000fffff 	.word	0x000fffff

08009f98 <_init>:
 8009f98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f9a:	bf00      	nop
 8009f9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009f9e:	bc08      	pop	{r3}
 8009fa0:	469e      	mov	lr, r3
 8009fa2:	4770      	bx	lr

08009fa4 <_fini>:
 8009fa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009fa6:	bf00      	nop
 8009fa8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009faa:	bc08      	pop	{r3}
 8009fac:	469e      	mov	lr, r3
 8009fae:	4770      	bx	lr
